{
    "nb_idx": 30,
    "nb_name": "d0030",
    "filename": "d28.ipynb",
    "filepath": "data/data_Kaggle/raw/d28.ipynb",
    "source": "# Titanic competition\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\n\n# Artificial neural networks\n\nArtificial neural networks (ANNs) are comprised of a node layers, containing an input layer, one or more hidden layers, and an output layer. Each node, or artificial neuron, connects to another and has an associated weight and threshold. If the output of any individual node is above the specified threshold value, that node is activated, sending data to the next layer of the network. Otherwise, no data is passed along to the next layer of the network.\n\n![image.png](attachment:0c83d75a-7996-49ca-83b0-d39b785a9877.png)\n\nSource: https://www.ibm.com/topics/neural-networks\n\n\n# Keras and TensorFlow\n\nIn this notebook I used Keras and TensorFlow to construct an Artificial Neural Network (ANN). This consists of the knowledge learned in the 'Intro to Deep Learning' course available on Kaggle. \n # Data preprocessing \n import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename)) \n test = pd.read_csv('/kaggle/input/titanic/test.csv')\ntrain = pd.read_csv('/kaggle/input/titanic/train.csv') \n train['Embarked'] = pd.Categorical(train['Embarked'])\ntrain['Embarked'] = train['Embarked'].cat.codes\n\ntrain['Age'] = train['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntrain['Age_cat'] = train['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntrain['Age_cat'] = pd.Categorical(train['Age_cat'])\ntrain['Age_cat'] = train['Age_cat'].cat.codes\n\ntrain['Family'] = train['SibSp'] + train['Parch']\ntrain['Family'] = train['Family'].apply(lambda x: 1 if x>0 else 0)\n\ntrain['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.')\ntrain['Title'] = train['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntrain['Title'] = pd.Categorical(train['Title'])\ntrain['Title'] = train['Title'].cat.codes\n\ntrain['Sex'] = train['Sex'].apply(lambda x: 0 if x=='male' else 1) \n X = train[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']]\ny = train['Survived'] \n X_train, X_valid, y_train, y_valid = train_test_split(X, y, stratify=y, train_size=0.8)\n\ninput_shape = [X_train.shape[1]] \n # Model \n model = keras.Sequential([\n    layers.BatchNormalization(input_shape=input_shape),\n    layers.Dense(64, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(32, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(16, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(1, activation='sigmoid'),\n]) \n model.summary() \n model.compile(optimizer='adam', loss='binary_crossentropy',\n    metrics=['binary_accuracy'],) \n # Evaluation \n early_stopping = keras.callbacks.EarlyStopping(\n    patience=8,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    epochs=1000,\n    batch_size=512,\n    callbacks=[early_stopping],\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\nhistory_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Accuracy\") \n # Predictions and submission \n test['Age'].median()\ntest['Sex'] = test['Sex'].apply(lambda x: 0 if x=='male' else 1)\ntest['Age'] = test['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntest['Age_cat'] = test['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntest['Age_cat'] = pd.Categorical(test['Age_cat'])\ntest['Age_cat'] = test['Age_cat'].cat.codes\ntest['Embarked'] = pd.Categorical(test['Embarked'])\ntest['Embarked'] = test['Embarked'].cat.codes\ntest['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.')\ntest['Title'] = test['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntest['Title'] = pd.Categorical(test['Title'])\ntest['Title'] = test['Title'].cat.codes\ntest['Family'] = test['SibSp'] + test['Parch']\ntest['Family'] = test['Family'].apply(lambda x: 1 if x>0 else 0)\ntest_X = test[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']] \n pd.DataFrame(test_X).fillna(0, inplace=True)\nmedian = test_X.median()\ntest_X['Fare'] = test_X['Fare'].fillna(median) \n df = pd.DataFrame()\ntest_X = StandardScaler().fit_transform(test_X)\ndf['PassengerId'] = test['PassengerId']\ndf['Survived'] = model.predict(test_X).round().astype(int) \n df.to_csv('submission.csv',index=False)",
    "code_source": "import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename)) \n test = pd.read_csv('/kaggle/input/titanic/test.csv')\ntrain = pd.read_csv('/kaggle/input/titanic/train.csv') \n train['Embarked'] = pd.Categorical(train['Embarked'])\ntrain['Embarked'] = train['Embarked'].cat.codes\n\ntrain['Age'] = train['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntrain['Age_cat'] = train['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntrain['Age_cat'] = pd.Categorical(train['Age_cat'])\ntrain['Age_cat'] = train['Age_cat'].cat.codes\n\ntrain['Family'] = train['SibSp'] + train['Parch']\ntrain['Family'] = train['Family'].apply(lambda x: 1 if x>0 else 0)\n\ntrain['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.')\ntrain['Title'] = train['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntrain['Title'] = pd.Categorical(train['Title'])\ntrain['Title'] = train['Title'].cat.codes\n\ntrain['Sex'] = train['Sex'].apply(lambda x: 0 if x=='male' else 1) \n X = train[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']]\ny = train['Survived'] \n X_train, X_valid, y_train, y_valid = train_test_split(X, y, stratify=y, train_size=0.8)\n\ninput_shape = [X_train.shape[1]] \n model = keras.Sequential([\n    layers.BatchNormalization(input_shape=input_shape),\n    layers.Dense(64, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(32, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(16, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(1, activation='sigmoid'),\n]) \n model.summary() \n model.compile(optimizer='adam', loss='binary_crossentropy',\n    metrics=['binary_accuracy'],) \n early_stopping = keras.callbacks.EarlyStopping(\n    patience=8,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    epochs=1000,\n    batch_size=512,\n    callbacks=[early_stopping],\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\nhistory_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Accuracy\") \n test['Age'].median()\ntest['Sex'] = test['Sex'].apply(lambda x: 0 if x=='male' else 1)\ntest['Age'] = test['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntest['Age_cat'] = test['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntest['Age_cat'] = pd.Categorical(test['Age_cat'])\ntest['Age_cat'] = test['Age_cat'].cat.codes\ntest['Embarked'] = pd.Categorical(test['Embarked'])\ntest['Embarked'] = test['Embarked'].cat.codes\ntest['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.')\ntest['Title'] = test['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntest['Title'] = pd.Categorical(test['Title'])\ntest['Title'] = test['Title'].cat.codes\ntest['Family'] = test['SibSp'] + test['Parch']\ntest['Family'] = test['Family'].apply(lambda x: 1 if x>0 else 0)\ntest_X = test[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']] \n pd.DataFrame(test_X).fillna(0, inplace=True)\nmedian = test_X.median()\ntest_X['Fare'] = test_X['Fare'].fillna(median) \n df = pd.DataFrame()\ntest_X = StandardScaler().fit_transform(test_X)\ndf['PassengerId'] = test['PassengerId']\ndf['Survived'] = model.predict(test_X).round().astype(int) \n df.to_csv('submission.csv',index=False)",
    "markdown_source": "# Titanic competition\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\n\n# Artificial neural networks\n\nArtificial neural networks (ANNs) are comprised of a node layers, containing an input layer, one or more hidden layers, and an output layer. Each node, or artificial neuron, connects to another and has an associated weight and threshold. If the output of any individual node is above the specified threshold value, that node is activated, sending data to the next layer of the network. Otherwise, no data is passed along to the next layer of the network.\n\n![image.png](attachment:0c83d75a-7996-49ca-83b0-d39b785a9877.png)\n\nSource: https://www.ibm.com/topics/neural-networks\n\n\n# Keras and TensorFlow\n\nIn this notebook I used Keras and TensorFlow to construct an Artificial Neural Network (ANN). This consists of the knowledge learned in the 'Intro to Deep Learning' course available on Kaggle. \n # Data preprocessing \n # Model \n # Evaluation \n # Predictions and submission",
    "n_cells": 18,
    "n_code_cells": 13,
    "n_markdown_cells": 5,
    "n_raw_cells": 0,
    "n_outputs": 13,
    "r_code_cells": 0.7222222222222222,
    "r_markdown_cells": 0.2777777777777778,
    "r_raw_cells": 0.0,
    "r_outputs": 1.0,
    "n_exceptions": 0,
    "r_exceptions": 0.0,
    "n_lines": 118,
    "n_lines_code": 92,
    "n_lines_markdown": 26,
    "lines_per_cell": [
        22,
        1,
        13,
        2,
        17,
        2,
        3,
        1,
        13,
        1,
        2,
        1,
        16,
        1,
        15,
        3,
        4,
        1
    ],
    "lines_per_code_cell": [
        13,
        2,
        17,
        2,
        3,
        13,
        1,
        2,
        16,
        15,
        3,
        4,
        1
    ],
    "lines_per_markdown_cell": [
        22,
        1,
        1,
        1,
        1
    ],
    "ave_lines_per_cell": 6.555555555555555,
    "ave_lines_per_code_cell": 7.076923076923077,
    "ave_lines_per_markdown_cell": 5.2,
    "max_lines_per_cell": 22,
    "max_lines_per_code_cell": 17,
    "max_lines_per_markdown_cell": 22,
    "min_lines_per_cell": 1,
    "min_lines_per_code_cell": 1,
    "min_lines_per_markdown_cell": 1,
    "n_chars": 5855,
    "n_chars_code": 4258,
    "n_chars_markdown": 1597,
    "chars_per_cell": [
        1530,
        20,
        487,
        107,
        1035,
        89,
        121,
        7,
        425,
        15,
        93,
        12,
        468,
        28,
        1097,
        116,
        166,
        39
    ],
    "chars_per_code_cell": [
        487,
        107,
        1035,
        89,
        121,
        425,
        15,
        93,
        468,
        1097,
        116,
        166,
        39
    ],
    "chars_per_markdown_cell": [
        1530,
        20,
        7,
        12,
        28
    ],
    "ave_chars_per_line": 49.61864406779661,
    "ave_chars_per_cell": 325.27777777777777,
    "ave_chars_per_code_cell": 327.53846153846155,
    "ave_chars_per_markdown_cell": 319.4,
    "max_chars_per_cell": 1530,
    "max_chars_per_code_cell": 1097,
    "max_chars_per_markdownell": 1530,
    "min_chars_per_cell": 7,
    "min_chars_per_code_cell": 15,
    "min_chars_per_markdown_cell": 7,
    "r_lines_code": 0.7796610169491526,
    "r_lines_markdown": 0.22033898305084745,
    "r_chars_markdown": 0.2727583262169086,
    "r_chars_code": 0.7272416737830913,
    "all_cells": [
        {
            "source": "# Titanic competition\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\n\n# Artificial neural networks\n\nArtificial neural networks (ANNs) are comprised of a node layers, containing an input layer, one or more hidden layers, and an output layer. Each node, or artificial neuron, connects to another and has an associated weight and threshold. If the output of any individual node is above the specified threshold value, that node is activated, sending data to the next layer of the network. Otherwise, no data is passed along to the next layer of the network.\n\n![image.png](attachment:0c83d75a-7996-49ca-83b0-d39b785a9877.png)\n\nSource: https://www.ibm.com/topics/neural-networks\n\n\n# Keras and TensorFlow\n\nIn this notebook I used Keras and TensorFlow to construct an Artificial Neural Network (ANN). This consists of the knowledge learned in the 'Intro to Deep Learning' course available on Kaggle.",
            "mc_idx": 0,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Data preprocessing",
            "mc_idx": 1,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))",
            "mc_idx": 2,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.044444444444444446,
                "Exploratory_Data_Analysis": 0.022222222222222223,
                "Data_Transform": 0.06666666666666667,
                "Model_Train": 0.03333333333333333,
                "Model_Evaluation": 0.011111111111111112,
                "Model_Interpretation": 0.011111111111111112,
                "Hyperparameter_Tuning": 0.011111111111111112,
                "Visualization": 0.022222222222222223,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 9
                },
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    ".join(": 1,
                    "labelencoder": 2,
                    "standardscaler": 1,
                    ".join": 1,
                    ".mod": 1
                },
                "Model_Train": {
                    "train_test_split": 1,
                    "model": 1,
                    "model_selection": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 1
                },
                "Visualization": {
                    "matplotlib": 1,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n"
                    ]
                },
                "mc_idx": 2,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "test = pd.read_csv('/kaggle/input/titanic/test.csv')\ntrain = pd.read_csv('/kaggle/input/titanic/train.csv')",
            "mc_idx": 3,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 4,
                    "pd.read_": 4
                },
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 3,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "train['Embarked'] = pd.Categorical(train['Embarked'])\ntrain['Embarked'] = train['Embarked'].cat.codes\n\ntrain['Age'] = train['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntrain['Age_cat'] = train['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntrain['Age_cat'] = pd.Categorical(train['Age_cat'])\ntrain['Age_cat'] = train['Age_cat'].cat.codes\n\ntrain['Family'] = train['SibSp'] + train['Parch']\ntrain['Family'] = train['Family'].apply(lambda x: 1 if x>0 else 0)\n\ntrain['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.')\ntrain['Title'] = train['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntrain['Title'] = pd.Categorical(train['Title'])\ntrain['Title'] = train['Title'].cat.codes\n\ntrain['Sex'] = train['Sex'].apply(lambda x: 0 if x=='male' else 1)",
            "mc_idx": 4,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.1,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {
                    ".isna": 1
                },
                "Data_Transform": {
                    ".apply(": 5,
                    ".apply": 5
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 4,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "X = train[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']]\ny = train['Survived']",
            "mc_idx": 5,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "X_train, X_valid, y_train, y_valid = train_test_split(X, y, stratify=y, train_size=0.8)\n\ninput_shape = [X_train.shape[1]]",
            "mc_idx": 6,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.6666666666666666,
                "Hyperparameter_Tuning": 0.3333333333333333,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "train_test_split": 1
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "# Model",
            "mc_idx": 7,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "model = keras.Sequential([\n    layers.BatchNormalization(input_shape=input_shape),\n    layers.Dense(64, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(32, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(16, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(1, activation='sigmoid'),\n])",
            "mc_idx": 8,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 1.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.3333333333333333,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2
                },
                "Data_Transform": {
                    ".drop": 3
                },
                "Model_Train": {
                    "sequential(": 1,
                    "model": 1,
                    ".sequential": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "shap": 2,
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    5,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 8,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "model.summary()",
            "mc_idx": 9,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Model: \"sequential\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n batch_normalization (Batch  (None, 6)                 24        \n Normalization)                                                  \n                                                                 \n dense (Dense)               (None, 64)                448       \n                                                                 \n batch_normalization_1 (Bat  (None, 64)                256       \n chNormalization)                                                \n                                                                 \n dropout (Dropout)           (None, 64)                0         \n                                                                 \n dense_1 (Dense)             (None, 32)                2080      \n                                                                 \n batch_normalization_2 (Bat  (None, 32)                128       \n chNormalization)                                                \n                                                                 \n dropout_1 (Dropout)         (None, 32)                0         \n                                                                 \n dense_2 (Dense)             (None, 16)                528       \n                                                                 \n batch_normalization_3 (Bat  (None, 16)                64        \n chNormalization)                                                \n                                                                 \n dropout_2 (Dropout)         (None, 16)                0         \n                                                                 \n dense_3 (Dense)             (None, 1)                 17        \n                                                                 \n=================================================================\nTotal params: 3545 (13.85 KB)\nTrainable params: 3309 (12.93 KB)\nNon-trainable params: 236 (944.00 Byte)\n_________________________________________________________________\n"
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "model.compile(optimizer='adam', loss='binary_crossentropy',\n    metrics=['binary_accuracy'],)",
            "mc_idx": 10,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "compile": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 10,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "# Evaluation",
            "mc_idx": 11,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "early_stopping = keras.callbacks.EarlyStopping(\n    patience=8,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    epochs=1000,\n    batch_size=512,\n    callbacks=[early_stopping],\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\nhistory_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Accuracy\")",
            "mc_idx": 12,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.6,
                "Model_Evaluation": 0.2,
                "Model_Interpretation": 0.2,
                "Hyperparameter_Tuning": 0.4,
                "Visualization": 0.4,
                "Debug": 0.0,
                "Data_Export": 0.2,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 4,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model.fit": 1,
                    ".fit(": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 2
                },
                "Visualization": {
                    ".plot(": 2
                },
                "Debug": {},
                "Data_Export": {
                    "store": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0030_c008_o003_image_1.png",
                    8,
                    3,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Epoch 1/1000\n2/2 [==============================] - 3s 368ms/step - loss: 0.8797 - binary_accuracy: 0.4298 - val_loss: 0.6998 - val_binary_accuracy: 0.5978\nEpoch 2/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.8221 - binary_accuracy: 0.4817 - val_loss: 0.6996 - val_binary_accuracy: 0.6145\nEpoch 3/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.7279 - binary_accuracy: 0.5590 - val_loss: 0.6982 - val_binary_accuracy: 0.6145\nEpoch 4/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.7081 - binary_accuracy: 0.5716 - val_loss: 0.6934 - val_binary_accuracy: 0.6145\nEpoch 5/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.6684 - binary_accuracy: 0.6306 - val_loss: 0.6882 - val_binary_accuracy: 0.6257\nEpoch 6/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.6070 - binary_accuracy: 0.6910 - val_loss: 0.6828 - val_binary_accuracy: 0.6257\nEpoch 7/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.6247 - binary_accuracy: 0.6812 - val_loss: 0.6777 - val_binary_accuracy: 0.6257\nEpoch 8/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.5944 - binary_accuracy: 0.7051 - val_loss: 0.6734 - val_binary_accuracy: 0.6257\nEpoch 9/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.5751 - binary_accuracy: 0.7037 - val_loss: 0.6696 - val_binary_accuracy: 0.6257\nEpoch 10/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.5900 - binary_accuracy: 0.7219 - val_loss: 0.6659 - val_binary_accuracy: 0.6257\nEpoch 11/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.5268 - binary_accuracy: 0.7542 - val_loss: 0.6627 - val_binary_accuracy: 0.6257\nEpoch 12/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.5312 - binary_accuracy: 0.7683 - val_loss: 0.6596 - val_binary_accuracy: 0.6369\nEpoch 13/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.5142 - binary_accuracy: 0.7584 - val_loss: 0.6561 - val_binary_accuracy: 0.6425\nEpoch 14/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.5202 - binary_accuracy: 0.7697 - val_loss: 0.6528 - val_binary_accuracy: 0.6425\nEpoch 15/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.5177 - binary_accuracy: 0.7584 - val_loss: 0.6501 - val_binary_accuracy: 0.6480\nEpoch 16/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.5066 - binary_accuracy: 0.7781 - val_loss: 0.6478 - val_binary_accuracy: 0.6480\nEpoch 17/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4909 - binary_accuracy: 0.7879 - val_loss: 0.6457 - val_binary_accuracy: 0.6480\nEpoch 18/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.5058 - binary_accuracy: 0.7654 - val_loss: 0.6441 - val_binary_accuracy: 0.6425\nEpoch 19/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4822 - binary_accuracy: 0.7809 - val_loss: 0.6427 - val_binary_accuracy: 0.6425\nEpoch 20/1000\n2/2 [==============================] - 0s 57ms/step - loss: 0.4873 - binary_accuracy: 0.7739 - val_loss: 0.6413 - val_binary_accuracy: 0.6425\nEpoch 21/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4838 - binary_accuracy: 0.7767 - val_loss: 0.6400 - val_binary_accuracy: 0.6425\nEpoch 22/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4657 - binary_accuracy: 0.7851 - val_loss: 0.6388 - val_binary_accuracy: 0.6425\nEpoch 23/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4543 - binary_accuracy: 0.7949 - val_loss: 0.6376 - val_binary_accuracy: 0.6425\nEpoch 24/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4649 - binary_accuracy: 0.7851 - val_loss: 0.6363 - val_binary_accuracy: 0.6480\nEpoch 25/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4480 - binary_accuracy: 0.8216 - val_loss: 0.6350 - val_binary_accuracy: 0.6480\nEpoch 26/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4709 - binary_accuracy: 0.7921 - val_loss: 0.6336 - val_binary_accuracy: 0.6480\nEpoch 27/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4621 - binary_accuracy: 0.7837 - val_loss: 0.6322 - val_binary_accuracy: 0.6480\nEpoch 28/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4497 - binary_accuracy: 0.8188 - val_loss: 0.6308 - val_binary_accuracy: 0.6536\nEpoch 29/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4418 - binary_accuracy: 0.8048 - val_loss: 0.6293 - val_binary_accuracy: 0.6536\nEpoch 30/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4564 - binary_accuracy: 0.8006 - val_loss: 0.6282 - val_binary_accuracy: 0.6536\nEpoch 31/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4508 - binary_accuracy: 0.8034 - val_loss: 0.6269 - val_binary_accuracy: 0.6536\nEpoch 32/1000\n2/2 [==============================] - 0s 45ms/step - loss: 0.4530 - binary_accuracy: 0.7921 - val_loss: 0.6256 - val_binary_accuracy: 0.6592\nEpoch 33/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4640 - binary_accuracy: 0.8020 - val_loss: 0.6240 - val_binary_accuracy: 0.6704\nEpoch 34/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4556 - binary_accuracy: 0.7963 - val_loss: 0.6226 - val_binary_accuracy: 0.6704\nEpoch 35/1000\n2/2 [==============================] - 0s 45ms/step - loss: 0.4427 - binary_accuracy: 0.8062 - val_loss: 0.6213 - val_binary_accuracy: 0.6704\nEpoch 36/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4595 - binary_accuracy: 0.7963 - val_loss: 0.6198 - val_binary_accuracy: 0.6704\nEpoch 37/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.4368 - binary_accuracy: 0.8146 - val_loss: 0.6184 - val_binary_accuracy: 0.6704\nEpoch 38/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4478 - binary_accuracy: 0.8090 - val_loss: 0.6170 - val_binary_accuracy: 0.6704\nEpoch 39/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4398 - binary_accuracy: 0.8062 - val_loss: 0.6155 - val_binary_accuracy: 0.6704\nEpoch 40/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4464 - binary_accuracy: 0.8006 - val_loss: 0.6139 - val_binary_accuracy: 0.6816\nEpoch 41/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4572 - binary_accuracy: 0.8006 - val_loss: 0.6123 - val_binary_accuracy: 0.6816\nEpoch 42/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4469 - binary_accuracy: 0.8104 - val_loss: 0.6108 - val_binary_accuracy: 0.6816\nEpoch 43/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4165 - binary_accuracy: 0.8174 - val_loss: 0.6091 - val_binary_accuracy: 0.6816\nEpoch 44/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4369 - binary_accuracy: 0.8132 - val_loss: 0.6070 - val_binary_accuracy: 0.6816\nEpoch 45/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4416 - binary_accuracy: 0.8076 - val_loss: 0.6050 - val_binary_accuracy: 0.6816\nEpoch 46/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4298 - binary_accuracy: 0.8188 - val_loss: 0.6029 - val_binary_accuracy: 0.6816\nEpoch 47/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4298 - binary_accuracy: 0.8146 - val_loss: 0.6010 - val_binary_accuracy: 0.6816\nEpoch 48/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4255 - binary_accuracy: 0.8062 - val_loss: 0.5992 - val_binary_accuracy: 0.6872\nEpoch 49/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4320 - binary_accuracy: 0.8188 - val_loss: 0.5975 - val_binary_accuracy: 0.6927\nEpoch 50/1000\n2/2 [==============================] - 0s 57ms/step - loss: 0.4329 - binary_accuracy: 0.8048 - val_loss: 0.5955 - val_binary_accuracy: 0.6927\nEpoch 51/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4349 - binary_accuracy: 0.8216 - val_loss: 0.5934 - val_binary_accuracy: 0.6927\nEpoch 52/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4201 - binary_accuracy: 0.8146 - val_loss: 0.5909 - val_binary_accuracy: 0.6927\nEpoch 53/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4298 - binary_accuracy: 0.8034 - val_loss: 0.5887 - val_binary_accuracy: 0.6927\nEpoch 54/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.4280 - binary_accuracy: 0.8118 - val_loss: 0.5867 - val_binary_accuracy: 0.6927\nEpoch 55/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4348 - binary_accuracy: 0.8006 - val_loss: 0.5849 - val_binary_accuracy: 0.6983\nEpoch 56/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4169 - binary_accuracy: 0.8244 - val_loss: 0.5828 - val_binary_accuracy: 0.6983\nEpoch 57/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4190 - binary_accuracy: 0.8132 - val_loss: 0.5807 - val_binary_accuracy: 0.6983\nEpoch 58/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4161 - binary_accuracy: 0.8104 - val_loss: 0.5789 - val_binary_accuracy: 0.6983\nEpoch 59/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4180 - binary_accuracy: 0.8104 - val_loss: 0.5771 - val_binary_accuracy: 0.6983\nEpoch 60/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4294 - binary_accuracy: 0.8090 - val_loss: 0.5755 - val_binary_accuracy: 0.6983\nEpoch 61/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4222 - binary_accuracy: 0.8301 - val_loss: 0.5738 - val_binary_accuracy: 0.6983\nEpoch 62/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4248 - binary_accuracy: 0.8104 - val_loss: 0.5720 - val_binary_accuracy: 0.6983\nEpoch 63/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4179 - binary_accuracy: 0.8287 - val_loss: 0.5706 - val_binary_accuracy: 0.7095\nEpoch 64/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4298 - binary_accuracy: 0.8090 - val_loss: 0.5687 - val_binary_accuracy: 0.7095\nEpoch 65/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4295 - binary_accuracy: 0.8188 - val_loss: 0.5669 - val_binary_accuracy: 0.7095\nEpoch 66/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4122 - binary_accuracy: 0.8118 - val_loss: 0.5650 - val_binary_accuracy: 0.7095\nEpoch 67/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4410 - binary_accuracy: 0.8104 - val_loss: 0.5632 - val_binary_accuracy: 0.7095\nEpoch 68/1000\n2/2 [==============================] - 0s 64ms/step - loss: 0.4062 - binary_accuracy: 0.8202 - val_loss: 0.5615 - val_binary_accuracy: 0.7095\nEpoch 69/1000\n2/2 [==============================] - 0s 51ms/step - loss: 0.4135 - binary_accuracy: 0.8174 - val_loss: 0.5603 - val_binary_accuracy: 0.7095\nEpoch 70/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.4281 - binary_accuracy: 0.8048 - val_loss: 0.5596 - val_binary_accuracy: 0.7151\nEpoch 71/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4257 - binary_accuracy: 0.8146 - val_loss: 0.5590 - val_binary_accuracy: 0.7151\nEpoch 72/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4355 - binary_accuracy: 0.8132 - val_loss: 0.5576 - val_binary_accuracy: 0.7207\nEpoch 73/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4224 - binary_accuracy: 0.8160 - val_loss: 0.5561 - val_binary_accuracy: 0.7263\nEpoch 74/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4326 - binary_accuracy: 0.8020 - val_loss: 0.5542 - val_binary_accuracy: 0.7263\nEpoch 75/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4258 - binary_accuracy: 0.8132 - val_loss: 0.5518 - val_binary_accuracy: 0.7263\nEpoch 76/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4131 - binary_accuracy: 0.8244 - val_loss: 0.5497 - val_binary_accuracy: 0.7263\nEpoch 77/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4285 - binary_accuracy: 0.8230 - val_loss: 0.5473 - val_binary_accuracy: 0.7263\nEpoch 78/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4235 - binary_accuracy: 0.8174 - val_loss: 0.5452 - val_binary_accuracy: 0.7263\nEpoch 79/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4142 - binary_accuracy: 0.8244 - val_loss: 0.5428 - val_binary_accuracy: 0.7263\nEpoch 80/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4066 - binary_accuracy: 0.8202 - val_loss: 0.5402 - val_binary_accuracy: 0.7318\nEpoch 81/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4133 - binary_accuracy: 0.8160 - val_loss: 0.5377 - val_binary_accuracy: 0.7318\nEpoch 82/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4234 - binary_accuracy: 0.8132 - val_loss: 0.5351 - val_binary_accuracy: 0.7318\nEpoch 83/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4098 - binary_accuracy: 0.8132 - val_loss: 0.5325 - val_binary_accuracy: 0.7318\nEpoch 84/1000\n2/2 [==============================] - 0s 60ms/step - loss: 0.4267 - binary_accuracy: 0.8160 - val_loss: 0.5301 - val_binary_accuracy: 0.7318\nEpoch 85/1000\n2/2 [==============================] - 0s 48ms/step - loss: 0.4200 - binary_accuracy: 0.8118 - val_loss: 0.5281 - val_binary_accuracy: 0.7318\nEpoch 86/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4250 - binary_accuracy: 0.8048 - val_loss: 0.5254 - val_binary_accuracy: 0.7318\nEpoch 87/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4101 - binary_accuracy: 0.8188 - val_loss: 0.5225 - val_binary_accuracy: 0.7318\nEpoch 88/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4110 - binary_accuracy: 0.8132 - val_loss: 0.5196 - val_binary_accuracy: 0.7318\nEpoch 89/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3946 - binary_accuracy: 0.8287 - val_loss: 0.5169 - val_binary_accuracy: 0.7318\nEpoch 90/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4051 - binary_accuracy: 0.8216 - val_loss: 0.5140 - val_binary_accuracy: 0.7318\nEpoch 91/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4184 - binary_accuracy: 0.8062 - val_loss: 0.5112 - val_binary_accuracy: 0.7374\nEpoch 92/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4080 - binary_accuracy: 0.8174 - val_loss: 0.5079 - val_binary_accuracy: 0.7374\nEpoch 93/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3977 - binary_accuracy: 0.8258 - val_loss: 0.5048 - val_binary_accuracy: 0.7374\nEpoch 94/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4017 - binary_accuracy: 0.8230 - val_loss: 0.5021 - val_binary_accuracy: 0.7374\nEpoch 95/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4101 - binary_accuracy: 0.8174 - val_loss: 0.4990 - val_binary_accuracy: 0.7430\nEpoch 96/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4042 - binary_accuracy: 0.8343 - val_loss: 0.4958 - val_binary_accuracy: 0.7430\nEpoch 97/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4121 - binary_accuracy: 0.8174 - val_loss: 0.4932 - val_binary_accuracy: 0.7486\nEpoch 98/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4077 - binary_accuracy: 0.8202 - val_loss: 0.4901 - val_binary_accuracy: 0.7486\nEpoch 99/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3972 - binary_accuracy: 0.8315 - val_loss: 0.4872 - val_binary_accuracy: 0.7486\nEpoch 100/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3961 - binary_accuracy: 0.8441 - val_loss: 0.4844 - val_binary_accuracy: 0.7542\nEpoch 101/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4202 - binary_accuracy: 0.8202 - val_loss: 0.4815 - val_binary_accuracy: 0.7654\nEpoch 102/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4047 - binary_accuracy: 0.8258 - val_loss: 0.4793 - val_binary_accuracy: 0.7709\nEpoch 103/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4053 - binary_accuracy: 0.8132 - val_loss: 0.4778 - val_binary_accuracy: 0.7821\nEpoch 104/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4013 - binary_accuracy: 0.8315 - val_loss: 0.4761 - val_binary_accuracy: 0.8101\nEpoch 105/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4145 - binary_accuracy: 0.8202 - val_loss: 0.4749 - val_binary_accuracy: 0.8156\nEpoch 106/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3998 - binary_accuracy: 0.8230 - val_loss: 0.4735 - val_binary_accuracy: 0.8156\nEpoch 107/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4028 - binary_accuracy: 0.8272 - val_loss: 0.4718 - val_binary_accuracy: 0.8156\nEpoch 108/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4186 - binary_accuracy: 0.8202 - val_loss: 0.4700 - val_binary_accuracy: 0.8156\nEpoch 109/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.4039 - binary_accuracy: 0.8188 - val_loss: 0.4681 - val_binary_accuracy: 0.8156\nEpoch 110/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3951 - binary_accuracy: 0.8287 - val_loss: 0.4660 - val_binary_accuracy: 0.8156\nEpoch 111/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4108 - binary_accuracy: 0.8329 - val_loss: 0.4646 - val_binary_accuracy: 0.8212\nEpoch 112/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3943 - binary_accuracy: 0.8230 - val_loss: 0.4624 - val_binary_accuracy: 0.8324\nEpoch 113/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4065 - binary_accuracy: 0.8146 - val_loss: 0.4603 - val_binary_accuracy: 0.8268\nEpoch 114/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4109 - binary_accuracy: 0.8160 - val_loss: 0.4578 - val_binary_accuracy: 0.8268\nEpoch 115/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4127 - binary_accuracy: 0.8188 - val_loss: 0.4554 - val_binary_accuracy: 0.8268\nEpoch 116/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4086 - binary_accuracy: 0.8230 - val_loss: 0.4531 - val_binary_accuracy: 0.8268\nEpoch 117/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4034 - binary_accuracy: 0.8272 - val_loss: 0.4511 - val_binary_accuracy: 0.8268\nEpoch 118/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3940 - binary_accuracy: 0.8174 - val_loss: 0.4489 - val_binary_accuracy: 0.8324\nEpoch 119/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4006 - binary_accuracy: 0.8301 - val_loss: 0.4473 - val_binary_accuracy: 0.8324\nEpoch 120/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3999 - binary_accuracy: 0.8258 - val_loss: 0.4459 - val_binary_accuracy: 0.8324\nEpoch 121/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4022 - binary_accuracy: 0.8413 - val_loss: 0.4448 - val_binary_accuracy: 0.8324\nEpoch 122/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.4134 - binary_accuracy: 0.8287 - val_loss: 0.4442 - val_binary_accuracy: 0.8324\nEpoch 123/1000\n2/2 [==============================] - 0s 56ms/step - loss: 0.4124 - binary_accuracy: 0.8076 - val_loss: 0.4441 - val_binary_accuracy: 0.8324\nEpoch 124/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3984 - binary_accuracy: 0.8174 - val_loss: 0.4443 - val_binary_accuracy: 0.8324\nEpoch 125/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4039 - binary_accuracy: 0.8216 - val_loss: 0.4444 - val_binary_accuracy: 0.8324\nEpoch 126/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4039 - binary_accuracy: 0.8174 - val_loss: 0.4443 - val_binary_accuracy: 0.8324\nEpoch 127/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4090 - binary_accuracy: 0.8230 - val_loss: 0.4444 - val_binary_accuracy: 0.8324\nEpoch 128/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3943 - binary_accuracy: 0.8315 - val_loss: 0.4440 - val_binary_accuracy: 0.8324\nEpoch 129/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4008 - binary_accuracy: 0.8315 - val_loss: 0.4431 - val_binary_accuracy: 0.8324\nEpoch 130/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3839 - binary_accuracy: 0.8287 - val_loss: 0.4424 - val_binary_accuracy: 0.8324\nEpoch 131/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4210 - binary_accuracy: 0.8188 - val_loss: 0.4421 - val_binary_accuracy: 0.8324\nEpoch 132/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4144 - binary_accuracy: 0.8188 - val_loss: 0.4417 - val_binary_accuracy: 0.8324\nEpoch 133/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4066 - binary_accuracy: 0.8343 - val_loss: 0.4407 - val_binary_accuracy: 0.8324\nEpoch 134/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3835 - binary_accuracy: 0.8343 - val_loss: 0.4386 - val_binary_accuracy: 0.8324\nEpoch 135/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3923 - binary_accuracy: 0.8329 - val_loss: 0.4361 - val_binary_accuracy: 0.8380\nEpoch 136/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4087 - binary_accuracy: 0.8174 - val_loss: 0.4333 - val_binary_accuracy: 0.8380\nEpoch 137/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3890 - binary_accuracy: 0.8385 - val_loss: 0.4305 - val_binary_accuracy: 0.8380\nEpoch 138/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4033 - binary_accuracy: 0.8174 - val_loss: 0.4275 - val_binary_accuracy: 0.8380\nEpoch 139/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3988 - binary_accuracy: 0.8202 - val_loss: 0.4253 - val_binary_accuracy: 0.8380\nEpoch 140/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3949 - binary_accuracy: 0.8315 - val_loss: 0.4233 - val_binary_accuracy: 0.8380\nEpoch 141/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3939 - binary_accuracy: 0.8399 - val_loss: 0.4210 - val_binary_accuracy: 0.8380\nEpoch 142/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4028 - binary_accuracy: 0.8230 - val_loss: 0.4192 - val_binary_accuracy: 0.8380\nEpoch 143/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.3984 - binary_accuracy: 0.8272 - val_loss: 0.4179 - val_binary_accuracy: 0.8380\nEpoch 144/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3942 - binary_accuracy: 0.8329 - val_loss: 0.4167 - val_binary_accuracy: 0.8380\nEpoch 145/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3995 - binary_accuracy: 0.8244 - val_loss: 0.4158 - val_binary_accuracy: 0.8380\nEpoch 146/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3977 - binary_accuracy: 0.8202 - val_loss: 0.4149 - val_binary_accuracy: 0.8380\nEpoch 147/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3961 - binary_accuracy: 0.8343 - val_loss: 0.4131 - val_binary_accuracy: 0.8380\nEpoch 148/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4128 - binary_accuracy: 0.8160 - val_loss: 0.4107 - val_binary_accuracy: 0.8380\nEpoch 149/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4201 - binary_accuracy: 0.8174 - val_loss: 0.4091 - val_binary_accuracy: 0.8380\nEpoch 150/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3928 - binary_accuracy: 0.8315 - val_loss: 0.4073 - val_binary_accuracy: 0.8380\nEpoch 151/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4022 - binary_accuracy: 0.8146 - val_loss: 0.4055 - val_binary_accuracy: 0.8380\nEpoch 152/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3927 - binary_accuracy: 0.8469 - val_loss: 0.4043 - val_binary_accuracy: 0.8380\nEpoch 153/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3935 - binary_accuracy: 0.8146 - val_loss: 0.4034 - val_binary_accuracy: 0.8380\nEpoch 154/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.4118 - binary_accuracy: 0.8006 - val_loss: 0.4024 - val_binary_accuracy: 0.8380\nEpoch 155/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.4134 - binary_accuracy: 0.8146 - val_loss: 0.4016 - val_binary_accuracy: 0.8380\nEpoch 156/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4023 - binary_accuracy: 0.8244 - val_loss: 0.4007 - val_binary_accuracy: 0.8436\nEpoch 157/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3909 - binary_accuracy: 0.8258 - val_loss: 0.3993 - val_binary_accuracy: 0.8436\nEpoch 158/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3863 - binary_accuracy: 0.8244 - val_loss: 0.3977 - val_binary_accuracy: 0.8436\nEpoch 159/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4087 - binary_accuracy: 0.8216 - val_loss: 0.3959 - val_binary_accuracy: 0.8436\nEpoch 160/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4048 - binary_accuracy: 0.8272 - val_loss: 0.3946 - val_binary_accuracy: 0.8436\nEpoch 161/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3989 - binary_accuracy: 0.8399 - val_loss: 0.3932 - val_binary_accuracy: 0.8436\nEpoch 162/1000\n2/2 [==============================] - 0s 56ms/step - loss: 0.3945 - binary_accuracy: 0.8258 - val_loss: 0.3922 - val_binary_accuracy: 0.8436\nEpoch 163/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4117 - binary_accuracy: 0.8244 - val_loss: 0.3914 - val_binary_accuracy: 0.8436\nEpoch 164/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3994 - binary_accuracy: 0.8230 - val_loss: 0.3897 - val_binary_accuracy: 0.8436\nEpoch 165/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3964 - binary_accuracy: 0.8132 - val_loss: 0.3879 - val_binary_accuracy: 0.8436\nEpoch 166/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3920 - binary_accuracy: 0.8287 - val_loss: 0.3867 - val_binary_accuracy: 0.8436\nEpoch 167/1000\n2/2 [==============================] - 0s 58ms/step - loss: 0.3862 - binary_accuracy: 0.8258 - val_loss: 0.3855 - val_binary_accuracy: 0.8436\nEpoch 168/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4031 - binary_accuracy: 0.8287 - val_loss: 0.3851 - val_binary_accuracy: 0.8436\nEpoch 169/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3825 - binary_accuracy: 0.8441 - val_loss: 0.3845 - val_binary_accuracy: 0.8436\nEpoch 170/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3909 - binary_accuracy: 0.8329 - val_loss: 0.3838 - val_binary_accuracy: 0.8436\nEpoch 171/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3839 - binary_accuracy: 0.8441 - val_loss: 0.3829 - val_binary_accuracy: 0.8436\nEpoch 172/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3910 - binary_accuracy: 0.8258 - val_loss: 0.3823 - val_binary_accuracy: 0.8436\nEpoch 173/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3909 - binary_accuracy: 0.8272 - val_loss: 0.3825 - val_binary_accuracy: 0.8436\nEpoch 174/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3962 - binary_accuracy: 0.8272 - val_loss: 0.3825 - val_binary_accuracy: 0.8436\nEpoch 175/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4022 - binary_accuracy: 0.8216 - val_loss: 0.3819 - val_binary_accuracy: 0.8436\nEpoch 176/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3997 - binary_accuracy: 0.8315 - val_loss: 0.3816 - val_binary_accuracy: 0.8436\nEpoch 177/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3968 - binary_accuracy: 0.8357 - val_loss: 0.3816 - val_binary_accuracy: 0.8436\nEpoch 178/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3792 - binary_accuracy: 0.8343 - val_loss: 0.3819 - val_binary_accuracy: 0.8380\nEpoch 179/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3846 - binary_accuracy: 0.8301 - val_loss: 0.3820 - val_binary_accuracy: 0.8380\nEpoch 180/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3908 - binary_accuracy: 0.8216 - val_loss: 0.3814 - val_binary_accuracy: 0.8380\nEpoch 181/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4047 - binary_accuracy: 0.8118 - val_loss: 0.3809 - val_binary_accuracy: 0.8380\nEpoch 182/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3965 - binary_accuracy: 0.8258 - val_loss: 0.3797 - val_binary_accuracy: 0.8380\nEpoch 183/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4055 - binary_accuracy: 0.8343 - val_loss: 0.3781 - val_binary_accuracy: 0.8380\nEpoch 184/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3935 - binary_accuracy: 0.8230 - val_loss: 0.3770 - val_binary_accuracy: 0.8436\nEpoch 185/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3945 - binary_accuracy: 0.8258 - val_loss: 0.3764 - val_binary_accuracy: 0.8436\nEpoch 186/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.4074 - binary_accuracy: 0.8146 - val_loss: 0.3768 - val_binary_accuracy: 0.8436\nEpoch 187/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.4049 - binary_accuracy: 0.8216 - val_loss: 0.3765 - val_binary_accuracy: 0.8436\nEpoch 188/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3985 - binary_accuracy: 0.8160 - val_loss: 0.3765 - val_binary_accuracy: 0.8436\nEpoch 189/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3913 - binary_accuracy: 0.8329 - val_loss: 0.3759 - val_binary_accuracy: 0.8436\nEpoch 190/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3975 - binary_accuracy: 0.8258 - val_loss: 0.3749 - val_binary_accuracy: 0.8436\nEpoch 191/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3835 - binary_accuracy: 0.8315 - val_loss: 0.3739 - val_binary_accuracy: 0.8436\nEpoch 192/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3898 - binary_accuracy: 0.8357 - val_loss: 0.3736 - val_binary_accuracy: 0.8436\nEpoch 193/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3882 - binary_accuracy: 0.8272 - val_loss: 0.3736 - val_binary_accuracy: 0.8436\nEpoch 194/1000\n2/2 [==============================] - 0s 34ms/step - loss: 0.3866 - binary_accuracy: 0.8343 - val_loss: 0.3734 - val_binary_accuracy: 0.8436\nEpoch 195/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3759 - binary_accuracy: 0.8216 - val_loss: 0.3728 - val_binary_accuracy: 0.8436\nEpoch 196/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3787 - binary_accuracy: 0.8371 - val_loss: 0.3730 - val_binary_accuracy: 0.8436\nEpoch 197/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3812 - binary_accuracy: 0.8329 - val_loss: 0.3733 - val_binary_accuracy: 0.8436\nEpoch 198/1000\n2/2 [==============================] - 0s 34ms/step - loss: 0.3786 - binary_accuracy: 0.8357 - val_loss: 0.3733 - val_binary_accuracy: 0.8436\nEpoch 199/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3993 - binary_accuracy: 0.8258 - val_loss: 0.3733 - val_binary_accuracy: 0.8436\nEpoch 200/1000\n2/2 [==============================] - 0s 55ms/step - loss: 0.3894 - binary_accuracy: 0.8343 - val_loss: 0.3737 - val_binary_accuracy: 0.8436\n",
                        "<Axes: title={'center': 'Accuracy'}>",
                        "<Figure size 640x480 with 1 Axes>",
                        "<Figure size 640x480 with 1 Axes>"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 3
            }
        },
        {
            "source": "# Predictions and submission",
            "mc_idx": 13,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "test['Age'].median()\ntest['Sex'] = test['Sex'].apply(lambda x: 0 if x=='male' else 1)\ntest['Age'] = test['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntest['Age_cat'] = test['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntest['Age_cat'] = pd.Categorical(test['Age_cat'])\ntest['Age_cat'] = test['Age_cat'].cat.codes\ntest['Embarked'] = pd.Categorical(test['Embarked'])\ntest['Embarked'] = test['Embarked'].cat.codes\ntest['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.')\ntest['Title'] = test['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntest['Title'] = pd.Categorical(test['Title'])\ntest['Title'] = test['Title'].cat.codes\ntest['Family'] = test['SibSp'] + test['Parch']\ntest['Family'] = test['Family'].apply(lambda x: 1 if x>0 else 0)\ntest_X = test[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']]",
            "mc_idx": 14,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.3,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {
                    ".median": 2,
                    ".isna": 1
                },
                "Data_Transform": {
                    ".apply(": 5,
                    ".apply": 5
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "pd.DataFrame(test_X).fillna(0, inplace=True)\nmedian = test_X.median()\ntest_X['Fare'] = test_X['Fare'].fillna(median)",
            "mc_idx": 15,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".median": 2
                },
                "Data_Transform": {
                    ".fillna(": 2,
                    ".fillna": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "/tmp/ipykernel_19/1770064310.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  test_X['Fare'] = test_X['Fare'].fillna(median)\n"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "df = pd.DataFrame()\ntest_X = StandardScaler().fit_transform(test_X)\ndf['PassengerId'] = test['PassengerId']\ndf['Survived'] = model.predict(test_X).round().astype(int)",
            "mc_idx": 16,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.2,
                "Model_Evaluation": 0.4,
                "Model_Interpretation": 0.2,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    ".astype(": 1,
                    "standardscaler": 1,
                    ".round": 1
                },
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "14/14 [==============================] - 0s 2ms/step\n"
                    ]
                },
                "mc_idx": 16,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "df.to_csv('submission.csv',index=False)",
            "mc_idx": 17,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    ".to_csv(": 1,
                    "to_csv": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        }
    ],
    "code_cells": [
        {
            "source": "import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))",
            "mc_idx": 2,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.044444444444444446,
                "Exploratory_Data_Analysis": 0.022222222222222223,
                "Data_Transform": 0.06666666666666667,
                "Model_Train": 0.03333333333333333,
                "Model_Evaluation": 0.011111111111111112,
                "Model_Interpretation": 0.011111111111111112,
                "Hyperparameter_Tuning": 0.011111111111111112,
                "Visualization": 0.022222222222222223,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 9
                },
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    ".join(": 1,
                    "labelencoder": 2,
                    "standardscaler": 1,
                    ".join": 1,
                    ".mod": 1
                },
                "Model_Train": {
                    "train_test_split": 1,
                    "model": 1,
                    "model_selection": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 1
                },
                "Visualization": {
                    "matplotlib": 1,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n"
                    ]
                },
                "mc_idx": 2,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "test = pd.read_csv('/kaggle/input/titanic/test.csv')\ntrain = pd.read_csv('/kaggle/input/titanic/train.csv')",
            "mc_idx": 3,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 4,
                    "pd.read_": 4
                },
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 3,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "train['Embarked'] = pd.Categorical(train['Embarked'])\ntrain['Embarked'] = train['Embarked'].cat.codes\n\ntrain['Age'] = train['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntrain['Age_cat'] = train['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntrain['Age_cat'] = pd.Categorical(train['Age_cat'])\ntrain['Age_cat'] = train['Age_cat'].cat.codes\n\ntrain['Family'] = train['SibSp'] + train['Parch']\ntrain['Family'] = train['Family'].apply(lambda x: 1 if x>0 else 0)\n\ntrain['Title'] = train['Name'].str.extract(' ([A-Za-z]+)\\.')\ntrain['Title'] = train['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntrain['Title'] = pd.Categorical(train['Title'])\ntrain['Title'] = train['Title'].cat.codes\n\ntrain['Sex'] = train['Sex'].apply(lambda x: 0 if x=='male' else 1)",
            "mc_idx": 4,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.1,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {
                    ".isna": 1
                },
                "Data_Transform": {
                    ".apply(": 5,
                    ".apply": 5
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 4,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "X = train[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']]\ny = train['Survived']",
            "mc_idx": 5,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "X_train, X_valid, y_train, y_valid = train_test_split(X, y, stratify=y, train_size=0.8)\n\ninput_shape = [X_train.shape[1]]",
            "mc_idx": 6,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.6666666666666666,
                "Hyperparameter_Tuning": 0.3333333333333333,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "train_test_split": 1
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "model = keras.Sequential([\n    layers.BatchNormalization(input_shape=input_shape),\n    layers.Dense(64, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(32, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(16, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.1),\n    layers.Dense(1, activation='sigmoid'),\n])",
            "mc_idx": 8,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 1.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.3333333333333333,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2
                },
                "Data_Transform": {
                    ".drop": 3
                },
                "Model_Train": {
                    "sequential(": 1,
                    "model": 1,
                    ".sequential": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "shap": 2,
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    5,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 8,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "model.summary()",
            "mc_idx": 9,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Model: \"sequential\"\n_________________________________________________________________\n Layer (type)                Output Shape              Param #   \n=================================================================\n batch_normalization (Batch  (None, 6)                 24        \n Normalization)                                                  \n                                                                 \n dense (Dense)               (None, 64)                448       \n                                                                 \n batch_normalization_1 (Bat  (None, 64)                256       \n chNormalization)                                                \n                                                                 \n dropout (Dropout)           (None, 64)                0         \n                                                                 \n dense_1 (Dense)             (None, 32)                2080      \n                                                                 \n batch_normalization_2 (Bat  (None, 32)                128       \n chNormalization)                                                \n                                                                 \n dropout_1 (Dropout)         (None, 32)                0         \n                                                                 \n dense_2 (Dense)             (None, 16)                528       \n                                                                 \n batch_normalization_3 (Bat  (None, 16)                64        \n chNormalization)                                                \n                                                                 \n dropout_2 (Dropout)         (None, 16)                0         \n                                                                 \n dense_3 (Dense)             (None, 1)                 17        \n                                                                 \n=================================================================\nTotal params: 3545 (13.85 KB)\nTrainable params: 3309 (12.93 KB)\nNon-trainable params: 236 (944.00 Byte)\n_________________________________________________________________\n"
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "model.compile(optimizer='adam', loss='binary_crossentropy',\n    metrics=['binary_accuracy'],)",
            "mc_idx": 10,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "compile": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 10,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "early_stopping = keras.callbacks.EarlyStopping(\n    patience=8,\n    min_delta=0.001,\n    restore_best_weights=True,\n)\nhistory = model.fit(\n    X_train, y_train,\n    validation_data=(X_valid, y_valid),\n    epochs=1000,\n    batch_size=512,\n    callbacks=[early_stopping],\n)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Cross-entropy\")\nhistory_df.loc[:, ['binary_accuracy', 'val_binary_accuracy']].plot(title=\"Accuracy\")",
            "mc_idx": 12,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.6,
                "Model_Evaluation": 0.2,
                "Model_Interpretation": 0.2,
                "Hyperparameter_Tuning": 0.4,
                "Visualization": 0.4,
                "Debug": 0.0,
                "Data_Export": 0.2,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 4,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model.fit": 1,
                    ".fit(": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 2
                },
                "Visualization": {
                    ".plot(": 2
                },
                "Debug": {},
                "Data_Export": {
                    "store": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0030_c008_o003_image_1.png",
                    8,
                    3,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Epoch 1/1000\n2/2 [==============================] - 3s 368ms/step - loss: 0.8797 - binary_accuracy: 0.4298 - val_loss: 0.6998 - val_binary_accuracy: 0.5978\nEpoch 2/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.8221 - binary_accuracy: 0.4817 - val_loss: 0.6996 - val_binary_accuracy: 0.6145\nEpoch 3/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.7279 - binary_accuracy: 0.5590 - val_loss: 0.6982 - val_binary_accuracy: 0.6145\nEpoch 4/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.7081 - binary_accuracy: 0.5716 - val_loss: 0.6934 - val_binary_accuracy: 0.6145\nEpoch 5/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.6684 - binary_accuracy: 0.6306 - val_loss: 0.6882 - val_binary_accuracy: 0.6257\nEpoch 6/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.6070 - binary_accuracy: 0.6910 - val_loss: 0.6828 - val_binary_accuracy: 0.6257\nEpoch 7/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.6247 - binary_accuracy: 0.6812 - val_loss: 0.6777 - val_binary_accuracy: 0.6257\nEpoch 8/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.5944 - binary_accuracy: 0.7051 - val_loss: 0.6734 - val_binary_accuracy: 0.6257\nEpoch 9/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.5751 - binary_accuracy: 0.7037 - val_loss: 0.6696 - val_binary_accuracy: 0.6257\nEpoch 10/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.5900 - binary_accuracy: 0.7219 - val_loss: 0.6659 - val_binary_accuracy: 0.6257\nEpoch 11/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.5268 - binary_accuracy: 0.7542 - val_loss: 0.6627 - val_binary_accuracy: 0.6257\nEpoch 12/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.5312 - binary_accuracy: 0.7683 - val_loss: 0.6596 - val_binary_accuracy: 0.6369\nEpoch 13/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.5142 - binary_accuracy: 0.7584 - val_loss: 0.6561 - val_binary_accuracy: 0.6425\nEpoch 14/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.5202 - binary_accuracy: 0.7697 - val_loss: 0.6528 - val_binary_accuracy: 0.6425\nEpoch 15/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.5177 - binary_accuracy: 0.7584 - val_loss: 0.6501 - val_binary_accuracy: 0.6480\nEpoch 16/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.5066 - binary_accuracy: 0.7781 - val_loss: 0.6478 - val_binary_accuracy: 0.6480\nEpoch 17/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4909 - binary_accuracy: 0.7879 - val_loss: 0.6457 - val_binary_accuracy: 0.6480\nEpoch 18/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.5058 - binary_accuracy: 0.7654 - val_loss: 0.6441 - val_binary_accuracy: 0.6425\nEpoch 19/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4822 - binary_accuracy: 0.7809 - val_loss: 0.6427 - val_binary_accuracy: 0.6425\nEpoch 20/1000\n2/2 [==============================] - 0s 57ms/step - loss: 0.4873 - binary_accuracy: 0.7739 - val_loss: 0.6413 - val_binary_accuracy: 0.6425\nEpoch 21/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4838 - binary_accuracy: 0.7767 - val_loss: 0.6400 - val_binary_accuracy: 0.6425\nEpoch 22/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4657 - binary_accuracy: 0.7851 - val_loss: 0.6388 - val_binary_accuracy: 0.6425\nEpoch 23/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4543 - binary_accuracy: 0.7949 - val_loss: 0.6376 - val_binary_accuracy: 0.6425\nEpoch 24/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4649 - binary_accuracy: 0.7851 - val_loss: 0.6363 - val_binary_accuracy: 0.6480\nEpoch 25/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4480 - binary_accuracy: 0.8216 - val_loss: 0.6350 - val_binary_accuracy: 0.6480\nEpoch 26/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4709 - binary_accuracy: 0.7921 - val_loss: 0.6336 - val_binary_accuracy: 0.6480\nEpoch 27/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4621 - binary_accuracy: 0.7837 - val_loss: 0.6322 - val_binary_accuracy: 0.6480\nEpoch 28/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4497 - binary_accuracy: 0.8188 - val_loss: 0.6308 - val_binary_accuracy: 0.6536\nEpoch 29/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4418 - binary_accuracy: 0.8048 - val_loss: 0.6293 - val_binary_accuracy: 0.6536\nEpoch 30/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4564 - binary_accuracy: 0.8006 - val_loss: 0.6282 - val_binary_accuracy: 0.6536\nEpoch 31/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4508 - binary_accuracy: 0.8034 - val_loss: 0.6269 - val_binary_accuracy: 0.6536\nEpoch 32/1000\n2/2 [==============================] - 0s 45ms/step - loss: 0.4530 - binary_accuracy: 0.7921 - val_loss: 0.6256 - val_binary_accuracy: 0.6592\nEpoch 33/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4640 - binary_accuracy: 0.8020 - val_loss: 0.6240 - val_binary_accuracy: 0.6704\nEpoch 34/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4556 - binary_accuracy: 0.7963 - val_loss: 0.6226 - val_binary_accuracy: 0.6704\nEpoch 35/1000\n2/2 [==============================] - 0s 45ms/step - loss: 0.4427 - binary_accuracy: 0.8062 - val_loss: 0.6213 - val_binary_accuracy: 0.6704\nEpoch 36/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4595 - binary_accuracy: 0.7963 - val_loss: 0.6198 - val_binary_accuracy: 0.6704\nEpoch 37/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.4368 - binary_accuracy: 0.8146 - val_loss: 0.6184 - val_binary_accuracy: 0.6704\nEpoch 38/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4478 - binary_accuracy: 0.8090 - val_loss: 0.6170 - val_binary_accuracy: 0.6704\nEpoch 39/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4398 - binary_accuracy: 0.8062 - val_loss: 0.6155 - val_binary_accuracy: 0.6704\nEpoch 40/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4464 - binary_accuracy: 0.8006 - val_loss: 0.6139 - val_binary_accuracy: 0.6816\nEpoch 41/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4572 - binary_accuracy: 0.8006 - val_loss: 0.6123 - val_binary_accuracy: 0.6816\nEpoch 42/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4469 - binary_accuracy: 0.8104 - val_loss: 0.6108 - val_binary_accuracy: 0.6816\nEpoch 43/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4165 - binary_accuracy: 0.8174 - val_loss: 0.6091 - val_binary_accuracy: 0.6816\nEpoch 44/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4369 - binary_accuracy: 0.8132 - val_loss: 0.6070 - val_binary_accuracy: 0.6816\nEpoch 45/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4416 - binary_accuracy: 0.8076 - val_loss: 0.6050 - val_binary_accuracy: 0.6816\nEpoch 46/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4298 - binary_accuracy: 0.8188 - val_loss: 0.6029 - val_binary_accuracy: 0.6816\nEpoch 47/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4298 - binary_accuracy: 0.8146 - val_loss: 0.6010 - val_binary_accuracy: 0.6816\nEpoch 48/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4255 - binary_accuracy: 0.8062 - val_loss: 0.5992 - val_binary_accuracy: 0.6872\nEpoch 49/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4320 - binary_accuracy: 0.8188 - val_loss: 0.5975 - val_binary_accuracy: 0.6927\nEpoch 50/1000\n2/2 [==============================] - 0s 57ms/step - loss: 0.4329 - binary_accuracy: 0.8048 - val_loss: 0.5955 - val_binary_accuracy: 0.6927\nEpoch 51/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4349 - binary_accuracy: 0.8216 - val_loss: 0.5934 - val_binary_accuracy: 0.6927\nEpoch 52/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4201 - binary_accuracy: 0.8146 - val_loss: 0.5909 - val_binary_accuracy: 0.6927\nEpoch 53/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4298 - binary_accuracy: 0.8034 - val_loss: 0.5887 - val_binary_accuracy: 0.6927\nEpoch 54/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.4280 - binary_accuracy: 0.8118 - val_loss: 0.5867 - val_binary_accuracy: 0.6927\nEpoch 55/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4348 - binary_accuracy: 0.8006 - val_loss: 0.5849 - val_binary_accuracy: 0.6983\nEpoch 56/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4169 - binary_accuracy: 0.8244 - val_loss: 0.5828 - val_binary_accuracy: 0.6983\nEpoch 57/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4190 - binary_accuracy: 0.8132 - val_loss: 0.5807 - val_binary_accuracy: 0.6983\nEpoch 58/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4161 - binary_accuracy: 0.8104 - val_loss: 0.5789 - val_binary_accuracy: 0.6983\nEpoch 59/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4180 - binary_accuracy: 0.8104 - val_loss: 0.5771 - val_binary_accuracy: 0.6983\nEpoch 60/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4294 - binary_accuracy: 0.8090 - val_loss: 0.5755 - val_binary_accuracy: 0.6983\nEpoch 61/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4222 - binary_accuracy: 0.8301 - val_loss: 0.5738 - val_binary_accuracy: 0.6983\nEpoch 62/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4248 - binary_accuracy: 0.8104 - val_loss: 0.5720 - val_binary_accuracy: 0.6983\nEpoch 63/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4179 - binary_accuracy: 0.8287 - val_loss: 0.5706 - val_binary_accuracy: 0.7095\nEpoch 64/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4298 - binary_accuracy: 0.8090 - val_loss: 0.5687 - val_binary_accuracy: 0.7095\nEpoch 65/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4295 - binary_accuracy: 0.8188 - val_loss: 0.5669 - val_binary_accuracy: 0.7095\nEpoch 66/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4122 - binary_accuracy: 0.8118 - val_loss: 0.5650 - val_binary_accuracy: 0.7095\nEpoch 67/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4410 - binary_accuracy: 0.8104 - val_loss: 0.5632 - val_binary_accuracy: 0.7095\nEpoch 68/1000\n2/2 [==============================] - 0s 64ms/step - loss: 0.4062 - binary_accuracy: 0.8202 - val_loss: 0.5615 - val_binary_accuracy: 0.7095\nEpoch 69/1000\n2/2 [==============================] - 0s 51ms/step - loss: 0.4135 - binary_accuracy: 0.8174 - val_loss: 0.5603 - val_binary_accuracy: 0.7095\nEpoch 70/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.4281 - binary_accuracy: 0.8048 - val_loss: 0.5596 - val_binary_accuracy: 0.7151\nEpoch 71/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4257 - binary_accuracy: 0.8146 - val_loss: 0.5590 - val_binary_accuracy: 0.7151\nEpoch 72/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4355 - binary_accuracy: 0.8132 - val_loss: 0.5576 - val_binary_accuracy: 0.7207\nEpoch 73/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4224 - binary_accuracy: 0.8160 - val_loss: 0.5561 - val_binary_accuracy: 0.7263\nEpoch 74/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4326 - binary_accuracy: 0.8020 - val_loss: 0.5542 - val_binary_accuracy: 0.7263\nEpoch 75/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4258 - binary_accuracy: 0.8132 - val_loss: 0.5518 - val_binary_accuracy: 0.7263\nEpoch 76/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4131 - binary_accuracy: 0.8244 - val_loss: 0.5497 - val_binary_accuracy: 0.7263\nEpoch 77/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4285 - binary_accuracy: 0.8230 - val_loss: 0.5473 - val_binary_accuracy: 0.7263\nEpoch 78/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4235 - binary_accuracy: 0.8174 - val_loss: 0.5452 - val_binary_accuracy: 0.7263\nEpoch 79/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4142 - binary_accuracy: 0.8244 - val_loss: 0.5428 - val_binary_accuracy: 0.7263\nEpoch 80/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4066 - binary_accuracy: 0.8202 - val_loss: 0.5402 - val_binary_accuracy: 0.7318\nEpoch 81/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4133 - binary_accuracy: 0.8160 - val_loss: 0.5377 - val_binary_accuracy: 0.7318\nEpoch 82/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4234 - binary_accuracy: 0.8132 - val_loss: 0.5351 - val_binary_accuracy: 0.7318\nEpoch 83/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4098 - binary_accuracy: 0.8132 - val_loss: 0.5325 - val_binary_accuracy: 0.7318\nEpoch 84/1000\n2/2 [==============================] - 0s 60ms/step - loss: 0.4267 - binary_accuracy: 0.8160 - val_loss: 0.5301 - val_binary_accuracy: 0.7318\nEpoch 85/1000\n2/2 [==============================] - 0s 48ms/step - loss: 0.4200 - binary_accuracy: 0.8118 - val_loss: 0.5281 - val_binary_accuracy: 0.7318\nEpoch 86/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4250 - binary_accuracy: 0.8048 - val_loss: 0.5254 - val_binary_accuracy: 0.7318\nEpoch 87/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4101 - binary_accuracy: 0.8188 - val_loss: 0.5225 - val_binary_accuracy: 0.7318\nEpoch 88/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4110 - binary_accuracy: 0.8132 - val_loss: 0.5196 - val_binary_accuracy: 0.7318\nEpoch 89/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3946 - binary_accuracy: 0.8287 - val_loss: 0.5169 - val_binary_accuracy: 0.7318\nEpoch 90/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4051 - binary_accuracy: 0.8216 - val_loss: 0.5140 - val_binary_accuracy: 0.7318\nEpoch 91/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4184 - binary_accuracy: 0.8062 - val_loss: 0.5112 - val_binary_accuracy: 0.7374\nEpoch 92/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4080 - binary_accuracy: 0.8174 - val_loss: 0.5079 - val_binary_accuracy: 0.7374\nEpoch 93/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3977 - binary_accuracy: 0.8258 - val_loss: 0.5048 - val_binary_accuracy: 0.7374\nEpoch 94/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4017 - binary_accuracy: 0.8230 - val_loss: 0.5021 - val_binary_accuracy: 0.7374\nEpoch 95/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4101 - binary_accuracy: 0.8174 - val_loss: 0.4990 - val_binary_accuracy: 0.7430\nEpoch 96/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4042 - binary_accuracy: 0.8343 - val_loss: 0.4958 - val_binary_accuracy: 0.7430\nEpoch 97/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4121 - binary_accuracy: 0.8174 - val_loss: 0.4932 - val_binary_accuracy: 0.7486\nEpoch 98/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4077 - binary_accuracy: 0.8202 - val_loss: 0.4901 - val_binary_accuracy: 0.7486\nEpoch 99/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3972 - binary_accuracy: 0.8315 - val_loss: 0.4872 - val_binary_accuracy: 0.7486\nEpoch 100/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3961 - binary_accuracy: 0.8441 - val_loss: 0.4844 - val_binary_accuracy: 0.7542\nEpoch 101/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4202 - binary_accuracy: 0.8202 - val_loss: 0.4815 - val_binary_accuracy: 0.7654\nEpoch 102/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4047 - binary_accuracy: 0.8258 - val_loss: 0.4793 - val_binary_accuracy: 0.7709\nEpoch 103/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4053 - binary_accuracy: 0.8132 - val_loss: 0.4778 - val_binary_accuracy: 0.7821\nEpoch 104/1000\n2/2 [==============================] - 0s 46ms/step - loss: 0.4013 - binary_accuracy: 0.8315 - val_loss: 0.4761 - val_binary_accuracy: 0.8101\nEpoch 105/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4145 - binary_accuracy: 0.8202 - val_loss: 0.4749 - val_binary_accuracy: 0.8156\nEpoch 106/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3998 - binary_accuracy: 0.8230 - val_loss: 0.4735 - val_binary_accuracy: 0.8156\nEpoch 107/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4028 - binary_accuracy: 0.8272 - val_loss: 0.4718 - val_binary_accuracy: 0.8156\nEpoch 108/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4186 - binary_accuracy: 0.8202 - val_loss: 0.4700 - val_binary_accuracy: 0.8156\nEpoch 109/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.4039 - binary_accuracy: 0.8188 - val_loss: 0.4681 - val_binary_accuracy: 0.8156\nEpoch 110/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3951 - binary_accuracy: 0.8287 - val_loss: 0.4660 - val_binary_accuracy: 0.8156\nEpoch 111/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.4108 - binary_accuracy: 0.8329 - val_loss: 0.4646 - val_binary_accuracy: 0.8212\nEpoch 112/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3943 - binary_accuracy: 0.8230 - val_loss: 0.4624 - val_binary_accuracy: 0.8324\nEpoch 113/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4065 - binary_accuracy: 0.8146 - val_loss: 0.4603 - val_binary_accuracy: 0.8268\nEpoch 114/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4109 - binary_accuracy: 0.8160 - val_loss: 0.4578 - val_binary_accuracy: 0.8268\nEpoch 115/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4127 - binary_accuracy: 0.8188 - val_loss: 0.4554 - val_binary_accuracy: 0.8268\nEpoch 116/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4086 - binary_accuracy: 0.8230 - val_loss: 0.4531 - val_binary_accuracy: 0.8268\nEpoch 117/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4034 - binary_accuracy: 0.8272 - val_loss: 0.4511 - val_binary_accuracy: 0.8268\nEpoch 118/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3940 - binary_accuracy: 0.8174 - val_loss: 0.4489 - val_binary_accuracy: 0.8324\nEpoch 119/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4006 - binary_accuracy: 0.8301 - val_loss: 0.4473 - val_binary_accuracy: 0.8324\nEpoch 120/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3999 - binary_accuracy: 0.8258 - val_loss: 0.4459 - val_binary_accuracy: 0.8324\nEpoch 121/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4022 - binary_accuracy: 0.8413 - val_loss: 0.4448 - val_binary_accuracy: 0.8324\nEpoch 122/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.4134 - binary_accuracy: 0.8287 - val_loss: 0.4442 - val_binary_accuracy: 0.8324\nEpoch 123/1000\n2/2 [==============================] - 0s 56ms/step - loss: 0.4124 - binary_accuracy: 0.8076 - val_loss: 0.4441 - val_binary_accuracy: 0.8324\nEpoch 124/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3984 - binary_accuracy: 0.8174 - val_loss: 0.4443 - val_binary_accuracy: 0.8324\nEpoch 125/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4039 - binary_accuracy: 0.8216 - val_loss: 0.4444 - val_binary_accuracy: 0.8324\nEpoch 126/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4039 - binary_accuracy: 0.8174 - val_loss: 0.4443 - val_binary_accuracy: 0.8324\nEpoch 127/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4090 - binary_accuracy: 0.8230 - val_loss: 0.4444 - val_binary_accuracy: 0.8324\nEpoch 128/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3943 - binary_accuracy: 0.8315 - val_loss: 0.4440 - val_binary_accuracy: 0.8324\nEpoch 129/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4008 - binary_accuracy: 0.8315 - val_loss: 0.4431 - val_binary_accuracy: 0.8324\nEpoch 130/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3839 - binary_accuracy: 0.8287 - val_loss: 0.4424 - val_binary_accuracy: 0.8324\nEpoch 131/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4210 - binary_accuracy: 0.8188 - val_loss: 0.4421 - val_binary_accuracy: 0.8324\nEpoch 132/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.4144 - binary_accuracy: 0.8188 - val_loss: 0.4417 - val_binary_accuracy: 0.8324\nEpoch 133/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4066 - binary_accuracy: 0.8343 - val_loss: 0.4407 - val_binary_accuracy: 0.8324\nEpoch 134/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3835 - binary_accuracy: 0.8343 - val_loss: 0.4386 - val_binary_accuracy: 0.8324\nEpoch 135/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3923 - binary_accuracy: 0.8329 - val_loss: 0.4361 - val_binary_accuracy: 0.8380\nEpoch 136/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4087 - binary_accuracy: 0.8174 - val_loss: 0.4333 - val_binary_accuracy: 0.8380\nEpoch 137/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3890 - binary_accuracy: 0.8385 - val_loss: 0.4305 - val_binary_accuracy: 0.8380\nEpoch 138/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4033 - binary_accuracy: 0.8174 - val_loss: 0.4275 - val_binary_accuracy: 0.8380\nEpoch 139/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3988 - binary_accuracy: 0.8202 - val_loss: 0.4253 - val_binary_accuracy: 0.8380\nEpoch 140/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3949 - binary_accuracy: 0.8315 - val_loss: 0.4233 - val_binary_accuracy: 0.8380\nEpoch 141/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3939 - binary_accuracy: 0.8399 - val_loss: 0.4210 - val_binary_accuracy: 0.8380\nEpoch 142/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4028 - binary_accuracy: 0.8230 - val_loss: 0.4192 - val_binary_accuracy: 0.8380\nEpoch 143/1000\n2/2 [==============================] - 0s 47ms/step - loss: 0.3984 - binary_accuracy: 0.8272 - val_loss: 0.4179 - val_binary_accuracy: 0.8380\nEpoch 144/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3942 - binary_accuracy: 0.8329 - val_loss: 0.4167 - val_binary_accuracy: 0.8380\nEpoch 145/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3995 - binary_accuracy: 0.8244 - val_loss: 0.4158 - val_binary_accuracy: 0.8380\nEpoch 146/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3977 - binary_accuracy: 0.8202 - val_loss: 0.4149 - val_binary_accuracy: 0.8380\nEpoch 147/1000\n2/2 [==============================] - 0s 43ms/step - loss: 0.3961 - binary_accuracy: 0.8343 - val_loss: 0.4131 - val_binary_accuracy: 0.8380\nEpoch 148/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4128 - binary_accuracy: 0.8160 - val_loss: 0.4107 - val_binary_accuracy: 0.8380\nEpoch 149/1000\n2/2 [==============================] - 0s 44ms/step - loss: 0.4201 - binary_accuracy: 0.8174 - val_loss: 0.4091 - val_binary_accuracy: 0.8380\nEpoch 150/1000\n2/2 [==============================] - 0s 38ms/step - loss: 0.3928 - binary_accuracy: 0.8315 - val_loss: 0.4073 - val_binary_accuracy: 0.8380\nEpoch 151/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.4022 - binary_accuracy: 0.8146 - val_loss: 0.4055 - val_binary_accuracy: 0.8380\nEpoch 152/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3927 - binary_accuracy: 0.8469 - val_loss: 0.4043 - val_binary_accuracy: 0.8380\nEpoch 153/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3935 - binary_accuracy: 0.8146 - val_loss: 0.4034 - val_binary_accuracy: 0.8380\nEpoch 154/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.4118 - binary_accuracy: 0.8006 - val_loss: 0.4024 - val_binary_accuracy: 0.8380\nEpoch 155/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.4134 - binary_accuracy: 0.8146 - val_loss: 0.4016 - val_binary_accuracy: 0.8380\nEpoch 156/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4023 - binary_accuracy: 0.8244 - val_loss: 0.4007 - val_binary_accuracy: 0.8436\nEpoch 157/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3909 - binary_accuracy: 0.8258 - val_loss: 0.3993 - val_binary_accuracy: 0.8436\nEpoch 158/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3863 - binary_accuracy: 0.8244 - val_loss: 0.3977 - val_binary_accuracy: 0.8436\nEpoch 159/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4087 - binary_accuracy: 0.8216 - val_loss: 0.3959 - val_binary_accuracy: 0.8436\nEpoch 160/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4048 - binary_accuracy: 0.8272 - val_loss: 0.3946 - val_binary_accuracy: 0.8436\nEpoch 161/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3989 - binary_accuracy: 0.8399 - val_loss: 0.3932 - val_binary_accuracy: 0.8436\nEpoch 162/1000\n2/2 [==============================] - 0s 56ms/step - loss: 0.3945 - binary_accuracy: 0.8258 - val_loss: 0.3922 - val_binary_accuracy: 0.8436\nEpoch 163/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4117 - binary_accuracy: 0.8244 - val_loss: 0.3914 - val_binary_accuracy: 0.8436\nEpoch 164/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3994 - binary_accuracy: 0.8230 - val_loss: 0.3897 - val_binary_accuracy: 0.8436\nEpoch 165/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3964 - binary_accuracy: 0.8132 - val_loss: 0.3879 - val_binary_accuracy: 0.8436\nEpoch 166/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3920 - binary_accuracy: 0.8287 - val_loss: 0.3867 - val_binary_accuracy: 0.8436\nEpoch 167/1000\n2/2 [==============================] - 0s 58ms/step - loss: 0.3862 - binary_accuracy: 0.8258 - val_loss: 0.3855 - val_binary_accuracy: 0.8436\nEpoch 168/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.4031 - binary_accuracy: 0.8287 - val_loss: 0.3851 - val_binary_accuracy: 0.8436\nEpoch 169/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3825 - binary_accuracy: 0.8441 - val_loss: 0.3845 - val_binary_accuracy: 0.8436\nEpoch 170/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3909 - binary_accuracy: 0.8329 - val_loss: 0.3838 - val_binary_accuracy: 0.8436\nEpoch 171/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3839 - binary_accuracy: 0.8441 - val_loss: 0.3829 - val_binary_accuracy: 0.8436\nEpoch 172/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3910 - binary_accuracy: 0.8258 - val_loss: 0.3823 - val_binary_accuracy: 0.8436\nEpoch 173/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3909 - binary_accuracy: 0.8272 - val_loss: 0.3825 - val_binary_accuracy: 0.8436\nEpoch 174/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3962 - binary_accuracy: 0.8272 - val_loss: 0.3825 - val_binary_accuracy: 0.8436\nEpoch 175/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.4022 - binary_accuracy: 0.8216 - val_loss: 0.3819 - val_binary_accuracy: 0.8436\nEpoch 176/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3997 - binary_accuracy: 0.8315 - val_loss: 0.3816 - val_binary_accuracy: 0.8436\nEpoch 177/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3968 - binary_accuracy: 0.8357 - val_loss: 0.3816 - val_binary_accuracy: 0.8436\nEpoch 178/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3792 - binary_accuracy: 0.8343 - val_loss: 0.3819 - val_binary_accuracy: 0.8380\nEpoch 179/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3846 - binary_accuracy: 0.8301 - val_loss: 0.3820 - val_binary_accuracy: 0.8380\nEpoch 180/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3908 - binary_accuracy: 0.8216 - val_loss: 0.3814 - val_binary_accuracy: 0.8380\nEpoch 181/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4047 - binary_accuracy: 0.8118 - val_loss: 0.3809 - val_binary_accuracy: 0.8380\nEpoch 182/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3965 - binary_accuracy: 0.8258 - val_loss: 0.3797 - val_binary_accuracy: 0.8380\nEpoch 183/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.4055 - binary_accuracy: 0.8343 - val_loss: 0.3781 - val_binary_accuracy: 0.8380\nEpoch 184/1000\n2/2 [==============================] - 0s 42ms/step - loss: 0.3935 - binary_accuracy: 0.8230 - val_loss: 0.3770 - val_binary_accuracy: 0.8436\nEpoch 185/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3945 - binary_accuracy: 0.8258 - val_loss: 0.3764 - val_binary_accuracy: 0.8436\nEpoch 186/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.4074 - binary_accuracy: 0.8146 - val_loss: 0.3768 - val_binary_accuracy: 0.8436\nEpoch 187/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.4049 - binary_accuracy: 0.8216 - val_loss: 0.3765 - val_binary_accuracy: 0.8436\nEpoch 188/1000\n2/2 [==============================] - 0s 41ms/step - loss: 0.3985 - binary_accuracy: 0.8160 - val_loss: 0.3765 - val_binary_accuracy: 0.8436\nEpoch 189/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3913 - binary_accuracy: 0.8329 - val_loss: 0.3759 - val_binary_accuracy: 0.8436\nEpoch 190/1000\n2/2 [==============================] - 0s 39ms/step - loss: 0.3975 - binary_accuracy: 0.8258 - val_loss: 0.3749 - val_binary_accuracy: 0.8436\nEpoch 191/1000\n2/2 [==============================] - 0s 37ms/step - loss: 0.3835 - binary_accuracy: 0.8315 - val_loss: 0.3739 - val_binary_accuracy: 0.8436\nEpoch 192/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3898 - binary_accuracy: 0.8357 - val_loss: 0.3736 - val_binary_accuracy: 0.8436\nEpoch 193/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3882 - binary_accuracy: 0.8272 - val_loss: 0.3736 - val_binary_accuracy: 0.8436\nEpoch 194/1000\n2/2 [==============================] - 0s 34ms/step - loss: 0.3866 - binary_accuracy: 0.8343 - val_loss: 0.3734 - val_binary_accuracy: 0.8436\nEpoch 195/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3759 - binary_accuracy: 0.8216 - val_loss: 0.3728 - val_binary_accuracy: 0.8436\nEpoch 196/1000\n2/2 [==============================] - 0s 36ms/step - loss: 0.3787 - binary_accuracy: 0.8371 - val_loss: 0.3730 - val_binary_accuracy: 0.8436\nEpoch 197/1000\n2/2 [==============================] - 0s 35ms/step - loss: 0.3812 - binary_accuracy: 0.8329 - val_loss: 0.3733 - val_binary_accuracy: 0.8436\nEpoch 198/1000\n2/2 [==============================] - 0s 34ms/step - loss: 0.3786 - binary_accuracy: 0.8357 - val_loss: 0.3733 - val_binary_accuracy: 0.8436\nEpoch 199/1000\n2/2 [==============================] - 0s 40ms/step - loss: 0.3993 - binary_accuracy: 0.8258 - val_loss: 0.3733 - val_binary_accuracy: 0.8436\nEpoch 200/1000\n2/2 [==============================] - 0s 55ms/step - loss: 0.3894 - binary_accuracy: 0.8343 - val_loss: 0.3737 - val_binary_accuracy: 0.8436\n",
                        "<Axes: title={'center': 'Accuracy'}>",
                        "<Figure size 640x480 with 1 Axes>",
                        "<Figure size 640x480 with 1 Axes>"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 3
            }
        },
        {
            "source": "test['Age'].median()\ntest['Sex'] = test['Sex'].apply(lambda x: 0 if x=='male' else 1)\ntest['Age'] = test['Age'].apply(lambda x: 27.0 if np.isnan(x)==True else x)\ntest['Age_cat'] = test['Age'].apply(lambda x: '0-6' if x<=6 else ('6-12' if x<=12 else ('12-18') if x<=18 else ('18-24') if x<=24 else ('24-30' if x<=30 else ('30-40' if x<=40 else ('40-55' if x<=55 else '55+')))))\ntest['Age_cat'] = pd.Categorical(test['Age_cat'])\ntest['Age_cat'] = test['Age_cat'].cat.codes\ntest['Embarked'] = pd.Categorical(test['Embarked'])\ntest['Embarked'] = test['Embarked'].cat.codes\ntest['Title'] = test['Name'].str.extract(' ([A-Za-z]+)\\.')\ntest['Title'] = test['Title'].apply(lambda x: 'Miss' if (x == 'Ms')|(x=='Miss')|(x=='Mlle') else ('Mrs' if (x == 'Mrs')|(x=='Mme') else ('Mr' if x=='Mr' else ('Master' if x=='Master' else 'Other'))))\ntest['Title'] = pd.Categorical(test['Title'])\ntest['Title'] = test['Title'].cat.codes\ntest['Family'] = test['SibSp'] + test['Parch']\ntest['Family'] = test['Family'].apply(lambda x: 1 if x>0 else 0)\ntest_X = test[['Sex', 'Pclass', 'Fare', 'Embarked', 'Title', 'Family']]",
            "mc_idx": 14,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.3,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {
                    ".median": 2,
                    ".isna": 1
                },
                "Data_Transform": {
                    ".apply(": 5,
                    ".apply": 5
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "pd.DataFrame(test_X).fillna(0, inplace=True)\nmedian = test_X.median()\ntest_X['Fare'] = test_X['Fare'].fillna(median)",
            "mc_idx": 15,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".median": 2
                },
                "Data_Transform": {
                    ".fillna(": 2,
                    ".fillna": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "/tmp/ipykernel_19/1770064310.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  test_X['Fare'] = test_X['Fare'].fillna(median)\n"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "df = pd.DataFrame()\ntest_X = StandardScaler().fit_transform(test_X)\ndf['PassengerId'] = test['PassengerId']\ndf['Survived'] = model.predict(test_X).round().astype(int)",
            "mc_idx": 16,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.2,
                "Model_Evaluation": 0.4,
                "Model_Interpretation": 0.2,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    ".astype(": 1,
                    "standardscaler": 1,
                    ".round": 1
                },
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "14/14 [==============================] - 0s 2ms/step\n"
                    ]
                },
                "mc_idx": 16,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "df.to_csv('submission.csv',index=False)",
            "mc_idx": 17,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    ".to_csv(": 1,
                    "to_csv": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        }
    ],
    "markdown_cells": [
        {
            "source": "# Titanic competition\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).\n\n\n# Artificial neural networks\n\nArtificial neural networks (ANNs) are comprised of a node layers, containing an input layer, one or more hidden layers, and an output layer. Each node, or artificial neuron, connects to another and has an associated weight and threshold. If the output of any individual node is above the specified threshold value, that node is activated, sending data to the next layer of the network. Otherwise, no data is passed along to the next layer of the network.\n\n![image.png](attachment:0c83d75a-7996-49ca-83b0-d39b785a9877.png)\n\nSource: https://www.ibm.com/topics/neural-networks\n\n\n# Keras and TensorFlow\n\nIn this notebook I used Keras and TensorFlow to construct an Artificial Neural Network (ANN). This consists of the knowledge learned in the 'Intro to Deep Learning' course available on Kaggle.",
            "mc_idx": 0,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Data preprocessing",
            "mc_idx": 1,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Model",
            "mc_idx": 7,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Evaluation",
            "mc_idx": 11,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Predictions and submission",
            "mc_idx": 13,
            "nb_idx": 30,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "sim_matrix": [
        0.9690918326377869,
        0.9581180810928345,
        0.9629782438278198,
        0.9653900265693665,
        0.9432598352432251,
        0.9381297826766968,
        0.9592124819755554,
        0.9636925458908081,
        0.9625169038772583,
        0.9394745230674744,
        0.9659566879272461,
        0.9511223435401917,
        0.9691644310951233,
        0.9496885538101196,
        0.9667524099349976,
        0.9674407243728638,
        0.9715510606765747,
        0.9381297826766968,
        0.9616518020629883,
        0.9618163108825684,
        0.9692589044570923,
        0.9636925458908081,
        0.954084038734436,
        0.9643841981887817,
        0.9299999475479126,
        0.9618412256240845,
        0.9843924045562744,
        0.9656423926353455,
        0.9786017537117004,
        0.9197006821632385,
        1.0,
        0.9622187614440918,
        0.9507467746734619,
        0.9548726677894592,
        0.960210382938385,
        0.964372992515564,
        0.960210382938385,
        0.9752436280250549,
        0.9681578278541565,
        0.927948534488678,
        0.9403090476989746,
        0.9722089171409607,
        0.9319760799407959,
        0.9692589044570923,
        0.9703982472419739,
        0.9643841981887817,
        0.9650939106941223,
        0.9507467746734619,
        0.9623954892158508,
        0.9819850325584412,
        0.9598437547683716,
        0.964372992515564,
        0.9674407243728638,
        0.9773108959197998,
        0.9645134210586548,
        0.9556647539138794,
        0.9387463331222534,
        0.9626765847206116,
        0.9574165344238281,
        0.9778550863265991,
        0.9530438184738159,
        0.9635588526725769,
        0.9500415921211243,
        0.9273337125778198,
        0.9555944204330444,
        0.9552668929100037,
        0.9456435441970825,
        0.7563009262084961,
        0.9618148803710938,
        0.9615349173545837,
        0.9756109118461609,
        0.9584399461746216,
        0.9745062589645386,
        0.9480890035629272,
        0.9637746214866638,
        0.9730595350265503,
        0.9513110518455505,
        0.9556390643119812,
        0.9456218481063843,
        0.9518468379974365,
        0.9670095443725586,
        0.9609686136245728,
        0.9618425965309143,
        0.946611225605011,
        0.9634840488433838,
        0.9762303233146667,
        0.9488030076026917,
        0.954084038734436,
        0.9516662955284119,
        0.956358015537262,
        0.9752436280250549,
        0.9618163108825684,
        0.9548726677894592,
        0.9576801061630249,
        0.9435842633247375,
        0.9423129558563232,
        0.9401560425758362,
        0.9324248433113098
    ],
    "cell_sim_matrix": [],
    "nb_order": [],
    "summary_data_VA": null
}