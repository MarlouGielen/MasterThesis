{
    "nb_idx": 24,
    "nb_name": "d0024",
    "filename": "d21.ipynb",
    "filepath": "data/data_Kaggle/raw/d21.ipynb",
    "source": "# TITANIC COMPETITION\n--- \n # Import Libraries \n import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_validate, GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\npd.set_option(\"display.expand_frame_repr\",False) \n # Load Dataset \n df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ndf.head() \n ## >> Overview \n def dataframe_summary(dataframe, show_value_counts = False):\n    import pandas as pd\n    pd.set_option(\"display.colheader_justify\",\"left\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- SHAPE of Dataset -----------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.shape)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DATA TYPES of Dataset ------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.dtypes)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MEMORY USAGE of Dataset --------------------------------------------------------------------------------------------------------------  \")\n    print(dataframe.memory_usage(deep=True) / (1024 * 1024))\n    print(\"TOTAL >>> \", round((dataframe.memory_usage(deep=True) / (1024 * 1024)).sum(),2), \"\\n (All are in MB)\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MISSING VALUES in Dataset --------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.isnull().sum())\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DESCRIPTIVE Info about Dataset ---------------------------------------------------------------------------------------------------------\")\n    print(dataframe.describe([0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99]).T)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n\n    if show_value_counts:\n        print(\"-------- VALUE COUNTS in Dataset ----------------------------------------------------------------------------------------------------------------\")\n        for col in dataframe.columns:\n            print(dataframe[col].value_counts())\n            print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\") \n dataframe_summary(df) \n ## >> Lower All Variable Names and Take an Overview of Dataset \n df.columns = [col.lower() for col in df.columns]\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.info())\nprint(\"-\"*33)\nprint(df.describe([0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99]).T)\nprint(\"-\"*33)\ndf.head() \n # Creating New Features \n ## >> Define New Features \n # passeger have a cabin\ndf[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n\n# 'dr in name\ndf[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n\n# 'title' in name\ndf['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# family size\ndf[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n\n# is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\ndf.head() \n ## >> Define Data Types \n df.dtypes \n cat_cols = [\"survived\", \"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \nnum_cols = [\"age\",\"fare\",\"n_family_size\"]\ncar_cols = [\"passengerid\", \"name\",\"ticket\"]\ntarget_label = 'survived'\n\nprint(\"-\"*33)\nprint(f\"Categorical Variables: {cat_cols}\")\nprint(\"-\"*33)\nprint(f\"Numerical Variables: {num_cols}\")\nprint(\"-\"*33)\nprint(f\"Cardinal Variables: {car_cols}\")\nprint(\"-\"*33) \n for col in cat_cols:\n    print(\"-\"*33)\n    print(df[col].value_counts())\n    print(\"-\"*33) \n ## >> Explore Data \n def categoricals_summary(dataframe, column_name, plot=False):\n    print(pd.DataFrame({column_name: dataframe[column_name].value_counts(),\n                 \"Ratio\": 100 * (dataframe[column_name].value_counts() / len(dataframe))}))\n    print(\"--------------------------------------------------------------------------------------------------------\")\n\n    if plot:\n        sns.countplot(x=dataframe[column_name], data=dataframe)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\")\n#--------------------------------------------------------------------------------------------------------        \ndef numericals_summary(dataframe, column_name, plot = False, plot_bins = 20):\n\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[column_name].describe(quantiles).T)\n    print(\"--------------------------------------------------------------------------------------------------------\")\n    \n    if plot:\n        dataframe[column_name].hist(bins = plot_bins)\n        plt.xlabel(column_name)\n        plt.title(column_name)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\") \n for col in cat_cols:\n    categoricals_summary(df, column_name = col, plot=True) \n for col in num_cols:    \n    numericals_summary(df, col, plot=True) \n # Check Outliers \n def outlier_thresholds(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_info=True):\n    q1_num = dataframe[column_name].quantile(q1)\n    q3_num = dataframe[column_name].quantile(q3)\n    iqr = q3_num - q1_num\n    lower_threshold = q1_num - iqr * 1.5\n    upper_threshold = q3_num + iqr * 1.5\n    if print_info:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"for {column_name}:\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Q1 is {q1}\")\n        print(f\"Q3 is {q3}\")\n        print(f\"Q1 threshold is {q1_num}\")\n        print(f\"Q3 threshold is {q3_num}\")\n        print(f\"IQR is {iqr}\")\n        print(f\"Lower threshold is {lower_threshold}\")\n        print(f\"Upper Threshold is {upper_threshold}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n    return lower_threshold, upper_threshold\n#----------------------------------------------------------------------------------------------------------------------\ndef check_if_outlier_exists(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_details=True):\n    low_limit, up_limit = outlier_thresholds(dataframe, column_name, q1, q3, print_details)\n    if dataframe[((dataframe[column_name] < low_limit) | (dataframe[column_name] > up_limit))].shape[0] > 0:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : Outliers exist based on Q1={q1} and Q3={q3}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Under lower bound: {len(dataframe[dataframe[column_name] < low_limit])} observation of {len(dataframe)}\")\n        print(f\"Above upper bound: {len(dataframe[dataframe[column_name] > up_limit])} observation of {len(dataframe)}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return True\n    else:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : No Outlier based on Q1={q1} and Q3={q3}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return False\n#---------------------------------------------------------------------------------------------------------------------- \n for col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95)) \n ## >> Winsorise thresholds \n def winsorize_with_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n    dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n#---------------------------------------------------------------------------------------------------------------------- \n for col in num_cols:\n    winsorize_with_thresholds(df, col, 0.05, 0.95)\n\nfor col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95)) \n # Check for Missing Values \n df.isnull().sum() \n ## >> Dropping 'cabin' variable as it is mostly empty (77% empty) and other cardinal variables ('passengerid','ticket','name') \n # drop columns\nlist_to_drop = ['ticket','name','cabin']\ndf.drop(labels=list_to_drop, axis=1, inplace=True)\n\n# reassign categorical variables\ncat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \ncar_cols = [\"passengerid\"]\ndf.head() \n ## >> Fill 'age' variable with the medians considering 'n_title' variable and fill rest with means considering there 'sex' \n # fill 'age' according to the classes of 't_title'\ndf[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n#df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\ndf.isnull().sum() \n ## >> Convert 'age' to int from float \n df[\"age\"] = df[\"age\"].astype(int)\ndf[\"age\"].dtype \n ## >> Fill 'age' related variables accordingly \n # is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.isnull().sum())\nprint(\"-\"*33)\ndf.head() \n ## >> Fill 'embarked' variable with the median considering 'pclass' variable \n df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\ndf.isnull().sum() \n # Label Encoding \n ## >> Find Binary Variables \n # find binary variables\nbinary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n\nprint(\"-\"*33)\nprint(f\"Binary Variables: {binary_cols}\")\nprint(\"-\"*33)\ndf.head() \n ## >> Binary Label Encoding \n le = LabelEncoder()\n\nfor col in binary_cols:\n    df[col] =le.fit_transform(df[col])\n    \ndf.head() \n ## >> Find categorical variables with multiple classes \n one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\nprint(f\"Categorical variables with multiple classes: {one_hot_cols}\") \n ## >> One-Hot Label Encoding \n df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\ndf.head() \n # Scaling \n ## >> Apply StandardScaler to numarical values \n scaler = StandardScaler()\ndf[num_cols] = scaler.fit_transform(df[num_cols])\n\ndf.head() \n # Modelling \n ## >> Prepare Test Data \n def prepare_test_data():\n    df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n    df.columns = [col.lower() for col in df.columns]\n    # passeger have a cabin\n    df[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n    # 'dr in name\n    df[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n    # 'title' in name\n    df['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # family size\n    df[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    num_cols = [\"age\",\"fare\",\"n_family_size\"]\n    car_cols = [\"passengerid\", \"name\",\"ticket\"]\n    target_label = ''\n    for col in num_cols:\n        winsorize_with_thresholds(df, col, 0.05, 0.95)\n    # drop columns\n    list_to_drop = ['ticket','name','cabin']\n    df.drop(labels=list_to_drop, axis=1, inplace=True)\n    # reassign categorical variables\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    car_cols = [\"passengerid\"]\n    # fill 'age' according to the classes of 't_title'\n    df[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n    df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\n    df[\"age\"] = df[\"age\"].astype(int)\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    df[\"fare\"].fillna(df.groupby('pclass')[\"fare\"].transform(\"mean\"), inplace=True)\n    df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\n    # find binary variables\n    binary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n    le = LabelEncoder()\n\n    for col in binary_cols:\n        df[col] =le.fit_transform(df[col])\n    one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\n    df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\n    scaler = StandardScaler()\n    df[num_cols] = scaler.fit_transform(df[num_cols])\n    return df \n df_test = prepare_test_data()\ndf_test.head() \n ## >> Get only columns exists in both train and test dataset as they do not have the same variables after feature extraction in both datasets \n df_train_cols = {col for col in df.columns if col != 'survived'}\ndf_test_cols = {col for col in df_test.columns}\n\nintersect_cols = df_train_cols.intersection(df_test_cols)\n\nintersect_cols = list(intersect_cols)\nintersect_cols \n ## >> Prepare Train Data for models \n # split data into depentdent and independent variables\nX = df[intersect_cols]\ny = df[target_label] \n # K-Nearest Neighbors Model \n ## >> Train Model \n # train model\nknn = KNeighborsClassifier()\n\nknn_params = {\"n_neighbors\": range(2,50)}\n\nknn_grid = GridSearchCV(knn,\n                        knn_params,\n                        cv=5,\n                        n_jobs=-1,\n                        verbose=True).fit(X, y)\n\nknn_grid.best_params_ \n ## >> Hyperparameters \n # model with hyperparameters\nknn_hp = knn.set_params(**knn_grid.best_params_).fit(X,y)\n\ncv_output = cross_validate(knn_hp,\n                           X,\n                           y,\n                           cv=10,\n                           scoring=[\"accuracy\",\"f1\",\"roc_auc\"])\nprint(\"-\"*33)\nprint(f\"Test Accuracy: {cv_output['test_accuracy'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test F1: {cv_output['test_f1'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test ROC AUC: {cv_output['test_roc_auc'].mean():.4f}\")\nprint(\"-\"*33) \n ## >> Get Prediction for Test Data \n y_pred = knn_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head() \n # Random Forest Classifier \n ## >> Train Model and Find Accuracy \n X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)\n\nrf_model = RandomForestClassifier().fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33) \n ## >> Find Hyperparameters \n X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\nrf = RandomForestClassifier()\nrf_params = {\"n_estimators\":[10,50,100,150,200],\n            \"max_depth\":[None,10,20,30,50]}\n\nrf_grid = GridSearchCV(rf,\n                      rf_params,\n                      cv=10,\n                      n_jobs=-1,\n                      verbose=True,\n                      scoring=\"accuracy\").fit(X_train,y_train)\n\nrf_grid.best_params_ \n ## >> Get Accuracy Score \n rf_hp = rf.set_params(**rf_grid.best_params_).fit(X_train,y_train)\n\ny_pred = rf_hp.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33) \n ## >> Get Prediction for Test Data \n y_pred = rf_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head() \n # FINAL: Random Forest Classifier Model >> Accuracy is: 82.84%",
    "code_source": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_validate, GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\npd.set_option(\"display.expand_frame_repr\",False) \n df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ndf.head() \n def dataframe_summary(dataframe, show_value_counts = False):\n    import pandas as pd\n    pd.set_option(\"display.colheader_justify\",\"left\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- SHAPE of Dataset -----------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.shape)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DATA TYPES of Dataset ------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.dtypes)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MEMORY USAGE of Dataset --------------------------------------------------------------------------------------------------------------  \")\n    print(dataframe.memory_usage(deep=True) / (1024 * 1024))\n    print(\"TOTAL >>> \", round((dataframe.memory_usage(deep=True) / (1024 * 1024)).sum(),2), \"\\n (All are in MB)\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MISSING VALUES in Dataset --------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.isnull().sum())\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DESCRIPTIVE Info about Dataset ---------------------------------------------------------------------------------------------------------\")\n    print(dataframe.describe([0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99]).T)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n\n    if show_value_counts:\n        print(\"-------- VALUE COUNTS in Dataset ----------------------------------------------------------------------------------------------------------------\")\n        for col in dataframe.columns:\n            print(dataframe[col].value_counts())\n            print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\") \n dataframe_summary(df) \n df.columns = [col.lower() for col in df.columns]\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.info())\nprint(\"-\"*33)\nprint(df.describe([0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99]).T)\nprint(\"-\"*33)\ndf.head() \n # passeger have a cabin\ndf[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n\n# 'dr in name\ndf[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n\n# 'title' in name\ndf['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# family size\ndf[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n\n# is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\ndf.head() \n df.dtypes \n cat_cols = [\"survived\", \"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \nnum_cols = [\"age\",\"fare\",\"n_family_size\"]\ncar_cols = [\"passengerid\", \"name\",\"ticket\"]\ntarget_label = 'survived'\n\nprint(\"-\"*33)\nprint(f\"Categorical Variables: {cat_cols}\")\nprint(\"-\"*33)\nprint(f\"Numerical Variables: {num_cols}\")\nprint(\"-\"*33)\nprint(f\"Cardinal Variables: {car_cols}\")\nprint(\"-\"*33) \n for col in cat_cols:\n    print(\"-\"*33)\n    print(df[col].value_counts())\n    print(\"-\"*33) \n def categoricals_summary(dataframe, column_name, plot=False):\n    print(pd.DataFrame({column_name: dataframe[column_name].value_counts(),\n                 \"Ratio\": 100 * (dataframe[column_name].value_counts() / len(dataframe))}))\n    print(\"--------------------------------------------------------------------------------------------------------\")\n\n    if plot:\n        sns.countplot(x=dataframe[column_name], data=dataframe)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\")\n#--------------------------------------------------------------------------------------------------------        \ndef numericals_summary(dataframe, column_name, plot = False, plot_bins = 20):\n\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[column_name].describe(quantiles).T)\n    print(\"--------------------------------------------------------------------------------------------------------\")\n    \n    if plot:\n        dataframe[column_name].hist(bins = plot_bins)\n        plt.xlabel(column_name)\n        plt.title(column_name)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\") \n for col in cat_cols:\n    categoricals_summary(df, column_name = col, plot=True) \n for col in num_cols:    \n    numericals_summary(df, col, plot=True) \n def outlier_thresholds(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_info=True):\n    q1_num = dataframe[column_name].quantile(q1)\n    q3_num = dataframe[column_name].quantile(q3)\n    iqr = q3_num - q1_num\n    lower_threshold = q1_num - iqr * 1.5\n    upper_threshold = q3_num + iqr * 1.5\n    if print_info:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"for {column_name}:\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Q1 is {q1}\")\n        print(f\"Q3 is {q3}\")\n        print(f\"Q1 threshold is {q1_num}\")\n        print(f\"Q3 threshold is {q3_num}\")\n        print(f\"IQR is {iqr}\")\n        print(f\"Lower threshold is {lower_threshold}\")\n        print(f\"Upper Threshold is {upper_threshold}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n    return lower_threshold, upper_threshold\n#----------------------------------------------------------------------------------------------------------------------\ndef check_if_outlier_exists(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_details=True):\n    low_limit, up_limit = outlier_thresholds(dataframe, column_name, q1, q3, print_details)\n    if dataframe[((dataframe[column_name] < low_limit) | (dataframe[column_name] > up_limit))].shape[0] > 0:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : Outliers exist based on Q1={q1} and Q3={q3}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Under lower bound: {len(dataframe[dataframe[column_name] < low_limit])} observation of {len(dataframe)}\")\n        print(f\"Above upper bound: {len(dataframe[dataframe[column_name] > up_limit])} observation of {len(dataframe)}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return True\n    else:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : No Outlier based on Q1={q1} and Q3={q3}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return False\n#---------------------------------------------------------------------------------------------------------------------- \n for col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95)) \n def winsorize_with_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n    dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n#---------------------------------------------------------------------------------------------------------------------- \n for col in num_cols:\n    winsorize_with_thresholds(df, col, 0.05, 0.95)\n\nfor col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95)) \n df.isnull().sum() \n # drop columns\nlist_to_drop = ['ticket','name','cabin']\ndf.drop(labels=list_to_drop, axis=1, inplace=True)\n\n# reassign categorical variables\ncat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \ncar_cols = [\"passengerid\"]\ndf.head() \n # fill 'age' according to the classes of 't_title'\ndf[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n#df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\ndf.isnull().sum() \n df[\"age\"] = df[\"age\"].astype(int)\ndf[\"age\"].dtype \n # is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.isnull().sum())\nprint(\"-\"*33)\ndf.head() \n df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\ndf.isnull().sum() \n # find binary variables\nbinary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n\nprint(\"-\"*33)\nprint(f\"Binary Variables: {binary_cols}\")\nprint(\"-\"*33)\ndf.head() \n le = LabelEncoder()\n\nfor col in binary_cols:\n    df[col] =le.fit_transform(df[col])\n    \ndf.head() \n one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\nprint(f\"Categorical variables with multiple classes: {one_hot_cols}\") \n df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\ndf.head() \n scaler = StandardScaler()\ndf[num_cols] = scaler.fit_transform(df[num_cols])\n\ndf.head() \n def prepare_test_data():\n    df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n    df.columns = [col.lower() for col in df.columns]\n    # passeger have a cabin\n    df[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n    # 'dr in name\n    df[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n    # 'title' in name\n    df['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # family size\n    df[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    num_cols = [\"age\",\"fare\",\"n_family_size\"]\n    car_cols = [\"passengerid\", \"name\",\"ticket\"]\n    target_label = ''\n    for col in num_cols:\n        winsorize_with_thresholds(df, col, 0.05, 0.95)\n    # drop columns\n    list_to_drop = ['ticket','name','cabin']\n    df.drop(labels=list_to_drop, axis=1, inplace=True)\n    # reassign categorical variables\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    car_cols = [\"passengerid\"]\n    # fill 'age' according to the classes of 't_title'\n    df[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n    df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\n    df[\"age\"] = df[\"age\"].astype(int)\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    df[\"fare\"].fillna(df.groupby('pclass')[\"fare\"].transform(\"mean\"), inplace=True)\n    df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\n    # find binary variables\n    binary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n    le = LabelEncoder()\n\n    for col in binary_cols:\n        df[col] =le.fit_transform(df[col])\n    one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\n    df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\n    scaler = StandardScaler()\n    df[num_cols] = scaler.fit_transform(df[num_cols])\n    return df \n df_test = prepare_test_data()\ndf_test.head() \n df_train_cols = {col for col in df.columns if col != 'survived'}\ndf_test_cols = {col for col in df_test.columns}\n\nintersect_cols = df_train_cols.intersection(df_test_cols)\n\nintersect_cols = list(intersect_cols)\nintersect_cols \n # split data into depentdent and independent variables\nX = df[intersect_cols]\ny = df[target_label] \n # train model\nknn = KNeighborsClassifier()\n\nknn_params = {\"n_neighbors\": range(2,50)}\n\nknn_grid = GridSearchCV(knn,\n                        knn_params,\n                        cv=5,\n                        n_jobs=-1,\n                        verbose=True).fit(X, y)\n\nknn_grid.best_params_ \n # model with hyperparameters\nknn_hp = knn.set_params(**knn_grid.best_params_).fit(X,y)\n\ncv_output = cross_validate(knn_hp,\n                           X,\n                           y,\n                           cv=10,\n                           scoring=[\"accuracy\",\"f1\",\"roc_auc\"])\nprint(\"-\"*33)\nprint(f\"Test Accuracy: {cv_output['test_accuracy'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test F1: {cv_output['test_f1'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test ROC AUC: {cv_output['test_roc_auc'].mean():.4f}\")\nprint(\"-\"*33) \n y_pred = knn_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head() \n X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)\n\nrf_model = RandomForestClassifier().fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33) \n X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\nrf = RandomForestClassifier()\nrf_params = {\"n_estimators\":[10,50,100,150,200],\n            \"max_depth\":[None,10,20,30,50]}\n\nrf_grid = GridSearchCV(rf,\n                      rf_params,\n                      cv=10,\n                      n_jobs=-1,\n                      verbose=True,\n                      scoring=\"accuracy\").fit(X_train,y_train)\n\nrf_grid.best_params_ \n rf_hp = rf.set_params(**rf_grid.best_params_).fit(X_train,y_train)\n\ny_pred = rf_hp.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33) \n y_pred = rf_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head()",
    "markdown_source": "# TITANIC COMPETITION\n--- \n # Import Libraries \n # Load Dataset \n ## >> Overview \n ## >> Lower All Variable Names and Take an Overview of Dataset \n # Creating New Features \n ## >> Define New Features \n ## >> Define Data Types \n ## >> Explore Data \n # Check Outliers \n ## >> Winsorise thresholds \n # Check for Missing Values \n ## >> Dropping 'cabin' variable as it is mostly empty (77% empty) and other cardinal variables ('passengerid','ticket','name') \n ## >> Fill 'age' variable with the medians considering 'n_title' variable and fill rest with means considering there 'sex' \n ## >> Convert 'age' to int from float \n ## >> Fill 'age' related variables accordingly \n ## >> Fill 'embarked' variable with the median considering 'pclass' variable \n # Label Encoding \n ## >> Find Binary Variables \n ## >> Binary Label Encoding \n ## >> Find categorical variables with multiple classes \n ## >> One-Hot Label Encoding \n # Scaling \n ## >> Apply StandardScaler to numarical values \n # Modelling \n ## >> Prepare Test Data \n ## >> Get only columns exists in both train and test dataset as they do not have the same variables after feature extraction in both datasets \n ## >> Prepare Train Data for models \n # K-Nearest Neighbors Model \n ## >> Train Model \n ## >> Hyperparameters \n ## >> Get Prediction for Test Data \n # Random Forest Classifier \n ## >> Train Model and Find Accuracy \n ## >> Find Hyperparameters \n ## >> Get Accuracy Score \n ## >> Get Prediction for Test Data \n # FINAL: Random Forest Classifier Model >> Accuracy is: 82.84%",
    "n_cells": 76,
    "n_code_cells": 38,
    "n_markdown_cells": 38,
    "n_raw_cells": 0,
    "n_outputs": 38,
    "r_code_cells": 0.5,
    "r_markdown_cells": 0.5,
    "r_raw_cells": 0.0,
    "r_outputs": 1.0,
    "n_exceptions": 0,
    "r_exceptions": 0.0,
    "n_lines": 427,
    "n_lines_code": 388,
    "n_lines_markdown": 39,
    "lines_per_cell": [
        2,
        1,
        11,
        1,
        2,
        1,
        26,
        1,
        1,
        9,
        1,
        1,
        35,
        1,
        1,
        12,
        4,
        1,
        22,
        2,
        2,
        1,
        36,
        2,
        1,
        5,
        5,
        1,
        1,
        1,
        8,
        1,
        4,
        1,
        2,
        1,
        25,
        1,
        2,
        1,
        1,
        7,
        1,
        6,
        1,
        2,
        1,
        2,
        1,
        1,
        4,
        1,
        1,
        72,
        2,
        1,
        7,
        1,
        3,
        1,
        1,
        12,
        1,
        15,
        1,
        5,
        1,
        1,
        8,
        1,
        14,
        1,
        7,
        1,
        5,
        1
    ],
    "lines_per_code_cell": [
        11,
        2,
        26,
        1,
        9,
        35,
        1,
        12,
        4,
        22,
        2,
        2,
        36,
        2,
        5,
        5,
        1,
        8,
        4,
        2,
        25,
        2,
        7,
        6,
        2,
        2,
        4,
        72,
        2,
        7,
        3,
        12,
        15,
        5,
        8,
        14,
        7,
        5
    ],
    "lines_per_markdown_cell": [
        2,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1
    ],
    "ave_lines_per_cell": 5.618421052631579,
    "ave_lines_per_code_cell": 10.210526315789474,
    "ave_lines_per_markdown_cell": 1.0263157894736843,
    "max_lines_per_cell": 72,
    "max_lines_per_code_cell": 72,
    "max_lines_per_markdown_cell": 2,
    "min_lines_per_cell": 1,
    "min_lines_per_code_cell": 1,
    "min_lines_per_markdown_cell": 1,
    "n_chars": 19956,
    "n_chars_code": 18536,
    "n_chars_markdown": 1420,
    "chars_per_cell": [
        25,
        18,
        434,
        14,
        61,
        14,
        2672,
        21,
        62,
        213,
        23,
        25,
        1309,
        23,
        9,
        432,
        90,
        18,
        1298,
        79,
        67,
        16,
        2651,
        81,
        26,
        411,
        154,
        26,
        17,
        126,
        293,
        122,
        225,
        37,
        49,
        46,
        1001,
        76,
        79,
        16,
        27,
        192,
        27,
        98,
        54,
        157,
        28,
        72,
        9,
        46,
        86,
        11,
        23,
        4015,
        44,
        141,
        225,
        35,
        98,
        27,
        17,
        287,
        21,
        517,
        34,
        94,
        26,
        35,
        278,
        26,
        441,
        24,
        193,
        34,
        93,
        62
    ],
    "chars_per_code_cell": [
        434,
        61,
        2672,
        21,
        213,
        1309,
        9,
        432,
        90,
        1298,
        79,
        67,
        2651,
        81,
        411,
        154,
        17,
        293,
        225,
        49,
        1001,
        79,
        192,
        98,
        157,
        72,
        86,
        4015,
        44,
        225,
        98,
        287,
        517,
        94,
        278,
        441,
        193,
        93
    ],
    "chars_per_markdown_cell": [
        25,
        18,
        14,
        14,
        62,
        23,
        25,
        23,
        18,
        16,
        26,
        26,
        126,
        122,
        37,
        46,
        76,
        16,
        27,
        27,
        54,
        28,
        9,
        46,
        11,
        23,
        141,
        35,
        27,
        17,
        21,
        34,
        26,
        35,
        26,
        24,
        34,
        62
    ],
    "ave_chars_per_line": 46.73536299765808,
    "ave_chars_per_cell": 262.57894736842104,
    "ave_chars_per_code_cell": 487.7894736842105,
    "ave_chars_per_markdown_cell": 37.36842105263158,
    "max_chars_per_cell": 4015,
    "max_chars_per_code_cell": 4015,
    "max_chars_per_markdownell": 141,
    "min_chars_per_cell": 9,
    "min_chars_per_code_cell": 9,
    "min_chars_per_markdown_cell": 9,
    "r_lines_code": 0.9086651053864169,
    "r_lines_markdown": 0.09133489461358314,
    "r_chars_markdown": 0.07115654439767488,
    "r_chars_code": 0.9288434556023251,
    "all_cells": [
        {
            "source": "# TITANIC COMPETITION\n---",
            "mc_idx": 0,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Import Libraries",
            "mc_idx": 1,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_validate, GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\npd.set_option(\"display.expand_frame_repr\",False)",
            "mc_idx": 2,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.02197802197802198,
                "Data_Transform": 0.054945054945054944,
                "Model_Train": 0.07692307692307693,
                "Model_Evaluation": 0.03296703296703297,
                "Model_Interpretation": 0.01098901098901099,
                "Hyperparameter_Tuning": 0.04395604395604396,
                "Visualization": 0.02197802197802198,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 9
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    "labelencoder": 2,
                    "standardscaler": 1,
                    ".exp": 1,
                    ".mod": 1
                },
                "Model_Train": {
                    "train_test_split": 1,
                    "cross_validate": 1,
                    "model": 1,
                    "randomforestclassifier": 2,
                    "model_selection": 1,
                    "kneighborsclassifier": 1
                },
                "Model_Evaluation": {
                    "accuracy_score": 2,
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "gridsearchcv": 3,
                    "train_test_split": 1
                },
                "Visualization": {
                    "matplotlib": 1,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 2,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "# Load Dataset",
            "mc_idx": 3,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ndf.head()",
            "mc_idx": 4,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.75,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   PassengerId  Survived  Pclass Name                                               Sex      Age   SibSp  Parch Ticket             Fare    Cabin Embarked\n0  1            0         3                                 Braund, Mr. Owen Harris    male  22.0  1      0             A/5 21171   7.2500   NaN  S      \n1  2            1         1       Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0  1      0              PC 17599  71.2833   C85  C      \n2  3            1         3                                  Heikkinen, Miss. Laina  female  26.0  0      0      STON/O2. 3101282   7.9250   NaN  S      \n3  4            1         1            Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0  1      0                113803  53.1000  C123  S      \n4  5            0         3                                Allen, Mr. William Henry    male  35.0  0      0                373450   8.0500   NaN  S      "
                    ]
                },
                "mc_idx": 4,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Overview",
            "mc_idx": 5,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "def dataframe_summary(dataframe, show_value_counts = False):\n    import pandas as pd\n    pd.set_option(\"display.colheader_justify\",\"left\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- SHAPE of Dataset -----------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.shape)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DATA TYPES of Dataset ------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.dtypes)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MEMORY USAGE of Dataset --------------------------------------------------------------------------------------------------------------  \")\n    print(dataframe.memory_usage(deep=True) / (1024 * 1024))\n    print(\"TOTAL >>> \", round((dataframe.memory_usage(deep=True) / (1024 * 1024)).sum(),2), \"\\n (All are in MB)\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MISSING VALUES in Dataset --------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.isnull().sum())\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DESCRIPTIVE Info about Dataset ---------------------------------------------------------------------------------------------------------\")\n    print(dataframe.describe([0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99]).T)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n\n    if show_value_counts:\n        print(\"-------- VALUE COUNTS in Dataset ----------------------------------------------------------------------------------------------------------------\")\n        for col in dataframe.columns:\n            print(dataframe[col].value_counts())\n            print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")",
            "mc_idx": 6,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.6470588235294118,
                "Data_Extraction": 0.35294117647058826,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.17647058823529413,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10,
                    ".set_option": 1
                },
                "Data_Extraction": {
                    "dataset": 6
                },
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "value_counts()": 1,
                    "missing values": 1,
                    "head": 1,
                    "info": 1,
                    "describe": 1,
                    "dtypes": 1,
                    "columns": 1,
                    "shape": 2,
                    "memory_usage": 2,
                    ".describe": 1,
                    ".isnull": 1,
                    ".sum": 2,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2,
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "dataframe_summary(df)",
            "mc_idx": 7,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- SHAPE of Dataset -----------------------------------------------------------------------------------------------------------------------\n(891, 12)\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- DATA TYPES of Dataset ------------------------------------------------------------------------------------------------------------------\nPassengerId      int64\nSurvived         int64\nPclass           int64\nName            object\nSex             object\nAge            float64\nSibSp            int64\nParch            int64\nTicket          object\nFare           float64\nCabin           object\nEmbarked        object\ndtype: object\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- MEMORY USAGE of Dataset --------------------------------------------------------------------------------------------------------------  \nIndex          0.000122\nPassengerId    0.006798\nSurvived       0.006798\nPclass         0.006798\nName           0.071347\nSex            0.052432\nAge            0.006798\nSibSp          0.006798\nParch          0.006798\nTicket         0.054171\nFare           0.006798\nCabin          0.032753\nEmbarked       0.049234\ndtype: float64\nTOTAL >>>  0.31 \n (All are in MB)\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- MISSING VALUES in Dataset --------------------------------------------------------------------------------------------------------------\nPassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- DESCRIPTIVE Info about Dataset ---------------------------------------------------------------------------------------------------------\n             count  mean        std         min   1%   5%      25%       50%       75%    95%        99%        max     \nPassengerId  891.0  446.000000  257.353842  1.00  9.9  45.500  223.5000  446.0000  668.5  846.50000  882.10000  891.0000\nSurvived     891.0    0.383838    0.486592  0.00  0.0   0.000    0.0000    0.0000    1.0    1.00000    1.00000    1.0000\nPclass       891.0    2.308642    0.836071  1.00  1.0   1.000    2.0000    3.0000    3.0    3.00000    3.00000    3.0000\nAge          714.0   29.699118   14.526497  0.42  1.0   4.000   20.1250   28.0000   38.0   56.00000   65.87000   80.0000\nSibSp        891.0    0.523008    1.102743  0.00  0.0   0.000    0.0000    0.0000    1.0    3.00000    5.00000    8.0000\nParch        891.0    0.381594    0.806057  0.00  0.0   0.000    0.0000    0.0000    0.0    2.00000    4.00000    6.0000\nFare         891.0   32.204208   49.693429  0.00  0.0   7.225    7.9104   14.4542   31.0  112.07915  249.00622  512.3292\n-------------------------------------------------------------------------------------------------------------------------------------------------\n"
                    ]
                },
                "mc_idx": 7,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Lower All Variable Names and Take an Overview of Dataset",
            "mc_idx": 8,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df.columns = [col.lower() for col in df.columns]\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.info())\nprint(\"-\"*33)\nprint(df.describe([0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99]).T)\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 9,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.08333333333333333,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    ".info(": 1,
                    ".head(": 1,
                    "head": 1,
                    "info": 1,
                    "describe": 1,
                    "columns": 2,
                    "shape": 1,
                    ".describe": 1,
                    ".info": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\n(891, 12)\n---------------------------------\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   passengerid  891 non-null    int64  \n 1   survived     891 non-null    int64  \n 2   pclass       891 non-null    int64  \n 3   name         891 non-null    object \n 4   sex          891 non-null    object \n 5   age          714 non-null    float64\n 6   sibsp        891 non-null    int64  \n 7   parch        891 non-null    int64  \n 8   ticket       891 non-null    object \n 9   fare         891 non-null    float64\n 10  cabin        204 non-null    object \n 11  embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n---------------------------------\n             count  mean        std         min   1%   5%      10%    25%       50%       75%    90%       95%        99%        max     \npassengerid  891.0  446.000000  257.353842  1.00  9.9  45.500  90.00  223.5000  446.0000  668.5  802.0000  846.50000  882.10000  891.0000\nsurvived     891.0    0.383838    0.486592  0.00  0.0   0.000   0.00    0.0000    0.0000    1.0    1.0000    1.00000    1.00000    1.0000\npclass       891.0    2.308642    0.836071  1.00  1.0   1.000   1.00    2.0000    3.0000    3.0    3.0000    3.00000    3.00000    3.0000\nage          714.0   29.699118   14.526497  0.42  1.0   4.000  14.00   20.1250   28.0000   38.0   50.0000   56.00000   65.87000   80.0000\nsibsp        891.0    0.523008    1.102743  0.00  0.0   0.000   0.00    0.0000    0.0000    1.0    1.0000    3.00000    5.00000    8.0000\nparch        891.0    0.381594    0.806057  0.00  0.0   0.000   0.00    0.0000    0.0000    0.0    2.0000    2.00000    4.00000    6.0000\nfare         891.0   32.204208   49.693429  0.00  0.0   7.225   7.55    7.9104   14.4542   31.0   77.9583  112.07915  249.00622  512.3292\n---------------------------------\n",
                        "   passengerid  survived  pclass name                                               sex      age   sibsp  parch ticket             fare    cabin embarked\n0  1            0         3                                 Braund, Mr. Owen Harris    male  22.0  1      0             A/5 21171   7.2500   NaN  S      \n1  2            1         1       Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0  1      0              PC 17599  71.2833   C85  C      \n2  3            1         3                                  Heikkinen, Miss. Laina  female  26.0  0      0      STON/O2. 3101282   7.9250   NaN  S      \n3  4            1         1            Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0  1      0                113803  53.1000  C123  S      \n4  5            0         3                                Allen, Mr. William Henry    male  35.0  0      0                373450   8.0500   NaN  S      "
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 1
            }
        },
        {
            "source": "# Creating New Features",
            "mc_idx": 10,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Define New Features",
            "mc_idx": 11,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# passeger have a cabin\ndf[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n\n# 'dr in name\ndf[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n\n# 'title' in name\ndf['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# family size\ndf[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n\n# is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 12,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.25,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "extract": 1,
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "shape": 2,
                    "size": 2,
                    ".head": 1,
                    ".notnull": 1
                },
                "Data_Transform": {
                    ".apply(": 1,
                    ".astype(": 1,
                    ".split": 1,
                    ".apply": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    5,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nNew Shape of Dataset:\n---------------------------------\n(891, 19)\n---------------------------------\n",
                        "   passengerid  survived  pclass name                                               sex      age   sibsp  parch ticket             fare    cabin embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3                                 Braund, Mr. Owen Harris    male  22.0  1      0             A/5 21171   7.2500   NaN  S        0            0            Mr    2               No        Mature      Mature male\n1  2            1         1       Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0  1      0              PC 17599  71.2833   C85  C        1            0           Mrs    2               No        Mature    Mature female\n2  3            1         3                                  Heikkinen, Miss. Laina  female  26.0  0      0      STON/O2. 3101282   7.9250   NaN  S        0            0          Miss    1              Yes        Mature    Mature female\n3  4            1         1            Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0  1      0                113803  53.1000  C123  S        1            0           Mrs    2               No        Mature    Mature female\n4  5            0         3                                Allen, Mr. William Henry    male  35.0  0      0                373450   8.0500   NaN  S        0            0            Mr    1              Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 1
            }
        },
        {
            "source": "## >> Define Data Types",
            "mc_idx": 13,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df.dtypes",
            "mc_idx": 14,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "dtypes": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid        int64\nsurvived           int64\npclass             int64\nname              object\nsex               object\nage              float64\nsibsp              int64\nparch              int64\nticket            object\nfare             float64\ncabin             object\nembarked          object\nn_has_cabin        int64\nn_name_dr          int64\nn_title           object\nn_family_size      int64\nn_is_alone        object\nn_age_cat         object\nn_sex_cat         object\ndtype: object"
                    ]
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "cat_cols = [\"survived\", \"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \nnum_cols = [\"age\",\"fare\",\"n_family_size\"]\ncar_cols = [\"passengerid\", \"name\",\"ticket\"]\ntarget_label = 'survived'\n\nprint(\"-\"*33)\nprint(f\"Categorical Variables: {cat_cols}\")\nprint(\"-\"*33)\nprint(f\"Numerical Variables: {num_cols}\")\nprint(\"-\"*33)\nprint(f\"Cardinal Variables: {car_cols}\")\nprint(\"-\"*33)",
            "mc_idx": 15,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 3
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nCategorical Variables: ['survived', 'pclass', 'sex', 'sibsp', 'parch', 'cabin', 'embarked', 'n_name_dr', 'n_title', 'n_is_alone', 'n_age_cat', 'n_sex_cat']\n---------------------------------\nNumerical Variables: ['age', 'fare', 'n_family_size']\n---------------------------------\nCardinal Variables: ['passengerid', 'name', 'ticket']\n---------------------------------\n"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "for col in cat_cols:\n    print(\"-\"*33)\n    print(df[col].value_counts())\n    print(\"-\"*33)",
            "mc_idx": 16,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    8,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nsurvived\n0    549\n1    342\nName: count, dtype: int64\n---------------------------------\n---------------------------------\npclass\n3    491\n1    216\n2    184\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nsex\nmale      577\nfemale    314\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nsibsp\n0    608\n1    209\n2     28\n4     18\n3     16\n8      7\n5      5\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nparch\n0    678\n1    118\n2     80\n5      5\n3      5\n4      4\n6      1\nName: count, dtype: int64\n---------------------------------\n---------------------------------\ncabin\nB96 B98        4\nG6             4\nC23 C25 C27    4\nC22 C26        3\nF33            3\n              ..\nE34            1\nC7             1\nC54            1\nE36            1\nC148           1\nName: count, Length: 147, dtype: int64\n---------------------------------\n---------------------------------\nembarked\nS    644\nC    168\nQ     77\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_name_dr\n0    881\n1     10\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_title\nMr          517\nMiss        182\nMrs         125\nMaster       40\nDr            7\nRev           6\nMlle          2\nMajor         2\nCol           2\nCountess      1\nCapt          1\nMs            1\nSir           1\nLady          1\nMme           1\nDon           1\nJonkheer      1\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_is_alone\nYes    537\nNo     354\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_age_cat\nMature    562\nYoung     113\nSenior     39\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_sex_cat\nMature male      281\nMature female    155\nYoung male       120\nYoung female      84\nSenior male       52\nSenior female     22\nName: count, dtype: int64\n---------------------------------\n"
                    ]
                },
                "mc_idx": 16,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Explore Data",
            "mc_idx": 17,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "def categoricals_summary(dataframe, column_name, plot=False):\n    print(pd.DataFrame({column_name: dataframe[column_name].value_counts(),\n                 \"Ratio\": 100 * (dataframe[column_name].value_counts() / len(dataframe))}))\n    print(\"--------------------------------------------------------------------------------------------------------\")\n\n    if plot:\n        sns.countplot(x=dataframe[column_name], data=dataframe)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\")\n#--------------------------------------------------------------------------------------------------------        \ndef numericals_summary(dataframe, column_name, plot = False, plot_bins = 20):\n\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[column_name].describe(quantiles).T)\n    print(\"--------------------------------------------------------------------------------------------------------\")\n    \n    if plot:\n        dataframe[column_name].hist(bins = plot_bins)\n        plt.xlabel(column_name)\n        plt.title(column_name)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\")",
            "mc_idx": 18,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2222222222222222,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.2222222222222222,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.2222222222222222,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2222222222222222,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "value_counts()": 2,
                    ".hist(": 1,
                    "sns.": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".value_counts": 2
                },
                "Data_Transform": {
                    "tile": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".hist(": 1,
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 18,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "for col in cat_cols:\n    categoricals_summary(df, column_name = col, plot=True)",
            "mc_idx": 19,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    24,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          survived  Ratio    \nsurvived                     \n0         549       61.616162\n1         342       38.383838\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n        pclass  Ratio    \npclass                   \n3       491     55.106622\n1       216     24.242424\n2       184     20.650954\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n        sex  Ratio    \nsex                   \nmale    577  64.758698\nfemale  314  35.241302\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n       sibsp  Ratio    \nsibsp                  \n0      608    68.237935\n1      209    23.456790\n2       28     3.142536\n4       18     2.020202\n3       16     1.795735\n8        7     0.785634\n5        5     0.561167\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n       parch  Ratio    \nparch                  \n0      678    76.094276\n1      118    13.243547\n2       80     8.978676\n5        5     0.561167\n3        5     0.561167\n4        4     0.448934\n6        1     0.112233\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n             cabin  Ratio   \ncabin                       \nB96 B98      4      0.448934\nG6           4      0.448934\nC23 C25 C27  4      0.448934\nC22 C26      3      0.336700\nF33          3      0.336700\n...            ...       ...\nE34          1      0.112233\nC7           1      0.112233\nC54          1      0.112233\nE36          1      0.112233\nC148         1      0.112233\n\n[147 rows x 2 columns]\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n          embarked  Ratio    \nembarked                     \nS         644       72.278339\nC         168       18.855219\nQ          77        8.641975\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n           n_name_dr  Ratio    \nn_name_dr                      \n0          881        98.877666\n1           10         1.122334\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n          n_title  Ratio    \nn_title                     \nMr        517      58.024691\nMiss      182      20.426487\nMrs       125      14.029181\nMaster     40       4.489338\nDr          7       0.785634\nRev         6       0.673401\nMlle        2       0.224467\nMajor       2       0.224467\nCol         2       0.224467\nCountess    1       0.112233\nCapt        1       0.112233\nMs          1       0.112233\nSir         1       0.112233\nLady        1       0.112233\nMme         1       0.112233\nDon         1       0.112233\nJonkheer    1       0.112233\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n            n_is_alone  Ratio   \nn_is_alone                      \nYes         537         60.26936\nNo          354         39.73064\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n           n_age_cat  Ratio    \nn_age_cat                      \nMature     562        63.075196\nYoung      113        12.682379\nSenior      39         4.377104\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n               n_sex_cat  Ratio    \nn_sex_cat                          \nMature male    281        31.537598\nMature female  155        17.396184\nYoung male     120        13.468013\nYoung female    84         9.427609\nSenior male     52         5.836139\nSenior female   22         2.469136\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n"
                    ]
                },
                "mc_idx": 19,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 24
            }
        },
        {
            "source": "for col in num_cols:    \n    numericals_summary(df, col, plot=True)",
            "mc_idx": 20,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    6,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "count    714.000000\nmean      29.699118\nstd       14.526497\nmin        0.420000\n5%         4.000000\n10%       14.000000\n20%       19.000000\n30%       22.000000\n40%       25.000000\n50%       28.000000\n60%       31.800000\n70%       36.000000\n80%       41.000000\n90%       50.000000\n95%       56.000000\n99%       65.870000\nmax       80.000000\nName: age, dtype: float64\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\ncount    891.000000\nmean      32.204208\nstd       49.693429\nmin        0.000000\n5%         7.225000\n10%        7.550000\n20%        7.854200\n30%        8.050000\n40%       10.500000\n50%       14.454200\n60%       21.679200\n70%       27.000000\n80%       39.687500\n90%       77.958300\n95%      112.079150\n99%      249.006220\nmax      512.329200\nName: fare, dtype: float64\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\ncount    891.000000\nmean       1.904602\nstd        1.613459\nmin        1.000000\n5%         1.000000\n10%        1.000000\n20%        1.000000\n30%        1.000000\n40%        1.000000\n50%        1.000000\n60%        1.000000\n70%        2.000000\n80%        3.000000\n90%        4.000000\n95%        6.000000\n99%        8.000000\nmax       11.000000\nName: n_family_size, dtype: float64\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n"
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 6
            }
        },
        {
            "source": "# Check Outliers",
            "mc_idx": 21,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "def outlier_thresholds(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_info=True):\n    q1_num = dataframe[column_name].quantile(q1)\n    q3_num = dataframe[column_name].quantile(q3)\n    iqr = q3_num - q1_num\n    lower_threshold = q1_num - iqr * 1.5\n    upper_threshold = q3_num + iqr * 1.5\n    if print_info:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"for {column_name}:\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Q1 is {q1}\")\n        print(f\"Q3 is {q3}\")\n        print(f\"Q1 threshold is {q1_num}\")\n        print(f\"Q3 threshold is {q3_num}\")\n        print(f\"IQR is {iqr}\")\n        print(f\"Lower threshold is {lower_threshold}\")\n        print(f\"Upper Threshold is {upper_threshold}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n    return lower_threshold, upper_threshold\n#----------------------------------------------------------------------------------------------------------------------\ndef check_if_outlier_exists(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_details=True):\n    low_limit, up_limit = outlier_thresholds(dataframe, column_name, q1, q3, print_details)\n    if dataframe[((dataframe[column_name] < low_limit) | (dataframe[column_name] > up_limit))].shape[0] > 0:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : Outliers exist based on Q1={q1} and Q3={q3}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Under lower bound: {len(dataframe[dataframe[column_name] < low_limit])} observation of {len(dataframe)}\")\n        print(f\"Above upper bound: {len(dataframe[dataframe[column_name] > up_limit])} observation of {len(dataframe)}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return True\n    else:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : No Outlier based on Q1={q1} and Q3={q3}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return False\n#----------------------------------------------------------------------------------------------------------------------",
            "mc_idx": 22,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.16666666666666666,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "outliers": 1,
                    "tail": 2,
                    "info": 2,
                    "shape": 1
                },
                "Data_Transform": {
                    "tile": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "for col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95))",
            "mc_idx": 23,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    13,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 4.0\nQ3 threshold is 56.0\nIQR is 52.0\nLower threshold is -74.0\nUpper Threshold is 134.0\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nage : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nage False\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.225\nQ3 threshold is 112.07915\nIQR is 104.85415\nLower threshold is -150.056225\nUpper Threshold is 269.360375\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfare : Outliers exist based on Q1=0.05 and Q3=0.95\n-----------------------------------------------------------------------------------------------------------\nUnder lower bound: 0 observation of 891\nAbove upper bound: 3 observation of 891\n-------------------------------------------------------------------------------------------------------\nfare True\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 6.0\nIQR is 5.0\nLower threshold is -6.5\nUpper Threshold is 13.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nn_family_size : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nn_family_size False\n"
                    ]
                },
                "mc_idx": 23,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Winsorise thresholds",
            "mc_idx": 24,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "def winsorize_with_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n    dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n#----------------------------------------------------------------------------------------------------------------------",
            "mc_idx": 25,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    14,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "for col in num_cols:\n    winsorize_with_thresholds(df, col, 0.05, 0.95)\n\nfor col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95))",
            "mc_idx": 26,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 4.0\nQ3 threshold is 56.0\nIQR is 52.0\nLower threshold is -74.0\nUpper Threshold is 134.0\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.225\nQ3 threshold is 112.07915\nIQR is 104.85415\nLower threshold is -150.056225\nUpper Threshold is 269.360375\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 6.0\nIQR is 5.0\nLower threshold is -6.5\nUpper Threshold is 13.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 4.0\nQ3 threshold is 56.0\nIQR is 52.0\nLower threshold is -74.0\nUpper Threshold is 134.0\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nage : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nage False\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.225\nQ3 threshold is 112.07915\nIQR is 104.85415\nLower threshold is -150.056225\nUpper Threshold is 269.360375\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfare : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nfare False\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 6.0\nIQR is 5.0\nLower threshold is -6.5\nUpper Threshold is 13.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nn_family_size : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nn_family_size False\n"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "# Check for Missing Values",
            "mc_idx": 27,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df.isnull().sum()",
            "mc_idx": 28,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid        0\nsurvived           0\npclass             0\nname               0\nsex                0\nage              177\nsibsp              0\nparch              0\nticket             0\nfare               0\ncabin            687\nembarked           2\nn_has_cabin        0\nn_name_dr          0\nn_title            0\nn_family_size      0\nn_is_alone         0\nn_age_cat        177\nn_sex_cat        177\ndtype: int64"
                    ]
                },
                "mc_idx": 28,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Dropping 'cabin' variable as it is mostly empty (77% empty) and other cardinal variables ('passengerid','ticket','name')",
            "mc_idx": 29,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# drop columns\nlist_to_drop = ['ticket','name','cabin']\ndf.drop(labels=list_to_drop, axis=1, inplace=True)\n\n# reassign categorical variables\ncat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \ncar_cols = [\"passengerid\"]\ndf.head()",
            "mc_idx": 30,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.25,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  pclass sex      age   sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3         male  22.0  1      0       7.2500  S        0            0            Mr    2.0             No        Mature      Mature male\n1  2            1         1       female  38.0  1      0      71.2833  C        1            0           Mrs    2.0             No        Mature    Mature female\n2  3            1         3       female  26.0  0      0       7.9250  S        0            0          Miss    1.0            Yes        Mature    Mature female\n3  4            1         1       female  35.0  1      0      53.1000  S        1            0           Mrs    2.0             No        Mature    Mature female\n4  5            0         3         male  35.0  0      0       8.0500  S        0            0            Mr    1.0            Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 30,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Fill 'age' variable with the medians considering 'n_title' variable and fill rest with means considering there 'sex'",
            "mc_idx": 31,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# fill 'age' according to the classes of 't_title'\ndf[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n#df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\ndf.isnull().sum()",
            "mc_idx": 32,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.625,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".isnull": 1,
                    ".sum": 1,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    ".fillna(": 2,
                    "transform": 2,
                    ".fillna": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    18,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid        0\nsurvived           0\npclass             0\nsex                0\nage                0\nsibsp              0\nparch              0\nfare               0\nembarked           2\nn_has_cabin        0\nn_name_dr          0\nn_title            0\nn_family_size      0\nn_is_alone         0\nn_age_cat        177\nn_sex_cat        177\ndtype: int64"
                    ]
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Convert 'age' to int from float",
            "mc_idx": 33,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df[\"age\"] = df[\"age\"].astype(int)\ndf[\"age\"].dtype",
            "mc_idx": 34,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    19,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "dtype('int64')"
                    ]
                },
                "mc_idx": 34,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Fill 'age' related variables accordingly",
            "mc_idx": 35,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.isnull().sum())\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 36,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.125,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".head(": 1,
                    "head": 1,
                    "shape": 2,
                    ".head": 1,
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    20,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nNew Shape of Dataset:\n---------------------------------\n(891, 16)\n---------------------------------\npassengerid      0\nsurvived         0\npclass           0\nsex              0\nage              0\nsibsp            0\nparch            0\nfare             0\nembarked         2\nn_has_cabin      0\nn_name_dr        0\nn_title          0\nn_family_size    0\nn_is_alone       0\nn_age_cat        0\nn_sex_cat        0\ndtype: int64\n---------------------------------\n",
                        "   passengerid  survived  pclass sex      age  sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3         male  22   1      0       7.2500  S        0            0            Mr    2.0             No        Mature      Mature male\n1  2            1         1       female  38   1      0      71.2833  C        1            0           Mrs    2.0             No        Mature    Mature female\n2  3            1         3       female  26   0      0       7.9250  S        0            0          Miss    1.0            Yes        Mature    Mature female\n3  4            1         1       female  35   1      0      53.1000  S        1            0           Mrs    2.0             No        Mature    Mature female\n4  5            0         3         male  35   0      0       8.0500  S        0            0            Mr    1.0            Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 36,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 1
            }
        },
        {
            "source": "## >> Fill 'embarked' variable with the median considering 'pclass' variable",
            "mc_idx": 37,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\ndf.isnull().sum()",
            "mc_idx": 38,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.75,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".isnull": 1,
                    ".sum": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    ".fillna(": 1,
                    ".fillna": 1,
                    ".mod": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    21,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid      0\nsurvived         0\npclass           0\nsex              0\nage              0\nsibsp            0\nparch            0\nfare             0\nembarked         0\nn_has_cabin      0\nn_name_dr        0\nn_title          0\nn_family_size    0\nn_is_alone       0\nn_age_cat        0\nn_sex_cat        0\ndtype: int64"
                    ]
                },
                "mc_idx": 38,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "# Label Encoding",
            "mc_idx": 39,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Find Binary Variables",
            "mc_idx": 40,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# find binary variables\nbinary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n\nprint(\"-\"*33)\nprint(f\"Binary Variables: {binary_cols}\")\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 41,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.4,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1,
                    ".nunique": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    22,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nBinary Variables: ['sex', 'n_name_dr', 'n_is_alone']\n---------------------------------\n",
                        "   passengerid  survived  pclass sex      age  sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3         male  22   1      0       7.2500  S        0            0            Mr    2.0             No        Mature      Mature male\n1  2            1         1       female  38   1      0      71.2833  C        1            0           Mrs    2.0             No        Mature    Mature female\n2  3            1         3       female  26   0      0       7.9250  S        0            0          Miss    1.0            Yes        Mature    Mature female\n3  4            1         1       female  35   1      0      53.1000  S        1            0           Mrs    2.0             No        Mature    Mature female\n4  5            0         3         male  35   0      0       8.0500  S        0            0            Mr    1.0            Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 41,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 1
            }
        },
        {
            "source": "## >> Binary Label Encoding",
            "mc_idx": 42,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "le = LabelEncoder()\n\nfor col in binary_cols:\n    df[col] =le.fit_transform(df[col])\n    \ndf.head()",
            "mc_idx": 43,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.75,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "labelencoder": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    23,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  pclass  sex  age  sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size  n_is_alone n_age_cat n_sex_cat     \n0  1            0         3       1    22   1      0       7.2500  S        0            0            Mr    2.0            0           Mature      Mature male\n1  2            1         1       0    38   1      0      71.2833  C        1            0           Mrs    2.0            0           Mature    Mature female\n2  3            1         3       0    26   0      0       7.9250  S        0            0          Miss    1.0            1           Mature    Mature female\n3  4            1         1       0    35   1      0      53.1000  S        1            0           Mrs    2.0            0           Mature    Mature female\n4  5            0         3       1    35   0      0       8.0500  S        0            0            Mr    1.0            1           Mature      Mature male"
                    ]
                },
                "mc_idx": 43,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 23,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Find categorical variables with multiple classes",
            "mc_idx": 44,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\nprint(f\"Categorical variables with multiple classes: {one_hot_cols}\")",
            "mc_idx": 45,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.5,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "columns": 1,
                    ".nunique": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    24,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Categorical variables with multiple classes: ['pclass', 'sibsp', 'parch', 'embarked', 'n_title', 'n_age_cat', 'n_sex_cat']\n"
                    ]
                },
                "mc_idx": 45,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 24,
                "o_idx": 0
            }
        },
        {
            "source": "## >> One-Hot Label Encoding",
            "mc_idx": 46,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\ndf.head()",
            "mc_idx": 47,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    ".get_dummies": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    25,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  sex  age  fare     n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  ...  n_title_Ms  n_title_Rev  n_title_Sir  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male\n0  1            0         1    22    7.2500  0            0          2.0            0           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n1  2            1         0    38   71.2833  1            0          2.0            0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n2  3            1         0    26    7.9250  0            0          1.0            1           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n3  4            1         0    35   53.1000  1            0          2.0            0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n4  5            0         1    35    8.0500  0            0          1.0            1           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n\n[5 rows x 48 columns]"
                    ]
                },
                "mc_idx": 47,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 25,
                "o_idx": 0
            }
        },
        {
            "source": "# Scaling",
            "mc_idx": 48,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Apply StandardScaler to numarical values",
            "mc_idx": 49,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "scaler = StandardScaler()\ndf[num_cols] = scaler.fit_transform(df[num_cols])\n\ndf.head()",
            "mc_idx": 50,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "standardscaler": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    26,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  ...  n_title_Ms  n_title_Rev  n_title_Sir  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male\n0  1            0         1   -0.555502 -0.556776  0            0          0.059160       0           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n1  2            1         0    0.650228  0.920354  1            0          0.059160       0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n2  3            1         0   -0.254069 -0.541205  0            0         -0.560975       1           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n3  4            1         0    0.424154  0.500899  1            0          0.059160       0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n4  5            0         1    0.424154 -0.538322  0            0         -0.560975       1           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n\n[5 rows x 48 columns]"
                    ]
                },
                "mc_idx": 50,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 26,
                "o_idx": 0
            }
        },
        {
            "source": "# Modelling",
            "mc_idx": 51,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Prepare Test Data",
            "mc_idx": 52,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "def prepare_test_data():\n    df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n    df.columns = [col.lower() for col in df.columns]\n    # passeger have a cabin\n    df[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n    # 'dr in name\n    df[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n    # 'title' in name\n    df['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # family size\n    df[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    num_cols = [\"age\",\"fare\",\"n_family_size\"]\n    car_cols = [\"passengerid\", \"name\",\"ticket\"]\n    target_label = ''\n    for col in num_cols:\n        winsorize_with_thresholds(df, col, 0.05, 0.95)\n    # drop columns\n    list_to_drop = ['ticket','name','cabin']\n    df.drop(labels=list_to_drop, axis=1, inplace=True)\n    # reassign categorical variables\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    car_cols = [\"passengerid\"]\n    # fill 'age' according to the classes of 't_title'\n    df[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n    df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\n    df[\"age\"] = df[\"age\"].astype(int)\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    df[\"fare\"].fillna(df.groupby('pclass')[\"fare\"].transform(\"mean\"), inplace=True)\n    df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\n    # find binary variables\n    binary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n    le = LabelEncoder()\n\n    for col in binary_cols:\n        df[col] =le.fit_transform(df[col])\n    one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\n    df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\n    scaler = StandardScaler()\n    df[num_cols] = scaler.fit_transform(df[num_cols])\n    return df",
            "mc_idx": 53,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.06896551724137931,
                "Data_Extraction": 0.1724137931034483,
                "Exploratory_Data_Analysis": 0.5517241379310345,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 2
                },
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2,
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {
                    "columns": 6,
                    "size": 3,
                    ".nunique": 2,
                    ".notnull": 1,
                    ".mode": 1,
                    ".groupby": 3
                },
                "Data_Transform": {
                    ".groupby(": 3,
                    ".fillna(": 4,
                    ".apply(": 1,
                    "fit_transform": 2,
                    "transform": 5,
                    ".astype(": 2,
                    "labelencoder": 2,
                    "standardscaler": 1,
                    ".split": 1,
                    ".drop": 1,
                    ".fillna": 4,
                    ".apply": 1,
                    ".get_dummies": 1,
                    ".mod": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    27,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 53,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 27,
                "o_idx": 0
            }
        },
        {
            "source": "df_test = prepare_test_data()\ndf_test.head()",
            "mc_idx": 54,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    28,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 8.0\nQ3 threshold is 57.0\nIQR is 49.0\nLower threshold is -65.5\nUpper Threshold is 130.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.2292\nQ3 threshold is 151.55\nIQR is 144.32080000000002\nLower threshold is -209.25200000000004\nUpper Threshold is 368.0312\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 4.0\nIQR is 3.0\nLower threshold is -3.5\nUpper Threshold is 8.5\n-----------------------------------------------------------------------------------------------------------\n",
                        "   passengerid  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  pclass_3  ...  n_title_Mrs  n_title_Ms  n_title_Rev  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male\n0  892          1    0.341431 -0.514781  0            0         -0.588285       1           False      True     ...  False        False       False        False             False             True                  False                    False                  False                   False               \n1  893          0    1.343772 -0.530361  0            0          0.132839       0           False      True     ...   True        False       False        False             False            False                  False                    False                  False                   False               \n2  894          1    2.500320 -0.479865  0            0         -0.588285       1            True     False     ...  False        False       False         True             False            False                  False                     True                  False                   False               \n3  895          1   -0.198292 -0.499124  0            0         -0.588285       1           False      True     ...  False        False       False        False             False             True                  False                    False                  False                   False               \n4  896          0   -0.583808 -0.431012  0            0          0.853962       0           False      True     ...   True        False       False        False             False            False                  False                    False                  False                   False               \n\n[5 rows x 40 columns]"
                    ]
                },
                "mc_idx": 54,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 28,
                "o_idx": 1
            }
        },
        {
            "source": "## >> Get only columns exists in both train and test dataset as they do not have the same variables after feature extraction in both datasets",
            "mc_idx": 55,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "df_train_cols = {col for col in df.columns if col != 'survived'}\ndf_test_cols = {col for col in df_test.columns}\n\nintersect_cols = df_train_cols.intersection(df_test_cols)\n\nintersect_cols = list(intersect_cols)\nintersect_cols",
            "mc_idx": 56,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "columns": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    29,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "['sibsp_5',\n 'n_title_Miss',\n 'parch_2',\n 'n_is_alone',\n 'sibsp_2',\n 'parch_5',\n 'n_sex_cat_Senior female',\n 'sibsp_3',\n 'n_has_cabin',\n 'sibsp_8',\n 'embarked_S',\n 'n_title_Ms',\n 'sex',\n 'parch_3',\n 'parch_4',\n 'n_sex_cat_Mature male',\n 'n_family_size',\n 'n_title_Mrs',\n 'n_sex_cat_Senior male',\n 'embarked_Q',\n 'n_title_Dr',\n 'n_name_dr',\n 'n_title_Master',\n 'age',\n 'parch_6',\n 'n_title_Mr',\n 'pclass_2',\n 'parch_1',\n 'sibsp_4',\n 'pclass_3',\n 'n_age_cat_Senior',\n 'n_title_Rev',\n 'fare',\n 'sibsp_1',\n 'n_sex_cat_Young female',\n 'passengerid',\n 'n_age_cat_Young',\n 'n_sex_cat_Young male']"
                    ]
                },
                "mc_idx": 56,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 29,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Prepare Train Data for models",
            "mc_idx": 57,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# split data into depentdent and independent variables\nX = df[intersect_cols]\ny = df[target_label]",
            "mc_idx": 58,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    30,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 58,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 30,
                "o_idx": 0
            }
        },
        {
            "source": "# K-Nearest Neighbors Model",
            "mc_idx": 59,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Train Model",
            "mc_idx": 60,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# train model\nknn = KNeighborsClassifier()\n\nknn_params = {\"n_neighbors\": range(2,50)}\n\nknn_grid = GridSearchCV(knn,\n                        knn_params,\n                        cv=5,\n                        n_jobs=-1,\n                        verbose=True).fit(X, y)\n\nknn_grid.best_params_",
            "mc_idx": 61,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.16666666666666666,
                "Model_Interpretation": 0.16666666666666666,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    ".fit(": 1,
                    "model": 1,
                    "kneighborsclassifier": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "gridsearchcv": 3,
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    31,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Fitting 5 folds for each of 48 candidates, totalling 240 fits\n",
                        "{'n_neighbors': 34}"
                    ]
                },
                "mc_idx": 61,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 31,
                "o_idx": 1
            }
        },
        {
            "source": "## >> Hyperparameters",
            "mc_idx": 62,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# model with hyperparameters\nknn_hp = knn.set_params(**knn_grid.best_params_).fit(X,y)\n\ncv_output = cross_validate(knn_hp,\n                           X,\n                           y,\n                           cv=10,\n                           scoring=[\"accuracy\",\"f1\",\"roc_auc\"])\nprint(\"-\"*33)\nprint(f\"Test Accuracy: {cv_output['test_accuracy'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test F1: {cv_output['test_f1'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test ROC AUC: {cv_output['test_roc_auc'].mean():.4f}\")\nprint(\"-\"*33)",
            "mc_idx": 63,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.16666666666666666,
                "Model_Interpretation": 0.16666666666666666,
                "Hyperparameter_Tuning": 0.8333333333333334,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 3,
                    ".mean": 3
                },
                "Data_Transform": {},
                "Model_Train": {
                    "cross_validate": 1,
                    ".fit(": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "param": 3,
                    "hyperparameter": 1,
                    "hyperparameters": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    32,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nTest Accuracy: 0.5746\n---------------------------------\nTest F1: 0.0874\n---------------------------------\nTest ROC AUC: 0.4144\n---------------------------------\n"
                    ]
                },
                "mc_idx": 63,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 32,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Get Prediction for Test Data",
            "mc_idx": 64,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "y_pred = knn_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head()",
            "mc_idx": 65,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.3333333333333333,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    ".predict(": 1
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    33,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  pclass_3  ...  n_title_Ms  n_title_Rev  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male  survived\n0  892          1    0.341431 -0.514781  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n1  893          0    1.343772 -0.530361  0            0          0.132839       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 0       \n2  894          1    2.500320 -0.479865  0            0         -0.588285       1            True     False     ...  False       False         True             False            False                  False                     True                  False                   False                 0       \n3  895          1   -0.198292 -0.499124  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n4  896          0   -0.583808 -0.431012  0            0          0.853962       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 0       \n\n[5 rows x 41 columns]"
                    ]
                },
                "mc_idx": 65,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 33,
                "o_idx": 0
            }
        },
        {
            "source": "# Random Forest Classifier",
            "mc_idx": 66,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Train Model and Find Accuracy",
            "mc_idx": 67,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)\n\nrf_model = RandomForestClassifier().fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33)",
            "mc_idx": 68,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.14285714285714285,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.8571428571428571,
                "Model_Interpretation": 0.42857142857142855,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "train_test_split": 1,
                    ".fit(": 1,
                    "model": 3,
                    "randomforestclassifier": 2
                },
                "Model_Evaluation": {
                    "accuracy_score": 2,
                    "model": 3,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 3
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    34,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nModel Accuracy is: 0.7948\n---------------------------------\n"
                    ]
                },
                "mc_idx": 68,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 34,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Find Hyperparameters",
            "mc_idx": 69,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\nrf = RandomForestClassifier()\nrf_params = {\"n_estimators\":[10,50,100,150,200],\n            \"max_depth\":[None,10,20,30,50]}\n\nrf_grid = GridSearchCV(rf,\n                      rf_params,\n                      cv=10,\n                      n_jobs=-1,\n                      verbose=True,\n                      scoring=\"accuracy\").fit(X_train,y_train)\n\nrf_grid.best_params_",
            "mc_idx": 70,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.14285714285714285,
                "Data_Transform": 0.0,
                "Model_Train": 0.5714285714285714,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "train_test_split": 1,
                    ".fit(": 1,
                    "randomforestclassifier": 2
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "gridsearchcv": 3,
                    "param": 3,
                    "train_test_split": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    35,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Fitting 10 folds for each of 25 candidates, totalling 250 fits\n",
                        "{'max_depth': 10, 'n_estimators': 200}"
                    ]
                },
                "mc_idx": 70,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 35,
                "o_idx": 1
            }
        },
        {
            "source": "## >> Get Accuracy Score",
            "mc_idx": 71,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rf_hp = rf.set_params(**rf_grid.best_params_).fit(X_train,y_train)\n\ny_pred = rf_hp.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33)",
            "mc_idx": 72,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.5,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    ".fit(": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "accuracy_score": 2,
                    "model": 1,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "param": 2
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    36,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nModel Accuracy is: 0.8284\n---------------------------------\n"
                    ]
                },
                "mc_idx": 72,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 36,
                "o_idx": 0
            }
        },
        {
            "source": "## >> Get Prediction for Test Data",
            "mc_idx": 73,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "y_pred = rf_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head()",
            "mc_idx": 74,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.3333333333333333,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    ".predict(": 1
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    37,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  pclass_3  ...  n_title_Ms  n_title_Rev  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male  survived\n0  892          1    0.341431 -0.514781  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n1  893          0    1.343772 -0.530361  0            0          0.132839       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 0       \n2  894          1    2.500320 -0.479865  0            0         -0.588285       1            True     False     ...  False       False         True             False            False                  False                     True                  False                   False                 0       \n3  895          1   -0.198292 -0.499124  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n4  896          0   -0.583808 -0.431012  0            0          0.853962       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 1       \n\n[5 rows x 41 columns]"
                    ]
                },
                "mc_idx": 74,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 37,
                "o_idx": 0
            }
        },
        {
            "source": "# FINAL: Random Forest Classifier Model >> Accuracy is: 82.84%",
            "mc_idx": 75,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "code_cells": [
        {
            "source": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_validate, GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\npd.set_option(\"display.expand_frame_repr\",False)",
            "mc_idx": 2,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.02197802197802198,
                "Data_Transform": 0.054945054945054944,
                "Model_Train": 0.07692307692307693,
                "Model_Evaluation": 0.03296703296703297,
                "Model_Interpretation": 0.01098901098901099,
                "Hyperparameter_Tuning": 0.04395604395604396,
                "Visualization": 0.02197802197802198,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 9
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    "labelencoder": 2,
                    "standardscaler": 1,
                    ".exp": 1,
                    ".mod": 1
                },
                "Model_Train": {
                    "train_test_split": 1,
                    "cross_validate": 1,
                    "model": 1,
                    "randomforestclassifier": 2,
                    "model_selection": 1,
                    "kneighborsclassifier": 1
                },
                "Model_Evaluation": {
                    "accuracy_score": 2,
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "gridsearchcv": 3,
                    "train_test_split": 1
                },
                "Visualization": {
                    "matplotlib": 1,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 2,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "df = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\ndf.head()",
            "mc_idx": 4,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.75,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   PassengerId  Survived  Pclass Name                                               Sex      Age   SibSp  Parch Ticket             Fare    Cabin Embarked\n0  1            0         3                                 Braund, Mr. Owen Harris    male  22.0  1      0             A/5 21171   7.2500   NaN  S      \n1  2            1         1       Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0  1      0              PC 17599  71.2833   C85  C      \n2  3            1         3                                  Heikkinen, Miss. Laina  female  26.0  0      0      STON/O2. 3101282   7.9250   NaN  S      \n3  4            1         1            Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0  1      0                113803  53.1000  C123  S      \n4  5            0         3                                Allen, Mr. William Henry    male  35.0  0      0                373450   8.0500   NaN  S      "
                    ]
                },
                "mc_idx": 4,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "def dataframe_summary(dataframe, show_value_counts = False):\n    import pandas as pd\n    pd.set_option(\"display.colheader_justify\",\"left\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- SHAPE of Dataset -----------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.shape)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DATA TYPES of Dataset ------------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.dtypes)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MEMORY USAGE of Dataset --------------------------------------------------------------------------------------------------------------  \")\n    print(dataframe.memory_usage(deep=True) / (1024 * 1024))\n    print(\"TOTAL >>> \", round((dataframe.memory_usage(deep=True) / (1024 * 1024)).sum(),2), \"\\n (All are in MB)\")\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- MISSING VALUES in Dataset --------------------------------------------------------------------------------------------------------------\")\n    print(dataframe.isnull().sum())\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n    print(\"-------- DESCRIPTIVE Info about Dataset ---------------------------------------------------------------------------------------------------------\")\n    print(dataframe.describe([0.01, 0.05, 0.25, 0.5, 0.75, 0.95, 0.99]).T)\n    print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")\n\n    if show_value_counts:\n        print(\"-------- VALUE COUNTS in Dataset ----------------------------------------------------------------------------------------------------------------\")\n        for col in dataframe.columns:\n            print(dataframe[col].value_counts())\n            print(\"-------------------------------------------------------------------------------------------------------------------------------------------------\")",
            "mc_idx": 6,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.6470588235294118,
                "Data_Extraction": 0.35294117647058826,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.17647058823529413,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10,
                    ".set_option": 1
                },
                "Data_Extraction": {
                    "dataset": 6
                },
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "value_counts()": 1,
                    "missing values": 1,
                    "head": 1,
                    "info": 1,
                    "describe": 1,
                    "dtypes": 1,
                    "columns": 1,
                    "shape": 2,
                    "memory_usage": 2,
                    ".describe": 1,
                    ".isnull": 1,
                    ".sum": 2,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2,
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "dataframe_summary(df)",
            "mc_idx": 7,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- SHAPE of Dataset -----------------------------------------------------------------------------------------------------------------------\n(891, 12)\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- DATA TYPES of Dataset ------------------------------------------------------------------------------------------------------------------\nPassengerId      int64\nSurvived         int64\nPclass           int64\nName            object\nSex             object\nAge            float64\nSibSp            int64\nParch            int64\nTicket          object\nFare           float64\nCabin           object\nEmbarked        object\ndtype: object\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- MEMORY USAGE of Dataset --------------------------------------------------------------------------------------------------------------  \nIndex          0.000122\nPassengerId    0.006798\nSurvived       0.006798\nPclass         0.006798\nName           0.071347\nSex            0.052432\nAge            0.006798\nSibSp          0.006798\nParch          0.006798\nTicket         0.054171\nFare           0.006798\nCabin          0.032753\nEmbarked       0.049234\ndtype: float64\nTOTAL >>>  0.31 \n (All are in MB)\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- MISSING VALUES in Dataset --------------------------------------------------------------------------------------------------------------\nPassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\n-------------------------------------------------------------------------------------------------------------------------------------------------\n-------- DESCRIPTIVE Info about Dataset ---------------------------------------------------------------------------------------------------------\n             count  mean        std         min   1%   5%      25%       50%       75%    95%        99%        max     \nPassengerId  891.0  446.000000  257.353842  1.00  9.9  45.500  223.5000  446.0000  668.5  846.50000  882.10000  891.0000\nSurvived     891.0    0.383838    0.486592  0.00  0.0   0.000    0.0000    0.0000    1.0    1.00000    1.00000    1.0000\nPclass       891.0    2.308642    0.836071  1.00  1.0   1.000    2.0000    3.0000    3.0    3.00000    3.00000    3.0000\nAge          714.0   29.699118   14.526497  0.42  1.0   4.000   20.1250   28.0000   38.0   56.00000   65.87000   80.0000\nSibSp        891.0    0.523008    1.102743  0.00  0.0   0.000    0.0000    0.0000    1.0    3.00000    5.00000    8.0000\nParch        891.0    0.381594    0.806057  0.00  0.0   0.000    0.0000    0.0000    0.0    2.00000    4.00000    6.0000\nFare         891.0   32.204208   49.693429  0.00  0.0   7.225    7.9104   14.4542   31.0  112.07915  249.00622  512.3292\n-------------------------------------------------------------------------------------------------------------------------------------------------\n"
                    ]
                },
                "mc_idx": 7,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "df.columns = [col.lower() for col in df.columns]\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.info())\nprint(\"-\"*33)\nprint(df.describe([0.01,0.05,0.1,0.25,0.5,0.75,0.9,0.95,0.99]).T)\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 9,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.08333333333333333,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    ".info(": 1,
                    ".head(": 1,
                    "head": 1,
                    "info": 1,
                    "describe": 1,
                    "columns": 2,
                    "shape": 1,
                    ".describe": 1,
                    ".info": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\n(891, 12)\n---------------------------------\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   passengerid  891 non-null    int64  \n 1   survived     891 non-null    int64  \n 2   pclass       891 non-null    int64  \n 3   name         891 non-null    object \n 4   sex          891 non-null    object \n 5   age          714 non-null    float64\n 6   sibsp        891 non-null    int64  \n 7   parch        891 non-null    int64  \n 8   ticket       891 non-null    object \n 9   fare         891 non-null    float64\n 10  cabin        204 non-null    object \n 11  embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n---------------------------------\n             count  mean        std         min   1%   5%      10%    25%       50%       75%    90%       95%        99%        max     \npassengerid  891.0  446.000000  257.353842  1.00  9.9  45.500  90.00  223.5000  446.0000  668.5  802.0000  846.50000  882.10000  891.0000\nsurvived     891.0    0.383838    0.486592  0.00  0.0   0.000   0.00    0.0000    0.0000    1.0    1.0000    1.00000    1.00000    1.0000\npclass       891.0    2.308642    0.836071  1.00  1.0   1.000   1.00    2.0000    3.0000    3.0    3.0000    3.00000    3.00000    3.0000\nage          714.0   29.699118   14.526497  0.42  1.0   4.000  14.00   20.1250   28.0000   38.0   50.0000   56.00000   65.87000   80.0000\nsibsp        891.0    0.523008    1.102743  0.00  0.0   0.000   0.00    0.0000    0.0000    1.0    1.0000    3.00000    5.00000    8.0000\nparch        891.0    0.381594    0.806057  0.00  0.0   0.000   0.00    0.0000    0.0000    0.0    2.0000    2.00000    4.00000    6.0000\nfare         891.0   32.204208   49.693429  0.00  0.0   7.225   7.55    7.9104   14.4542   31.0   77.9583  112.07915  249.00622  512.3292\n---------------------------------\n",
                        "   passengerid  survived  pclass name                                               sex      age   sibsp  parch ticket             fare    cabin embarked\n0  1            0         3                                 Braund, Mr. Owen Harris    male  22.0  1      0             A/5 21171   7.2500   NaN  S      \n1  2            1         1       Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0  1      0              PC 17599  71.2833   C85  C      \n2  3            1         3                                  Heikkinen, Miss. Laina  female  26.0  0      0      STON/O2. 3101282   7.9250   NaN  S      \n3  4            1         1            Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0  1      0                113803  53.1000  C123  S      \n4  5            0         3                                Allen, Mr. William Henry    male  35.0  0      0                373450   8.0500   NaN  S      "
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 1
            }
        },
        {
            "source": "# passeger have a cabin\ndf[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n\n# 'dr in name\ndf[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n\n# 'title' in name\ndf['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n\n# family size\ndf[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n\n# is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 12,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.25,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "extract": 1,
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "shape": 2,
                    "size": 2,
                    ".head": 1,
                    ".notnull": 1
                },
                "Data_Transform": {
                    ".apply(": 1,
                    ".astype(": 1,
                    ".split": 1,
                    ".apply": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    5,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nNew Shape of Dataset:\n---------------------------------\n(891, 19)\n---------------------------------\n",
                        "   passengerid  survived  pclass name                                               sex      age   sibsp  parch ticket             fare    cabin embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3                                 Braund, Mr. Owen Harris    male  22.0  1      0             A/5 21171   7.2500   NaN  S        0            0            Mr    2               No        Mature      Mature male\n1  2            1         1       Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0  1      0              PC 17599  71.2833   C85  C        1            0           Mrs    2               No        Mature    Mature female\n2  3            1         3                                  Heikkinen, Miss. Laina  female  26.0  0      0      STON/O2. 3101282   7.9250   NaN  S        0            0          Miss    1              Yes        Mature    Mature female\n3  4            1         1            Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0  1      0                113803  53.1000  C123  S        1            0           Mrs    2               No        Mature    Mature female\n4  5            0         3                                Allen, Mr. William Henry    male  35.0  0      0                373450   8.0500   NaN  S        0            0            Mr    1              Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 1
            }
        },
        {
            "source": "df.dtypes",
            "mc_idx": 14,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "dtypes": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid        int64\nsurvived           int64\npclass             int64\nname              object\nsex               object\nage              float64\nsibsp              int64\nparch              int64\nticket            object\nfare             float64\ncabin             object\nembarked          object\nn_has_cabin        int64\nn_name_dr          int64\nn_title           object\nn_family_size      int64\nn_is_alone        object\nn_age_cat         object\nn_sex_cat         object\ndtype: object"
                    ]
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "cat_cols = [\"survived\", \"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \nnum_cols = [\"age\",\"fare\",\"n_family_size\"]\ncar_cols = [\"passengerid\", \"name\",\"ticket\"]\ntarget_label = 'survived'\n\nprint(\"-\"*33)\nprint(f\"Categorical Variables: {cat_cols}\")\nprint(\"-\"*33)\nprint(f\"Numerical Variables: {num_cols}\")\nprint(\"-\"*33)\nprint(f\"Cardinal Variables: {car_cols}\")\nprint(\"-\"*33)",
            "mc_idx": 15,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 3
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nCategorical Variables: ['survived', 'pclass', 'sex', 'sibsp', 'parch', 'cabin', 'embarked', 'n_name_dr', 'n_title', 'n_is_alone', 'n_age_cat', 'n_sex_cat']\n---------------------------------\nNumerical Variables: ['age', 'fare', 'n_family_size']\n---------------------------------\nCardinal Variables: ['passengerid', 'name', 'ticket']\n---------------------------------\n"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "for col in cat_cols:\n    print(\"-\"*33)\n    print(df[col].value_counts())\n    print(\"-\"*33)",
            "mc_idx": 16,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    8,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nsurvived\n0    549\n1    342\nName: count, dtype: int64\n---------------------------------\n---------------------------------\npclass\n3    491\n1    216\n2    184\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nsex\nmale      577\nfemale    314\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nsibsp\n0    608\n1    209\n2     28\n4     18\n3     16\n8      7\n5      5\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nparch\n0    678\n1    118\n2     80\n5      5\n3      5\n4      4\n6      1\nName: count, dtype: int64\n---------------------------------\n---------------------------------\ncabin\nB96 B98        4\nG6             4\nC23 C25 C27    4\nC22 C26        3\nF33            3\n              ..\nE34            1\nC7             1\nC54            1\nE36            1\nC148           1\nName: count, Length: 147, dtype: int64\n---------------------------------\n---------------------------------\nembarked\nS    644\nC    168\nQ     77\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_name_dr\n0    881\n1     10\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_title\nMr          517\nMiss        182\nMrs         125\nMaster       40\nDr            7\nRev           6\nMlle          2\nMajor         2\nCol           2\nCountess      1\nCapt          1\nMs            1\nSir           1\nLady          1\nMme           1\nDon           1\nJonkheer      1\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_is_alone\nYes    537\nNo     354\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_age_cat\nMature    562\nYoung     113\nSenior     39\nName: count, dtype: int64\n---------------------------------\n---------------------------------\nn_sex_cat\nMature male      281\nMature female    155\nYoung male       120\nYoung female      84\nSenior male       52\nSenior female     22\nName: count, dtype: int64\n---------------------------------\n"
                    ]
                },
                "mc_idx": 16,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "def categoricals_summary(dataframe, column_name, plot=False):\n    print(pd.DataFrame({column_name: dataframe[column_name].value_counts(),\n                 \"Ratio\": 100 * (dataframe[column_name].value_counts() / len(dataframe))}))\n    print(\"--------------------------------------------------------------------------------------------------------\")\n\n    if plot:\n        sns.countplot(x=dataframe[column_name], data=dataframe)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\")\n#--------------------------------------------------------------------------------------------------------        \ndef numericals_summary(dataframe, column_name, plot = False, plot_bins = 20):\n\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[column_name].describe(quantiles).T)\n    print(\"--------------------------------------------------------------------------------------------------------\")\n    \n    if plot:\n        dataframe[column_name].hist(bins = plot_bins)\n        plt.xlabel(column_name)\n        plt.title(column_name)\n        plt.show()\n        print(\"--------------------------------------------------------------------------------------------------------\")",
            "mc_idx": 18,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2222222222222222,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.2222222222222222,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.2222222222222222,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2222222222222222,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "value_counts()": 2,
                    ".hist(": 1,
                    "sns.": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".value_counts": 2
                },
                "Data_Transform": {
                    "tile": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".hist(": 1,
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 18,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "for col in cat_cols:\n    categoricals_summary(df, column_name = col, plot=True)",
            "mc_idx": 19,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    24,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          survived  Ratio    \nsurvived                     \n0         549       61.616162\n1         342       38.383838\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n        pclass  Ratio    \npclass                   \n3       491     55.106622\n1       216     24.242424\n2       184     20.650954\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n        sex  Ratio    \nsex                   \nmale    577  64.758698\nfemale  314  35.241302\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n       sibsp  Ratio    \nsibsp                  \n0      608    68.237935\n1      209    23.456790\n2       28     3.142536\n4       18     2.020202\n3       16     1.795735\n8        7     0.785634\n5        5     0.561167\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n       parch  Ratio    \nparch                  \n0      678    76.094276\n1      118    13.243547\n2       80     8.978676\n5        5     0.561167\n3        5     0.561167\n4        4     0.448934\n6        1     0.112233\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n             cabin  Ratio   \ncabin                       \nB96 B98      4      0.448934\nG6           4      0.448934\nC23 C25 C27  4      0.448934\nC22 C26      3      0.336700\nF33          3      0.336700\n...            ...       ...\nE34          1      0.112233\nC7           1      0.112233\nC54          1      0.112233\nE36          1      0.112233\nC148         1      0.112233\n\n[147 rows x 2 columns]\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n          embarked  Ratio    \nembarked                     \nS         644       72.278339\nC         168       18.855219\nQ          77        8.641975\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n           n_name_dr  Ratio    \nn_name_dr                      \n0          881        98.877666\n1           10         1.122334\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n          n_title  Ratio    \nn_title                     \nMr        517      58.024691\nMiss      182      20.426487\nMrs       125      14.029181\nMaster     40       4.489338\nDr          7       0.785634\nRev         6       0.673401\nMlle        2       0.224467\nMajor       2       0.224467\nCol         2       0.224467\nCountess    1       0.112233\nCapt        1       0.112233\nMs          1       0.112233\nSir         1       0.112233\nLady        1       0.112233\nMme         1       0.112233\nDon         1       0.112233\nJonkheer    1       0.112233\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n            n_is_alone  Ratio   \nn_is_alone                      \nYes         537         60.26936\nNo          354         39.73064\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n           n_age_cat  Ratio    \nn_age_cat                      \nMature     562        63.075196\nYoung      113        12.682379\nSenior      39         4.377104\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n               n_sex_cat  Ratio    \nn_sex_cat                          \nMature male    281        31.537598\nMature female  155        17.396184\nYoung male     120        13.468013\nYoung female    84         9.427609\nSenior male     52         5.836139\nSenior female   22         2.469136\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n"
                    ]
                },
                "mc_idx": 19,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 24
            }
        },
        {
            "source": "for col in num_cols:    \n    numericals_summary(df, col, plot=True)",
            "mc_idx": 20,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "summary": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    6,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "count    714.000000\nmean      29.699118\nstd       14.526497\nmin        0.420000\n5%         4.000000\n10%       14.000000\n20%       19.000000\n30%       22.000000\n40%       25.000000\n50%       28.000000\n60%       31.800000\n70%       36.000000\n80%       41.000000\n90%       50.000000\n95%       56.000000\n99%       65.870000\nmax       80.000000\nName: age, dtype: float64\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\ncount    891.000000\nmean      32.204208\nstd       49.693429\nmin        0.000000\n5%         7.225000\n10%        7.550000\n20%        7.854200\n30%        8.050000\n40%       10.500000\n50%       14.454200\n60%       21.679200\n70%       27.000000\n80%       39.687500\n90%       77.958300\n95%      112.079150\n99%      249.006220\nmax      512.329200\nName: fare, dtype: float64\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\ncount    891.000000\nmean       1.904602\nstd        1.613459\nmin        1.000000\n5%         1.000000\n10%        1.000000\n20%        1.000000\n30%        1.000000\n40%        1.000000\n50%        1.000000\n60%        1.000000\n70%        2.000000\n80%        3.000000\n90%        4.000000\n95%        6.000000\n99%        8.000000\nmax       11.000000\nName: n_family_size, dtype: float64\n--------------------------------------------------------------------------------------------------------\n",
                        "<Figure size 640x480 with 1 Axes>",
                        "--------------------------------------------------------------------------------------------------------\n"
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 6
            }
        },
        {
            "source": "def outlier_thresholds(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_info=True):\n    q1_num = dataframe[column_name].quantile(q1)\n    q3_num = dataframe[column_name].quantile(q3)\n    iqr = q3_num - q1_num\n    lower_threshold = q1_num - iqr * 1.5\n    upper_threshold = q3_num + iqr * 1.5\n    if print_info:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"for {column_name}:\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Q1 is {q1}\")\n        print(f\"Q3 is {q3}\")\n        print(f\"Q1 threshold is {q1_num}\")\n        print(f\"Q3 threshold is {q3_num}\")\n        print(f\"IQR is {iqr}\")\n        print(f\"Lower threshold is {lower_threshold}\")\n        print(f\"Upper Threshold is {upper_threshold}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n    return lower_threshold, upper_threshold\n#----------------------------------------------------------------------------------------------------------------------\ndef check_if_outlier_exists(dataframe, column_name, q1 = 0.25, q3 = 0.75, print_details=True):\n    low_limit, up_limit = outlier_thresholds(dataframe, column_name, q1, q3, print_details)\n    if dataframe[((dataframe[column_name] < low_limit) | (dataframe[column_name] > up_limit))].shape[0] > 0:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : Outliers exist based on Q1={q1} and Q3={q3}\")\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"Under lower bound: {len(dataframe[dataframe[column_name] < low_limit])} observation of {len(dataframe)}\")\n        print(f\"Above upper bound: {len(dataframe[dataframe[column_name] > up_limit])} observation of {len(dataframe)}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return True\n    else:\n        print(\"-----------------------------------------------------------------------------------------------------------\")\n        print(f\"{column_name} : No Outlier based on Q1={q1} and Q3={q3}\")\n        print(\"-------------------------------------------------------------------------------------------------------\")\n        return False\n#----------------------------------------------------------------------------------------------------------------------",
            "mc_idx": 22,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.16666666666666666,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "outliers": 1,
                    "tail": 2,
                    "info": 2,
                    "shape": 1
                },
                "Data_Transform": {
                    "tile": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "for col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95))",
            "mc_idx": 23,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    13,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 4.0\nQ3 threshold is 56.0\nIQR is 52.0\nLower threshold is -74.0\nUpper Threshold is 134.0\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nage : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nage False\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.225\nQ3 threshold is 112.07915\nIQR is 104.85415\nLower threshold is -150.056225\nUpper Threshold is 269.360375\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfare : Outliers exist based on Q1=0.05 and Q3=0.95\n-----------------------------------------------------------------------------------------------------------\nUnder lower bound: 0 observation of 891\nAbove upper bound: 3 observation of 891\n-------------------------------------------------------------------------------------------------------\nfare True\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 6.0\nIQR is 5.0\nLower threshold is -6.5\nUpper Threshold is 13.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nn_family_size : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nn_family_size False\n"
                    ]
                },
                "mc_idx": 23,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "def winsorize_with_thresholds(dataframe, col_name, q1=0.25, q3=0.75):\n    low_limit, up_limit = outlier_thresholds(dataframe, col_name, q1, q3)\n    dataframe.loc[(dataframe[col_name] < low_limit), col_name] = low_limit\n    dataframe.loc[(dataframe[col_name] > up_limit), col_name] = up_limit\n#----------------------------------------------------------------------------------------------------------------------",
            "mc_idx": 25,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    14,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "for col in num_cols:\n    winsorize_with_thresholds(df, col, 0.05, 0.95)\n\nfor col in num_cols:\n    print(col, check_if_outlier_exists(df, col, 0.05, 0.95))",
            "mc_idx": 26,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 4.0\nQ3 threshold is 56.0\nIQR is 52.0\nLower threshold is -74.0\nUpper Threshold is 134.0\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.225\nQ3 threshold is 112.07915\nIQR is 104.85415\nLower threshold is -150.056225\nUpper Threshold is 269.360375\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 6.0\nIQR is 5.0\nLower threshold is -6.5\nUpper Threshold is 13.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 4.0\nQ3 threshold is 56.0\nIQR is 52.0\nLower threshold is -74.0\nUpper Threshold is 134.0\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nage : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nage False\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.225\nQ3 threshold is 112.07915\nIQR is 104.85415\nLower threshold is -150.056225\nUpper Threshold is 269.360375\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfare : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nfare False\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 6.0\nIQR is 5.0\nLower threshold is -6.5\nUpper Threshold is 13.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nn_family_size : No Outlier based on Q1=0.05 and Q3=0.95\n-------------------------------------------------------------------------------------------------------\nn_family_size False\n"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "df.isnull().sum()",
            "mc_idx": 28,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid        0\nsurvived           0\npclass             0\nname               0\nsex                0\nage              177\nsibsp              0\nparch              0\nticket             0\nfare               0\ncabin            687\nembarked           2\nn_has_cabin        0\nn_name_dr          0\nn_title            0\nn_family_size      0\nn_is_alone         0\nn_age_cat        177\nn_sex_cat        177\ndtype: int64"
                    ]
                },
                "mc_idx": 28,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "# drop columns\nlist_to_drop = ['ticket','name','cabin']\ndf.drop(labels=list_to_drop, axis=1, inplace=True)\n\n# reassign categorical variables\ncat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \ncar_cols = [\"passengerid\"]\ndf.head()",
            "mc_idx": 30,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.25,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  pclass sex      age   sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3         male  22.0  1      0       7.2500  S        0            0            Mr    2.0             No        Mature      Mature male\n1  2            1         1       female  38.0  1      0      71.2833  C        1            0           Mrs    2.0             No        Mature    Mature female\n2  3            1         3       female  26.0  0      0       7.9250  S        0            0          Miss    1.0            Yes        Mature    Mature female\n3  4            1         1       female  35.0  1      0      53.1000  S        1            0           Mrs    2.0             No        Mature    Mature female\n4  5            0         3         male  35.0  0      0       8.0500  S        0            0            Mr    1.0            Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 30,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "# fill 'age' according to the classes of 't_title'\ndf[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n#df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\ndf.isnull().sum()",
            "mc_idx": 32,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.625,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".isnull": 1,
                    ".sum": 1,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    ".fillna(": 2,
                    "transform": 2,
                    ".fillna": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    18,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid        0\nsurvived           0\npclass             0\nsex                0\nage                0\nsibsp              0\nparch              0\nfare               0\nembarked           2\nn_has_cabin        0\nn_name_dr          0\nn_title            0\nn_family_size      0\nn_is_alone         0\nn_age_cat        177\nn_sex_cat        177\ndtype: int64"
                    ]
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "df[\"age\"] = df[\"age\"].astype(int)\ndf[\"age\"].dtype",
            "mc_idx": 34,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    19,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "dtype('int64')"
                    ]
                },
                "mc_idx": 34,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "# is alone\ndf.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\ndf.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n\n# age level\ndf.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\ndf.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\ndf.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n\n# sex according to age\ndf.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\ndf.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\ndf.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\ndf.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\ndf.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\ndf.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n\nprint(\"-\"*33)\nprint(\"New Shape of Dataset:\")\nprint(\"-\"*33)\nprint(df.shape)\nprint(\"-\"*33)\nprint(df.isnull().sum())\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 36,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.125,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".head(": 1,
                    "head": 1,
                    "shape": 2,
                    ".head": 1,
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    20,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nNew Shape of Dataset:\n---------------------------------\n(891, 16)\n---------------------------------\npassengerid      0\nsurvived         0\npclass           0\nsex              0\nage              0\nsibsp            0\nparch            0\nfare             0\nembarked         2\nn_has_cabin      0\nn_name_dr        0\nn_title          0\nn_family_size    0\nn_is_alone       0\nn_age_cat        0\nn_sex_cat        0\ndtype: int64\n---------------------------------\n",
                        "   passengerid  survived  pclass sex      age  sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3         male  22   1      0       7.2500  S        0            0            Mr    2.0             No        Mature      Mature male\n1  2            1         1       female  38   1      0      71.2833  C        1            0           Mrs    2.0             No        Mature    Mature female\n2  3            1         3       female  26   0      0       7.9250  S        0            0          Miss    1.0            Yes        Mature    Mature female\n3  4            1         1       female  35   1      0      53.1000  S        1            0           Mrs    2.0             No        Mature    Mature female\n4  5            0         3         male  35   0      0       8.0500  S        0            0            Mr    1.0            Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 36,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 1
            }
        },
        {
            "source": "df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\ndf.isnull().sum()",
            "mc_idx": 38,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.75,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "df.isnull().sum": 1,
                    ".isnull": 1,
                    ".sum": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    ".fillna(": 1,
                    ".fillna": 1,
                    ".mod": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    21,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "passengerid      0\nsurvived         0\npclass           0\nsex              0\nage              0\nsibsp            0\nparch            0\nfare             0\nembarked         0\nn_has_cabin      0\nn_name_dr        0\nn_title          0\nn_family_size    0\nn_is_alone       0\nn_age_cat        0\nn_sex_cat        0\ndtype: int64"
                    ]
                },
                "mc_idx": 38,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "# find binary variables\nbinary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n\nprint(\"-\"*33)\nprint(f\"Binary Variables: {binary_cols}\")\nprint(\"-\"*33)\ndf.head()",
            "mc_idx": 41,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.4,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1,
                    ".nunique": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    22,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nBinary Variables: ['sex', 'n_name_dr', 'n_is_alone']\n---------------------------------\n",
                        "   passengerid  survived  pclass sex      age  sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size n_is_alone n_age_cat n_sex_cat     \n0  1            0         3         male  22   1      0       7.2500  S        0            0            Mr    2.0             No        Mature      Mature male\n1  2            1         1       female  38   1      0      71.2833  C        1            0           Mrs    2.0             No        Mature    Mature female\n2  3            1         3       female  26   0      0       7.9250  S        0            0          Miss    1.0            Yes        Mature    Mature female\n3  4            1         1       female  35   1      0      53.1000  S        1            0           Mrs    2.0             No        Mature    Mature female\n4  5            0         3         male  35   0      0       8.0500  S        0            0            Mr    1.0            Yes        Mature      Mature male"
                    ]
                },
                "mc_idx": 41,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 1
            }
        },
        {
            "source": "le = LabelEncoder()\n\nfor col in binary_cols:\n    df[col] =le.fit_transform(df[col])\n    \ndf.head()",
            "mc_idx": 43,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.75,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "labelencoder": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    23,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  pclass  sex  age  sibsp  parch  fare    embarked  n_has_cabin  n_name_dr n_title  n_family_size  n_is_alone n_age_cat n_sex_cat     \n0  1            0         3       1    22   1      0       7.2500  S        0            0            Mr    2.0            0           Mature      Mature male\n1  2            1         1       0    38   1      0      71.2833  C        1            0           Mrs    2.0            0           Mature    Mature female\n2  3            1         3       0    26   0      0       7.9250  S        0            0          Miss    1.0            1           Mature    Mature female\n3  4            1         1       0    35   1      0      53.1000  S        1            0           Mrs    2.0            0           Mature    Mature female\n4  5            0         3       1    35   0      0       8.0500  S        0            0            Mr    1.0            1           Mature      Mature male"
                    ]
                },
                "mc_idx": 43,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 23,
                "o_idx": 0
            }
        },
        {
            "source": "one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\nprint(f\"Categorical variables with multiple classes: {one_hot_cols}\")",
            "mc_idx": 45,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.5,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "columns": 1,
                    ".nunique": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    24,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Categorical variables with multiple classes: ['pclass', 'sibsp', 'parch', 'embarked', 'n_title', 'n_age_cat', 'n_sex_cat']\n"
                    ]
                },
                "mc_idx": 45,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 24,
                "o_idx": 0
            }
        },
        {
            "source": "df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\ndf.head()",
            "mc_idx": 47,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    ".get_dummies": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    25,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  sex  age  fare     n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  ...  n_title_Ms  n_title_Rev  n_title_Sir  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male\n0  1            0         1    22    7.2500  0            0          2.0            0           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n1  2            1         0    38   71.2833  1            0          2.0            0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n2  3            1         0    26    7.9250  0            0          1.0            1           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n3  4            1         0    35   53.1000  1            0          2.0            0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n4  5            0         1    35    8.0500  0            0          1.0            1           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n\n[5 rows x 48 columns]"
                    ]
                },
                "mc_idx": 47,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 25,
                "o_idx": 0
            }
        },
        {
            "source": "scaler = StandardScaler()\ndf[num_cols] = scaler.fit_transform(df[num_cols])\n\ndf.head()",
            "mc_idx": 50,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "standardscaler": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    26,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  survived  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  ...  n_title_Ms  n_title_Rev  n_title_Sir  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male\n0  1            0         1   -0.555502 -0.556776  0            0          0.059160       0           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n1  2            1         0    0.650228  0.920354  1            0          0.059160       0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n2  3            1         0   -0.254069 -0.541205  0            0         -0.560975       1           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n3  4            1         0    0.424154  0.500899  1            0          0.059160       0           False     ...  False       False        False        False             False            False                  False                    False                  False                   False               \n4  5            0         1    0.424154 -0.538322  0            0         -0.560975       1           False     ...  False       False        False        False             False             True                  False                    False                  False                   False               \n\n[5 rows x 48 columns]"
                    ]
                },
                "mc_idx": 50,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 26,
                "o_idx": 0
            }
        },
        {
            "source": "def prepare_test_data():\n    df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\n    df.columns = [col.lower() for col in df.columns]\n    # passeger have a cabin\n    df[\"n_has_cabin\"] = df[\"cabin\"].notnull().astype(int)\n    # 'dr in name\n    df[\"n_name_dr\"] = df[\"name\"].apply(lambda x: len([x for x in x.split() if x.startswith(\"Dr\")]))\n    # 'title' in name\n    df['n_title'] = df[\"name\"].str.extract(' ([A-Za-z]+)\\.', expand=False)\n    # family size\n    df[\"n_family_size\"] = df[\"sibsp\"] + df[\"parch\"] + 1\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"cabin\", \"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    num_cols = [\"age\",\"fare\",\"n_family_size\"]\n    car_cols = [\"passengerid\", \"name\",\"ticket\"]\n    target_label = ''\n    for col in num_cols:\n        winsorize_with_thresholds(df, col, 0.05, 0.95)\n    # drop columns\n    list_to_drop = ['ticket','name','cabin']\n    df.drop(labels=list_to_drop, axis=1, inplace=True)\n    # reassign categorical variables\n    cat_cols = [\"pclass\", \"sex\",\"sibsp\",\"parch\",\"embarked\",\"n_name_dr\",\"n_title\",\"n_age_class\",\"n_is_alone\",\"n_age_cat\",\"n_sex_cat\"] \n    car_cols = [\"passengerid\"]\n    # fill 'age' according to the classes of 't_title'\n    df[\"age\"].fillna(df.groupby('n_title')[\"age\"].transform(\"median\"), inplace=True)\n    df[\"age\"].fillna(df.groupby('sex')[\"age\"].transform(\"mean\"), inplace=True)\n    df[\"age\"] = df[\"age\"].astype(int)\n    # age pclass\n    #df[\"n_age_class\"] = df[\"age\"] * df[\"pclass\"]\n    # is alone\n    df.loc[((df['sibsp'] + df['parch']) > 0), \"n_is_alone\"] = \"No\"\n    df.loc[((df['sibsp'] + df['parch']) == 0), \"n_is_alone\"] = \"Yes\"\n    # age level\n    df.loc[(df['age'] < 18), 'n_age_cat'] = 'Young'\n    df.loc[(df['age'] >= 18) & (df['age'] < 56), 'n_age_cat'] = 'Mature'\n    df.loc[(df['age'] >= 56), 'n_age_cat'] = 'Senior'\n    # sex according to age\n    df.loc[(df['sex'] == 'male') & (df['age'] <= 21), 'n_sex_cat'] = 'Young male'\n    df.loc[(df['sex'] == 'male') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature male'\n    df.loc[(df['sex'] == 'male') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior male'\n    df.loc[(df['sex'] == 'female') & (df['age'] <= 21), 'n_sex_cat'] = 'Young female'\n    df.loc[(df['sex'] == 'female') & (df['age'] > 21) & (df['age'] < 50), 'n_sex_cat'] = 'Mature female'\n    df.loc[(df['sex'] == 'female') & (df['age'] >= 50), 'n_sex_cat'] = 'Senior female'\n    df[\"fare\"].fillna(df.groupby('pclass')[\"fare\"].transform(\"mean\"), inplace=True)\n    df[\"embarked\"].fillna(df['embarked'].mode()[0], inplace=True)\n    # find binary variables\n    binary_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() == 2]\n    le = LabelEncoder()\n\n    for col in binary_cols:\n        df[col] =le.fit_transform(df[col])\n    one_hot_cols = [col for col in df.columns if col in cat_cols and df[col].nunique() > 2]\n    df = pd.get_dummies(df, columns=one_hot_cols, drop_first=True)\n    scaler = StandardScaler()\n    df[num_cols] = scaler.fit_transform(df[num_cols])\n    return df",
            "mc_idx": 53,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.06896551724137931,
                "Data_Extraction": 0.1724137931034483,
                "Exploratory_Data_Analysis": 0.5517241379310345,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 2
                },
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2,
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {
                    "columns": 6,
                    "size": 3,
                    ".nunique": 2,
                    ".notnull": 1,
                    ".mode": 1,
                    ".groupby": 3
                },
                "Data_Transform": {
                    ".groupby(": 3,
                    ".fillna(": 4,
                    ".apply(": 1,
                    "fit_transform": 2,
                    "transform": 5,
                    ".astype(": 2,
                    "labelencoder": 2,
                    "standardscaler": 1,
                    ".split": 1,
                    ".drop": 1,
                    ".fillna": 4,
                    ".apply": 1,
                    ".get_dummies": 1,
                    ".mod": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    27,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 53,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 27,
                "o_idx": 0
            }
        },
        {
            "source": "df_test = prepare_test_data()\ndf_test.head()",
            "mc_idx": 54,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    28,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "-----------------------------------------------------------------------------------------------------------\nfor age:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 8.0\nQ3 threshold is 57.0\nIQR is 49.0\nLower threshold is -65.5\nUpper Threshold is 130.5\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor fare:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 7.2292\nQ3 threshold is 151.55\nIQR is 144.32080000000002\nLower threshold is -209.25200000000004\nUpper Threshold is 368.0312\n-----------------------------------------------------------------------------------------------------------\n-----------------------------------------------------------------------------------------------------------\nfor n_family_size:\n-----------------------------------------------------------------------------------------------------------\nQ1 is 0.05\nQ3 is 0.95\nQ1 threshold is 1.0\nQ3 threshold is 4.0\nIQR is 3.0\nLower threshold is -3.5\nUpper Threshold is 8.5\n-----------------------------------------------------------------------------------------------------------\n",
                        "   passengerid  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  pclass_3  ...  n_title_Mrs  n_title_Ms  n_title_Rev  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male\n0  892          1    0.341431 -0.514781  0            0         -0.588285       1           False      True     ...  False        False       False        False             False             True                  False                    False                  False                   False               \n1  893          0    1.343772 -0.530361  0            0          0.132839       0           False      True     ...   True        False       False        False             False            False                  False                    False                  False                   False               \n2  894          1    2.500320 -0.479865  0            0         -0.588285       1            True     False     ...  False        False       False         True             False            False                  False                     True                  False                   False               \n3  895          1   -0.198292 -0.499124  0            0         -0.588285       1           False      True     ...  False        False       False        False             False             True                  False                    False                  False                   False               \n4  896          0   -0.583808 -0.431012  0            0          0.853962       0           False      True     ...   True        False       False        False             False            False                  False                    False                  False                   False               \n\n[5 rows x 40 columns]"
                    ]
                },
                "mc_idx": 54,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 28,
                "o_idx": 1
            }
        },
        {
            "source": "df_train_cols = {col for col in df.columns if col != 'survived'}\ndf_test_cols = {col for col in df_test.columns}\n\nintersect_cols = df_train_cols.intersection(df_test_cols)\n\nintersect_cols = list(intersect_cols)\nintersect_cols",
            "mc_idx": 56,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "columns": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    29,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "['sibsp_5',\n 'n_title_Miss',\n 'parch_2',\n 'n_is_alone',\n 'sibsp_2',\n 'parch_5',\n 'n_sex_cat_Senior female',\n 'sibsp_3',\n 'n_has_cabin',\n 'sibsp_8',\n 'embarked_S',\n 'n_title_Ms',\n 'sex',\n 'parch_3',\n 'parch_4',\n 'n_sex_cat_Mature male',\n 'n_family_size',\n 'n_title_Mrs',\n 'n_sex_cat_Senior male',\n 'embarked_Q',\n 'n_title_Dr',\n 'n_name_dr',\n 'n_title_Master',\n 'age',\n 'parch_6',\n 'n_title_Mr',\n 'pclass_2',\n 'parch_1',\n 'sibsp_4',\n 'pclass_3',\n 'n_age_cat_Senior',\n 'n_title_Rev',\n 'fare',\n 'sibsp_1',\n 'n_sex_cat_Young female',\n 'passengerid',\n 'n_age_cat_Young',\n 'n_sex_cat_Young male']"
                    ]
                },
                "mc_idx": 56,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 29,
                "o_idx": 0
            }
        },
        {
            "source": "# split data into depentdent and independent variables\nX = df[intersect_cols]\ny = df[target_label]",
            "mc_idx": 58,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    30,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 58,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 30,
                "o_idx": 0
            }
        },
        {
            "source": "# train model\nknn = KNeighborsClassifier()\n\nknn_params = {\"n_neighbors\": range(2,50)}\n\nknn_grid = GridSearchCV(knn,\n                        knn_params,\n                        cv=5,\n                        n_jobs=-1,\n                        verbose=True).fit(X, y)\n\nknn_grid.best_params_",
            "mc_idx": 61,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.16666666666666666,
                "Model_Interpretation": 0.16666666666666666,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    ".fit(": 1,
                    "model": 1,
                    "kneighborsclassifier": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "gridsearchcv": 3,
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    31,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Fitting 5 folds for each of 48 candidates, totalling 240 fits\n",
                        "{'n_neighbors': 34}"
                    ]
                },
                "mc_idx": 61,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 31,
                "o_idx": 1
            }
        },
        {
            "source": "# model with hyperparameters\nknn_hp = knn.set_params(**knn_grid.best_params_).fit(X,y)\n\ncv_output = cross_validate(knn_hp,\n                           X,\n                           y,\n                           cv=10,\n                           scoring=[\"accuracy\",\"f1\",\"roc_auc\"])\nprint(\"-\"*33)\nprint(f\"Test Accuracy: {cv_output['test_accuracy'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test F1: {cv_output['test_f1'].mean():.4f}\")\nprint(\"-\"*33)\nprint(f\"Test ROC AUC: {cv_output['test_roc_auc'].mean():.4f}\")\nprint(\"-\"*33)",
            "mc_idx": 63,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.16666666666666666,
                "Model_Interpretation": 0.16666666666666666,
                "Hyperparameter_Tuning": 0.8333333333333334,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 3,
                    ".mean": 3
                },
                "Data_Transform": {},
                "Model_Train": {
                    "cross_validate": 1,
                    ".fit(": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "param": 3,
                    "hyperparameter": 1,
                    "hyperparameters": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    32,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nTest Accuracy: 0.5746\n---------------------------------\nTest F1: 0.0874\n---------------------------------\nTest ROC AUC: 0.4144\n---------------------------------\n"
                    ]
                },
                "mc_idx": 63,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 32,
                "o_idx": 0
            }
        },
        {
            "source": "y_pred = knn_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head()",
            "mc_idx": 65,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.3333333333333333,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    ".predict(": 1
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    33,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  pclass_3  ...  n_title_Ms  n_title_Rev  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male  survived\n0  892          1    0.341431 -0.514781  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n1  893          0    1.343772 -0.530361  0            0          0.132839       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 0       \n2  894          1    2.500320 -0.479865  0            0         -0.588285       1            True     False     ...  False       False         True             False            False                  False                     True                  False                   False                 0       \n3  895          1   -0.198292 -0.499124  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n4  896          0   -0.583808 -0.431012  0            0          0.853962       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 0       \n\n[5 rows x 41 columns]"
                    ]
                },
                "mc_idx": 65,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 33,
                "o_idx": 0
            }
        },
        {
            "source": "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)\n\nrf_model = RandomForestClassifier().fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33)",
            "mc_idx": 68,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.14285714285714285,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.8571428571428571,
                "Model_Interpretation": 0.42857142857142855,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "train_test_split": 1,
                    ".fit(": 1,
                    "model": 3,
                    "randomforestclassifier": 2
                },
                "Model_Evaluation": {
                    "accuracy_score": 2,
                    "model": 3,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 3
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    34,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nModel Accuracy is: 0.7948\n---------------------------------\n"
                    ]
                },
                "mc_idx": 68,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 34,
                "o_idx": 0
            }
        },
        {
            "source": "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)\n\nrf = RandomForestClassifier()\nrf_params = {\"n_estimators\":[10,50,100,150,200],\n            \"max_depth\":[None,10,20,30,50]}\n\nrf_grid = GridSearchCV(rf,\n                      rf_params,\n                      cv=10,\n                      n_jobs=-1,\n                      verbose=True,\n                      scoring=\"accuracy\").fit(X_train,y_train)\n\nrf_grid.best_params_",
            "mc_idx": 70,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.14285714285714285,
                "Data_Transform": 0.0,
                "Model_Train": 0.5714285714285714,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "train_test_split": 1,
                    ".fit(": 1,
                    "randomforestclassifier": 2
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "gridsearchcv": 3,
                    "param": 3,
                    "train_test_split": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    35,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Fitting 10 folds for each of 25 candidates, totalling 250 fits\n",
                        "{'max_depth': 10, 'n_estimators': 200}"
                    ]
                },
                "mc_idx": 70,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 35,
                "o_idx": 1
            }
        },
        {
            "source": "rf_hp = rf.set_params(**rf_grid.best_params_).fit(X_train,y_train)\n\ny_pred = rf_hp.predict(X_test)\n\nprint(\"-\"*33)\nprint(f\"Model Accuracy is: {accuracy_score(y_pred, y_test):.4f}\")\nprint(\"-\"*33)",
            "mc_idx": 72,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.5,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    ".fit(": 1,
                    "model": 1
                },
                "Model_Evaluation": {
                    "accuracy_score": 2,
                    "model": 1,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "param": 2
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    36,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "---------------------------------\nModel Accuracy is: 0.8284\n---------------------------------\n"
                    ]
                },
                "mc_idx": 72,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 36,
                "o_idx": 0
            }
        },
        {
            "source": "y_pred = rf_hp.predict(df_test[intersect_cols])\n\ndf_test[\"survived\"] = y_pred\n\ndf_test.head()",
            "mc_idx": 74,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.3333333333333333,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    ".predict(": 1
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    37,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "   passengerid  sex  age       fare      n_has_cabin  n_name_dr  n_family_size  n_is_alone  pclass_2  pclass_3  ...  n_title_Ms  n_title_Rev  n_age_cat_Senior  n_age_cat_Young  n_sex_cat_Mature male  n_sex_cat_Senior female  n_sex_cat_Senior male  n_sex_cat_Young female  n_sex_cat_Young male  survived\n0  892          1    0.341431 -0.514781  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n1  893          0    1.343772 -0.530361  0            0          0.132839       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 0       \n2  894          1    2.500320 -0.479865  0            0         -0.588285       1            True     False     ...  False       False         True             False            False                  False                     True                  False                   False                 0       \n3  895          1   -0.198292 -0.499124  0            0         -0.588285       1           False      True     ...  False       False        False             False             True                  False                    False                  False                   False                 0       \n4  896          0   -0.583808 -0.431012  0            0          0.853962       0           False      True     ...  False       False        False             False            False                  False                    False                  False                   False                 1       \n\n[5 rows x 41 columns]"
                    ]
                },
                "mc_idx": 74,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 37,
                "o_idx": 0
            }
        }
    ],
    "markdown_cells": [
        {
            "source": "# TITANIC COMPETITION\n---",
            "mc_idx": 0,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Import Libraries",
            "mc_idx": 1,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Load Dataset",
            "mc_idx": 3,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Overview",
            "mc_idx": 5,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Lower All Variable Names and Take an Overview of Dataset",
            "mc_idx": 8,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Creating New Features",
            "mc_idx": 10,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Define New Features",
            "mc_idx": 11,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Define Data Types",
            "mc_idx": 13,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Explore Data",
            "mc_idx": 17,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Check Outliers",
            "mc_idx": 21,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Winsorise thresholds",
            "mc_idx": 24,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Check for Missing Values",
            "mc_idx": 27,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Dropping 'cabin' variable as it is mostly empty (77% empty) and other cardinal variables ('passengerid','ticket','name')",
            "mc_idx": 29,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Fill 'age' variable with the medians considering 'n_title' variable and fill rest with means considering there 'sex'",
            "mc_idx": 31,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Convert 'age' to int from float",
            "mc_idx": 33,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Fill 'age' related variables accordingly",
            "mc_idx": 35,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Fill 'embarked' variable with the median considering 'pclass' variable",
            "mc_idx": 37,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Label Encoding",
            "mc_idx": 39,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Find Binary Variables",
            "mc_idx": 40,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Binary Label Encoding",
            "mc_idx": 42,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Find categorical variables with multiple classes",
            "mc_idx": 44,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> One-Hot Label Encoding",
            "mc_idx": 46,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Scaling",
            "mc_idx": 48,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Apply StandardScaler to numarical values",
            "mc_idx": 49,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Modelling",
            "mc_idx": 51,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Prepare Test Data",
            "mc_idx": 52,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Get only columns exists in both train and test dataset as they do not have the same variables after feature extraction in both datasets",
            "mc_idx": 55,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Prepare Train Data for models",
            "mc_idx": 57,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# K-Nearest Neighbors Model",
            "mc_idx": 59,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Train Model",
            "mc_idx": 60,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Hyperparameters",
            "mc_idx": 62,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Get Prediction for Test Data",
            "mc_idx": 64,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Random Forest Classifier",
            "mc_idx": 66,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Train Model and Find Accuracy",
            "mc_idx": 67,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Find Hyperparameters",
            "mc_idx": 69,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Get Accuracy Score",
            "mc_idx": 71,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## >> Get Prediction for Test Data",
            "mc_idx": 73,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# FINAL: Random Forest Classifier Model >> Accuracy is: 82.84%",
            "mc_idx": 75,
            "nb_idx": 24,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "sim_matrix": [
        0.9287005662918091,
        0.9310320615768433,
        0.9386850595474243,
        0.9322164058685303,
        0.914923369884491,
        0.8993182182312012,
        0.9343841671943665,
        0.930008053779602,
        0.9313248991966248,
        0.9219496250152588,
        0.9361833930015564,
        0.9003466367721558,
        0.922346830368042,
        0.8999350666999817,
        0.9127643704414368,
        0.9415604472160339,
        0.9374746084213257,
        0.8993182182312012,
        0.92779940366745,
        0.9305732250213623,
        0.9393682479858398,
        0.930008053779602,
        0.9242072701454163,
        0.9135124087333679,
        1.0000001192092896,
        0.9254480600357056,
        0.9368665814399719,
        0.9330371022224426,
        0.9306453466415405,
        0.9071518778800964,
        0.9299999475479126,
        0.9398915767669678,
        0.9138490557670593,
        0.9246557950973511,
        0.9337262511253357,
        0.9354385733604431,
        0.9337262511253357,
        0.9380437135696411,
        0.9184163212776184,
        0.9030208587646484,
        0.9161466956138611,
        0.9372373223304749,
        0.8950202465057373,
        0.9393682479858398,
        0.9179714918136597,
        0.9135124087333679,
        0.9202260375022888,
        0.9138490557670593,
        0.9289305210113525,
        0.9318890571594238,
        0.9222552180290222,
        0.9354385733604431,
        0.9415604472160339,
        0.9417198896408081,
        0.9324674606323242,
        0.9331941604614258,
        0.9119032025337219,
        0.9245274662971497,
        0.9296848177909851,
        0.9438957571983337,
        0.9348268508911133,
        0.9260464906692505,
        0.899982750415802,
        0.897699236869812,
        0.9325147271156311,
        0.9225738644599915,
        0.9260182976722717,
        0.7521145343780518,
        0.9294689893722534,
        0.9160001873970032,
        0.9388824105262756,
        0.9286380410194397,
        0.9406787753105164,
        0.89909428358078,
        0.9329763054847717,
        0.9390321373939514,
        0.9116383790969849,
        0.9301918148994446,
        0.9242958426475525,
        0.898184061050415,
        0.9093835949897766,
        0.9244793057441711,
        0.9253906011581421,
        0.9079881906509399,
        0.9369994401931763,
        0.9265404939651489,
        0.907532274723053,
        0.9242072701454163,
        0.9324926733970642,
        0.934074342250824,
        0.9380437135696411,
        0.9305732250213623,
        0.9246557950973511,
        0.9296167492866516,
        0.9161133766174316,
        0.9128015637397766,
        0.9164680242538452,
        0.9055362343788147
    ],
    "cell_sim_matrix": [],
    "nb_order": [],
    "summary_data_VA": null
}