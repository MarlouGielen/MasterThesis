{
    "nb_idx": 96,
    "nb_name": "d0096",
    "filename": "titanic-wcg-xgboost-0-84688.ipynb",
    "filepath": "data/data_Kaggle/raw/titanic-wcg-xgboost-0-84688.ipynb",
    "source": "# Do any adult males survive? XGBoost will tell us!\nThere are 245 adult males in the Titanic test dataset. By reviewing all the top models on Kaggle, we see that everyone predicts that all adult males die. Is it possible to find at least 1 adult male that lived? If we can correctly predict the survival of any adult males, we can combine those predictions with a previously top scoring model, such as the WCG model, and have the most accurate Titanic model ever!   \n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/tree12.jpeg)  \n  \nThe WCG (woman-child-group) model (displayed in yellow above) was first described [here][1] and improved upon [here][2]. It was first implemented using only Name and scored 82%. Adding Ticket, Fare, and Pclass increased it's score to 83%. Then the [Mega Model][3] showed that there are patterns in the non-WCG passengers. This kernel finds those patterns and scores 85%.\n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/xgb.jpeg)\n## Explore adult males survival with XGBoost\nFirst we'll load in the Titanic dataset and impute missing Age and Fare. Next we'll engineer two new variables, x1 = Fare / (Ticket Frequency * 10), and x2 = Parch + SibSp + 1 + (Age / 70). Reducing the feature space to 2 dimensions allows us to visualize everything.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[3]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210 \n train <- read.csv('../input/titanic/train.csv',stringsAsFactors=F)\ntest <- read.csv('../input/titanic/test.csv',stringsAsFactors=F)\ntest$Survived <- NA; data <- rbind(train,test)\n# engineer person type\ndata$Title <- 'man'\ndata$Title[grep('Master',data$Name)] <- 'boy'\ndata$Title[data$Sex=='female'] <- 'woman'\n# impute missing Age and Fare\nlibrary(rpart)\nfit <- rpart(Age ~ Title + Pclass + SibSp + Parch,data=data)\ndata$Age[is.na(data$Age)] <- predict(fit,newdata=data[is.na(data$Age),])\nfit <- rpart(Fare ~ Title + Pclass + Embarked + Sex + Age,data=data)\ndata$Fare[is.na(data$Fare)] <- predict(fit,newdata=data[is.na(data$Fare),])\n# engineer features\ndata$TicketFreq <- ave(1:1309,data$Ticket,FUN=length)\ndata$FareAdj <- data$Fare / data$TicketFreq\ndata$FamilySize <- data$SibSp + data$Parch + 1\n# isolate training set males\ndata2 <- data[data$PassengerId<=891 & data$Title=='man',]\n# engineer 2 features from Fare, Ticket, SibSp, Parch, and Age\ndata3 <- data.frame(\n    y=data2$Survived,\n    x1=data2$Fare / (data2$TicketFreq * 10),\n    x2=(data2$SibSp + data2$Parch + 1) + (data2$Age / 70),\n    Pclass=data2$Pclass)\n# plot engineered features\nlibrary(ggplot2)\nlibrary(gridExtra)\ng1 = ggplot(data[data$FareAdj>0 & data$FareAdj<40,]) + \n    geom_density(aes(x=FareAdj,fill=factor(Pclass)),alpha=0.9,show.legend=F) +\n    labs(fill='Pclass') + geom_vline(xintercept=c(10,20),linetype='dotted') +\n    xlim(0,40) + labs(title='All Passengers',x='x1 = Fare / Ticket Frequency')\ng2 = ggplot(data[data$Fare>0 & data$Fare<40 ,]) +\n    geom_density(aes(x=Fare,fill=factor(Pclass)),alpha=0.9) +\n    xlim(0,40) + labs(title='All Passengers',fill='Pclass',y='')\ng3 = ggplot(data[!is.na(data$Survived) & data$Title=='man' & data$Pclass==1 & data$FamilySize<4,]) + \n    geom_density(aes(x=FamilySize+Age/70,fill=factor(Survived)),alpha=0.9,bw=0.04) +\n    labs(fill='Survived') +\n    annotate('text',x=1.4,y=2.4,label='Age 30\\nFS=1') +\n    annotate('text',x=2.4,y=2.4,label='Age 30\\nFS=2') +\n    geom_vline(xintercept=c(1.43,2.43),linetype='dotted') +\n    xlim(1,4) + labs(title='Adult Males Pclass=1',x='x2 = FamilySize + Age/70')\ngrid.arrange(g3,g1,g2,layout_matrix = rbind(c(1, 1), c(2, 3))) \n By creating 'x2' = FamilySize + Age/70, we can view SibSp, Parch, and Age on 1 dimension. The plot above shows that adult males with FamilySize<=2 in Pclass=1 between the ages 20 and 36 have greater than 50% chance of survival. (To be exact, 56% = 18 / 32 survived in the training set). Also males in their 40's with FamilySize=2 have 63% (= 5 / 8 ) chance of survival. To create 'x1', we divide Fare by TicketFrequency because that is the actual price paid. The 11 Sage family members did not pay \\$69.55 for each of their 11 third class tickets. They must have paid \\$6.32 = 69.55 / 11. Notice above how the 3 Pclasses become separated once you adjust the Fare. Lastly, we divide 'x1' by 10 so that its scale matches the scale of 'x2' which helps certain machine learning algorithms. Let's apply XGBoost to the pair of variables (x1, x2) and see what patterns it discovers. \n # classify males with xgboost\nlibrary(xgboost)\nx1s <- seq(0, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\nparam <- list(objective   = \"binary:logistic\",\n            eval_metric = \"error\",\n            max_depth   = 5,\n            eta         = 0.1,\n            gammma      = 0.1,\n            colsample_bytree = 1,\n            min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[,c('x1','x2')]),\n            label   = data3$y, \n            nrounds = 500,\n            print_every_n = 100,\n            verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>0.5,1,0)\n# plot classification regions\nggplot(data=data3[data3$x1<5 & data3$x2<3,]) +\n    xlim(0,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        537 adult males. Green is P(live)>0.5',color='Survived') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30') \n Cool. It looks like XGBoost found patterns of survival among the training dataset's adult males! From the plot above, we see that the most probable surviving adult males have Pclass = 1, FareAdj = \\$28, SibSp + Parch <= 1, and Age = 30. The shading indicates what XGBoost's classifying decisions are. The green region corresponds with XGBoost predicting P(live)>0.5. \n set.seed(300)\ns = sample(1:537,100)\ns2 = (1:537)[-s]\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[s2,c('x1','x2')]),\n            label   = data3$y[s2], \n            nrounds = 500,\n            print_every_n = 100,\n            silent = 1,\n            verbose = 0)\np <- predict(xgb,newdata=data.matrix(data3[s,c('x1','x2')]))\ndata3$y2 <- NA\nroc = data.frame(TN=rep(0,102),FP=rep(0,102),FN=rep(0,102)\n    ,TP=rep(0,102),FPR=rep(0,102),TPR=rep(0,102))\nrownames(roc) <- seq(0,1.01,0.01)\nfor (i in 1:102){\n    data3$y2[s] <- ifelse(p<(i-1)/100,0,1)\n    roc$TP[i] <- length(which(data3$y==1 & data3$y2==1))\n    roc$TN[i] <- length(which(data3$y==0 & data3$y2==0))\n    roc$FP[i] <- length(which(data3$y==0 & data3$y2==1))\n    roc$FN[i] <- length(which(data3$y==1 & data3$y2==0))\n    roc$FPR[i] <- roc$FP[i] / (roc$FP[i] + roc$TN[i])\n    roc$TPR[i] <- roc$TP[i] / (roc$TP[i] + roc$FN[i])\n}\ndiag <- data.frame(x=c(0,1),y=c(0,1))\nggplot(roc,aes(x=FPR,y=TPR)) + \n    geom_line() + labs(title='ROC curve where \"positive\" = male survives',\n        x='False positive rate',y='True positive rate') +\n    geom_point(data=roc[91,],aes(x=FPR,y=TPR),size=3,color='red') +\n    annotate('text',x=0.13,y=0.12,label='threshold p>=0.9',color='red') +\n    geom_point(data=roc[76,],aes(x=FPR,y=TPR),size=3,color='darkgreen') +\n    annotate('text',x=0.16,y=0.30,label='threshold p>=0.75',color='darkgreen') +\n    geom_point(data=roc[51,],aes(x=FPR,y=TPR),size=3,color='blue') +\n    annotate('text',x=0.20,y=0.5,label='threshold p>=0.5',color='blue') +\n    geom_line(data=diag,aes(x=x,y=y),linetype='dotted')\narea = 0\nfor(i in 1:101){\n    area = area + roc$TPR[i] * (roc$FPR[i]-roc$FPR[i+1])\n}\ncat(sprintf('Area under ROC = %f\\n',area)) \n The AUC, area under the ROC, equals 0.82 > 0.50. (Running 100 trials has average AUC = 0.70) That means that XGBoost has found patterns of survival, hooray! The ROC plot also shows us that If we predict survive whenever XGBoost says P(live)>0.5, then we will make many Type 1 errors (i.e. we will incorrectly predict adult males survive when they don't). We need to carefully select our threshold to maximize our accuracy, so we will use grid search to find the best threshold among 0.50, 0.75, 0.90, and 0.92.\n## Grid search and cross validate\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p>=0.90. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline). Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%. \n #accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.50','0.75','0.90','0.92')\n#for (j in 1:4)\n#for (k in 1:4){\nset.seed(2)\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='man',]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='man',]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p>=0.90,1,0)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy \n Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, this will allow us to find at least 1 surviving adult male in the test dataset!\n## Submission to Kaggle \n dataB <- data[data$PassengerId %in% 1:891 & data$Title=='man',]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='man',]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10,Pclass=dataC$Pclass\n    ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p>=0.90,1,0)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nmaleLive = which(data$Title=='man' & data$Predict==1)\ncat(sprintf('The following %d adult males are predicted to live\\n',length(maleLive)))\ndata[maleLive,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')] \n x1s <- seq(2, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>=0.90,1,0)\ng1 <- ggplot(data=dataTest[dataTest$x1>2 & dataTest$x1<5 & dataTest$x2>1 & dataTest$x2<3,]) +\n    xlim(2,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#666666','#0000FF'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 4 adult males have P(live)>=0.9',color='Predict') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30')\n\nfor (i in which(dataTest$p==1)){\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]-0.15,y=dataTest$x2[i],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=4)\n}\ng1 \n For the rest of the predictions, we'll use the following two simple rules (referred to as WCG model, woman-child-groups):\n* Predict survival for all boys in families where all females and boys live.  \n* Predict perish for all females in families where all females and boys die.  \n  \nThese two rules are explained and cross validated in the following two kernels, [Titanic using Name only][1] and [Titanic Mega Model][2]. Let's run the code from these kernels to find the 8 boys that live and 14 females that die.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210 \n # engineer \"woman-child-groups\"\ndata$Surname = substring( data$Name,0,regexpr(',',data$Name)-1)\ndata$GroupId = paste( data$Surname, data$Pclass, sub('.$','X',data$Ticket), data$Fare, data$Embarked, sep='-')\ndata$GroupId[data$Title=='man'] <- 'noGroup'\n# Mrs Wilkes (Needs) is Mrs Hocking (Needs) sister\ndata$GroupId[893] <- data$GroupId[775]\ndata$GroupFreq <- ave(1:1309,data$GroupId,FUN=length)\ndata$GroupId[data$GroupFreq<=1] <- 'noGroup'\ncat(sprintf('We found %d woman-child-groups\\n',length(unique(data$GroupId))-1))\ndata$TicketId = paste( data$Pclass,sub('.$','X',data$Ticket),data$Fare,data$Embarked,sep='-')\n# add nannies and relatives to groups\nc = 0\nfor (i in which(data$Title!='man' & data$GroupId=='noGroup')){\n    data$GroupId[i] = data$GroupId[data$TicketId==data$TicketId[i]][1]\n    if (data$GroupId[i]!='noGroup') c = c + 1\n}\ncat(sprintf('We found %d nannies/relatives and added them to groups.\\n',c))\n# calculate group survival rates\ndata$GroupSurvival <- NA\ndata$Survived <- as.numeric(as.character(data$Survived))\ndata$GroupSurvival[1:891] <- ave(data$Survived[1:891],data$GroupId[1:891])\nfor (i in 892:1309) data$GroupSurvival[i] <- data$GroupSurvival[which(data$GroupId==data$GroupId[i])[1]]\n# classify unknown groups\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass==3] <- 0\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass!=3] <- 1\n# make predictions\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndata$Predict[data$Title=='woman' & data$GroupSurvival==0] <- 0\ndata$Predict[data$Title=='boy' & data$GroupSurvival==1] <- 1\nx = which(data$Sex=='male' & data$Predict==1 & data$PassengerId>891)\ncat(sprintf('We found %d boys predicted to live\\n',length(x)))\nx = which(data$Sex=='female' & data$Predict==0 & data$PassengerId>891)\ncat(sprintf('We found %d females predicted to die\\n',length(x))) \n submit <- data.frame(PassengerId=892:1309,Survived=data$Predict[892:1309])\nsubmit$Survived[maleLive-891] <- 1\nwrite.csv(submit,'WCG_XGBoost1.csv',row.names=F) \n Drum roll..... UGH! Our score stayed the same. It seems that half our predictions for which adult males survive were right and half were wrong. Submitting the WCG plus these additional 4 predictions didn't change the WCG's score even though cross validation suggested that it would :-( However, we did find 1 or 2 adult males that live, hip hip hooray!\n# Explore solo females survival with XGBoost\nLet's apply this XGBoost exploration technique to the solo females. If we can correctly predict the survival of any solo females, we can combine those predictions with the WCG model and have the most accurate Titanic model ever! The training dataset contains 304 females. Of those, 108 are in WCG, 126 are traveling solo, and 80 travel with a brother or husband and have no children. Here we will explore the solo females. \n # identify WCG females\nWCGtrain = which(data$Passenger<=891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\nWCGtest = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\n# identify solo females\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15,Pclass=data2$Pclass)\n# set zoom\nx1s <- seq(0.5, 1.5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n# classify females with XGBoost\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n               data    = data.matrix(data3[,c('x1','x2')]),\n              label   = data3$y, \n              nrounds = 500,\n              print_every_n = 100,\n              verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.25,0,1)\n# plot results\nggplot(data=data3[data3$x1>0.5 & data3$x1<1.5 & data3$x2>1 & data3$x2<3,]) +\n    xlim(0.5,1.5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        126 solo females. Red is P(die)>=0.75',color='Survived') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    annotate('text',x=0.77,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.93,y=2.95,label='Fare = $9') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=1.35,y=1.61,label='Age = 25') +\n    annotate('text',x=1.35,y=1.28,label='Age = 20') \n It looks like XGBoost found patterns of survival among the training dataset's solo  females! From the plot above, we see that the most probable perishing solo females have Pclass = 3, FareAdj = \\$9, and Age = 22. Or they have Pclass=3, FareAdj = \\$8, and Age = 34. The shading indicates what XGBoost's classifying decisions are. The red region corresponds with XGBoost predicting P(die)>=0.75. \n ## Grid search and cross validation\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p<=0.08. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline) Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%. \n #accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.08','0.10','0.25','0.50')\n#for (j in 1:4)\n#for (k in 1:4){\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='woman' & data$FamilySize==1,]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='woman'& data$FamilySize==1,]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$Age/15,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p<=0.08,0,1)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy \n Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, we can achieve a slight improvement to our public score too. Let's see.\n## Submission to Kaggle \n dataB <- data[data$PassengerId %in% 1:891 & data$Title=='woman' & data$FamilySize==1,]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='woman' & data$FamilySize==1 \n    & !data$PassengerId %in% WCGtest,]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n    ,x2=dataC$Age/15,PassengerId=dataC$PassengerId,Pclass=dataC$Pclass)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p<=0.08,0,1)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nfemalePerish = which(data$Title=='woman' & data$Predict==0)\ncat(sprintf('The following %d females are predicted to die\\n',length(femalePerish)))\ndata[femalePerish,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')] \n x1s <- seq(0.6, 1, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.08,0,1)\ng1 <- ggplot(data=dataTest[dataTest$x1<1 & dataTest$x2<3,]) +\n    xlim(0.6,1) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#0000FF','#666666'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 10 non-WCG females have P(die)>=0.92',color='Predict') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=0.8,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.9,y=2.95,label='Fare = $9') +\n    annotate('text',x=0.65,y=1.61,label='Age = 25') +\n    annotate('text',x=0.65,y=1.28,label='Age = 20')\n# plot passenger numbers\nv = c(0.07,0.02,0.02,0.02,-0.04,0.02,0.02,0.02,0.02,0.02); c = 0\nfor (i in which(dataTest$p==0)){\n    c = c + 1;\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]+0.015,y=dataTest$x2[i]+v[c],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=3)\n}\ng1 \n submit$Survived[femalePerish-891] <- 0\nwrite.csv(submit,'WCG_XGBoost2.csv',row.names=F) \n ![result-female](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/surnameModel5.png)\n\nAwesome! It looks like most of our female predictions are correct. Our score increased from 83.3% to 84.7%!! This implies that 80% of our 10 female predictions were accurate, pretty good. Wow, we now have the most accurate Titanic model ever! \n ## Comparison with Mega Model\nThe model we have constructed above is just the WCG plus XGBoost. Previously we combined the WCG with an ensemble of top Kaggle models and scored 84.2% [here][1]. How do XGBoost's predictions compare with the ensemble's predictions? Surprisingly they are different. XGBoost found females that the ensemble did not and the ensemble found females that XGBoost did not. This implies that no single person has found the complete model to classify non-WCG passengers yet. Below are XGBoost's predictions (of 4 adult males to live and 10 solo females to die) with columns indicating the ensemble's predictions:  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210 \n top <- read.csv('../input/top-6-titanic-model/top6.csv')\nnew <- c(maleLive,femalePerish)\ntop$MegaModel <- 'NO'\nfor (i in new){\n    s = sum(top[i-891,c(2,3,4,5,7)])\n    if (s>2.5 & i %in% maleLive) top$MegaModel[i-891] <- 'YES'\n    if (s<2.5 & i %in% femalePerish) top$MegaModel[i-891] <- 'YES'\n}\ndata.frame(data[new,c('Name','Sex','Age','FareAdj')],inMegaModel=top[[9]][new-891],KM=top[[2]][new-891]\n    ,SCW=top[[3]][new-891],THW=top[[4]][new-891],FS=top[[5]][new-891],OT=top[[7]][new-891]) \n The rows above are the 14 predictions made by XGBoost model. The column Mega Model states whether these predictions were made by Mega Model's ensemble. The last 5 columns are how each model within Mega Model's ensemble voted where 1 = live and 0 = die. From the table above, we see that XGBoost and Mega Model are quite different. Therefore combining the predictions of WCG, XGBoost, and the ensemble, will most likely increase our score.  \n x = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\ntop$Sum <- 0; top$Predict <- top$GenderModel\nfor (i in 1:418){\n    for (j in c(2,3,4,5,7)) top$Sum[i] = top$Sum[i] + top[i,j]\n    if (top$GenderModel[i]==0 & top$Sum[i]>2.5) top$Predict[i] <- 1\n    if (top$GenderModel[i]==1 & top$Sum[i]<2.5) top$Predict[i] <- 0\n}\nensemble <- top$PassengerId[!top$PassengerId %in% x & top$Predict!=top$GenderModel]\ncat(sprintf('The ensemble predicts that %d females die.\\n',length(ensemble))) \n submit$Survived[ensemble-891] <- 0\nwrite.csv(submit,'WCG_XGBoost_Ensemble.csv',row.names=F) \n ![MegaBoost](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/MegaBoost.png)\n\nWow, we scored 85.2%!! Woohoo!! \n ## Comparison with CART, kNN, SVM, Random Forest\nBelow shows how different methods classify the solo females limited to Pclass=3 (60 females). CART, kNN, and SVM cross validate at 78.9% and Random Forest 78.7%. The four models change 16, 16, 6, 9 female predictions from the WCG and obtain public scores of 83.8%, 83.3%, 83.3%, and 84.2% respectively. (WCG obtains 83.3% by itself.) The regions created by Random Forest are the most similar to XGBoost above. And it scores the most similar. CART is nice because it is very readable. CART says that solo females in Pclass=3 with either FareAdj > \\$8 or Age > 25 die. This pattern exists in the training dataset. Among the 22 females fullfilling these conditions, 64 percent = 14/22 die. \n library(rpart)\nlibrary(caret)\nlibrary(e1071)\nlibrary(randomForest) \n g = list(); gp = list()\ngt = c('CART learns the training set','kNN k=5 learns the training set'\n       ,'SVM with radial kernel','Random Forest with P(die)>0.75')\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1 & data$Pclass==3,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15)\n# set zoom\nx1s <- seq(0.6, 1, length.out = 50)\nx2s <- seq(1, 3, length.out = 50)\nfor (i in 1:4){\n    g[[i]] <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n    if (i==1){\n        fit <- rpart(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==2){\n        fit <- knn3(factor(y) ~ x1 + x2,data3,k=3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==3){\n        fit <- svm(factor(y)~ x1 + x2,data3,kernel='radial')\n        p <- predict(fit,newdata=g[[i]])\n        g[[i]]$y <- as.numeric(as.character(p))\n    } else if (i==4){\n        fit <- randomForest(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]],type='prob')[,2]\n        g[[i]]$y <- ifelse(p<=0.25,0,1)\n    }\n    # plot results\n    gp[[i]] <- ggplot(data=data3[data3$x1>0.6 & data3$x1<1 & data3$x2>1 & data3$x2<3,]) +\n        xlim(0.6,1) + ylim(1,3) +\n        geom_tile(data=g[[i]],aes(x1,x2,fill=factor(y)),show.legend=F) +\n        geom_point(size=1.5,aes(x1,x2,color=factor(y)),show.legend=F) +\n        scale_color_manual(values=c('#AA0000','#00AA00'),\n            limits=c('0','1'),labels=c('0','1')) +\n        scale_fill_manual(values=c('#FF9999','#99FF99'),\n            limits=c('0','1'),labels=c('0','1')) +\n        #labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',fill='Classify',\n        labs(x='',y='',title=gt[i],color='Survived') +\n        geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n        geom_hline(yintercept=c(1.33,1.67), linetype='dotted')\n}\ngrid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],nrow=2) \n # Conclusion\nThis notebook demonstrated that it is very difficult to predict adult male survival. From the analysis above, it appears that there are patterns for adult male survival in the training set. However these patterns don't seem to carry over to the test dataset. I don't think that you can predict which adult males survive from Pclass, Age, Family Size, and Fare alone (even though the training set fools you into thinking that you can). If we want to predict male survival, we'll need to engineer features.  \n  \nRegarding females, prediction has more success. The WCG model by itself finds many females that perish, but this kernel showed that there are still patterns among the non-WCG females. For example, in the training set, there are 6 solo traveling females in Pclass = 3, with FareAdj between \\$8 and \\$9, and Age between 20 and 25. All 6 of these females died. That's a pattern. Using just Pclass, Age, Family Size, and Fare, we have shown that we can predict females to die with some success. We also found that females with FareAdj near 8 and Age near 34 were likely to perish.\n\nCan we do better than 85%? The WCG model can solidly achieve 84.4% CV and 83.3% public score by itself. This kernel showed there are more patterns in the data and the Mega Model's ensemble showed that there are more patterns in the data. It is encouraging to see that XGBoost here found different females than did the ensemble of Mega Model. This means that no single model has yet to classify all the non-WCG females. I encourage everyone to fork this kernel and improve it by building your own classifier for non-WCG passengers. (_NOTE: if you fork this kernel, turn on GPU under settings_)\n\nTo learn more about XGBoost, check out [Tae Hyon Whang's][1] great Python kernel called [Titanic Starter with XGBoost, 173/209 LB][2].  \n  \n[1]:https://www.kaggle.com/numbersareuseful\n[2]:https://www.kaggle.com/numbersareuseful/titanic-starter-with-xgboost-173-209-lb\n \n # Summary of Titanic models\n Here's a review of this notebook and my previous two. First the population was divided into 5 groups:  \n* (A) Males adults - 61% of population  \n* (B) Males boys (Master title) - 5% of population  \n* (C) Females that have children, sisters, or mothers (brothers, husbands optional) - 12%\n* (D) Females that have brothers, or husbands (no children, no sisters, no mothers) - 8%  \n* (E) Females traveling alone - 14% of population  \n  \nNext we built 3 classifiers:    \n* (1) [WCG classifies B+C][1]  \n* (2) [Ensemble of top 5 Kaggle classifies A+D+E][1]  \n* (3) [XGBoost classifies E][2]  \n  \nFinally we assembled 4 models. Here are cross validations and public scores:  \n* WCG + GenderModel = 84.4% CV and 83.3% PS  \n* WCG + Ensemble = unknown CV and 84.2% PS  \n* WCG + XGBoost + GenderModel = 85.2% CV and 84.7% PS  \n* WCG + XGBoost + Ensemble = unknown CV and 85.2% PS  \n\nThank you for reading my notebook #3! I hope you enjoyed it. Check out notebooks [#1][3] and [#2][1]. Feel free to use my classifiers, improve them, add your own, and assemble new models. I believe it is possible to increase CV and PS above 85%. Good luck! (_NOTE: if you fork this kernel, turn on GPU under settings_)  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[2]:https://www.kaggle.com/cdeotte/titanic-wcg-xgboost-0-84688\n[3]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818 \n ![hist](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/histXGB.png)",
    "code_source": "train <- read.csv('../input/titanic/train.csv',stringsAsFactors=F)\ntest <- read.csv('../input/titanic/test.csv',stringsAsFactors=F)\ntest$Survived <- NA; data <- rbind(train,test)\n# engineer person type\ndata$Title <- 'man'\ndata$Title[grep('Master',data$Name)] <- 'boy'\ndata$Title[data$Sex=='female'] <- 'woman'\n# impute missing Age and Fare\nlibrary(rpart)\nfit <- rpart(Age ~ Title + Pclass + SibSp + Parch,data=data)\ndata$Age[is.na(data$Age)] <- predict(fit,newdata=data[is.na(data$Age),])\nfit <- rpart(Fare ~ Title + Pclass + Embarked + Sex + Age,data=data)\ndata$Fare[is.na(data$Fare)] <- predict(fit,newdata=data[is.na(data$Fare),])\n# engineer features\ndata$TicketFreq <- ave(1:1309,data$Ticket,FUN=length)\ndata$FareAdj <- data$Fare / data$TicketFreq\ndata$FamilySize <- data$SibSp + data$Parch + 1\n# isolate training set males\ndata2 <- data[data$PassengerId<=891 & data$Title=='man',]\n# engineer 2 features from Fare, Ticket, SibSp, Parch, and Age\ndata3 <- data.frame(\n    y=data2$Survived,\n    x1=data2$Fare / (data2$TicketFreq * 10),\n    x2=(data2$SibSp + data2$Parch + 1) + (data2$Age / 70),\n    Pclass=data2$Pclass)\n# plot engineered features\nlibrary(ggplot2)\nlibrary(gridExtra)\ng1 = ggplot(data[data$FareAdj>0 & data$FareAdj<40,]) + \n    geom_density(aes(x=FareAdj,fill=factor(Pclass)),alpha=0.9,show.legend=F) +\n    labs(fill='Pclass') + geom_vline(xintercept=c(10,20),linetype='dotted') +\n    xlim(0,40) + labs(title='All Passengers',x='x1 = Fare / Ticket Frequency')\ng2 = ggplot(data[data$Fare>0 & data$Fare<40 ,]) +\n    geom_density(aes(x=Fare,fill=factor(Pclass)),alpha=0.9) +\n    xlim(0,40) + labs(title='All Passengers',fill='Pclass',y='')\ng3 = ggplot(data[!is.na(data$Survived) & data$Title=='man' & data$Pclass==1 & data$FamilySize<4,]) + \n    geom_density(aes(x=FamilySize+Age/70,fill=factor(Survived)),alpha=0.9,bw=0.04) +\n    labs(fill='Survived') +\n    annotate('text',x=1.4,y=2.4,label='Age 30\\nFS=1') +\n    annotate('text',x=2.4,y=2.4,label='Age 30\\nFS=2') +\n    geom_vline(xintercept=c(1.43,2.43),linetype='dotted') +\n    xlim(1,4) + labs(title='Adult Males Pclass=1',x='x2 = FamilySize + Age/70')\ngrid.arrange(g3,g1,g2,layout_matrix = rbind(c(1, 1), c(2, 3))) \n # classify males with xgboost\nlibrary(xgboost)\nx1s <- seq(0, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\nparam <- list(objective   = \"binary:logistic\",\n            eval_metric = \"error\",\n            max_depth   = 5,\n            eta         = 0.1,\n            gammma      = 0.1,\n            colsample_bytree = 1,\n            min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[,c('x1','x2')]),\n            label   = data3$y, \n            nrounds = 500,\n            print_every_n = 100,\n            verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>0.5,1,0)\n# plot classification regions\nggplot(data=data3[data3$x1<5 & data3$x2<3,]) +\n    xlim(0,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        537 adult males. Green is P(live)>0.5',color='Survived') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30') \n set.seed(300)\ns = sample(1:537,100)\ns2 = (1:537)[-s]\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[s2,c('x1','x2')]),\n            label   = data3$y[s2], \n            nrounds = 500,\n            print_every_n = 100,\n            silent = 1,\n            verbose = 0)\np <- predict(xgb,newdata=data.matrix(data3[s,c('x1','x2')]))\ndata3$y2 <- NA\nroc = data.frame(TN=rep(0,102),FP=rep(0,102),FN=rep(0,102)\n    ,TP=rep(0,102),FPR=rep(0,102),TPR=rep(0,102))\nrownames(roc) <- seq(0,1.01,0.01)\nfor (i in 1:102){\n    data3$y2[s] <- ifelse(p<(i-1)/100,0,1)\n    roc$TP[i] <- length(which(data3$y==1 & data3$y2==1))\n    roc$TN[i] <- length(which(data3$y==0 & data3$y2==0))\n    roc$FP[i] <- length(which(data3$y==0 & data3$y2==1))\n    roc$FN[i] <- length(which(data3$y==1 & data3$y2==0))\n    roc$FPR[i] <- roc$FP[i] / (roc$FP[i] + roc$TN[i])\n    roc$TPR[i] <- roc$TP[i] / (roc$TP[i] + roc$FN[i])\n}\ndiag <- data.frame(x=c(0,1),y=c(0,1))\nggplot(roc,aes(x=FPR,y=TPR)) + \n    geom_line() + labs(title='ROC curve where \"positive\" = male survives',\n        x='False positive rate',y='True positive rate') +\n    geom_point(data=roc[91,],aes(x=FPR,y=TPR),size=3,color='red') +\n    annotate('text',x=0.13,y=0.12,label='threshold p>=0.9',color='red') +\n    geom_point(data=roc[76,],aes(x=FPR,y=TPR),size=3,color='darkgreen') +\n    annotate('text',x=0.16,y=0.30,label='threshold p>=0.75',color='darkgreen') +\n    geom_point(data=roc[51,],aes(x=FPR,y=TPR),size=3,color='blue') +\n    annotate('text',x=0.20,y=0.5,label='threshold p>=0.5',color='blue') +\n    geom_line(data=diag,aes(x=x,y=y),linetype='dotted')\narea = 0\nfor(i in 1:101){\n    area = area + roc$TPR[i] * (roc$FPR[i]-roc$FPR[i+1])\n}\ncat(sprintf('Area under ROC = %f\\n',area)) \n #accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.50','0.75','0.90','0.92')\n#for (j in 1:4)\n#for (k in 1:4){\nset.seed(2)\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='man',]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='man',]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p>=0.90,1,0)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy \n dataB <- data[data$PassengerId %in% 1:891 & data$Title=='man',]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='man',]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10,Pclass=dataC$Pclass\n    ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p>=0.90,1,0)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nmaleLive = which(data$Title=='man' & data$Predict==1)\ncat(sprintf('The following %d adult males are predicted to live\\n',length(maleLive)))\ndata[maleLive,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')] \n x1s <- seq(2, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>=0.90,1,0)\ng1 <- ggplot(data=dataTest[dataTest$x1>2 & dataTest$x1<5 & dataTest$x2>1 & dataTest$x2<3,]) +\n    xlim(2,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#666666','#0000FF'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 4 adult males have P(live)>=0.9',color='Predict') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30')\n\nfor (i in which(dataTest$p==1)){\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]-0.15,y=dataTest$x2[i],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=4)\n}\ng1 \n # engineer \"woman-child-groups\"\ndata$Surname = substring( data$Name,0,regexpr(',',data$Name)-1)\ndata$GroupId = paste( data$Surname, data$Pclass, sub('.$','X',data$Ticket), data$Fare, data$Embarked, sep='-')\ndata$GroupId[data$Title=='man'] <- 'noGroup'\n# Mrs Wilkes (Needs) is Mrs Hocking (Needs) sister\ndata$GroupId[893] <- data$GroupId[775]\ndata$GroupFreq <- ave(1:1309,data$GroupId,FUN=length)\ndata$GroupId[data$GroupFreq<=1] <- 'noGroup'\ncat(sprintf('We found %d woman-child-groups\\n',length(unique(data$GroupId))-1))\ndata$TicketId = paste( data$Pclass,sub('.$','X',data$Ticket),data$Fare,data$Embarked,sep='-')\n# add nannies and relatives to groups\nc = 0\nfor (i in which(data$Title!='man' & data$GroupId=='noGroup')){\n    data$GroupId[i] = data$GroupId[data$TicketId==data$TicketId[i]][1]\n    if (data$GroupId[i]!='noGroup') c = c + 1\n}\ncat(sprintf('We found %d nannies/relatives and added them to groups.\\n',c))\n# calculate group survival rates\ndata$GroupSurvival <- NA\ndata$Survived <- as.numeric(as.character(data$Survived))\ndata$GroupSurvival[1:891] <- ave(data$Survived[1:891],data$GroupId[1:891])\nfor (i in 892:1309) data$GroupSurvival[i] <- data$GroupSurvival[which(data$GroupId==data$GroupId[i])[1]]\n# classify unknown groups\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass==3] <- 0\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass!=3] <- 1\n# make predictions\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndata$Predict[data$Title=='woman' & data$GroupSurvival==0] <- 0\ndata$Predict[data$Title=='boy' & data$GroupSurvival==1] <- 1\nx = which(data$Sex=='male' & data$Predict==1 & data$PassengerId>891)\ncat(sprintf('We found %d boys predicted to live\\n',length(x)))\nx = which(data$Sex=='female' & data$Predict==0 & data$PassengerId>891)\ncat(sprintf('We found %d females predicted to die\\n',length(x))) \n submit <- data.frame(PassengerId=892:1309,Survived=data$Predict[892:1309])\nsubmit$Survived[maleLive-891] <- 1\nwrite.csv(submit,'WCG_XGBoost1.csv',row.names=F) \n # identify WCG females\nWCGtrain = which(data$Passenger<=891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\nWCGtest = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\n# identify solo females\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15,Pclass=data2$Pclass)\n# set zoom\nx1s <- seq(0.5, 1.5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n# classify females with XGBoost\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n               data    = data.matrix(data3[,c('x1','x2')]),\n              label   = data3$y, \n              nrounds = 500,\n              print_every_n = 100,\n              verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.25,0,1)\n# plot results\nggplot(data=data3[data3$x1>0.5 & data3$x1<1.5 & data3$x2>1 & data3$x2<3,]) +\n    xlim(0.5,1.5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        126 solo females. Red is P(die)>=0.75',color='Survived') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    annotate('text',x=0.77,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.93,y=2.95,label='Fare = $9') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=1.35,y=1.61,label='Age = 25') +\n    annotate('text',x=1.35,y=1.28,label='Age = 20') \n #accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.08','0.10','0.25','0.50')\n#for (j in 1:4)\n#for (k in 1:4){\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='woman' & data$FamilySize==1,]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='woman'& data$FamilySize==1,]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$Age/15,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p<=0.08,0,1)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy \n dataB <- data[data$PassengerId %in% 1:891 & data$Title=='woman' & data$FamilySize==1,]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='woman' & data$FamilySize==1 \n    & !data$PassengerId %in% WCGtest,]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n    ,x2=dataC$Age/15,PassengerId=dataC$PassengerId,Pclass=dataC$Pclass)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p<=0.08,0,1)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nfemalePerish = which(data$Title=='woman' & data$Predict==0)\ncat(sprintf('The following %d females are predicted to die\\n',length(femalePerish)))\ndata[femalePerish,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')] \n x1s <- seq(0.6, 1, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.08,0,1)\ng1 <- ggplot(data=dataTest[dataTest$x1<1 & dataTest$x2<3,]) +\n    xlim(0.6,1) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#0000FF','#666666'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 10 non-WCG females have P(die)>=0.92',color='Predict') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=0.8,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.9,y=2.95,label='Fare = $9') +\n    annotate('text',x=0.65,y=1.61,label='Age = 25') +\n    annotate('text',x=0.65,y=1.28,label='Age = 20')\n# plot passenger numbers\nv = c(0.07,0.02,0.02,0.02,-0.04,0.02,0.02,0.02,0.02,0.02); c = 0\nfor (i in which(dataTest$p==0)){\n    c = c + 1;\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]+0.015,y=dataTest$x2[i]+v[c],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=3)\n}\ng1 \n submit$Survived[femalePerish-891] <- 0\nwrite.csv(submit,'WCG_XGBoost2.csv',row.names=F) \n top <- read.csv('../input/top-6-titanic-model/top6.csv')\nnew <- c(maleLive,femalePerish)\ntop$MegaModel <- 'NO'\nfor (i in new){\n    s = sum(top[i-891,c(2,3,4,5,7)])\n    if (s>2.5 & i %in% maleLive) top$MegaModel[i-891] <- 'YES'\n    if (s<2.5 & i %in% femalePerish) top$MegaModel[i-891] <- 'YES'\n}\ndata.frame(data[new,c('Name','Sex','Age','FareAdj')],inMegaModel=top[[9]][new-891],KM=top[[2]][new-891]\n    ,SCW=top[[3]][new-891],THW=top[[4]][new-891],FS=top[[5]][new-891],OT=top[[7]][new-891]) \n x = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\ntop$Sum <- 0; top$Predict <- top$GenderModel\nfor (i in 1:418){\n    for (j in c(2,3,4,5,7)) top$Sum[i] = top$Sum[i] + top[i,j]\n    if (top$GenderModel[i]==0 & top$Sum[i]>2.5) top$Predict[i] <- 1\n    if (top$GenderModel[i]==1 & top$Sum[i]<2.5) top$Predict[i] <- 0\n}\nensemble <- top$PassengerId[!top$PassengerId %in% x & top$Predict!=top$GenderModel]\ncat(sprintf('The ensemble predicts that %d females die.\\n',length(ensemble))) \n submit$Survived[ensemble-891] <- 0\nwrite.csv(submit,'WCG_XGBoost_Ensemble.csv',row.names=F) \n library(rpart)\nlibrary(caret)\nlibrary(e1071)\nlibrary(randomForest) \n g = list(); gp = list()\ngt = c('CART learns the training set','kNN k=5 learns the training set'\n       ,'SVM with radial kernel','Random Forest with P(die)>0.75')\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1 & data$Pclass==3,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15)\n# set zoom\nx1s <- seq(0.6, 1, length.out = 50)\nx2s <- seq(1, 3, length.out = 50)\nfor (i in 1:4){\n    g[[i]] <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n    if (i==1){\n        fit <- rpart(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==2){\n        fit <- knn3(factor(y) ~ x1 + x2,data3,k=3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==3){\n        fit <- svm(factor(y)~ x1 + x2,data3,kernel='radial')\n        p <- predict(fit,newdata=g[[i]])\n        g[[i]]$y <- as.numeric(as.character(p))\n    } else if (i==4){\n        fit <- randomForest(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]],type='prob')[,2]\n        g[[i]]$y <- ifelse(p<=0.25,0,1)\n    }\n    # plot results\n    gp[[i]] <- ggplot(data=data3[data3$x1>0.6 & data3$x1<1 & data3$x2>1 & data3$x2<3,]) +\n        xlim(0.6,1) + ylim(1,3) +\n        geom_tile(data=g[[i]],aes(x1,x2,fill=factor(y)),show.legend=F) +\n        geom_point(size=1.5,aes(x1,x2,color=factor(y)),show.legend=F) +\n        scale_color_manual(values=c('#AA0000','#00AA00'),\n            limits=c('0','1'),labels=c('0','1')) +\n        scale_fill_manual(values=c('#FF9999','#99FF99'),\n            limits=c('0','1'),labels=c('0','1')) +\n        #labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',fill='Classify',\n        labs(x='',y='',title=gt[i],color='Survived') +\n        geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n        geom_hline(yintercept=c(1.33,1.67), linetype='dotted')\n}\ngrid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],nrow=2)",
    "markdown_source": "# Do any adult males survive? XGBoost will tell us!\nThere are 245 adult males in the Titanic test dataset. By reviewing all the top models on Kaggle, we see that everyone predicts that all adult males die. Is it possible to find at least 1 adult male that lived? If we can correctly predict the survival of any adult males, we can combine those predictions with a previously top scoring model, such as the WCG model, and have the most accurate Titanic model ever!   \n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/tree12.jpeg)  \n  \nThe WCG (woman-child-group) model (displayed in yellow above) was first described [here][1] and improved upon [here][2]. It was first implemented using only Name and scored 82%. Adding Ticket, Fare, and Pclass increased it's score to 83%. Then the [Mega Model][3] showed that there are patterns in the non-WCG passengers. This kernel finds those patterns and scores 85%.\n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/xgb.jpeg)\n## Explore adult males survival with XGBoost\nFirst we'll load in the Titanic dataset and impute missing Age and Fare. Next we'll engineer two new variables, x1 = Fare / (Ticket Frequency * 10), and x2 = Parch + SibSp + 1 + (Age / 70). Reducing the feature space to 2 dimensions allows us to visualize everything.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[3]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210 \n By creating 'x2' = FamilySize + Age/70, we can view SibSp, Parch, and Age on 1 dimension. The plot above shows that adult males with FamilySize<=2 in Pclass=1 between the ages 20 and 36 have greater than 50% chance of survival. (To be exact, 56% = 18 / 32 survived in the training set). Also males in their 40's with FamilySize=2 have 63% (= 5 / 8 ) chance of survival. To create 'x1', we divide Fare by TicketFrequency because that is the actual price paid. The 11 Sage family members did not pay \\$69.55 for each of their 11 third class tickets. They must have paid \\$6.32 = 69.55 / 11. Notice above how the 3 Pclasses become separated once you adjust the Fare. Lastly, we divide 'x1' by 10 so that its scale matches the scale of 'x2' which helps certain machine learning algorithms. Let's apply XGBoost to the pair of variables (x1, x2) and see what patterns it discovers. \n Cool. It looks like XGBoost found patterns of survival among the training dataset's adult males! From the plot above, we see that the most probable surviving adult males have Pclass = 1, FareAdj = \\$28, SibSp + Parch <= 1, and Age = 30. The shading indicates what XGBoost's classifying decisions are. The green region corresponds with XGBoost predicting P(live)>0.5. \n The AUC, area under the ROC, equals 0.82 > 0.50. (Running 100 trials has average AUC = 0.70) That means that XGBoost has found patterns of survival, hooray! The ROC plot also shows us that If we predict survive whenever XGBoost says P(live)>0.5, then we will make many Type 1 errors (i.e. we will incorrectly predict adult males survive when they don't). We need to carefully select our threshold to maximize our accuracy, so we will use grid search to find the best threshold among 0.50, 0.75, 0.90, and 0.92.\n## Grid search and cross validate\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p>=0.90. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline). Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%. \n Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, this will allow us to find at least 1 surviving adult male in the test dataset!\n## Submission to Kaggle \n For the rest of the predictions, we'll use the following two simple rules (referred to as WCG model, woman-child-groups):\n* Predict survival for all boys in families where all females and boys live.  \n* Predict perish for all females in families where all females and boys die.  \n  \nThese two rules are explained and cross validated in the following two kernels, [Titanic using Name only][1] and [Titanic Mega Model][2]. Let's run the code from these kernels to find the 8 boys that live and 14 females that die.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210 \n Drum roll..... UGH! Our score stayed the same. It seems that half our predictions for which adult males survive were right and half were wrong. Submitting the WCG plus these additional 4 predictions didn't change the WCG's score even though cross validation suggested that it would :-( However, we did find 1 or 2 adult males that live, hip hip hooray!\n# Explore solo females survival with XGBoost\nLet's apply this XGBoost exploration technique to the solo females. If we can correctly predict the survival of any solo females, we can combine those predictions with the WCG model and have the most accurate Titanic model ever! The training dataset contains 304 females. Of those, 108 are in WCG, 126 are traveling solo, and 80 travel with a brother or husband and have no children. Here we will explore the solo females. \n It looks like XGBoost found patterns of survival among the training dataset's solo  females! From the plot above, we see that the most probable perishing solo females have Pclass = 3, FareAdj = \\$9, and Age = 22. Or they have Pclass=3, FareAdj = \\$8, and Age = 34. The shading indicates what XGBoost's classifying decisions are. The red region corresponds with XGBoost predicting P(die)>=0.75. \n ## Grid search and cross validation\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p<=0.08. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline) Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%. \n Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, we can achieve a slight improvement to our public score too. Let's see.\n## Submission to Kaggle \n ![result-female](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/surnameModel5.png)\n\nAwesome! It looks like most of our female predictions are correct. Our score increased from 83.3% to 84.7%!! This implies that 80% of our 10 female predictions were accurate, pretty good. Wow, we now have the most accurate Titanic model ever! \n ## Comparison with Mega Model\nThe model we have constructed above is just the WCG plus XGBoost. Previously we combined the WCG with an ensemble of top Kaggle models and scored 84.2% [here][1]. How do XGBoost's predictions compare with the ensemble's predictions? Surprisingly they are different. XGBoost found females that the ensemble did not and the ensemble found females that XGBoost did not. This implies that no single person has found the complete model to classify non-WCG passengers yet. Below are XGBoost's predictions (of 4 adult males to live and 10 solo females to die) with columns indicating the ensemble's predictions:  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210 \n The rows above are the 14 predictions made by XGBoost model. The column Mega Model states whether these predictions were made by Mega Model's ensemble. The last 5 columns are how each model within Mega Model's ensemble voted where 1 = live and 0 = die. From the table above, we see that XGBoost and Mega Model are quite different. Therefore combining the predictions of WCG, XGBoost, and the ensemble, will most likely increase our score.  \n ![MegaBoost](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/MegaBoost.png)\n\nWow, we scored 85.2%!! Woohoo!! \n ## Comparison with CART, kNN, SVM, Random Forest\nBelow shows how different methods classify the solo females limited to Pclass=3 (60 females). CART, kNN, and SVM cross validate at 78.9% and Random Forest 78.7%. The four models change 16, 16, 6, 9 female predictions from the WCG and obtain public scores of 83.8%, 83.3%, 83.3%, and 84.2% respectively. (WCG obtains 83.3% by itself.) The regions created by Random Forest are the most similar to XGBoost above. And it scores the most similar. CART is nice because it is very readable. CART says that solo females in Pclass=3 with either FareAdj > \\$8 or Age > 25 die. This pattern exists in the training dataset. Among the 22 females fullfilling these conditions, 64 percent = 14/22 die. \n # Conclusion\nThis notebook demonstrated that it is very difficult to predict adult male survival. From the analysis above, it appears that there are patterns for adult male survival in the training set. However these patterns don't seem to carry over to the test dataset. I don't think that you can predict which adult males survive from Pclass, Age, Family Size, and Fare alone (even though the training set fools you into thinking that you can). If we want to predict male survival, we'll need to engineer features.  \n  \nRegarding females, prediction has more success. The WCG model by itself finds many females that perish, but this kernel showed that there are still patterns among the non-WCG females. For example, in the training set, there are 6 solo traveling females in Pclass = 3, with FareAdj between \\$8 and \\$9, and Age between 20 and 25. All 6 of these females died. That's a pattern. Using just Pclass, Age, Family Size, and Fare, we have shown that we can predict females to die with some success. We also found that females with FareAdj near 8 and Age near 34 were likely to perish.\n\nCan we do better than 85%? The WCG model can solidly achieve 84.4% CV and 83.3% public score by itself. This kernel showed there are more patterns in the data and the Mega Model's ensemble showed that there are more patterns in the data. It is encouraging to see that XGBoost here found different females than did the ensemble of Mega Model. This means that no single model has yet to classify all the non-WCG females. I encourage everyone to fork this kernel and improve it by building your own classifier for non-WCG passengers. (_NOTE: if you fork this kernel, turn on GPU under settings_)\n\nTo learn more about XGBoost, check out [Tae Hyon Whang's][1] great Python kernel called [Titanic Starter with XGBoost, 173/209 LB][2].  \n  \n[1]:https://www.kaggle.com/numbersareuseful\n[2]:https://www.kaggle.com/numbersareuseful/titanic-starter-with-xgboost-173-209-lb\n \n # Summary of Titanic models\n Here's a review of this notebook and my previous two. First the population was divided into 5 groups:  \n* (A) Males adults - 61% of population  \n* (B) Males boys (Master title) - 5% of population  \n* (C) Females that have children, sisters, or mothers (brothers, husbands optional) - 12%\n* (D) Females that have brothers, or husbands (no children, no sisters, no mothers) - 8%  \n* (E) Females traveling alone - 14% of population  \n  \nNext we built 3 classifiers:    \n* (1) [WCG classifies B+C][1]  \n* (2) [Ensemble of top 5 Kaggle classifies A+D+E][1]  \n* (3) [XGBoost classifies E][2]  \n  \nFinally we assembled 4 models. Here are cross validations and public scores:  \n* WCG + GenderModel = 84.4% CV and 83.3% PS  \n* WCG + Ensemble = unknown CV and 84.2% PS  \n* WCG + XGBoost + GenderModel = 85.2% CV and 84.7% PS  \n* WCG + XGBoost + Ensemble = unknown CV and 85.2% PS  \n\nThank you for reading my notebook #3! I hope you enjoyed it. Check out notebooks [#1][3] and [#2][1]. Feel free to use my classifiers, improve them, add your own, and assemble new models. I believe it is possible to increase CV and PS above 85%. Good luck! (_NOTE: if you fork this kernel, turn on GPU under settings_)  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[2]:https://www.kaggle.com/cdeotte/titanic-wcg-xgboost-0-84688\n[3]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818 \n ![hist](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/histXGB.png)",
    "n_cells": 36,
    "n_code_cells": 18,
    "n_markdown_cells": 18,
    "n_raw_cells": 0,
    "n_outputs": 18,
    "r_code_cells": 0.5,
    "r_markdown_cells": 0.5,
    "r_raw_cells": 0.0,
    "r_outputs": 1.0,
    "n_exceptions": 0,
    "r_exceptions": 0.0,
    "n_lines": 558,
    "n_lines_code": 473,
    "n_lines_markdown": 85,
    "lines_per_cell": [
        12,
        43,
        1,
        39,
        1,
        40,
        3,
        44,
        2,
        27,
        27,
        8,
        34,
        3,
        3,
        46,
        1,
        2,
        43,
        2,
        28,
        30,
        2,
        3,
        4,
        10,
        1,
        9,
        2,
        3,
        2,
        4,
        42,
        12,
        24,
        1
    ],
    "lines_per_code_cell": [
        43,
        39,
        40,
        44,
        27,
        27,
        34,
        3,
        46,
        43,
        28,
        30,
        2,
        10,
        9,
        2,
        4,
        42
    ],
    "lines_per_markdown_cell": [
        12,
        1,
        1,
        3,
        2,
        8,
        3,
        1,
        2,
        2,
        3,
        4,
        1,
        3,
        2,
        12,
        24,
        1
    ],
    "ave_lines_per_cell": 15.5,
    "ave_lines_per_code_cell": 26.27777777777778,
    "ave_lines_per_markdown_cell": 4.722222222222222,
    "max_lines_per_cell": 46,
    "max_lines_per_code_cell": 46,
    "max_lines_per_markdown_cell": 24,
    "min_lines_per_cell": 1,
    "min_lines_per_code_cell": 2,
    "min_lines_per_markdown_cell": 1,
    "n_chars": 34396,
    "n_chars_code": 21811,
    "n_chars_markdown": 12585,
    "chars_per_cell": [
        1528,
        2182,
        875,
        1712,
        366,
        1733,
        977,
        1649,
        353,
        1300,
        1336,
        647,
        1840,
        158,
        820,
        2201,
        393,
        467,
        1648,
        345,
        1359,
        1470,
        87,
        345,
        702,
        491,
        439,
        505,
        91,
        126,
        735,
        66,
        1983,
        1963,
        1418,
        86
    ],
    "chars_per_code_cell": [
        2182,
        1712,
        1733,
        1649,
        1300,
        1336,
        1840,
        158,
        2201,
        1648,
        1359,
        1470,
        87,
        491,
        505,
        91,
        66,
        1983
    ],
    "chars_per_markdown_cell": [
        1528,
        875,
        366,
        977,
        353,
        647,
        820,
        393,
        467,
        345,
        345,
        702,
        439,
        126,
        735,
        1963,
        1418,
        86
    ],
    "ave_chars_per_line": 61.6415770609319,
    "ave_chars_per_cell": 955.4444444444445,
    "ave_chars_per_code_cell": 1211.7222222222222,
    "ave_chars_per_markdown_cell": 699.1666666666666,
    "max_chars_per_cell": 2201,
    "max_chars_per_code_cell": 2201,
    "max_chars_per_markdownell": 1963,
    "min_chars_per_cell": 66,
    "min_chars_per_code_cell": 66,
    "min_chars_per_markdown_cell": 86,
    "r_lines_code": 0.8476702508960573,
    "r_lines_markdown": 0.15232974910394265,
    "r_chars_markdown": 0.3658855680893127,
    "r_chars_code": 0.6341144319106873,
    "all_cells": [
        {
            "source": "# Do any adult males survive? XGBoost will tell us!\nThere are 245 adult males in the Titanic test dataset. By reviewing all the top models on Kaggle, we see that everyone predicts that all adult males die. Is it possible to find at least 1 adult male that lived? If we can correctly predict the survival of any adult males, we can combine those predictions with a previously top scoring model, such as the WCG model, and have the most accurate Titanic model ever!   \n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/tree12.jpeg)  \n  \nThe WCG (woman-child-group) model (displayed in yellow above) was first described [here][1] and improved upon [here][2]. It was first implemented using only Name and scored 82%. Adding Ticket, Fare, and Pclass increased it's score to 83%. Then the [Mega Model][3] showed that there are patterns in the non-WCG passengers. This kernel finds those patterns and scores 85%.\n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/xgb.jpeg)\n## Explore adult males survival with XGBoost\nFirst we'll load in the Titanic dataset and impute missing Age and Fare. Next we'll engineer two new variables, x1 = Fare / (Ticket Frequency * 10), and x2 = Parch + SibSp + 1 + (Age / 70). Reducing the feature space to 2 dimensions allows us to visualize everything.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[3]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210",
            "mc_idx": 0,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "train <- read.csv('../input/titanic/train.csv',stringsAsFactors=F)\ntest <- read.csv('../input/titanic/test.csv',stringsAsFactors=F)\ntest$Survived <- NA; data <- rbind(train,test)\n# engineer person type\ndata$Title <- 'man'\ndata$Title[grep('Master',data$Name)] <- 'boy'\ndata$Title[data$Sex=='female'] <- 'woman'\n# impute missing Age and Fare\nlibrary(rpart)\nfit <- rpart(Age ~ Title + Pclass + SibSp + Parch,data=data)\ndata$Age[is.na(data$Age)] <- predict(fit,newdata=data[is.na(data$Age),])\nfit <- rpart(Fare ~ Title + Pclass + Embarked + Sex + Age,data=data)\ndata$Fare[is.na(data$Fare)] <- predict(fit,newdata=data[is.na(data$Fare),])\n# engineer features\ndata$TicketFreq <- ave(1:1309,data$Ticket,FUN=length)\ndata$FareAdj <- data$Fare / data$TicketFreq\ndata$FamilySize <- data$SibSp + data$Parch + 1\n# isolate training set males\ndata2 <- data[data$PassengerId<=891 & data$Title=='man',]\n# engineer 2 features from Fare, Ticket, SibSp, Parch, and Age\ndata3 <- data.frame(\n    y=data2$Survived,\n    x1=data2$Fare / (data2$TicketFreq * 10),\n    x2=(data2$SibSp + data2$Parch + 1) + (data2$Age / 70),\n    Pclass=data2$Pclass)\n# plot engineered features\nlibrary(ggplot2)\nlibrary(gridExtra)\ng1 = ggplot(data[data$FareAdj>0 & data$FareAdj<40,]) + \n    geom_density(aes(x=FareAdj,fill=factor(Pclass)),alpha=0.9,show.legend=F) +\n    labs(fill='Pclass') + geom_vline(xintercept=c(10,20),linetype='dotted') +\n    xlim(0,40) + labs(title='All Passengers',x='x1 = Fare / Ticket Frequency')\ng2 = ggplot(data[data$Fare>0 & data$Fare<40 ,]) +\n    geom_density(aes(x=Fare,fill=factor(Pclass)),alpha=0.9) +\n    xlim(0,40) + labs(title='All Passengers',fill='Pclass',y='')\ng3 = ggplot(data[!is.na(data$Survived) & data$Title=='man' & data$Pclass==1 & data$FamilySize<4,]) + \n    geom_density(aes(x=FamilySize+Age/70,fill=factor(Survived)),alpha=0.9,bw=0.04) +\n    labs(fill='Survived') +\n    annotate('text',x=1.4,y=2.4,label='Age 30\\nFS=1') +\n    annotate('text',x=2.4,y=2.4,label='Age 30\\nFS=2') +\n    geom_vline(xintercept=c(1.43,2.43),linetype='dotted') +\n    xlim(1,4) + labs(title='Adult Males Pclass=1',x='x2 = FamilySize + Age/70')\ngrid.arrange(g3,g1,g2,layout_matrix = rbind(c(1, 1), c(2, 3)))",
            "mc_idx": 1,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c000_o000_image_0.png",
                    0,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 1,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "By creating 'x2' = FamilySize + Age/70, we can view SibSp, Parch, and Age on 1 dimension. The plot above shows that adult males with FamilySize<=2 in Pclass=1 between the ages 20 and 36 have greater than 50% chance of survival. (To be exact, 56% = 18 / 32 survived in the training set). Also males in their 40's with FamilySize=2 have 63% (= 5 / 8 ) chance of survival. To create 'x1', we divide Fare by TicketFrequency because that is the actual price paid. The 11 Sage family members did not pay \\$69.55 for each of their 11 third class tickets. They must have paid \\$6.32 = 69.55 / 11. Notice above how the 3 Pclasses become separated once you adjust the Fare. Lastly, we divide 'x1' by 10 so that its scale matches the scale of 'x2' which helps certain machine learning algorithms. Let's apply XGBoost to the pair of variables (x1, x2) and see what patterns it discovers.",
            "mc_idx": 2,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# classify males with xgboost\nlibrary(xgboost)\nx1s <- seq(0, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\nparam <- list(objective   = \"binary:logistic\",\n            eval_metric = \"error\",\n            max_depth   = 5,\n            eta         = 0.1,\n            gammma      = 0.1,\n            colsample_bytree = 1,\n            min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[,c('x1','x2')]),\n            label   = data3$y, \n            nrounds = 500,\n            print_every_n = 100,\n            verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>0.5,1,0)\n# plot classification regions\nggplot(data=data3[data3$x1<5 & data3$x2<3,]) +\n    xlim(0,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        537 adult males. Green is P(live)>0.5',color='Survived') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30')",
            "mc_idx": 3,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.75,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c001_o002_image_1.png",
                    1,
                    2,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "XGBoosting begun...\n[1]\ttrain-error:0.119181 \n[101]\ttrain-error:0.087523 \n[201]\ttrain-error:0.067039 \n[301]\ttrain-error:0.057728 \n[401]\ttrain-error:0.054004 \n[500]\ttrain-error:0.048417 \n"
                    ]
                },
                "mc_idx": 3,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 2
            }
        },
        {
            "source": "Cool. It looks like XGBoost found patterns of survival among the training dataset's adult males! From the plot above, we see that the most probable surviving adult males have Pclass = 1, FareAdj = \\$28, SibSp + Parch <= 1, and Age = 30. The shading indicates what XGBoost's classifying decisions are. The green region corresponds with XGBoost predicting P(live)>0.5.",
            "mc_idx": 4,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "set.seed(300)\ns = sample(1:537,100)\ns2 = (1:537)[-s]\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[s2,c('x1','x2')]),\n            label   = data3$y[s2], \n            nrounds = 500,\n            print_every_n = 100,\n            silent = 1,\n            verbose = 0)\np <- predict(xgb,newdata=data.matrix(data3[s,c('x1','x2')]))\ndata3$y2 <- NA\nroc = data.frame(TN=rep(0,102),FP=rep(0,102),FN=rep(0,102)\n    ,TP=rep(0,102),FPR=rep(0,102),TPR=rep(0,102))\nrownames(roc) <- seq(0,1.01,0.01)\nfor (i in 1:102){\n    data3$y2[s] <- ifelse(p<(i-1)/100,0,1)\n    roc$TP[i] <- length(which(data3$y==1 & data3$y2==1))\n    roc$TN[i] <- length(which(data3$y==0 & data3$y2==0))\n    roc$FP[i] <- length(which(data3$y==0 & data3$y2==1))\n    roc$FN[i] <- length(which(data3$y==1 & data3$y2==0))\n    roc$FPR[i] <- roc$FP[i] / (roc$FP[i] + roc$TN[i])\n    roc$TPR[i] <- roc$TP[i] / (roc$TP[i] + roc$FN[i])\n}\ndiag <- data.frame(x=c(0,1),y=c(0,1))\nggplot(roc,aes(x=FPR,y=TPR)) + \n    geom_line() + labs(title='ROC curve where \"positive\" = male survives',\n        x='False positive rate',y='True positive rate') +\n    geom_point(data=roc[91,],aes(x=FPR,y=TPR),size=3,color='red') +\n    annotate('text',x=0.13,y=0.12,label='threshold p>=0.9',color='red') +\n    geom_point(data=roc[76,],aes(x=FPR,y=TPR),size=3,color='darkgreen') +\n    annotate('text',x=0.16,y=0.30,label='threshold p>=0.75',color='darkgreen') +\n    geom_point(data=roc[51,],aes(x=FPR,y=TPR),size=3,color='blue') +\n    annotate('text',x=0.20,y=0.5,label='threshold p>=0.5',color='blue') +\n    geom_line(data=diag,aes(x=x,y=y),linetype='dotted')\narea = 0\nfor(i in 1:101){\n    area = area + roc$TPR[i] * (roc$FPR[i]-roc$FPR[i+1])\n}\ncat(sprintf('Area under ROC = %f\\n',area))",
            "mc_idx": 5,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.6666666666666666,
                "Visualization": 0.3333333333333333,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 2
                },
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c002_o002_image_2.png",
                    2,
                    2,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Area under ROC = 0.822917\n"
                    ]
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 2
            }
        },
        {
            "source": "The AUC, area under the ROC, equals 0.82 > 0.50. (Running 100 trials has average AUC = 0.70) That means that XGBoost has found patterns of survival, hooray! The ROC plot also shows us that If we predict survive whenever XGBoost says P(live)>0.5, then we will make many Type 1 errors (i.e. we will incorrectly predict adult males survive when they don't). We need to carefully select our threshold to maximize our accuracy, so we will use grid search to find the best threshold among 0.50, 0.75, 0.90, and 0.92.\n## Grid search and cross validate\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p>=0.90. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline). Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%.",
            "mc_idx": 6,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "#accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.50','0.75','0.90','0.92')\n#for (j in 1:4)\n#for (k in 1:4){\nset.seed(2)\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='man',]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='man',]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p>=0.90,1,0)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy",
            "mc_idx": 7,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Average CV of 100 trials = 0.790110\n"
                    ]
                },
                "mc_idx": 7,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, this will allow us to find at least 1 surviving adult male in the test dataset!\n## Submission to Kaggle",
            "mc_idx": 8,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "dataB <- data[data$PassengerId %in% 1:891 & data$Title=='man',]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='man',]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10,Pclass=dataC$Pclass\n    ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p>=0.90,1,0)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nmaleLive = which(data$Title=='man' & data$Predict==1)\ncat(sprintf('The following %d adult males are predicted to live\\n',length(maleLive)))\ndata[maleLive,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')]",
            "mc_idx": 9,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "The following 4 adult males are predicted to live\n",
                        "     PassengerId Pclass Name                     Age SibSp Parch FareAdj\n926   926        1      Mock, Mr. Philipp Edmund 30  1     0     28.875 \n942   942        1      Smith, Mr. Lucien Philip 24  1     0     30.000 \n1094 1094        1      Astor, Col. John Jacob   47  1     0     45.505 \n1215 1215        1      Rowe, Mr. Alfred G       33  0     0     26.550 "
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 1
            }
        },
        {
            "source": "x1s <- seq(2, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>=0.90,1,0)\ng1 <- ggplot(data=dataTest[dataTest$x1>2 & dataTest$x1<5 & dataTest$x2>1 & dataTest$x2<3,]) +\n    xlim(2,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#666666','#0000FF'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 4 adult males have P(live)>=0.9',color='Predict') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30')\n\nfor (i in which(dataTest$p==1)){\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]-0.15,y=dataTest$x2[i],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=4)\n}\ng1",
            "mc_idx": 10,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.4,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 3
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c005_o001_image_3.png",
                    5,
                    1,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 10,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 1
            }
        },
        {
            "source": "For the rest of the predictions, we'll use the following two simple rules (referred to as WCG model, woman-child-groups):\n* Predict survival for all boys in families where all females and boys live.  \n* Predict perish for all females in families where all females and boys die.  \n  \nThese two rules are explained and cross validated in the following two kernels, [Titanic using Name only][1] and [Titanic Mega Model][2]. Let's run the code from these kernels to find the 8 boys that live and 14 females that die.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210",
            "mc_idx": 11,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# engineer \"woman-child-groups\"\ndata$Surname = substring( data$Name,0,regexpr(',',data$Name)-1)\ndata$GroupId = paste( data$Surname, data$Pclass, sub('.$','X',data$Ticket), data$Fare, data$Embarked, sep='-')\ndata$GroupId[data$Title=='man'] <- 'noGroup'\n# Mrs Wilkes (Needs) is Mrs Hocking (Needs) sister\ndata$GroupId[893] <- data$GroupId[775]\ndata$GroupFreq <- ave(1:1309,data$GroupId,FUN=length)\ndata$GroupId[data$GroupFreq<=1] <- 'noGroup'\ncat(sprintf('We found %d woman-child-groups\\n',length(unique(data$GroupId))-1))\ndata$TicketId = paste( data$Pclass,sub('.$','X',data$Ticket),data$Fare,data$Embarked,sep='-')\n# add nannies and relatives to groups\nc = 0\nfor (i in which(data$Title!='man' & data$GroupId=='noGroup')){\n    data$GroupId[i] = data$GroupId[data$TicketId==data$TicketId[i]][1]\n    if (data$GroupId[i]!='noGroup') c = c + 1\n}\ncat(sprintf('We found %d nannies/relatives and added them to groups.\\n',c))\n# calculate group survival rates\ndata$GroupSurvival <- NA\ndata$Survived <- as.numeric(as.character(data$Survived))\ndata$GroupSurvival[1:891] <- ave(data$Survived[1:891],data$GroupId[1:891])\nfor (i in 892:1309) data$GroupSurvival[i] <- data$GroupSurvival[which(data$GroupId==data$GroupId[i])[1]]\n# classify unknown groups\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass==3] <- 0\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass!=3] <- 1\n# make predictions\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndata$Predict[data$Title=='woman' & data$GroupSurvival==0] <- 0\ndata$Predict[data$Title=='boy' & data$GroupSurvival==1] <- 1\nx = which(data$Sex=='male' & data$Predict==1 & data$PassengerId>891)\ncat(sprintf('We found %d boys predicted to live\\n',length(x)))\nx = which(data$Sex=='female' & data$Predict==0 & data$PassengerId>891)\ncat(sprintf('We found %d females predicted to die\\n',length(x)))",
            "mc_idx": 12,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "We found 80 woman-child-groups\nWe found 9 nannies/relatives and added them to groups.\nWe found 8 boys predicted to live\nWe found 14 females predicted to die\n"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "submit <- data.frame(PassengerId=892:1309,Survived=data$Predict[892:1309])\nsubmit$Survived[maleLive-891] <- 1\nwrite.csv(submit,'WCG_XGBoost1.csv',row.names=F)",
            "mc_idx": 13,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 13,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "Drum roll..... UGH! Our score stayed the same. It seems that half our predictions for which adult males survive were right and half were wrong. Submitting the WCG plus these additional 4 predictions didn't change the WCG's score even though cross validation suggested that it would :-( However, we did find 1 or 2 adult males that live, hip hip hooray!\n# Explore solo females survival with XGBoost\nLet's apply this XGBoost exploration technique to the solo females. If we can correctly predict the survival of any solo females, we can combine those predictions with the WCG model and have the most accurate Titanic model ever! The training dataset contains 304 females. Of those, 108 are in WCG, 126 are traveling solo, and 80 travel with a brother or husband and have no children. Here we will explore the solo females.",
            "mc_idx": 14,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# identify WCG females\nWCGtrain = which(data$Passenger<=891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\nWCGtest = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\n# identify solo females\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15,Pclass=data2$Pclass)\n# set zoom\nx1s <- seq(0.5, 1.5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n# classify females with XGBoost\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n               data    = data.matrix(data3[,c('x1','x2')]),\n              label   = data3$y, \n              nrounds = 500,\n              print_every_n = 100,\n              verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.25,0,1)\n# plot results\nggplot(data=data3[data3$x1>0.5 & data3$x1<1.5 & data3$x2>1 & data3$x2<3,]) +\n    xlim(0.5,1.5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        126 solo females. Red is P(die)>=0.75',color='Survived') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    annotate('text',x=0.77,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.93,y=2.95,label='Fare = $9') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=1.35,y=1.61,label='Age = 25') +\n    annotate('text',x=1.35,y=1.28,label='Age = 20')",
            "mc_idx": 15,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.75,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c008_o002_image_4.png",
                    8,
                    2,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "XGBoosting begun...\n[1]\ttrain-error:0.134921 \n[101]\ttrain-error:0.055556 \n[201]\ttrain-error:0.023810 \n[301]\ttrain-error:0.023810 \n[401]\ttrain-error:0.023810 \n[500]\ttrain-error:0.023810 \n"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 2
            }
        },
        {
            "source": "It looks like XGBoost found patterns of survival among the training dataset's solo  females! From the plot above, we see that the most probable perishing solo females have Pclass = 3, FareAdj = \\$9, and Age = 22. Or they have Pclass=3, FareAdj = \\$8, and Age = 34. The shading indicates what XGBoost's classifying decisions are. The red region corresponds with XGBoost predicting P(die)>=0.75.",
            "mc_idx": 16,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Grid search and cross validation\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p<=0.08. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline) Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%.",
            "mc_idx": 17,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "#accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.08','0.10','0.25','0.50')\n#for (j in 1:4)\n#for (k in 1:4){\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='woman' & data$FamilySize==1,]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='woman'& data$FamilySize==1,]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$Age/15,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p<=0.08,0,1)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy",
            "mc_idx": 18,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Average CV of 100 trials = 0.791429\n"
                    ]
                },
                "mc_idx": 18,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, we can achieve a slight improvement to our public score too. Let's see.\n## Submission to Kaggle",
            "mc_idx": 19,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "dataB <- data[data$PassengerId %in% 1:891 & data$Title=='woman' & data$FamilySize==1,]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='woman' & data$FamilySize==1 \n    & !data$PassengerId %in% WCGtest,]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n    ,x2=dataC$Age/15,PassengerId=dataC$PassengerId,Pclass=dataC$Pclass)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p<=0.08,0,1)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nfemalePerish = which(data$Title=='woman' & data$Predict==0)\ncat(sprintf('The following %d females are predicted to die\\n',length(femalePerish)))\ndata[femalePerish,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')]",
            "mc_idx": 20,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "The following 10 females are predicted to die\n",
                        "     PassengerId Pclass Name                                    Age      SibSp\n928   928        3      Roth, Miss. Sarah A                     24.92668 0    \n990   990        3      Braf, Miss. Elin Ester Maria            20.00000 0    \n1030 1030        3      Drapkin, Miss. Jennie                   23.00000 0    \n1061 1061        3      Hellstrom, Miss. Hilda Maria            22.00000 0    \n1091 1091        3      Rasmussen, Mrs. (Lena Jacobsen Solvang) 24.92668 0    \n1098 1098        3      McGowan, Miss. Katherine                35.00000 0    \n1160 1160        3      Howard, Miss. May Elizabeth             24.92668 0    \n1172 1172        3      Oreskovic, Miss. Jelka                  23.00000 0    \n1205 1205        3      Carr, Miss. Jeannie                     37.00000 0    \n1304 1304        3      Henriksson, Miss. Jenny Lovisa          28.00000 0    \n     Parch FareAdj\n928  0     8.0500 \n990  0     7.8542 \n1030 0     8.0500 \n1061 0     8.9625 \n1091 0     8.1125 \n1098 0     7.7500 \n1160 0     8.0500 \n1172 0     8.6625 \n1205 0     7.7500 \n1304 0     7.7750 "
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 1
            }
        },
        {
            "source": "x1s <- seq(0.6, 1, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.08,0,1)\ng1 <- ggplot(data=dataTest[dataTest$x1<1 & dataTest$x2<3,]) +\n    xlim(0.6,1) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#0000FF','#666666'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 10 non-WCG females have P(die)>=0.92',color='Predict') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=0.8,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.9,y=2.95,label='Fare = $9') +\n    annotate('text',x=0.65,y=1.61,label='Age = 25') +\n    annotate('text',x=0.65,y=1.28,label='Age = 20')\n# plot passenger numbers\nv = c(0.07,0.02,0.02,0.02,-0.04,0.02,0.02,0.02,0.02,0.02); c = 0\nfor (i in which(dataTest$p==0)){\n    c = c + 1;\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]+0.015,y=dataTest$x2[i]+v[c],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=3)\n}\ng1",
            "mc_idx": 21,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c011_o001_image_5.png",
                    11,
                    1,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 21,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 1
            }
        },
        {
            "source": "submit$Survived[femalePerish-891] <- 0\nwrite.csv(submit,'WCG_XGBoost2.csv',row.names=F)",
            "mc_idx": 22,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "![result-female](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/surnameModel5.png)\n\nAwesome! It looks like most of our female predictions are correct. Our score increased from 83.3% to 84.7%!! This implies that 80% of our 10 female predictions were accurate, pretty good. Wow, we now have the most accurate Titanic model ever!",
            "mc_idx": 23,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Comparison with Mega Model\nThe model we have constructed above is just the WCG plus XGBoost. Previously we combined the WCG with an ensemble of top Kaggle models and scored 84.2% [here][1]. How do XGBoost's predictions compare with the ensemble's predictions? Surprisingly they are different. XGBoost found females that the ensemble did not and the ensemble found females that XGBoost did not. This implies that no single person has found the complete model to classify non-WCG passengers yet. Below are XGBoost's predictions (of 4 adult males to live and 10 solo females to die) with columns indicating the ensemble's predictions:  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210",
            "mc_idx": 24,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "top <- read.csv('../input/top-6-titanic-model/top6.csv')\nnew <- c(maleLive,femalePerish)\ntop$MegaModel <- 'NO'\nfor (i in new){\n    s = sum(top[i-891,c(2,3,4,5,7)])\n    if (s>2.5 & i %in% maleLive) top$MegaModel[i-891] <- 'YES'\n    if (s<2.5 & i %in% femalePerish) top$MegaModel[i-891] <- 'YES'\n}\ndata.frame(data[new,c('Name','Sex','Age','FareAdj')],inMegaModel=top[[9]][new-891],KM=top[[2]][new-891]\n    ,SCW=top[[3]][new-891],THW=top[[4]][new-891],FS=top[[5]][new-891],OT=top[[7]][new-891])",
            "mc_idx": 25,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 5
                },
                "Model_Evaluation": {
                    "model": 5
                },
                "Model_Interpretation": {
                    "model": 5
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    13,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     Name                                    Sex    Age      FareAdj\n926  Mock, Mr. Philipp Edmund                male   30.00000 28.8750\n942  Smith, Mr. Lucien Philip                male   24.00000 30.0000\n1094 Astor, Col. John Jacob                  male   47.00000 45.5050\n1215 Rowe, Mr. Alfred G                      male   33.00000 26.5500\n928  Roth, Miss. Sarah A                     female 24.92668  8.0500\n990  Braf, Miss. Elin Ester Maria            female 20.00000  7.8542\n1030 Drapkin, Miss. Jennie                   female 23.00000  8.0500\n1061 Hellstrom, Miss. Hilda Maria            female 22.00000  8.9625\n1091 Rasmussen, Mrs. (Lena Jacobsen Solvang) female 24.92668  8.1125\n1098 McGowan, Miss. Katherine                female 35.00000  7.7500\n1160 Howard, Miss. May Elizabeth             female 24.92668  8.0500\n1172 Oreskovic, Miss. Jelka                  female 23.00000  8.6625\n1205 Carr, Miss. Jeannie                     female 37.00000  7.7500\n1304 Henriksson, Miss. Jenny Lovisa          female 28.00000  7.7750\n     inMegaModel KM SCW THW FS OT\n926  NO          0  0   0   0  0 \n942  NO          0  0   1   0  0 \n1094 NO          0  1   0   0  0 \n1215 NO          1  0   0   0  0 \n928  NO          1  1   1   0  1 \n990  NO          1  1   1   0  1 \n1030 YES         0  0   1   0  1 \n1061 NO          1  1   1   0  1 \n1091 YES         0  1   1   0  0 \n1098 NO          0  1   1   1  1 \n1160 NO          1  1   1   0  1 \n1172 YES         0  0   0   0  1 \n1205 NO          0  1   1   0  1 \n1304 NO          1  0   1   0  1 "
                    ]
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "The rows above are the 14 predictions made by XGBoost model. The column Mega Model states whether these predictions were made by Mega Model's ensemble. The last 5 columns are how each model within Mega Model's ensemble voted where 1 = live and 0 = die. From the table above, we see that XGBoost and Mega Model are quite different. Therefore combining the predictions of WCG, XGBoost, and the ensemble, will most likely increase our score. ",
            "mc_idx": 26,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "x = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\ntop$Sum <- 0; top$Predict <- top$GenderModel\nfor (i in 1:418){\n    for (j in c(2,3,4,5,7)) top$Sum[i] = top$Sum[i] + top[i,j]\n    if (top$GenderModel[i]==0 & top$Sum[i]>2.5) top$Predict[i] <- 1\n    if (top$GenderModel[i]==1 & top$Sum[i]<2.5) top$Predict[i] <- 0\n}\nensemble <- top$PassengerId[!top$PassengerId %in% x & top$Predict!=top$GenderModel]\ncat(sprintf('The ensemble predicts that %d females die.\\n',length(ensemble)))",
            "mc_idx": 27,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 4
                },
                "Model_Evaluation": {
                    "model": 4
                },
                "Model_Interpretation": {
                    "model": 4
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    14,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "The ensemble predicts that 12 females die.\n"
                    ]
                },
                "mc_idx": 27,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "submit$Survived[ensemble-891] <- 0\nwrite.csv(submit,'WCG_XGBoost_Ensemble.csv',row.names=F)",
            "mc_idx": 28,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 28,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "![MegaBoost](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/MegaBoost.png)\n\nWow, we scored 85.2%!! Woohoo!!",
            "mc_idx": 29,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Comparison with CART, kNN, SVM, Random Forest\nBelow shows how different methods classify the solo females limited to Pclass=3 (60 females). CART, kNN, and SVM cross validate at 78.9% and Random Forest 78.7%. The four models change 16, 16, 6, 9 female predictions from the WCG and obtain public scores of 83.8%, 83.3%, 83.3%, and 84.2% respectively. (WCG obtains 83.3% by itself.) The regions created by Random Forest are the most similar to XGBoost above. And it scores the most similar. CART is nice because it is very readable. CART says that solo females in Pclass=3 with either FareAdj > \\$8 or Age > 25 die. This pattern exists in the training dataset. Among the 22 females fullfilling these conditions, 64 percent = 14/22 die.",
            "mc_idx": 30,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "library(rpart)\nlibrary(caret)\nlibrary(e1071)\nlibrary(randomForest)",
            "mc_idx": 31,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Loading required package: lattice\nrandomForest 4.6-14\nType rfNews() to see new features/changes/bug fixes.\n\nAttaching package: \u2018randomForest\u2019\n\nThe following object is masked from \u2018package:gridExtra\u2019:\n\n    combine\n\nThe following object is masked from \u2018package:ggplot2\u2019:\n\n    margin\n\n"
                    ]
                },
                "mc_idx": 31,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "g = list(); gp = list()\ngt = c('CART learns the training set','kNN k=5 learns the training set'\n       ,'SVM with radial kernel','Random Forest with P(die)>0.75')\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1 & data$Pclass==3,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15)\n# set zoom\nx1s <- seq(0.6, 1, length.out = 50)\nx2s <- seq(1, 3, length.out = 50)\nfor (i in 1:4){\n    g[[i]] <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n    if (i==1){\n        fit <- rpart(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==2){\n        fit <- knn3(factor(y) ~ x1 + x2,data3,k=3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==3){\n        fit <- svm(factor(y)~ x1 + x2,data3,kernel='radial')\n        p <- predict(fit,newdata=g[[i]])\n        g[[i]]$y <- as.numeric(as.character(p))\n    } else if (i==4){\n        fit <- randomForest(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]],type='prob')[,2]\n        g[[i]]$y <- ifelse(p<=0.25,0,1)\n    }\n    # plot results\n    gp[[i]] <- ggplot(data=data3[data3$x1>0.6 & data3$x1<1 & data3$x2>1 & data3$x2<3,]) +\n        xlim(0.6,1) + ylim(1,3) +\n        geom_tile(data=g[[i]],aes(x1,x2,fill=factor(y)),show.legend=F) +\n        geom_point(size=1.5,aes(x1,x2,color=factor(y)),show.legend=F) +\n        scale_color_manual(values=c('#AA0000','#00AA00'),\n            limits=c('0','1'),labels=c('0','1')) +\n        scale_fill_manual(values=c('#FF9999','#99FF99'),\n            limits=c('0','1'),labels=c('0','1')) +\n        #labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',fill='Classify',\n        labs(x='',y='',title=gt[i],color='Survived') +\n        geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n        geom_hline(yintercept=c(1.33,1.67), linetype='dotted')\n}\ngrid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],nrow=2)",
            "mc_idx": 32,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c017_o000_image_6.png",
                    17,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "# Conclusion\nThis notebook demonstrated that it is very difficult to predict adult male survival. From the analysis above, it appears that there are patterns for adult male survival in the training set. However these patterns don't seem to carry over to the test dataset. I don't think that you can predict which adult males survive from Pclass, Age, Family Size, and Fare alone (even though the training set fools you into thinking that you can). If we want to predict male survival, we'll need to engineer features.  \n  \nRegarding females, prediction has more success. The WCG model by itself finds many females that perish, but this kernel showed that there are still patterns among the non-WCG females. For example, in the training set, there are 6 solo traveling females in Pclass = 3, with FareAdj between \\$8 and \\$9, and Age between 20 and 25. All 6 of these females died. That's a pattern. Using just Pclass, Age, Family Size, and Fare, we have shown that we can predict females to die with some success. We also found that females with FareAdj near 8 and Age near 34 were likely to perish.\n\nCan we do better than 85%? The WCG model can solidly achieve 84.4% CV and 83.3% public score by itself. This kernel showed there are more patterns in the data and the Mega Model's ensemble showed that there are more patterns in the data. It is encouraging to see that XGBoost here found different females than did the ensemble of Mega Model. This means that no single model has yet to classify all the non-WCG females. I encourage everyone to fork this kernel and improve it by building your own classifier for non-WCG passengers. (_NOTE: if you fork this kernel, turn on GPU under settings_)\n\nTo learn more about XGBoost, check out [Tae Hyon Whang's][1] great Python kernel called [Titanic Starter with XGBoost, 173/209 LB][2].  \n  \n[1]:https://www.kaggle.com/numbersareuseful\n[2]:https://www.kaggle.com/numbersareuseful/titanic-starter-with-xgboost-173-209-lb\n",
            "mc_idx": 33,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Summary of Titanic models\n Here's a review of this notebook and my previous two. First the population was divided into 5 groups:  \n* (A) Males adults - 61% of population  \n* (B) Males boys (Master title) - 5% of population  \n* (C) Females that have children, sisters, or mothers (brothers, husbands optional) - 12%\n* (D) Females that have brothers, or husbands (no children, no sisters, no mothers) - 8%  \n* (E) Females traveling alone - 14% of population  \n  \nNext we built 3 classifiers:    \n* (1) [WCG classifies B+C][1]  \n* (2) [Ensemble of top 5 Kaggle classifies A+D+E][1]  \n* (3) [XGBoost classifies E][2]  \n  \nFinally we assembled 4 models. Here are cross validations and public scores:  \n* WCG + GenderModel = 84.4% CV and 83.3% PS  \n* WCG + Ensemble = unknown CV and 84.2% PS  \n* WCG + XGBoost + GenderModel = 85.2% CV and 84.7% PS  \n* WCG + XGBoost + Ensemble = unknown CV and 85.2% PS  \n\nThank you for reading my notebook #3! I hope you enjoyed it. Check out notebooks [#1][3] and [#2][1]. Feel free to use my classifiers, improve them, add your own, and assemble new models. I believe it is possible to increase CV and PS above 85%. Good luck! (_NOTE: if you fork this kernel, turn on GPU under settings_)  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[2]:https://www.kaggle.com/cdeotte/titanic-wcg-xgboost-0-84688\n[3]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818",
            "mc_idx": 34,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "![hist](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/histXGB.png)",
            "mc_idx": 35,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "code_cells": [
        {
            "source": "train <- read.csv('../input/titanic/train.csv',stringsAsFactors=F)\ntest <- read.csv('../input/titanic/test.csv',stringsAsFactors=F)\ntest$Survived <- NA; data <- rbind(train,test)\n# engineer person type\ndata$Title <- 'man'\ndata$Title[grep('Master',data$Name)] <- 'boy'\ndata$Title[data$Sex=='female'] <- 'woman'\n# impute missing Age and Fare\nlibrary(rpart)\nfit <- rpart(Age ~ Title + Pclass + SibSp + Parch,data=data)\ndata$Age[is.na(data$Age)] <- predict(fit,newdata=data[is.na(data$Age),])\nfit <- rpart(Fare ~ Title + Pclass + Embarked + Sex + Age,data=data)\ndata$Fare[is.na(data$Fare)] <- predict(fit,newdata=data[is.na(data$Fare),])\n# engineer features\ndata$TicketFreq <- ave(1:1309,data$Ticket,FUN=length)\ndata$FareAdj <- data$Fare / data$TicketFreq\ndata$FamilySize <- data$SibSp + data$Parch + 1\n# isolate training set males\ndata2 <- data[data$PassengerId<=891 & data$Title=='man',]\n# engineer 2 features from Fare, Ticket, SibSp, Parch, and Age\ndata3 <- data.frame(\n    y=data2$Survived,\n    x1=data2$Fare / (data2$TicketFreq * 10),\n    x2=(data2$SibSp + data2$Parch + 1) + (data2$Age / 70),\n    Pclass=data2$Pclass)\n# plot engineered features\nlibrary(ggplot2)\nlibrary(gridExtra)\ng1 = ggplot(data[data$FareAdj>0 & data$FareAdj<40,]) + \n    geom_density(aes(x=FareAdj,fill=factor(Pclass)),alpha=0.9,show.legend=F) +\n    labs(fill='Pclass') + geom_vline(xintercept=c(10,20),linetype='dotted') +\n    xlim(0,40) + labs(title='All Passengers',x='x1 = Fare / Ticket Frequency')\ng2 = ggplot(data[data$Fare>0 & data$Fare<40 ,]) +\n    geom_density(aes(x=Fare,fill=factor(Pclass)),alpha=0.9) +\n    xlim(0,40) + labs(title='All Passengers',fill='Pclass',y='')\ng3 = ggplot(data[!is.na(data$Survived) & data$Title=='man' & data$Pclass==1 & data$FamilySize<4,]) + \n    geom_density(aes(x=FamilySize+Age/70,fill=factor(Survived)),alpha=0.9,bw=0.04) +\n    labs(fill='Survived') +\n    annotate('text',x=1.4,y=2.4,label='Age 30\\nFS=1') +\n    annotate('text',x=2.4,y=2.4,label='Age 30\\nFS=2') +\n    geom_vline(xintercept=c(1.43,2.43),linetype='dotted') +\n    xlim(1,4) + labs(title='Adult Males Pclass=1',x='x2 = FamilySize + Age/70')\ngrid.arrange(g3,g1,g2,layout_matrix = rbind(c(1, 1), c(2, 3)))",
            "mc_idx": 1,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c000_o000_image_0.png",
                    0,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 1,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "# classify males with xgboost\nlibrary(xgboost)\nx1s <- seq(0, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\nparam <- list(objective   = \"binary:logistic\",\n            eval_metric = \"error\",\n            max_depth   = 5,\n            eta         = 0.1,\n            gammma      = 0.1,\n            colsample_bytree = 1,\n            min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[,c('x1','x2')]),\n            label   = data3$y, \n            nrounds = 500,\n            print_every_n = 100,\n            verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>0.5,1,0)\n# plot classification regions\nggplot(data=data3[data3$x1<5 & data3$x2<3,]) +\n    xlim(0,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        537 adult males. Green is P(live)>0.5',color='Survived') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30')",
            "mc_idx": 3,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.75,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c001_o002_image_1.png",
                    1,
                    2,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "XGBoosting begun...\n[1]\ttrain-error:0.119181 \n[101]\ttrain-error:0.087523 \n[201]\ttrain-error:0.067039 \n[301]\ttrain-error:0.057728 \n[401]\ttrain-error:0.054004 \n[500]\ttrain-error:0.048417 \n"
                    ]
                },
                "mc_idx": 3,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 2
            }
        },
        {
            "source": "set.seed(300)\ns = sample(1:537,100)\ns2 = (1:537)[-s]\nxgb <- xgboost(params  = param,\n            data    = data.matrix(data3[s2,c('x1','x2')]),\n            label   = data3$y[s2], \n            nrounds = 500,\n            print_every_n = 100,\n            silent = 1,\n            verbose = 0)\np <- predict(xgb,newdata=data.matrix(data3[s,c('x1','x2')]))\ndata3$y2 <- NA\nroc = data.frame(TN=rep(0,102),FP=rep(0,102),FN=rep(0,102)\n    ,TP=rep(0,102),FPR=rep(0,102),TPR=rep(0,102))\nrownames(roc) <- seq(0,1.01,0.01)\nfor (i in 1:102){\n    data3$y2[s] <- ifelse(p<(i-1)/100,0,1)\n    roc$TP[i] <- length(which(data3$y==1 & data3$y2==1))\n    roc$TN[i] <- length(which(data3$y==0 & data3$y2==0))\n    roc$FP[i] <- length(which(data3$y==0 & data3$y2==1))\n    roc$FN[i] <- length(which(data3$y==1 & data3$y2==0))\n    roc$FPR[i] <- roc$FP[i] / (roc$FP[i] + roc$TN[i])\n    roc$TPR[i] <- roc$TP[i] / (roc$TP[i] + roc$FN[i])\n}\ndiag <- data.frame(x=c(0,1),y=c(0,1))\nggplot(roc,aes(x=FPR,y=TPR)) + \n    geom_line() + labs(title='ROC curve where \"positive\" = male survives',\n        x='False positive rate',y='True positive rate') +\n    geom_point(data=roc[91,],aes(x=FPR,y=TPR),size=3,color='red') +\n    annotate('text',x=0.13,y=0.12,label='threshold p>=0.9',color='red') +\n    geom_point(data=roc[76,],aes(x=FPR,y=TPR),size=3,color='darkgreen') +\n    annotate('text',x=0.16,y=0.30,label='threshold p>=0.75',color='darkgreen') +\n    geom_point(data=roc[51,],aes(x=FPR,y=TPR),size=3,color='blue') +\n    annotate('text',x=0.20,y=0.5,label='threshold p>=0.5',color='blue') +\n    geom_line(data=diag,aes(x=x,y=y),linetype='dotted')\narea = 0\nfor(i in 1:101){\n    area = area + roc$TPR[i] * (roc$FPR[i]-roc$FPR[i+1])\n}\ncat(sprintf('Area under ROC = %f\\n',area))",
            "mc_idx": 5,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.6666666666666666,
                "Visualization": 0.3333333333333333,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 2
                },
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c002_o002_image_2.png",
                    2,
                    2,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Area under ROC = 0.822917\n"
                    ]
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 2
            }
        },
        {
            "source": "#accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.50','0.75','0.90','0.92')\n#for (j in 1:4)\n#for (k in 1:4){\nset.seed(2)\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='man',]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='man',]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p>=0.90,1,0)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy",
            "mc_idx": 7,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Average CV of 100 trials = 0.790110\n"
                    ]
                },
                "mc_idx": 7,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "dataB <- data[data$PassengerId %in% 1:891 & data$Title=='man',]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='man',]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$FamilySize+dataB$Age/70)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10,Pclass=dataC$Pclass\n    ,x2=dataC$FamilySize+dataC$Age/70,PassengerId=dataC$PassengerId)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p>=0.90,1,0)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nmaleLive = which(data$Title=='man' & data$Predict==1)\ncat(sprintf('The following %d adult males are predicted to live\\n',length(maleLive)))\ndata[maleLive,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')]",
            "mc_idx": 9,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "The following 4 adult males are predicted to live\n",
                        "     PassengerId Pclass Name                     Age SibSp Parch FareAdj\n926   926        1      Mock, Mr. Philipp Edmund 30  1     0     28.875 \n942   942        1      Smith, Mr. Lucien Philip 24  1     0     30.000 \n1094 1094        1      Astor, Col. John Jacob   47  1     0     45.505 \n1215 1215        1      Rowe, Mr. Alfred G       33  0     0     26.550 "
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 1
            }
        },
        {
            "source": "x1s <- seq(2, 5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p>=0.90,1,0)\ng1 <- ggplot(data=dataTest[dataTest$x1>2 & dataTest$x1<5 & dataTest$x2>1 & dataTest$x2<3,]) +\n    xlim(2,5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#666666','#0000FF'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='FamilySize + (Age / 70)',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 4 adult males have P(live)>=0.9',color='Predict') +\n    geom_vline(xintercept=2.8, linetype='dotted') +\n    geom_hline(yintercept=c(1.43,2.43), linetype='dotted') +\n    annotate('text',x=2.95,y=2.9,label='Fare = $28') +\n    annotate('text',x=4.7,y=2.35,label='Age = 30') +\n    annotate('text',x=4.7,y=1.35,label='Age = 30')\n\nfor (i in which(dataTest$p==1)){\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]-0.15,y=dataTest$x2[i],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=4)\n}\ng1",
            "mc_idx": 10,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.4,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 3
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c005_o001_image_3.png",
                    5,
                    1,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 10,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 1
            }
        },
        {
            "source": "# engineer \"woman-child-groups\"\ndata$Surname = substring( data$Name,0,regexpr(',',data$Name)-1)\ndata$GroupId = paste( data$Surname, data$Pclass, sub('.$','X',data$Ticket), data$Fare, data$Embarked, sep='-')\ndata$GroupId[data$Title=='man'] <- 'noGroup'\n# Mrs Wilkes (Needs) is Mrs Hocking (Needs) sister\ndata$GroupId[893] <- data$GroupId[775]\ndata$GroupFreq <- ave(1:1309,data$GroupId,FUN=length)\ndata$GroupId[data$GroupFreq<=1] <- 'noGroup'\ncat(sprintf('We found %d woman-child-groups\\n',length(unique(data$GroupId))-1))\ndata$TicketId = paste( data$Pclass,sub('.$','X',data$Ticket),data$Fare,data$Embarked,sep='-')\n# add nannies and relatives to groups\nc = 0\nfor (i in which(data$Title!='man' & data$GroupId=='noGroup')){\n    data$GroupId[i] = data$GroupId[data$TicketId==data$TicketId[i]][1]\n    if (data$GroupId[i]!='noGroup') c = c + 1\n}\ncat(sprintf('We found %d nannies/relatives and added them to groups.\\n',c))\n# calculate group survival rates\ndata$GroupSurvival <- NA\ndata$Survived <- as.numeric(as.character(data$Survived))\ndata$GroupSurvival[1:891] <- ave(data$Survived[1:891],data$GroupId[1:891])\nfor (i in 892:1309) data$GroupSurvival[i] <- data$GroupSurvival[which(data$GroupId==data$GroupId[i])[1]]\n# classify unknown groups\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass==3] <- 0\ndata$GroupSurvival[is.na(data$GroupSurvival) & data$Pclass!=3] <- 1\n# make predictions\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndata$Predict[data$Title=='woman' & data$GroupSurvival==0] <- 0\ndata$Predict[data$Title=='boy' & data$GroupSurvival==1] <- 1\nx = which(data$Sex=='male' & data$Predict==1 & data$PassengerId>891)\ncat(sprintf('We found %d boys predicted to live\\n',length(x)))\nx = which(data$Sex=='female' & data$Predict==0 & data$PassengerId>891)\ncat(sprintf('We found %d females predicted to die\\n',length(x)))",
            "mc_idx": 12,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "We found 80 woman-child-groups\nWe found 9 nannies/relatives and added them to groups.\nWe found 8 boys predicted to live\nWe found 14 females predicted to die\n"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "submit <- data.frame(PassengerId=892:1309,Survived=data$Predict[892:1309])\nsubmit$Survived[maleLive-891] <- 1\nwrite.csv(submit,'WCG_XGBoost1.csv',row.names=F)",
            "mc_idx": 13,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 13,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "# identify WCG females\nWCGtrain = which(data$Passenger<=891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\nWCGtest = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\n# identify solo females\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15,Pclass=data2$Pclass)\n# set zoom\nx1s <- seq(0.5, 1.5, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n# classify females with XGBoost\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\ncat('XGBoosting begun...\\n')\nxgb <- xgboost(params  = param,\n               data    = data.matrix(data3[,c('x1','x2')]),\n              label   = data3$y, \n              nrounds = 500,\n              print_every_n = 100,\n              verbose = 1)\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.25,0,1)\n# plot results\nggplot(data=data3[data3$x1>0.5 & data3$x1<1.5 & data3$x2>1 & data3$x2<3,]) +\n    xlim(0.5,1.5) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_density_2d(aes(x1,x2,color=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(y),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#AA0000','#00AA00'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classify',\n        title='XGBoost learns the training set\\'s\n        126 solo females. Red is P(die)>=0.75',color='Survived') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    annotate('text',x=0.77,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.93,y=2.95,label='Fare = $9') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=1.35,y=1.61,label='Age = 25') +\n    annotate('text',x=1.35,y=1.28,label='Age = 20')",
            "mc_idx": 15,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.75,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c008_o002_image_4.png",
                    8,
                    2,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "XGBoosting begun...\n[1]\ttrain-error:0.134921 \n[101]\ttrain-error:0.055556 \n[201]\ttrain-error:0.023810 \n[301]\ttrain-error:0.023810 \n[401]\ttrain-error:0.023810 \n[500]\ttrain-error:0.023810 \n"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 2
            }
        },
        {
            "source": "#accuracy = matrix(nrow=4,ncol=4)\n#rownames(accuracy) <- c('d=3','d=4','d=5','d=6')\n#colnames(accuracy) <- c('0.08','0.10','0.25','0.50')\n#for (j in 1:4)\n#for (k in 1:4){\ntrials=100; sum=0\nfor (i in 1:trials){\n    s = sample(1:891,800)\n    s2 = (1:891)[-s]\n    dataB <- data[data$PassengerId %in% s & data$Title=='woman' & data$FamilySize==1,]\n    dataC <- data[data$PassengerId %in% s2 & data$Title=='woman'& data$FamilySize==1,]\n    data$Predict <- 0\n    data$Predict[data$Sex=='female'] <- 1\n    dataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\n    dataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n        ,x2=dataC$Age/15,PassengerId=dataC$PassengerId)\n    param <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\n    xgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\n    p <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\n    dataTest$p <- ifelse(p<=0.08,0,1)\n    data$Predict[dataTest$PassengerId] <- dataTest$p \n    sm = sum(abs(data$Predict[s2] - data$Survived[s2]))\n    cv = 1 - sm/length(s2)\n    #if (i %% 25==0) \n    #cat(sprintf('Trial %d has CV = %f\\n',i,cv))\n    sum = sum + cv\n}\ncat(sprintf('Average CV of %d trials = %f\\n',trials,sum/trials))\n#accuracy[j,k] <- sum/trials\n#}\n#accuracy",
            "mc_idx": 18,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Average CV of 100 trials = 0.791429\n"
                    ]
                },
                "mc_idx": 18,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "dataB <- data[data$PassengerId %in% 1:891 & data$Title=='woman' & data$FamilySize==1,]\ndataC <- data[data$PassengerId %in% 892:1309 & data$Title=='woman' & data$FamilySize==1 \n    & !data$PassengerId %in% WCGtest,]\ndata$Predict <- 0\ndata$Predict[data$Sex=='female'] <- 1\ndataTrain <- data.frame(y=dataB$Survived,x1=dataB$FareAdj/10,x2=dataB$Age/15)\ndataTest <- data.frame(y=dataC$Survived,x1=dataC$FareAdj/10\n    ,x2=dataC$Age/15,PassengerId=dataC$PassengerId,Pclass=dataC$Pclass)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"error\",\n              max_depth   = 5,\n              eta         = 0.1,\n              gammma      = 0.1,\n              colsample_bytree = 1,\n              min_child_weight = 1)\nxgb <- xgboost(params  = param,\n              data    = data.matrix(dataTrain[,c('x1','x2')]),\n              label   = dataTrain$y, \n              nrounds = 500,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)\np <- predict(xgb,newdata=data.matrix(dataTest[,c('x1','x2')]))\ndataTest$p <- ifelse(p<=0.08,0,1)\ndata$Predict[dataTest$PassengerId] <- dataTest$p \nfemalePerish = which(data$Title=='woman' & data$Predict==0)\ncat(sprintf('The following %d females are predicted to die\\n',length(femalePerish)))\ndata[femalePerish,c('PassengerId','Pclass','Name','Age','SibSp','Parch','FareAdj')]",
            "mc_idx": 20,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 3
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "The following 10 females are predicted to die\n",
                        "     PassengerId Pclass Name                                    Age      SibSp\n928   928        3      Roth, Miss. Sarah A                     24.92668 0    \n990   990        3      Braf, Miss. Elin Ester Maria            20.00000 0    \n1030 1030        3      Drapkin, Miss. Jennie                   23.00000 0    \n1061 1061        3      Hellstrom, Miss. Hilda Maria            22.00000 0    \n1091 1091        3      Rasmussen, Mrs. (Lena Jacobsen Solvang) 24.92668 0    \n1098 1098        3      McGowan, Miss. Katherine                35.00000 0    \n1160 1160        3      Howard, Miss. May Elizabeth             24.92668 0    \n1172 1172        3      Oreskovic, Miss. Jelka                  23.00000 0    \n1205 1205        3      Carr, Miss. Jeannie                     37.00000 0    \n1304 1304        3      Henriksson, Miss. Jenny Lovisa          28.00000 0    \n     Parch FareAdj\n928  0     8.0500 \n990  0     7.8542 \n1030 0     8.0500 \n1061 0     8.9625 \n1091 0     8.1125 \n1098 0     7.7500 \n1160 0     8.0500 \n1172 0     8.6625 \n1205 0     7.7500 \n1304 0     7.7750 "
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 1
            }
        },
        {
            "source": "x1s <- seq(0.6, 1, length.out = 100)\nx2s <- seq(1, 3, length.out = 100)\ng <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\np <- predict(xgb,newdata=data.matrix(g[,c('x1','x2')]))\ng$y <- ifelse(p<=0.08,0,1)\ng1 <- ggplot(data=dataTest[dataTest$x1<1 & dataTest$x2<3,]) +\n    xlim(0.6,1) + ylim(1,3) +\n    geom_tile(data=g,aes(x1,x2,fill=factor(y))) +\n    geom_point(size=2,aes(x1,x2,color=factor(p),shape=factor(Pclass))) +\n    scale_color_manual(values=c('#0000FF','#666666'),\n        limits=c('0','1'),labels=c('0','1')) +\n    scale_fill_manual(values=c('#FF9999','#99FF99'),\n        limits=c('0','1'),labels=c('0','1')) +\n    labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',shape='Pclass',fill='Classifier',\n        title='XGBoost classifies the test set.\n        It predicts 10 non-WCG females have P(die)>=0.92',color='Predict') +\n    geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n    geom_hline(yintercept=c(1.33,1.67), linetype='dotted') +\n    annotate('text',x=0.8,y=2.95,label='Fare = $8') +\n    annotate('text',x=0.9,y=2.95,label='Fare = $9') +\n    annotate('text',x=0.65,y=1.61,label='Age = 25') +\n    annotate('text',x=0.65,y=1.28,label='Age = 20')\n# plot passenger numbers\nv = c(0.07,0.02,0.02,0.02,-0.04,0.02,0.02,0.02,0.02,0.02); c = 0\nfor (i in which(dataTest$p==0)){\n    c = c + 1;\n    g1 <- g1 + annotate('text',x=dataTest$x1[i]+0.015,y=dataTest$x2[i]+v[c],label=dataTest$PassengerId[i]\n        ,color='darkblue',size=3)\n}\ng1",
            "mc_idx": 21,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 2,
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c011_o001_image_5.png",
                    11,
                    1,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 21,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 1
            }
        },
        {
            "source": "submit$Survived[femalePerish-891] <- 0\nwrite.csv(submit,'WCG_XGBoost2.csv',row.names=F)",
            "mc_idx": 22,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "top <- read.csv('../input/top-6-titanic-model/top6.csv')\nnew <- c(maleLive,femalePerish)\ntop$MegaModel <- 'NO'\nfor (i in new){\n    s = sum(top[i-891,c(2,3,4,5,7)])\n    if (s>2.5 & i %in% maleLive) top$MegaModel[i-891] <- 'YES'\n    if (s<2.5 & i %in% femalePerish) top$MegaModel[i-891] <- 'YES'\n}\ndata.frame(data[new,c('Name','Sex','Age','FareAdj')],inMegaModel=top[[9]][new-891],KM=top[[2]][new-891]\n    ,SCW=top[[3]][new-891],THW=top[[4]][new-891],FS=top[[5]][new-891],OT=top[[7]][new-891])",
            "mc_idx": 25,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 5
                },
                "Model_Evaluation": {
                    "model": 5
                },
                "Model_Interpretation": {
                    "model": 5
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    13,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     Name                                    Sex    Age      FareAdj\n926  Mock, Mr. Philipp Edmund                male   30.00000 28.8750\n942  Smith, Mr. Lucien Philip                male   24.00000 30.0000\n1094 Astor, Col. John Jacob                  male   47.00000 45.5050\n1215 Rowe, Mr. Alfred G                      male   33.00000 26.5500\n928  Roth, Miss. Sarah A                     female 24.92668  8.0500\n990  Braf, Miss. Elin Ester Maria            female 20.00000  7.8542\n1030 Drapkin, Miss. Jennie                   female 23.00000  8.0500\n1061 Hellstrom, Miss. Hilda Maria            female 22.00000  8.9625\n1091 Rasmussen, Mrs. (Lena Jacobsen Solvang) female 24.92668  8.1125\n1098 McGowan, Miss. Katherine                female 35.00000  7.7500\n1160 Howard, Miss. May Elizabeth             female 24.92668  8.0500\n1172 Oreskovic, Miss. Jelka                  female 23.00000  8.6625\n1205 Carr, Miss. Jeannie                     female 37.00000  7.7500\n1304 Henriksson, Miss. Jenny Lovisa          female 28.00000  7.7750\n     inMegaModel KM SCW THW FS OT\n926  NO          0  0   0   0  0 \n942  NO          0  0   1   0  0 \n1094 NO          0  1   0   0  0 \n1215 NO          1  0   0   0  0 \n928  NO          1  1   1   0  1 \n990  NO          1  1   1   0  1 \n1030 YES         0  0   1   0  1 \n1061 NO          1  1   1   0  1 \n1091 YES         0  1   1   0  0 \n1098 NO          0  1   1   1  1 \n1160 NO          1  1   1   0  1 \n1172 YES         0  0   0   0  1 \n1205 NO          0  1   1   0  1 \n1304 NO          1  0   1   0  1 "
                    ]
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "x = which(data$Passenger>891 & (data$GroupSurvival==0 | data$GroupSurvival==1))\ntop$Sum <- 0; top$Predict <- top$GenderModel\nfor (i in 1:418){\n    for (j in c(2,3,4,5,7)) top$Sum[i] = top$Sum[i] + top[i,j]\n    if (top$GenderModel[i]==0 & top$Sum[i]>2.5) top$Predict[i] <- 1\n    if (top$GenderModel[i]==1 & top$Sum[i]<2.5) top$Predict[i] <- 0\n}\nensemble <- top$PassengerId[!top$PassengerId %in% x & top$Predict!=top$GenderModel]\ncat(sprintf('The ensemble predicts that %d females die.\\n',length(ensemble)))",
            "mc_idx": 27,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 4
                },
                "Model_Evaluation": {
                    "model": 4
                },
                "Model_Interpretation": {
                    "model": 4
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    14,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "The ensemble predicts that 12 females die.\n"
                    ]
                },
                "mc_idx": 27,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "submit$Survived[ensemble-891] <- 0\nwrite.csv(submit,'WCG_XGBoost_Ensemble.csv',row.names=F)",
            "mc_idx": 28,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Data_Export",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 28,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "library(rpart)\nlibrary(caret)\nlibrary(e1071)\nlibrary(randomForest)",
            "mc_idx": 31,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Loading required package: lattice\nrandomForest 4.6-14\nType rfNews() to see new features/changes/bug fixes.\n\nAttaching package: \u2018randomForest\u2019\n\nThe following object is masked from \u2018package:gridExtra\u2019:\n\n    combine\n\nThe following object is masked from \u2018package:ggplot2\u2019:\n\n    margin\n\n"
                    ]
                },
                "mc_idx": 31,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "g = list(); gp = list()\ngt = c('CART learns the training set','kNN k=5 learns the training set'\n       ,'SVM with radial kernel','Random Forest with P(die)>0.75')\ndata2 <- data[data$PassengerId<=891 & data$Title=='woman' & data$FamilySize==1 & data$Pclass==3,]\ndata3 <- data.frame(y=data2$Survived,x1=data2$FareAdj/10,x2=data2$Age/15)\n# set zoom\nx1s <- seq(0.6, 1, length.out = 50)\nx2s <- seq(1, 3, length.out = 50)\nfor (i in 1:4){\n    g[[i]] <- data.frame(x1 = rep(x1s, each=100), x2 = rep(x2s, time = 100))\n    if (i==1){\n        fit <- rpart(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==2){\n        fit <- knn3(factor(y) ~ x1 + x2,data3,k=3)\n        p <- predict(fit,newdata=g[[i]])[,2]\n        g[[i]]$y <- ifelse(p<=0.5,0,1)\n    } else if (i==3){\n        fit <- svm(factor(y)~ x1 + x2,data3,kernel='radial')\n        p <- predict(fit,newdata=g[[i]])\n        g[[i]]$y <- as.numeric(as.character(p))\n    } else if (i==4){\n        fit <- randomForest(factor(y) ~ x1 + x2,data3)\n        p <- predict(fit,newdata=g[[i]],type='prob')[,2]\n        g[[i]]$y <- ifelse(p<=0.25,0,1)\n    }\n    # plot results\n    gp[[i]] <- ggplot(data=data3[data3$x1>0.6 & data3$x1<1 & data3$x2>1 & data3$x2<3,]) +\n        xlim(0.6,1) + ylim(1,3) +\n        geom_tile(data=g[[i]],aes(x1,x2,fill=factor(y)),show.legend=F) +\n        geom_point(size=1.5,aes(x1,x2,color=factor(y)),show.legend=F) +\n        scale_color_manual(values=c('#AA0000','#00AA00'),\n            limits=c('0','1'),labels=c('0','1')) +\n        scale_fill_manual(values=c('#FF9999','#99FF99'),\n            limits=c('0','1'),labels=c('0','1')) +\n        #labs(x='Fare / (10 x TicketFrequency)',y='Age / 15',fill='Classify',\n        labs(x='',y='',title=gt[i],color='Survived') +\n        geom_vline(xintercept=c(0.8,0.9), linetype='dotted') +\n        geom_hline(yintercept=c(1.33,1.67), linetype='dotted')\n}\ngrid.arrange(gp[[1]],gp[[2]],gp[[3]],gp[[4]],nrow=2)",
            "mc_idx": 32,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "ggplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/outp/images/d0096_c017_o000_image_6.png",
                    17,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        }
    ],
    "markdown_cells": [
        {
            "source": "# Do any adult males survive? XGBoost will tell us!\nThere are 245 adult males in the Titanic test dataset. By reviewing all the top models on Kaggle, we see that everyone predicts that all adult males die. Is it possible to find at least 1 adult male that lived? If we can correctly predict the survival of any adult males, we can combine those predictions with a previously top scoring model, such as the WCG model, and have the most accurate Titanic model ever!   \n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/tree12.jpeg)  \n  \nThe WCG (woman-child-group) model (displayed in yellow above) was first described [here][1] and improved upon [here][2]. It was first implemented using only Name and scored 82%. Adding Ticket, Fare, and Pclass increased it's score to 83%. Then the [Mega Model][3] showed that there are patterns in the non-WCG passengers. This kernel finds those patterns and scores 85%.\n![tree12](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/xgb.jpeg)\n## Explore adult males survival with XGBoost\nFirst we'll load in the Titanic dataset and impute missing Age and Fare. Next we'll engineer two new variables, x1 = Fare / (Ticket Frequency * 10), and x2 = Parch + SibSp + 1 + (Age / 70). Reducing the feature space to 2 dimensions allows us to visualize everything.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[3]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210",
            "mc_idx": 0,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "By creating 'x2' = FamilySize + Age/70, we can view SibSp, Parch, and Age on 1 dimension. The plot above shows that adult males with FamilySize<=2 in Pclass=1 between the ages 20 and 36 have greater than 50% chance of survival. (To be exact, 56% = 18 / 32 survived in the training set). Also males in their 40's with FamilySize=2 have 63% (= 5 / 8 ) chance of survival. To create 'x1', we divide Fare by TicketFrequency because that is the actual price paid. The 11 Sage family members did not pay \\$69.55 for each of their 11 third class tickets. They must have paid \\$6.32 = 69.55 / 11. Notice above how the 3 Pclasses become separated once you adjust the Fare. Lastly, we divide 'x1' by 10 so that its scale matches the scale of 'x2' which helps certain machine learning algorithms. Let's apply XGBoost to the pair of variables (x1, x2) and see what patterns it discovers.",
            "mc_idx": 2,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Cool. It looks like XGBoost found patterns of survival among the training dataset's adult males! From the plot above, we see that the most probable surviving adult males have Pclass = 1, FareAdj = \\$28, SibSp + Parch <= 1, and Age = 30. The shading indicates what XGBoost's classifying decisions are. The green region corresponds with XGBoost predicting P(live)>0.5.",
            "mc_idx": 4,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The AUC, area under the ROC, equals 0.82 > 0.50. (Running 100 trials has average AUC = 0.70) That means that XGBoost has found patterns of survival, hooray! The ROC plot also shows us that If we predict survive whenever XGBoost says P(live)>0.5, then we will make many Type 1 errors (i.e. we will incorrectly predict adult males survive when they don't). We need to carefully select our threshold to maximize our accuracy, so we will use grid search to find the best threshold among 0.50, 0.75, 0.90, and 0.92.\n## Grid search and cross validate\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p>=0.90. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline). Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%.",
            "mc_idx": 6,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, this will allow us to find at least 1 surviving adult male in the test dataset!\n## Submission to Kaggle",
            "mc_idx": 8,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "For the rest of the predictions, we'll use the following two simple rules (referred to as WCG model, woman-child-groups):\n* Predict survival for all boys in families where all females and boys live.  \n* Predict perish for all females in families where all females and boys die.  \n  \nThese two rules are explained and cross validated in the following two kernels, [Titanic using Name only][1] and [Titanic Mega Model][2]. Let's run the code from these kernels to find the 8 boys that live and 14 females that die.  \n  \n[1]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818\n[2]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210",
            "mc_idx": 11,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Drum roll..... UGH! Our score stayed the same. It seems that half our predictions for which adult males survive were right and half were wrong. Submitting the WCG plus these additional 4 predictions didn't change the WCG's score even though cross validation suggested that it would :-( However, we did find 1 or 2 adult males that live, hip hip hooray!\n# Explore solo females survival with XGBoost\nLet's apply this XGBoost exploration technique to the solo females. If we can correctly predict the survival of any solo females, we can combine those predictions with the WCG model and have the most accurate Titanic model ever! The training dataset contains 304 females. Of those, 108 are in WCG, 126 are traveling solo, and 80 travel with a brother or husband and have no children. Here we will explore the solo females.",
            "mc_idx": 14,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "It looks like XGBoost found patterns of survival among the training dataset's solo  females! From the plot above, we see that the most probable perishing solo females have Pclass = 3, FareAdj = \\$9, and Age = 22. Or they have Pclass=3, FareAdj = \\$8, and Age = 34. The shading indicates what XGBoost's classifying decisions are. The red region corresponds with XGBoost predicting P(die)>=0.75.",
            "mc_idx": 16,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Grid search and cross validation\nUsing grid search, we find the optimal parameters for XGBoost to be treeDepth=5, p<=0.08. (If you wish to perform a grid search, uncomment the for loops in the code below and add hyperparamters that you wish to search. In this notebook, I'm not doing the grid search because it takes a while. I did it offline) Now let's perform cross validation to see to see if XGBoost is more accurate than the gender model which has CV = 78.6%.",
            "mc_idx": 17,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Our CV accuracy is 79.0%. (Results shown above may vary due to the random nature of k-fold CV but I confirmed 79.0% with 10,000 trials offline). The gender model has a CV accuracy of 78.6%, therefore we have achieved a slight improvement. Hopefully, we can achieve a slight improvement to our public score too. Let's see.\n## Submission to Kaggle",
            "mc_idx": 19,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "![result-female](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/surnameModel5.png)\n\nAwesome! It looks like most of our female predictions are correct. Our score increased from 83.3% to 84.7%!! This implies that 80% of our 10 female predictions were accurate, pretty good. Wow, we now have the most accurate Titanic model ever!",
            "mc_idx": 23,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Comparison with Mega Model\nThe model we have constructed above is just the WCG plus XGBoost. Previously we combined the WCG with an ensemble of top Kaggle models and scored 84.2% [here][1]. How do XGBoost's predictions compare with the ensemble's predictions? Surprisingly they are different. XGBoost found females that the ensemble did not and the ensemble found females that XGBoost did not. This implies that no single person has found the complete model to classify non-WCG passengers yet. Below are XGBoost's predictions (of 4 adult males to live and 10 solo females to die) with columns indicating the ensemble's predictions:  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210",
            "mc_idx": 24,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The rows above are the 14 predictions made by XGBoost model. The column Mega Model states whether these predictions were made by Mega Model's ensemble. The last 5 columns are how each model within Mega Model's ensemble voted where 1 = live and 0 = die. From the table above, we see that XGBoost and Mega Model are quite different. Therefore combining the predictions of WCG, XGBoost, and the ensemble, will most likely increase our score. ",
            "mc_idx": 26,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "![MegaBoost](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/MegaBoost.png)\n\nWow, we scored 85.2%!! Woohoo!!",
            "mc_idx": 29,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Comparison with CART, kNN, SVM, Random Forest\nBelow shows how different methods classify the solo females limited to Pclass=3 (60 females). CART, kNN, and SVM cross validate at 78.9% and Random Forest 78.7%. The four models change 16, 16, 6, 9 female predictions from the WCG and obtain public scores of 83.8%, 83.3%, 83.3%, and 84.2% respectively. (WCG obtains 83.3% by itself.) The regions created by Random Forest are the most similar to XGBoost above. And it scores the most similar. CART is nice because it is very readable. CART says that solo females in Pclass=3 with either FareAdj > \\$8 or Age > 25 die. This pattern exists in the training dataset. Among the 22 females fullfilling these conditions, 64 percent = 14/22 die.",
            "mc_idx": 30,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Conclusion\nThis notebook demonstrated that it is very difficult to predict adult male survival. From the analysis above, it appears that there are patterns for adult male survival in the training set. However these patterns don't seem to carry over to the test dataset. I don't think that you can predict which adult males survive from Pclass, Age, Family Size, and Fare alone (even though the training set fools you into thinking that you can). If we want to predict male survival, we'll need to engineer features.  \n  \nRegarding females, prediction has more success. The WCG model by itself finds many females that perish, but this kernel showed that there are still patterns among the non-WCG females. For example, in the training set, there are 6 solo traveling females in Pclass = 3, with FareAdj between \\$8 and \\$9, and Age between 20 and 25. All 6 of these females died. That's a pattern. Using just Pclass, Age, Family Size, and Fare, we have shown that we can predict females to die with some success. We also found that females with FareAdj near 8 and Age near 34 were likely to perish.\n\nCan we do better than 85%? The WCG model can solidly achieve 84.4% CV and 83.3% public score by itself. This kernel showed there are more patterns in the data and the Mega Model's ensemble showed that there are more patterns in the data. It is encouraging to see that XGBoost here found different females than did the ensemble of Mega Model. This means that no single model has yet to classify all the non-WCG females. I encourage everyone to fork this kernel and improve it by building your own classifier for non-WCG passengers. (_NOTE: if you fork this kernel, turn on GPU under settings_)\n\nTo learn more about XGBoost, check out [Tae Hyon Whang's][1] great Python kernel called [Titanic Starter with XGBoost, 173/209 LB][2].  \n  \n[1]:https://www.kaggle.com/numbersareuseful\n[2]:https://www.kaggle.com/numbersareuseful/titanic-starter-with-xgboost-173-209-lb\n",
            "mc_idx": 33,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Summary of Titanic models\n Here's a review of this notebook and my previous two. First the population was divided into 5 groups:  \n* (A) Males adults - 61% of population  \n* (B) Males boys (Master title) - 5% of population  \n* (C) Females that have children, sisters, or mothers (brothers, husbands optional) - 12%\n* (D) Females that have brothers, or husbands (no children, no sisters, no mothers) - 8%  \n* (E) Females traveling alone - 14% of population  \n  \nNext we built 3 classifiers:    \n* (1) [WCG classifies B+C][1]  \n* (2) [Ensemble of top 5 Kaggle classifies A+D+E][1]  \n* (3) [XGBoost classifies E][2]  \n  \nFinally we assembled 4 models. Here are cross validations and public scores:  \n* WCG + GenderModel = 84.4% CV and 83.3% PS  \n* WCG + Ensemble = unknown CV and 84.2% PS  \n* WCG + XGBoost + GenderModel = 85.2% CV and 84.7% PS  \n* WCG + XGBoost + Ensemble = unknown CV and 85.2% PS  \n\nThank you for reading my notebook #3! I hope you enjoyed it. Check out notebooks [#1][3] and [#2][1]. Feel free to use my classifiers, improve them, add your own, and assemble new models. I believe it is possible to increase CV and PS above 85%. Good luck! (_NOTE: if you fork this kernel, turn on GPU under settings_)  \n  \n[1]:https://www.kaggle.com/cdeotte/titantic-mega-model-0-84210\n[2]:https://www.kaggle.com/cdeotte/titanic-wcg-xgboost-0-84688\n[3]:https://www.kaggle.com/cdeotte/titanic-using-name-only-0-81818",
            "mc_idx": 34,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "![hist](https://raw.githubusercontent.com/cdeotte/Kaggle_Images/main/2020/histXGB.png)",
            "mc_idx": 35,
            "nb_idx": 96,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "sim_matrix": [
        0.940306544303894,
        0.9056190252304077,
        0.9268004894256592,
        0.9361633062362671,
        0.8915616869926453,
        0.891636312007904,
        0.9355955719947815,
        0.9212308526039124,
        0.9355888366699219,
        0.903518557548523,
        0.904366672039032,
        0.8890864849090576,
        0.9149637222290039,
        0.888298749923706,
        0.92686527967453,
        0.9164085388183594,
        0.9192195534706116,
        0.891636312007904,
        0.9250879883766174,
        0.9109708070755005,
        0.9224974513053894,
        0.9212308526039124,
        0.9319252371788025,
        0.9476538300514221,
        0.9164680242538452,
        0.8971126079559326,
        0.9227715730667114,
        0.9401546716690063,
        0.9314289093017578,
        0.8633900880813599,
        0.9401560425758362,
        0.9228688478469849,
        0.9411764740943909,
        0.9001592397689819,
        0.9351712465286255,
        0.921120285987854,
        0.9351712465286255,
        0.9275015592575073,
        0.9381095170974731,
        0.8724857568740845,
        0.8805543184280396,
        0.9115970730781555,
        0.8809790015220642,
        0.9224974513053894,
        0.9422865509986877,
        0.9476538300514221,
        0.9303022623062134,
        0.9411764740943909,
        0.9332237243652344,
        0.939357578754425,
        0.9479869604110718,
        0.921120285987854,
        0.9164085388183594,
        0.9394305944442749,
        0.9157304763793945,
        0.9357964992523193,
        0.8772035837173462,
        0.9147711992263794,
        0.9167682528495789,
        0.9263828992843628,
        0.9175263047218323,
        0.9425276517868042,
        0.8890547752380371,
        0.8785660862922668,
        0.9015082716941833,
        0.9137138724327087,
        0.8991792798042297,
        0.781040370464325,
        0.9270816445350647,
        0.9379708170890808,
        0.9409835338592529,
        0.9383007287979126,
        0.9381568431854248,
        0.8882448077201843,
        0.9289160966873169,
        0.9226419925689697,
        0.9432942867279053,
        0.9178038835525513,
        0.9217363595962524,
        0.8831640481948853,
        0.9248925447463989,
        0.9380940198898315,
        0.9389218688011169,
        0.949439525604248,
        0.9128690958023071,
        0.932349681854248,
        0.9212731122970581,
        0.9319252371788025,
        0.9140467643737793,
        0.9042326211929321,
        0.9275015592575073,
        0.9109708070755005,
        0.9001592397689819,
        0.9350781440734863,
        0.977620005607605,
        0.8835030198097229,
        1.0000001192092896,
        0.9771180748939514
    ],
    "cell_sim_matrix": [],
    "nb_order": [],
    "summary_data_VA": null
}