{
    "nb_idx": 73,
    "nb_name": "d0073",
    "filename": "titanic-missing-and-small-data-are-disaster.ipynb",
    "filepath": "data/data_Kaggle/raw/titanic-missing-and-small-data-are-disaster.ipynb",
    "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session \n --------------------------\n# Introduction\n\n![](https://c.tenor.com/csSu8i3jaRQAAAAC/titanic-sinking.gif)\n\nPicture Credit: https://c.tenor.com\n\n \n ### Missing Values\n\n> For various reasons, many real world datasets contain missing values, often encoded as blanks, NaNs or other placeholders. Such datasets however are incompatible with scikit-learn estimators which assume that all values in an array are numerical, and that all have and hold meaning. A basic strategy to use incomplete datasets is to discard entire rows and/or columns containing missing values. However, this comes at the price of losing data which may be valuable (even though incomplete). A better strategy is to impute the missing values, i.e., to infer them from the known part of the data. \n\nReference: https://scikit-learn.org/stable/ \n The first projects most people start with are probably titanic. However, As I think, titatic datasets are not easy.\nThe reason for thinking like this is as follows.\n* Missing Values: There are many missing values of features that are considered important for survivor judgment, such as Age and Cabin.\n* Small Dataset: Because the dataset is small, it seems difficult to train the model sufficiently.\n\nIn this notebook, we will focus on imputation of missing values and ensemble methods to improve performance.\nIn addition, we will create new derivative variables if necessary for each feature. \n ---------------------------------------------------------------\n# Setting up \n !pip install pycaret-nightly\n!pip install missingno \n import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn import preprocessing\nimport umap\nimport umap.plot\n\nimport warnings\nwarnings.filterwarnings('ignore') \n # Utility Function \n def get_clf_eval(y_test, pred=None, pred_proba=None):\n    confusion = confusion_matrix( y_test, pred)\n    accuracy = accuracy_score(y_test , pred)\n    precision = precision_score(y_test , pred)\n    recall = recall_score(y_test , pred)\n    f1 = f1_score(y_test,pred)\n\n    roc_auc = roc_auc_score(y_test, pred_proba)\n    print('confusion matrix')\n    print(confusion)\n\n    # ROC-AUC print \n    print('accuracy: {0:.4f}, precision: {1:.4f}, recall: {2:.4f},\\\n    F1: {3:.4f}, AUC:{4:.4f}'.format(accuracy, precision, recall, f1, roc_auc))\n    return confusion \n def apply_pca(X, standardize=True):\n    # Standardize\n    if standardize:\n        X = (X - X.mean(axis=0)) / X.std(axis=0)\n    # Create principal components\n    pca = PCA()\n    X_pca = pca.fit_transform(X)\n    # Convert to dataframe\n    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n    X_pca = pd.DataFrame(X_pca, columns=component_names)\n    # Create loadings\n    loadings = pd.DataFrame(\n        pca.components_.T,  # transpose the matrix of loadings\n        columns=component_names,  # so the columns are the principal components\n        index=X.columns,  # and the rows are the original features\n    )\n    return pca, X_pca, loadings \n def outlier_iqr(data):\n    q1,q3 = np.percentile(data,[25,75])\n    iqr = q3-q1\n    lower = q1-(iqr*1.5)\n    upper = q3+(iqr*1.5)\n    return np.where((data>upper)|(data<lower)) \n def encode_features(dataDF,feat_list):\n    for feature in feat_list:\n        le = preprocessing.LabelEncoder()\n        le = le.fit(dataDF[feature])\n        dataDF[feature] = le.transform(dataDF[feature])\n        \n    return dataDF \n # Loading Dataset \n train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')\nsubmission_data = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')\ntitanic_df = pd.concat([train_data, test_data], ignore_index = True, sort = False)\ntr_idx = titanic_df['Survived'].notnull() \n titanic_df.head(3).T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'}) \n titanic_df.shape \n PassengerId has nothing to do with survior. It can be removed immediately. \n titanic_df.drop(['PassengerId'],axis=1,inplace=True) \n --------------------------------------------\n# EDA \n ## Checking Data Type \n titanic_df.info() \n # Checking Target Value Imbalace \n print(plt.style.available) \n total_cnt = titanic_df['Survived'].count()\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nf, ax = plt.subplots(1, 2, figsize = (18, 8))\ntitanic_df['Survived'].value_counts().plot.pie(explode = [0, 0.1], \n                                               autopct = '%1.1f%%', \n                                               ax = ax[0],\n                                               shadow = True,\n                                               colors = ['grey', 'green'])\nax[0].set_title('Survived %')\nax[0].set_ylabel('')\nsns.countplot('Survived', data = titanic_df, ax = ax[1], palette='Blues_r')\nax[1].set_title('Survived')\nfor p in ax[1].patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax[1].text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine() \n Although the survivor is small, the imbalance is not large enough for over/under sampling.\nIf you want to know more about over/under sampling, please refer to the notebook below.\n\n[Over/Under sampling](https://www.kaggle.com/ohseokkim/preprocessing-resolving-imbalance-by-sampling) \n ## Checking and Handling Missing Values \n import missingno as msno\nmsno.matrix(titanic_df.drop(['Survived'],axis=1)) \n titanic_df.drop(['Survived'],axis=1).isnull().sum() \n <span style=\"color:Blue\"> Observation:\n    \nThere are missing values for Age, Cabin, Fare, and Embarked features. In particular, there are many missing values for Age and Cabin features. Let's think about how to handle these missing values. \n -------------------------------------\n# Checking features \n ## Cabin\n\n![](https://www.retrograph.com/wp-content/uploads/thumbnails/s5RGL181.jpg)\n\nPicture Credit: https://www.retrograph.com\n\nLooking at the picture above, it can be hypothesized that the survival rate will be different depending on the location of the cabin.\n\nIf you are the captain or sailor of titanic, you will be able to explain the relationship between cabin and survival rate well. If you have some kind of domain knowledge, you will be able to process that feature well. However, in the absence of such domain knowledge, we must examine the corresponding features in detail and process them to be suitable for machine learning. \n titanic_df['Cabin'].unique() \n The first letter is an uppercase letter of the alphabet. Let's analyze it a bit more using this. \n titanic_df['Cabin'].isnull().sum() \n <span style=\"color:Blue\"> Observation:\n    \nMissing values are 1014. This is used to determine whether the cabin is owned or not. To do this, create a new derived variable. \n ------------------------------------------------------------------------\n## Has_Cabin ( Derived variable )\n\n**Question: Is there a difference in the survival rate between passengers with and without cabin?** \n titanic_df['Has_Cabin'] = titanic_df['Cabin'].isnull().astype(int) \n total_cnt = titanic_df['Survived'].count()\nrcParams['figure.figsize'] = 12,8\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Has_Cabin\",\n                   hue=\"Survived\", \n                   data=titanic_df,\n                   palette = 'Blues_r')\nax.set_title('Survived Count/Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine() \n <span style=\"color:Blue\"> Observation:\n\n* Cases with cabins have more survivors compared to cases without cabins. It is likely that the new derived variable will be helpful in the classification of survivors. \n ---------------------------------------------\n## Cabin_Label ( Derived variable ) \n rcParams['figure.figsize'] = 10,7\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\ntitanic_df['Cabin'] = titanic_df['Cabin'].fillna('N')\ntitanic_df['Cabin_label'] = titanic_df['Cabin'].str.get(0)\nax = sns.barplot(x = 'Cabin_label', y = 'Survived', data = titanic_df, palette = 'Blues_r',ci=False)\nsns.despine() \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Cabin_label\", hue=\"Survived\", data=titanic_df,palette = 'Blues_r')\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n ------------------------------------------------\n## Parch ( Number of parents/children ) \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Parch',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n ----------------------------------------------------------------------\n## SibSp ( Number of siblings/spouses ) \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='SibSp',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n -------------------------------------------------\n## FamilySize ( Derived variable ) \n **Question: Does the number of accompanying family members affect the survival rate??** \n titanic_df['FamilySize'] = titanic_df['SibSp'] + titanic_df['Parch'] + 1 \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='FamilySize',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n <span style=\"color:Blue\"> Observation:\n\nWhen FamilySize is 1, the survival rate is significantly lower than in other cases. I think it will be helpful when the model is learning. \n ______________________________________________\n## Alone ( Derived variable ) \n titanic_df['IsAlone'] = 0\ntitanic_df.loc[titanic_df['FamilySize'] == 1, 'IsAlone'] = 1 \n rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='IsAlone',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine() \n <span style=\"color:Blue\"> Observation:\n\nThose who were alone died more than those who were not alone. The derived feature seems to be helpful for model training. \n ________________________________________________________\n## Name\n\nIt seems difficult to find the feature directly related to the survivor. \n titanic_df['Name'].unique()[:5] \n English honistic looks. Let's check some more. \n import re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\ntitanic_df['Title'] = titanic_df['Name'].apply(get_title) \n titanic_df['Title'].unique() \n titanic_df['Title'] = titanic_df['Title'].replace(\n       ['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], \n       'Rare')\n\ntitanic_df['Title'] = titanic_df['Title'].replace('Mlle', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Ms', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Mme', 'Mrs')\ntitanic_df['Title'].unique() \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Title',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine() \n <span style=\"color:Blue\"> Observation:\n\nThe mortality rate is higher in the case of Mr. I think it will help with learning. \n rcParams['figure.figsize'] = 20,15\ntitles = titanic_df['Title'].unique()\nplt.subplots_adjust(hspace=1.5)\nidx = 1\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\n\nfor title in titles:\n    plt.subplot(3,2,idx)\n    ax = sns.histplot(x='Age',data=titanic_df[titanic_df['Title']== title],hue ='Survived',palette=\"Blues_d\",kde=True)\n    ax.set_title(title)\n    sns.despine()\n    idx = idx + 1 \n <span style=\"color:Blue\"> Observation:\n* In the case of Mr, the number of survivors is small.\n* In the case of Mrs and Miss, there are many survivors.\n\nI think it will be helpful in judging survivors using this.\nHowever, it seems difficult to find the relationship between age and title from the above distributions. Therefore, it seems difficult to use this to fill in the missing values of age. \n --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Has_Age ( Derived variable )\n\n**Question: Does the survival rate make a difference with and without age records?|** \n titanic_df['Age'].isnull().sum() \n Let's check the distribution first to fill in the appropriate values. \n ### An Extension To Imputation\n\n> Imputation is the standard approach, and it usually works well. However, imputed values may be systematically above or below their actual values (which weren't collected in the dataset). Or rows with missing values may be unique in some other way. In that case, your model would make better predictions by considering which values were originally missing.\n\n![](https://i.imgur.com/UWOyg4a.png)\n\n> In this approach, we impute the missing values, as before. And, additionally, for each column with missing entries in the original dataset, we add a new column that shows the location of the imputed entries.\n> \n> In some cases, this will meaningfully improve results. In other cases, it doesn't help at all.\n\nRef: https://www.kaggle.com/alexisbcook/missing-values \n titanic_df['Has_Age'] = titanic_df['Age'].isnull().astype(int) \n rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Has_Age',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nplt.legend(loc = 'upper right')\nax.set_title('Survived Rate')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10,f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine() \n <span style=\"color:Blue\"> Observation:\n    \n* More than the case where Age is not missing.\n* Cases in which age is not missed have a higher survival rate than cases in which age is omitted. \n -------------------------------------------------------------------------\n## Age \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age'].mean()\nstd = titanic_df['Age'].std()\nskew = titanic_df['Age'].skew()\nprint('Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n Looking at the skewness, it is skewed to one side. \n ## Imputting Missing Values \n ### Univariate feature imputation\n\n> The SimpleImputer class provides basic strategies for imputing missing values. Missing values can be imputed with a provided constant value, or using the statistics (mean, median or most frequent) of each column in which the missing values are located. This class also allows for different missing values encodings.\n\nRef: https://scikit-learn.org/stable/ \n from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Age_mean']] = imp.fit_transform(titanic_df[['Age']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_mean\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_mean'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_mean'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_mean'].mean()\nstd = titanic_df['Age_mean'].std()\nskew = titanic_df['Age_mean'].skew()\nprint('Age_mean : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n ### Multivariate feature imputation\n\n> A more sophisticated approach is to use the IterativeImputer class, which models each feature with missing values as a function of other features, and uses that estimate for imputation. It does so in an iterated round-robin fashion: at each step, a feature column is designated as output y and the other feature columns are treated as inputs X. A regressor is fit on (X, y) for known y. Then, the regressor is used to predict the missing values of y. This is done for each feature in an iterative fashion, and then is repeated for max_iter imputation rounds. The results of the final imputation round are returned.\n\nRef: https://scikit-learn.org/stable/ \n from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nimp = IterativeImputer(max_iter=10, random_state=0)\ntitanic_df[['Age_iter']] = imp.fit_transform(titanic_df[['Age']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_iter\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_iter'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_iter'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_iter'].mean()\nstd = titanic_df['Age_iter'].std()\nskew = titanic_df['Age_iter'].skew()\nprint('Age_iter : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n ### Nearest neighbors imputation\n\n> The KNNImputer class provides imputation for filling in missing values using the k-Nearest Neighbors approach. By default, a euclidean distance metric that supports missing values, nan_euclidean_distances, is used to find the nearest neighbors. Each missing feature is imputed using values from n_neighbors nearest neighbors that have a value for the feature. The feature of the neighbors are averaged uniformly or weighted by distance to each neighbor. If a sample has more than one feature missing, then the neighbors for that sample can be different depending on the particular feature being imputed. When the number of available neighbors is less than n_neighbors and there are no defined distances to the training set, the training set average for that feature is used during imputation. If there is at least one neighbor with a defined distance, the weighted or unweighted average of the remaining neighbors will be used during imputation. If a feature is always missing in training, it is removed during transform. \n\nRef: https://scikit-learn.org/stable/ \n from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=2, weights=\"uniform\")\ntitanic_df[['Age_knn']] = imputer.fit_transform(titanic_df[['Age']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n ### Filling using other features\n\nAnother conceivable strategy is to use other features to fill in the missing values \u200b\u200bof the Age feature. Consider how to fill the Age feature using the Title feature above. \n titanic_df['new_Age'] = titanic_df['Age'] \n for title in titles:   \n    t_mean = titanic_df[titanic_df['Title']== title]\n    print('{} mean ===> {}'.format(title, t_mean['new_Age'].mean())) \n titanic_df['new_Age'].fillna(titanic_df.groupby('Title')['new_Age'].transform('mean'), inplace=True) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"new_Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['new_Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['new_Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['new_Age'].mean()\nstd = titanic_df['new_Age'].std()\nskew = titanic_df['new_Age'].skew()\nprint('new_Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n ### Scaling \nLooking at the above result, the skewness was 0.4559, not skewed to one side. Let's try linear scaling.\n\nSelect RobustScaler during linear scaling. In this way, the influence of outliers can be minimized.\n\n> This is a technique that minimizes the influence of outliers.  \n> Since the median and IQR (interquartile range) are used, it can be confirmed that the same values are more widely distributed after standardization when compared with the StandardScaler.\n> \n> $\ud835\udc3c\ud835\udc44\ud835\udc45=\ud835\udc443\u2212\ud835\udc441$: That is, it deals with values in the 25th and 75th percentiles.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling) \n from sklearn.preprocessing import RobustScaler\nrobuster = RobustScaler()\ntitanic_df['Age_knn'] = robuster.fit_transform(titanic_df[['Age_knn']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n **Let imputation be done with KNN. The remaining Age-related features are removed.** \n titanic_df.drop(['Age','Age_mean','Age_iter','new_Age'],axis=1,inplace=True) \n -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Fare\n\nFirst, let's check the distribution for that value. \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Fare'].mean(), 90, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Fare'].mean()\nstd = titanic_df['Fare'].std()\nskew = titanic_df['Fare'].skew()\nprint('Fare : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n **It is skewed to one side. Consider nonlinear scaling. In this case, we will use QuantileTransformer.**\n\n> The quantile function ranks or smooths out the relationship between observations and can be mapped onto other distributions, such as the uniform or normal distribution.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling) \n from sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(n_quantiles=100, random_state=0, output_distribution='normal')\ntitanic_df['Fare'] = transformer.fit_transform(titanic_df[['Fare']]) \n from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Fare']] = imp.fit_transform(titanic_df[['Fare']]) \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(0, 100, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n Let's try Bining. \n titanic_df['Fare_class'] = pd.qcut(titanic_df['Fare'], 5, labels=['F1', 'F2', 'F3','F4','F5' ]) \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare_class\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nsns.despine() \n titanic_df['Fare_class'] = titanic_df['Fare_class'].replace({'F1':1,'F2':2,'F3':3,'F4':4,'F5':5}) \n ---------------------------------------\n## Embarked \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Survived',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine() \n <span style=\"color:Blue\"> Observation:\n    \n* Many passengers on board at S port died.\n* For passengers boarding at port C, the survival rate is higher than the mortality rate. \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Sex',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine() \n <span style=\"color:Blue\"> Observation:\n    \n* Among the passengers who boarded at S port, the proportion of males is higher than that of other ports. \n Let's impute missing value for Embarked feature. The strategy for Embarked's missing values is to choose 'most_frequent'. \n from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\ntitanic_df[['Embarked']] = imp.fit_transform(titanic_df[['Embarked']]) \n ------------------------------------------------------------------------------------------\n# Checking Missing Value Again\nFinally, let's check the missing values. \n import missingno as msno\nmsno.matrix(titanic_df.drop('Survived',axis=1))\nprint('Number of Missing Values in Dataset ',titanic_df.drop('Survived',axis=1).isnull().sum().sum()) \n **OK! There is no missing values at the train dataset.** \n --------------------------------------------------------------------------------------------------\n# Detecting Outliers by PCA\n\n![](https://miro.medium.com/max/602/0*PnqMbZEdnuL9yHuo.png)\n\nPicture Credit: https://miro.medium.com\n\nThe more features, the higher the dimension. When projecting to a lower dimension through PCA, new insights can be gained. PCA can effectively detect outliers.\n\nPC 1 has the largest variance in the dataset distribution. That is, the outlier in PC 1 is very likely to be real outlier \n from sklearn.decomposition import PCA \n features = [\"Sex\",\"Age_knn\",\"FamilySize\",\"IsAlone\",'Embarked','Cabin_label']\ntitanic_copy = titanic_df[tr_idx].copy()\ny_copy = titanic_copy.pop(\"Survived\")\nX_copy = titanic_copy.loc[:, features]\nencode_features(X_copy,['Sex', 'Embarked','Cabin_label'])\npca, X_pca, loadings = apply_pca(X_copy)\nprint(loadings) \n import plotly.express as px\nfig = px.histogram(X_pca.melt(), color=\"variable\", \n                   marginal=\"box\",\n                   barmode =\"overlay\",\n                   histnorm ='density'\n                  )  \nfig.update_layout(\n    title_font_color=\"black\",\n    legend_title_font_color=\"green\",\n    title={\n        'text': \"PCA Histogram\",\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n) \n **Let's check out outliers in PC 1** \n pc1_outlier_idx = list(outlier_iqr(X_pca['PC1'])[0]) \n component = \"PC1\"\n\ndef highlight_min(s, props=''):\n    return np.where(s == np.nanmin(s.values), props, '')\n\ntrain_data.iloc[pc1_outlier_idx,:].style.set_properties(**{'background-color': 'Grey',\n                            'color': 'white',\n                            'border-color': 'darkblack'}) \n <span style=\"color:Blue\"> Observation:\n* The Sage family started from S port, there was no Cabin, and the ages were not recorded, and they appear to be a poor and pitiful family with a pclass 3 rating.\n* All three females in this family using the Miss title have died.\n\n**The last sad news is that the training dataset is small, so it seems difficult to remove even if the above data are outliers.    \nNevertheless, fortunately, this problem is not a regression problem, but a classification problem. If it is a regression problem, outliers should be removed.** \n ------------------------------------------------------\n# Encoding\n\nLet's perform encoding on categorical features.\n\nWhen only tree-based models are used, label encoding is sufficient. However, we will use one-hot encoding for model extension in the future.\n\nIf you want to know more about the encoding of categorical features, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/preprocessing-encoding-categorical-data) \n titanic_df = pd.get_dummies(titanic_df, columns = ['Title','Sex', 'Embarked','Cabin_label'],drop_first=True)\ntitanic_df.head().T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'}) \n ---------------------------------------\n# Checking Correlation \n corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot') \n <span style=\"color:Blue\"> Observation and Decision:\n    \n* There is a large correlation between FamilySize and SibSp and Parch. Since the derived variable FamilySize is made of SibSp and Parch, SibSp and Parch are removed.\n* The relationship between Cabin and Has_Cabin is high. Therefore, the derived variable Has_Cabin is left and Cabin is removed.\n* The relationship between Fare and Fare_class is high. Fare is selected because skewness is removed by nonlinear transform of the Fare feature.\n* There are many features that are not related to the survived value. \n abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF') \n -------------------------------------------------------------\n# Selecting Features\n\nFeatures that are not helpful in judging the above heatmap and survivors, or that have other derived variables, will be removed. \n def drop_features(df):\n    df.drop(['Name','Ticket','SibSp','Parch','Fare_class',\n             'Cabin','Cabin_label_G','Cabin_label_T',\n             'Cabin_label_F','FamilySize','Embarked_Q','Title_Rare'],\n            axis=1,\n            inplace=True)\n    return df\n\ntitanic_df = drop_features(titanic_df) \n **Let's check the correlation of each feature.** \n corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot') \n Let's check the correlation between the target value (Suvived) and other features. \n abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF') \n sns.set(font_scale=2)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nsns.pairplot(titanic_df,kind = 'reg',corner = True,palette ='Blues',hue='Survived' ) \n **OK! Looking at the heatmap and pairplot above, it seems that the features are properly selected.** \n # Spliting Train/Validation/Test Data \n tr_idx = titanic_df['Survived'].notnull()\ny_titanic_df = titanic_df[tr_idx]['Survived']\nX_titanic_df= titanic_df[tr_idx].drop('Survived',axis=1)\nX_test_df = titanic_df[~tr_idx].drop('Survived',axis=1) \n from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val=train_test_split(X_titanic_df, y_titanic_df, \\\n                                                  test_size=0.2, random_state=11) \n y_train.names='Survived'\ntrain_data = pd.concat([X_train,y_train],axis=1)\ny_val.names='Survived'\nval_data = pd.concat([X_val,y_val],axis=1) \n tr_idx = titanic_df['Survived'].notnull()\ntrain_final = titanic_df[tr_idx] \n ----------------------------------------------------------------------------\n# Visualizing Training Dataset after Dimension Reduction \n X_train.shape \n The training dataset has 16 dimensions. To show the approximate distribution of the training dataset preprocessed above, let's reduce the dimension to two dimensions and draw it. \n mapper = umap.UMAP().fit(X_train)\numap.plot.points(mapper, labels=y_train, theme='fire') \n As shown in the figure above, when viewed in two dimensions, there are quite a few areas where the survivors and the dead overlap. First, let's feel for a moment that the task of classification is a difficult task before learning the model. Our model does this difficult job!\n\n**Thanks models!** \n ---------------------------------------------------\n# Ensemble\n\n![](https://media3.giphy.com/media/26xBvMWzk7FQr54Sk/giphy.gif)\n\nPicture Credit: https://media3.giphy.com\n\n\n> Empirically, ensembles tend to yield better results when there is a significant diversity among the models.Many ensemble methods, therefore, seek to promote diversity among the models they combine.Although perhaps non-intuitive, more random algorithms (like random decision trees) can be used to produce a stronger ensemble than very deliberate algorithms (like entropy-reducing decision trees).Using a variety of strong learning algorithms, however, has been shown to be more effective than using techniques that attempt to dumb-down the models in order to promote diversity. It is possible to increase diversity in the training stage of the model using correlation for regression tasks or using information measures such as cross entropy for classification tasks\n\nRef: https://en.wikipedia.org/ \n ## Setting up models\n\n> This function trains and evaluates performance of all estimators available in the model library using cross validation. The output of this function is a score grid with average cross validated scores.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n all_cols = [cname for cname in X_titanic_df.columns] \n from pycaret.classification import *\nclf1 = setup(data = train_final, \n             target = 'Survived',\n             preprocess = False,\n             numeric_features = all_cols,\n             silent=True) \n ## Choosing top models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n top5 = compare_models(sort='Accuracy',n_select = 5,\n                      exclude = ['knn', 'svm','ridge','nb','dummy','qda','xgboost']\n                     ) \n top5 \n ## Creating Models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n catboost = create_model('catboost')\nrf = create_model('rf')\nlightgbm = create_model('lightgbm')\n#mlp = create_model('mlp')\ngbc = create_model('gbc')\nlda = create_model('lda')\nlr = create_model('lr') \n # Interpreting Models\n\nThis function analyzes the predictions generated from a trained model. Most plots in this function are implemented based on the SHAP (SHapley Additive exPlanations).\n\n> SHAP (SHapley Additive exPlanations) is a game theoretic approach to explain the output of any machine learning model. It connects optimal credit allocation with local explanations using the classic Shapley values from game theory and their related extensions\n\nRef: https://shap.readthedocs.io/en/latest/\n\n**If you want to know more about feature importance and SHAP, please refer to the notebook below.**\n\n[Notebook](https://www.kaggle.com/ohseokkim/explaning-machine-by-feature-importnace) \n interpret_model(catboost) \n interpret_model(rf) \n interpret_model(lightgbm) \n <span style=\"color:Blue\"> Observation:\n* Among the features, if you look at Fare and Age_knn, the features are spread in a wide distribution of importance, and the colors are also spread from blue to red. \n* Each model is learning with the importance of different features. The diversity of these models seems to increase the performance of the ensemble model.\n* Title_Mr and Sex_male play an important role in how the model learns. \n # Tuning Hyperparameters\n\n> This function tunes the hyperparameters of a given estimator. The output of this function is a score grid with CV scores by fold of the best selected model based on optimize parameter. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n tuned_rf = tune_model(rf, optimize = 'Accuracy',early_stopping = True) \n tuned_lightgbm = tune_model(lightgbm, optimize = 'Accuracy',early_stopping = True) \n tuned_catboost = tune_model(catboost, optimize = 'Accuracy',early_stopping = True) \n tuned_gbc = tune_model(gbc, optimize = 'Accuracy',early_stopping = True) \n tuned_lda = tune_model(lda, optimize = 'Accuracy',early_stopping = True) \n tuned_lr = tune_model(lr, optimize = 'Accuracy',early_stopping = True) \n ## Stacking \n # stack top5 models\nstack_model = stack_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], meta_model = top5[0] ,optimize = 'Accuracy') \n plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot='boundary') \n In machine learning, it is important to determine the boundary. In particular, in tree-based models, it is more important to determine the boundary, because the process of creating a new leaf in the tree is also the process of determining the boundary.\nLooking at the above picture again, there are many overlapping points with the green dot indicating the survior and the blue dot indicating the non-survior. Determining the boundary in this situation would be a very difficult task.\nIf the feature engineer work was done well, the distribution of the two points to determine the boundary would have been well divided. However, the titanic dataset is difficult to do with some missing values \u200b\u200band a small dataset.\n\nLet's look again at the picture above.\nBoundary is not very clean. It can be judged that overfitting has occurred, and therefore it can be judged that it does not have generality.\n\nIf you want to know more about overfitting, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/overfitting-and-underfitting-eda) \n plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot = 'auc') \n plt.figure(figsize=(8, 8))\nplot_model(stack_model, plot='confusion_matrix') \n ## Soft Blending \n blend_soft = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'soft') \n plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot='boundary') \n It seems that the Boundary is set properly. \n plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot = 'auc') \n plt.figure(figsize=(8, 8))\nplot_model(blend_soft, plot='confusion_matrix') \n ## Hard Blending \n blend_hard = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'hard') \n plt.figure(figsize=(10, 10))\nplot_model(blend_hard, plot='boundary') \n Compared to the soft blending model, the boundary does not look clean. \n plt.figure(figsize=(8, 8))\nplot_model(blend_hard, plot='confusion_matrix') \n -------------------------------------------------------------------------------------------------\n## Calibrating the final model\n\n> This function calibrates the probability of a given estimator using isotonic or logistic regression. \n \n cali_model = calibrate_model(blend_soft) \n --------------------------------------------------\n# Finalizing the last model\n> This function trains a given estimator on the entire dataset including the holdout set.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html\n\nThe blend_soft model is selected based on the above result. Finally, the model is tuned with the entire dataset.\n \n final_model = finalize_model(cali_model) \n ## Checking the final model \n plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='boundary') \n plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='confusion_matrix') \n ---------------------------------------\n# Checking Last Results \n Considering above results, the soft blending model seems appropriate among ensemble models. Therefore, we use this model to make the final prediction with the test dataset. \n last_prediction = final_model.predict(X_test_df)\nsubmission_data['Survived'] = last_prediction.astype(int)\nsubmission_data.to_csv('submission.csv', index = False)",
    "code_source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session \n !pip install pycaret-nightly\n!pip install missingno \n import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn import preprocessing\nimport umap\nimport umap.plot\n\nimport warnings\nwarnings.filterwarnings('ignore') \n def get_clf_eval(y_test, pred=None, pred_proba=None):\n    confusion = confusion_matrix( y_test, pred)\n    accuracy = accuracy_score(y_test , pred)\n    precision = precision_score(y_test , pred)\n    recall = recall_score(y_test , pred)\n    f1 = f1_score(y_test,pred)\n\n    roc_auc = roc_auc_score(y_test, pred_proba)\n    print('confusion matrix')\n    print(confusion)\n\n    # ROC-AUC print \n    print('accuracy: {0:.4f}, precision: {1:.4f}, recall: {2:.4f},\\\n    F1: {3:.4f}, AUC:{4:.4f}'.format(accuracy, precision, recall, f1, roc_auc))\n    return confusion \n def apply_pca(X, standardize=True):\n    # Standardize\n    if standardize:\n        X = (X - X.mean(axis=0)) / X.std(axis=0)\n    # Create principal components\n    pca = PCA()\n    X_pca = pca.fit_transform(X)\n    # Convert to dataframe\n    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n    X_pca = pd.DataFrame(X_pca, columns=component_names)\n    # Create loadings\n    loadings = pd.DataFrame(\n        pca.components_.T,  # transpose the matrix of loadings\n        columns=component_names,  # so the columns are the principal components\n        index=X.columns,  # and the rows are the original features\n    )\n    return pca, X_pca, loadings \n def outlier_iqr(data):\n    q1,q3 = np.percentile(data,[25,75])\n    iqr = q3-q1\n    lower = q1-(iqr*1.5)\n    upper = q3+(iqr*1.5)\n    return np.where((data>upper)|(data<lower)) \n def encode_features(dataDF,feat_list):\n    for feature in feat_list:\n        le = preprocessing.LabelEncoder()\n        le = le.fit(dataDF[feature])\n        dataDF[feature] = le.transform(dataDF[feature])\n        \n    return dataDF \n train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')\nsubmission_data = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')\ntitanic_df = pd.concat([train_data, test_data], ignore_index = True, sort = False)\ntr_idx = titanic_df['Survived'].notnull() \n titanic_df.head(3).T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'}) \n titanic_df.shape \n titanic_df.drop(['PassengerId'],axis=1,inplace=True) \n titanic_df.info() \n print(plt.style.available) \n total_cnt = titanic_df['Survived'].count()\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nf, ax = plt.subplots(1, 2, figsize = (18, 8))\ntitanic_df['Survived'].value_counts().plot.pie(explode = [0, 0.1], \n                                               autopct = '%1.1f%%', \n                                               ax = ax[0],\n                                               shadow = True,\n                                               colors = ['grey', 'green'])\nax[0].set_title('Survived %')\nax[0].set_ylabel('')\nsns.countplot('Survived', data = titanic_df, ax = ax[1], palette='Blues_r')\nax[1].set_title('Survived')\nfor p in ax[1].patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax[1].text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine() \n import missingno as msno\nmsno.matrix(titanic_df.drop(['Survived'],axis=1)) \n titanic_df.drop(['Survived'],axis=1).isnull().sum() \n titanic_df['Cabin'].unique() \n titanic_df['Cabin'].isnull().sum() \n titanic_df['Has_Cabin'] = titanic_df['Cabin'].isnull().astype(int) \n total_cnt = titanic_df['Survived'].count()\nrcParams['figure.figsize'] = 12,8\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Has_Cabin\",\n                   hue=\"Survived\", \n                   data=titanic_df,\n                   palette = 'Blues_r')\nax.set_title('Survived Count/Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine() \n rcParams['figure.figsize'] = 10,7\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\ntitanic_df['Cabin'] = titanic_df['Cabin'].fillna('N')\ntitanic_df['Cabin_label'] = titanic_df['Cabin'].str.get(0)\nax = sns.barplot(x = 'Cabin_label', y = 'Survived', data = titanic_df, palette = 'Blues_r',ci=False)\nsns.despine() \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Cabin_label\", hue=\"Survived\", data=titanic_df,palette = 'Blues_r')\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Parch',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='SibSp',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n titanic_df['FamilySize'] = titanic_df['SibSp'] + titanic_df['Parch'] + 1 \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='FamilySize',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine() \n titanic_df['IsAlone'] = 0\ntitanic_df.loc[titanic_df['FamilySize'] == 1, 'IsAlone'] = 1 \n rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='IsAlone',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine() \n titanic_df['Name'].unique()[:5] \n import re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\ntitanic_df['Title'] = titanic_df['Name'].apply(get_title) \n titanic_df['Title'].unique() \n titanic_df['Title'] = titanic_df['Title'].replace(\n       ['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], \n       'Rare')\n\ntitanic_df['Title'] = titanic_df['Title'].replace('Mlle', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Ms', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Mme', 'Mrs')\ntitanic_df['Title'].unique() \n rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Title',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine() \n rcParams['figure.figsize'] = 20,15\ntitles = titanic_df['Title'].unique()\nplt.subplots_adjust(hspace=1.5)\nidx = 1\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\n\nfor title in titles:\n    plt.subplot(3,2,idx)\n    ax = sns.histplot(x='Age',data=titanic_df[titanic_df['Title']== title],hue ='Survived',palette=\"Blues_d\",kde=True)\n    ax.set_title(title)\n    sns.despine()\n    idx = idx + 1 \n titanic_df['Age'].isnull().sum() \n titanic_df['Has_Age'] = titanic_df['Age'].isnull().astype(int) \n rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Has_Age',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nplt.legend(loc = 'upper right')\nax.set_title('Survived Rate')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10,f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine() \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age'].mean()\nstd = titanic_df['Age'].std()\nskew = titanic_df['Age'].skew()\nprint('Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Age_mean']] = imp.fit_transform(titanic_df[['Age']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_mean\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_mean'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_mean'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_mean'].mean()\nstd = titanic_df['Age_mean'].std()\nskew = titanic_df['Age_mean'].skew()\nprint('Age_mean : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nimp = IterativeImputer(max_iter=10, random_state=0)\ntitanic_df[['Age_iter']] = imp.fit_transform(titanic_df[['Age']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_iter\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_iter'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_iter'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_iter'].mean()\nstd = titanic_df['Age_iter'].std()\nskew = titanic_df['Age_iter'].skew()\nprint('Age_iter : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=2, weights=\"uniform\")\ntitanic_df[['Age_knn']] = imputer.fit_transform(titanic_df[['Age']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n titanic_df['new_Age'] = titanic_df['Age'] \n for title in titles:   \n    t_mean = titanic_df[titanic_df['Title']== title]\n    print('{} mean ===> {}'.format(title, t_mean['new_Age'].mean())) \n titanic_df['new_Age'].fillna(titanic_df.groupby('Title')['new_Age'].transform('mean'), inplace=True) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"new_Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['new_Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['new_Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['new_Age'].mean()\nstd = titanic_df['new_Age'].std()\nskew = titanic_df['new_Age'].skew()\nprint('new_Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n from sklearn.preprocessing import RobustScaler\nrobuster = RobustScaler()\ntitanic_df['Age_knn'] = robuster.fit_transform(titanic_df[['Age_knn']]) \n rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n titanic_df.drop(['Age','Age_mean','Age_iter','new_Age'],axis=1,inplace=True) \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Fare'].mean(), 90, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n mean = titanic_df['Fare'].mean()\nstd = titanic_df['Fare'].std()\nskew = titanic_df['Fare'].skew()\nprint('Fare : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew)) \n from sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(n_quantiles=100, random_state=0, output_distribution='normal')\ntitanic_df['Fare'] = transformer.fit_transform(titanic_df[['Fare']]) \n from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Fare']] = imp.fit_transform(titanic_df[['Fare']]) \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(0, 100, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine() \n titanic_df['Fare_class'] = pd.qcut(titanic_df['Fare'], 5, labels=['F1', 'F2', 'F3','F4','F5' ]) \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare_class\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nsns.despine() \n titanic_df['Fare_class'] = titanic_df['Fare_class'].replace({'F1':1,'F2':2,'F3':3,'F4':4,'F5':5}) \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Survived',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine() \n rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Sex',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine() \n from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\ntitanic_df[['Embarked']] = imp.fit_transform(titanic_df[['Embarked']]) \n import missingno as msno\nmsno.matrix(titanic_df.drop('Survived',axis=1))\nprint('Number of Missing Values in Dataset ',titanic_df.drop('Survived',axis=1).isnull().sum().sum()) \n from sklearn.decomposition import PCA \n features = [\"Sex\",\"Age_knn\",\"FamilySize\",\"IsAlone\",'Embarked','Cabin_label']\ntitanic_copy = titanic_df[tr_idx].copy()\ny_copy = titanic_copy.pop(\"Survived\")\nX_copy = titanic_copy.loc[:, features]\nencode_features(X_copy,['Sex', 'Embarked','Cabin_label'])\npca, X_pca, loadings = apply_pca(X_copy)\nprint(loadings) \n import plotly.express as px\nfig = px.histogram(X_pca.melt(), color=\"variable\", \n                   marginal=\"box\",\n                   barmode =\"overlay\",\n                   histnorm ='density'\n                  )  \nfig.update_layout(\n    title_font_color=\"black\",\n    legend_title_font_color=\"green\",\n    title={\n        'text': \"PCA Histogram\",\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n) \n pc1_outlier_idx = list(outlier_iqr(X_pca['PC1'])[0]) \n component = \"PC1\"\n\ndef highlight_min(s, props=''):\n    return np.where(s == np.nanmin(s.values), props, '')\n\ntrain_data.iloc[pc1_outlier_idx,:].style.set_properties(**{'background-color': 'Grey',\n                            'color': 'white',\n                            'border-color': 'darkblack'}) \n titanic_df = pd.get_dummies(titanic_df, columns = ['Title','Sex', 'Embarked','Cabin_label'],drop_first=True)\ntitanic_df.head().T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'}) \n corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot') \n abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF') \n def drop_features(df):\n    df.drop(['Name','Ticket','SibSp','Parch','Fare_class',\n             'Cabin','Cabin_label_G','Cabin_label_T',\n             'Cabin_label_F','FamilySize','Embarked_Q','Title_Rare'],\n            axis=1,\n            inplace=True)\n    return df\n\ntitanic_df = drop_features(titanic_df) \n corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot') \n abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF') \n sns.set(font_scale=2)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nsns.pairplot(titanic_df,kind = 'reg',corner = True,palette ='Blues',hue='Survived' ) \n tr_idx = titanic_df['Survived'].notnull()\ny_titanic_df = titanic_df[tr_idx]['Survived']\nX_titanic_df= titanic_df[tr_idx].drop('Survived',axis=1)\nX_test_df = titanic_df[~tr_idx].drop('Survived',axis=1) \n from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val=train_test_split(X_titanic_df, y_titanic_df, \\\n                                                  test_size=0.2, random_state=11) \n y_train.names='Survived'\ntrain_data = pd.concat([X_train,y_train],axis=1)\ny_val.names='Survived'\nval_data = pd.concat([X_val,y_val],axis=1) \n tr_idx = titanic_df['Survived'].notnull()\ntrain_final = titanic_df[tr_idx] \n X_train.shape \n mapper = umap.UMAP().fit(X_train)\numap.plot.points(mapper, labels=y_train, theme='fire') \n all_cols = [cname for cname in X_titanic_df.columns] \n from pycaret.classification import *\nclf1 = setup(data = train_final, \n             target = 'Survived',\n             preprocess = False,\n             numeric_features = all_cols,\n             silent=True) \n top5 = compare_models(sort='Accuracy',n_select = 5,\n                      exclude = ['knn', 'svm','ridge','nb','dummy','qda','xgboost']\n                     ) \n top5 \n catboost = create_model('catboost')\nrf = create_model('rf')\nlightgbm = create_model('lightgbm')\n#mlp = create_model('mlp')\ngbc = create_model('gbc')\nlda = create_model('lda')\nlr = create_model('lr') \n interpret_model(catboost) \n interpret_model(rf) \n interpret_model(lightgbm) \n tuned_rf = tune_model(rf, optimize = 'Accuracy',early_stopping = True) \n tuned_lightgbm = tune_model(lightgbm, optimize = 'Accuracy',early_stopping = True) \n tuned_catboost = tune_model(catboost, optimize = 'Accuracy',early_stopping = True) \n tuned_gbc = tune_model(gbc, optimize = 'Accuracy',early_stopping = True) \n tuned_lda = tune_model(lda, optimize = 'Accuracy',early_stopping = True) \n tuned_lr = tune_model(lr, optimize = 'Accuracy',early_stopping = True) \n # stack top5 models\nstack_model = stack_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], meta_model = top5[0] ,optimize = 'Accuracy') \n plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot='boundary') \n plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot = 'auc') \n plt.figure(figsize=(8, 8))\nplot_model(stack_model, plot='confusion_matrix') \n blend_soft = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'soft') \n plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot='boundary') \n plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot = 'auc') \n plt.figure(figsize=(8, 8))\nplot_model(blend_soft, plot='confusion_matrix') \n blend_hard = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'hard') \n plt.figure(figsize=(10, 10))\nplot_model(blend_hard, plot='boundary') \n plt.figure(figsize=(8, 8))\nplot_model(blend_hard, plot='confusion_matrix') \n cali_model = calibrate_model(blend_soft) \n final_model = finalize_model(cali_model) \n plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='boundary') \n plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='confusion_matrix') \n last_prediction = final_model.predict(X_test_df)\nsubmission_data['Survived'] = last_prediction.astype(int)\nsubmission_data.to_csv('submission.csv', index = False)",
    "markdown_source": "--------------------------\n# Introduction\n\n![](https://c.tenor.com/csSu8i3jaRQAAAAC/titanic-sinking.gif)\n\nPicture Credit: https://c.tenor.com\n\n \n ### Missing Values\n\n> For various reasons, many real world datasets contain missing values, often encoded as blanks, NaNs or other placeholders. Such datasets however are incompatible with scikit-learn estimators which assume that all values in an array are numerical, and that all have and hold meaning. A basic strategy to use incomplete datasets is to discard entire rows and/or columns containing missing values. However, this comes at the price of losing data which may be valuable (even though incomplete). A better strategy is to impute the missing values, i.e., to infer them from the known part of the data. \n\nReference: https://scikit-learn.org/stable/ \n The first projects most people start with are probably titanic. However, As I think, titatic datasets are not easy.\nThe reason for thinking like this is as follows.\n* Missing Values: There are many missing values of features that are considered important for survivor judgment, such as Age and Cabin.\n* Small Dataset: Because the dataset is small, it seems difficult to train the model sufficiently.\n\nIn this notebook, we will focus on imputation of missing values and ensemble methods to improve performance.\nIn addition, we will create new derivative variables if necessary for each feature. \n ---------------------------------------------------------------\n# Setting up \n # Utility Function \n # Loading Dataset \n PassengerId has nothing to do with survior. It can be removed immediately. \n --------------------------------------------\n# EDA \n ## Checking Data Type \n # Checking Target Value Imbalace \n Although the survivor is small, the imbalance is not large enough for over/under sampling.\nIf you want to know more about over/under sampling, please refer to the notebook below.\n\n[Over/Under sampling](https://www.kaggle.com/ohseokkim/preprocessing-resolving-imbalance-by-sampling) \n ## Checking and Handling Missing Values \n <span style=\"color:Blue\"> Observation:\n    \nThere are missing values for Age, Cabin, Fare, and Embarked features. In particular, there are many missing values for Age and Cabin features. Let's think about how to handle these missing values. \n -------------------------------------\n# Checking features \n ## Cabin\n\n![](https://www.retrograph.com/wp-content/uploads/thumbnails/s5RGL181.jpg)\n\nPicture Credit: https://www.retrograph.com\n\nLooking at the picture above, it can be hypothesized that the survival rate will be different depending on the location of the cabin.\n\nIf you are the captain or sailor of titanic, you will be able to explain the relationship between cabin and survival rate well. If you have some kind of domain knowledge, you will be able to process that feature well. However, in the absence of such domain knowledge, we must examine the corresponding features in detail and process them to be suitable for machine learning. \n The first letter is an uppercase letter of the alphabet. Let's analyze it a bit more using this. \n <span style=\"color:Blue\"> Observation:\n    \nMissing values are 1014. This is used to determine whether the cabin is owned or not. To do this, create a new derived variable. \n ------------------------------------------------------------------------\n## Has_Cabin ( Derived variable )\n\n**Question: Is there a difference in the survival rate between passengers with and without cabin?** \n <span style=\"color:Blue\"> Observation:\n\n* Cases with cabins have more survivors compared to cases without cabins. It is likely that the new derived variable will be helpful in the classification of survivors. \n ---------------------------------------------\n## Cabin_Label ( Derived variable ) \n ------------------------------------------------\n## Parch ( Number of parents/children ) \n ----------------------------------------------------------------------\n## SibSp ( Number of siblings/spouses ) \n -------------------------------------------------\n## FamilySize ( Derived variable ) \n **Question: Does the number of accompanying family members affect the survival rate??** \n <span style=\"color:Blue\"> Observation:\n\nWhen FamilySize is 1, the survival rate is significantly lower than in other cases. I think it will be helpful when the model is learning. \n ______________________________________________\n## Alone ( Derived variable ) \n <span style=\"color:Blue\"> Observation:\n\nThose who were alone died more than those who were not alone. The derived feature seems to be helpful for model training. \n ________________________________________________________\n## Name\n\nIt seems difficult to find the feature directly related to the survivor. \n English honistic looks. Let's check some more. \n <span style=\"color:Blue\"> Observation:\n\nThe mortality rate is higher in the case of Mr. I think it will help with learning. \n <span style=\"color:Blue\"> Observation:\n* In the case of Mr, the number of survivors is small.\n* In the case of Mrs and Miss, there are many survivors.\n\nI think it will be helpful in judging survivors using this.\nHowever, it seems difficult to find the relationship between age and title from the above distributions. Therefore, it seems difficult to use this to fill in the missing values of age. \n --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Has_Age ( Derived variable )\n\n**Question: Does the survival rate make a difference with and without age records?|** \n Let's check the distribution first to fill in the appropriate values. \n ### An Extension To Imputation\n\n> Imputation is the standard approach, and it usually works well. However, imputed values may be systematically above or below their actual values (which weren't collected in the dataset). Or rows with missing values may be unique in some other way. In that case, your model would make better predictions by considering which values were originally missing.\n\n![](https://i.imgur.com/UWOyg4a.png)\n\n> In this approach, we impute the missing values, as before. And, additionally, for each column with missing entries in the original dataset, we add a new column that shows the location of the imputed entries.\n> \n> In some cases, this will meaningfully improve results. In other cases, it doesn't help at all.\n\nRef: https://www.kaggle.com/alexisbcook/missing-values \n <span style=\"color:Blue\"> Observation:\n    \n* More than the case where Age is not missing.\n* Cases in which age is not missed have a higher survival rate than cases in which age is omitted. \n -------------------------------------------------------------------------\n## Age \n Looking at the skewness, it is skewed to one side. \n ## Imputting Missing Values \n ### Univariate feature imputation\n\n> The SimpleImputer class provides basic strategies for imputing missing values. Missing values can be imputed with a provided constant value, or using the statistics (mean, median or most frequent) of each column in which the missing values are located. This class also allows for different missing values encodings.\n\nRef: https://scikit-learn.org/stable/ \n ### Multivariate feature imputation\n\n> A more sophisticated approach is to use the IterativeImputer class, which models each feature with missing values as a function of other features, and uses that estimate for imputation. It does so in an iterated round-robin fashion: at each step, a feature column is designated as output y and the other feature columns are treated as inputs X. A regressor is fit on (X, y) for known y. Then, the regressor is used to predict the missing values of y. This is done for each feature in an iterative fashion, and then is repeated for max_iter imputation rounds. The results of the final imputation round are returned.\n\nRef: https://scikit-learn.org/stable/ \n ### Nearest neighbors imputation\n\n> The KNNImputer class provides imputation for filling in missing values using the k-Nearest Neighbors approach. By default, a euclidean distance metric that supports missing values, nan_euclidean_distances, is used to find the nearest neighbors. Each missing feature is imputed using values from n_neighbors nearest neighbors that have a value for the feature. The feature of the neighbors are averaged uniformly or weighted by distance to each neighbor. If a sample has more than one feature missing, then the neighbors for that sample can be different depending on the particular feature being imputed. When the number of available neighbors is less than n_neighbors and there are no defined distances to the training set, the training set average for that feature is used during imputation. If there is at least one neighbor with a defined distance, the weighted or unweighted average of the remaining neighbors will be used during imputation. If a feature is always missing in training, it is removed during transform. \n\nRef: https://scikit-learn.org/stable/ \n ### Filling using other features\n\nAnother conceivable strategy is to use other features to fill in the missing values \u200b\u200bof the Age feature. Consider how to fill the Age feature using the Title feature above. \n ### Scaling \nLooking at the above result, the skewness was 0.4559, not skewed to one side. Let's try linear scaling.\n\nSelect RobustScaler during linear scaling. In this way, the influence of outliers can be minimized.\n\n> This is a technique that minimizes the influence of outliers.  \n> Since the median and IQR (interquartile range) are used, it can be confirmed that the same values are more widely distributed after standardization when compared with the StandardScaler.\n> \n> $\ud835\udc3c\ud835\udc44\ud835\udc45=\ud835\udc443\u2212\ud835\udc441$: That is, it deals with values in the 25th and 75th percentiles.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling) \n **Let imputation be done with KNN. The remaining Age-related features are removed.** \n -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Fare\n\nFirst, let's check the distribution for that value. \n **It is skewed to one side. Consider nonlinear scaling. In this case, we will use QuantileTransformer.**\n\n> The quantile function ranks or smooths out the relationship between observations and can be mapped onto other distributions, such as the uniform or normal distribution.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling) \n Let's try Bining. \n ---------------------------------------\n## Embarked \n <span style=\"color:Blue\"> Observation:\n    \n* Many passengers on board at S port died.\n* For passengers boarding at port C, the survival rate is higher than the mortality rate. \n <span style=\"color:Blue\"> Observation:\n    \n* Among the passengers who boarded at S port, the proportion of males is higher than that of other ports. \n Let's impute missing value for Embarked feature. The strategy for Embarked's missing values is to choose 'most_frequent'. \n ------------------------------------------------------------------------------------------\n# Checking Missing Value Again\nFinally, let's check the missing values. \n **OK! There is no missing values at the train dataset.** \n --------------------------------------------------------------------------------------------------\n# Detecting Outliers by PCA\n\n![](https://miro.medium.com/max/602/0*PnqMbZEdnuL9yHuo.png)\n\nPicture Credit: https://miro.medium.com\n\nThe more features, the higher the dimension. When projecting to a lower dimension through PCA, new insights can be gained. PCA can effectively detect outliers.\n\nPC 1 has the largest variance in the dataset distribution. That is, the outlier in PC 1 is very likely to be real outlier \n **Let's check out outliers in PC 1** \n <span style=\"color:Blue\"> Observation:\n* The Sage family started from S port, there was no Cabin, and the ages were not recorded, and they appear to be a poor and pitiful family with a pclass 3 rating.\n* All three females in this family using the Miss title have died.\n\n**The last sad news is that the training dataset is small, so it seems difficult to remove even if the above data are outliers.    \nNevertheless, fortunately, this problem is not a regression problem, but a classification problem. If it is a regression problem, outliers should be removed.** \n ------------------------------------------------------\n# Encoding\n\nLet's perform encoding on categorical features.\n\nWhen only tree-based models are used, label encoding is sufficient. However, we will use one-hot encoding for model extension in the future.\n\nIf you want to know more about the encoding of categorical features, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/preprocessing-encoding-categorical-data) \n ---------------------------------------\n# Checking Correlation \n <span style=\"color:Blue\"> Observation and Decision:\n    \n* There is a large correlation between FamilySize and SibSp and Parch. Since the derived variable FamilySize is made of SibSp and Parch, SibSp and Parch are removed.\n* The relationship between Cabin and Has_Cabin is high. Therefore, the derived variable Has_Cabin is left and Cabin is removed.\n* The relationship between Fare and Fare_class is high. Fare is selected because skewness is removed by nonlinear transform of the Fare feature.\n* There are many features that are not related to the survived value. \n -------------------------------------------------------------\n# Selecting Features\n\nFeatures that are not helpful in judging the above heatmap and survivors, or that have other derived variables, will be removed. \n **Let's check the correlation of each feature.** \n Let's check the correlation between the target value (Suvived) and other features. \n **OK! Looking at the heatmap and pairplot above, it seems that the features are properly selected.** \n # Spliting Train/Validation/Test Data \n ----------------------------------------------------------------------------\n# Visualizing Training Dataset after Dimension Reduction \n The training dataset has 16 dimensions. To show the approximate distribution of the training dataset preprocessed above, let's reduce the dimension to two dimensions and draw it. \n As shown in the figure above, when viewed in two dimensions, there are quite a few areas where the survivors and the dead overlap. First, let's feel for a moment that the task of classification is a difficult task before learning the model. Our model does this difficult job!\n\n**Thanks models!** \n ---------------------------------------------------\n# Ensemble\n\n![](https://media3.giphy.com/media/26xBvMWzk7FQr54Sk/giphy.gif)\n\nPicture Credit: https://media3.giphy.com\n\n\n> Empirically, ensembles tend to yield better results when there is a significant diversity among the models.Many ensemble methods, therefore, seek to promote diversity among the models they combine.Although perhaps non-intuitive, more random algorithms (like random decision trees) can be used to produce a stronger ensemble than very deliberate algorithms (like entropy-reducing decision trees).Using a variety of strong learning algorithms, however, has been shown to be more effective than using techniques that attempt to dumb-down the models in order to promote diversity. It is possible to increase diversity in the training stage of the model using correlation for regression tasks or using information measures such as cross entropy for classification tasks\n\nRef: https://en.wikipedia.org/ \n ## Setting up models\n\n> This function trains and evaluates performance of all estimators available in the model library using cross validation. The output of this function is a score grid with average cross validated scores.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n ## Choosing top models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n ## Creating Models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n # Interpreting Models\n\nThis function analyzes the predictions generated from a trained model. Most plots in this function are implemented based on the SHAP (SHapley Additive exPlanations).\n\n> SHAP (SHapley Additive exPlanations) is a game theoretic approach to explain the output of any machine learning model. It connects optimal credit allocation with local explanations using the classic Shapley values from game theory and their related extensions\n\nRef: https://shap.readthedocs.io/en/latest/\n\n**If you want to know more about feature importance and SHAP, please refer to the notebook below.**\n\n[Notebook](https://www.kaggle.com/ohseokkim/explaning-machine-by-feature-importnace) \n <span style=\"color:Blue\"> Observation:\n* Among the features, if you look at Fare and Age_knn, the features are spread in a wide distribution of importance, and the colors are also spread from blue to red. \n* Each model is learning with the importance of different features. The diversity of these models seems to increase the performance of the ensemble model.\n* Title_Mr and Sex_male play an important role in how the model learns. \n # Tuning Hyperparameters\n\n> This function tunes the hyperparameters of a given estimator. The output of this function is a score grid with CV scores by fold of the best selected model based on optimize parameter. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html \n ## Stacking \n In machine learning, it is important to determine the boundary. In particular, in tree-based models, it is more important to determine the boundary, because the process of creating a new leaf in the tree is also the process of determining the boundary.\nLooking at the above picture again, there are many overlapping points with the green dot indicating the survior and the blue dot indicating the non-survior. Determining the boundary in this situation would be a very difficult task.\nIf the feature engineer work was done well, the distribution of the two points to determine the boundary would have been well divided. However, the titanic dataset is difficult to do with some missing values \u200b\u200band a small dataset.\n\nLet's look again at the picture above.\nBoundary is not very clean. It can be judged that overfitting has occurred, and therefore it can be judged that it does not have generality.\n\nIf you want to know more about overfitting, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/overfitting-and-underfitting-eda) \n ## Soft Blending \n It seems that the Boundary is set properly. \n ## Hard Blending \n Compared to the soft blending model, the boundary does not look clean. \n -------------------------------------------------------------------------------------------------\n## Calibrating the final model\n\n> This function calibrates the probability of a given estimator using isotonic or logistic regression. \n \n --------------------------------------------------\n# Finalizing the last model\n> This function trains a given estimator on the entire dataset including the holdout set.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html\n\nThe blend_soft model is selected based on the above result. Finally, the model is tuned with the entire dataset.\n \n ## Checking the final model \n ---------------------------------------\n# Checking Last Results \n Considering above results, the soft blending model seems appropriate among ensemble models. Therefore, we use this model to make the final prediction with the test dataset.",
    "n_cells": 202,
    "n_code_cells": 117,
    "n_markdown_cells": 85,
    "n_raw_cells": 0,
    "n_outputs": 117,
    "r_code_cells": 0.5792079207920792,
    "r_markdown_cells": 0.4207920792079208,
    "r_raw_cells": 0.0,
    "r_outputs": 1.0,
    "n_exceptions": 0,
    "r_exceptions": 0.0,
    "n_lines": 873,
    "n_lines_code": 574,
    "n_lines_markdown": 299,
    "lines_per_cell": [
        17,
        8,
        5,
        7,
        2,
        2,
        14,
        1,
        15,
        17,
        6,
        7,
        1,
        5,
        3,
        1,
        1,
        1,
        2,
        1,
        1,
        1,
        1,
        18,
        4,
        1,
        2,
        1,
        3,
        2,
        9,
        1,
        1,
        1,
        3,
        4,
        1,
        14,
        3,
        2,
        7,
        10,
        2,
        11,
        2,
        11,
        2,
        1,
        1,
        11,
        3,
        2,
        2,
        11,
        3,
        4,
        1,
        1,
        9,
        1,
        8,
        11,
        3,
        14,
        6,
        4,
        1,
        1,
        11,
        1,
        11,
        4,
        2,
        8,
        4,
        1,
        1,
        5,
        3,
        14,
        4,
        5,
        4,
        14,
        4,
        5,
        3,
        14,
        4,
        3,
        1,
        3,
        1,
        14,
        4,
        13,
        3,
        14,
        4,
        1,
        1,
        4,
        8,
        4,
        7,
        3,
        3,
        8,
        1,
        1,
        6,
        1,
        2,
        9,
        4,
        9,
        3,
        1,
        3,
        3,
        3,
        1,
        10,
        1,
        7,
        15,
        1,
        1,
        8,
        6,
        10,
        4,
        2,
        10,
        6,
        2,
        4,
        9,
        1,
        10,
        1,
        2,
        5,
        1,
        1,
        4,
        3,
        4,
        2,
        2,
        1,
        1,
        2,
        3,
        11,
        5,
        1,
        6,
        5,
        3,
        1,
        5,
        7,
        11,
        1,
        1,
        1,
        4,
        5,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        10,
        2,
        2,
        1,
        1,
        2,
        1,
        2,
        2,
        1,
        1,
        2,
        1,
        2,
        5,
        1,
        8,
        1,
        1,
        2,
        2,
        2,
        1,
        3
    ],
    "lines_per_code_cell": [
        17,
        2,
        14,
        15,
        17,
        6,
        7,
        5,
        3,
        1,
        1,
        1,
        1,
        18,
        2,
        1,
        1,
        1,
        1,
        14,
        7,
        10,
        11,
        11,
        1,
        11,
        2,
        11,
        1,
        9,
        1,
        8,
        11,
        14,
        1,
        1,
        11,
        8,
        4,
        3,
        14,
        4,
        4,
        14,
        4,
        3,
        14,
        4,
        1,
        3,
        1,
        14,
        4,
        3,
        14,
        4,
        1,
        8,
        4,
        3,
        3,
        8,
        1,
        6,
        1,
        9,
        9,
        3,
        3,
        1,
        7,
        15,
        1,
        8,
        4,
        10,
        2,
        9,
        10,
        2,
        5,
        4,
        3,
        4,
        2,
        1,
        2,
        1,
        6,
        3,
        1,
        7,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        1,
        2,
        2,
        1,
        1,
        2,
        2,
        3
    ],
    "lines_per_markdown_cell": [
        8,
        5,
        7,
        2,
        1,
        1,
        1,
        2,
        1,
        1,
        4,
        1,
        3,
        2,
        9,
        1,
        3,
        4,
        3,
        2,
        2,
        2,
        2,
        1,
        3,
        2,
        3,
        4,
        1,
        3,
        6,
        4,
        1,
        11,
        4,
        2,
        1,
        1,
        5,
        5,
        5,
        3,
        13,
        1,
        4,
        7,
        1,
        2,
        4,
        3,
        1,
        3,
        1,
        10,
        1,
        6,
        10,
        2,
        6,
        4,
        1,
        1,
        1,
        1,
        2,
        1,
        3,
        11,
        5,
        5,
        5,
        11,
        4,
        5,
        1,
        10,
        1,
        1,
        1,
        1,
        5,
        8,
        1,
        2,
        1
    ],
    "ave_lines_per_cell": 4.321782178217822,
    "ave_lines_per_code_cell": 4.905982905982906,
    "ave_lines_per_markdown_cell": 3.5176470588235293,
    "max_lines_per_cell": 18,
    "max_lines_per_code_cell": 18,
    "max_lines_per_markdown_cell": 13,
    "min_lines_per_cell": 1,
    "min_lines_per_code_cell": 1,
    "min_lines_per_markdown_cell": 1,
    "n_chars": 45236,
    "n_chars_code": 25402,
    "n_chars_markdown": 19834,
    "chars_per_cell": [
        930,
        143,
        662,
        593,
        76,
        51,
        468,
        18,
        556,
        654,
        175,
        230,
        17,
        319,
        185,
        16,
        74,
        52,
        50,
        21,
        17,
        32,
        26,
        877,
        281,
        39,
        74,
        51,
        240,
        57,
        639,
        28,
        96,
        34,
        172,
        207,
        66,
        559,
        208,
        81,
        308,
        441,
        88,
        458,
        110,
        458,
        84,
        87,
        72,
        463,
        178,
        76,
        86,
        459,
        161,
        138,
        31,
        46,
        264,
        28,
        388,
        458,
        123,
        411,
        396,
        307,
        32,
        69,
        794,
        62,
        459,
        189,
        80,
        412,
        175,
        50,
        27,
        391,
        166,
        771,
        195,
        692,
        219,
        771,
        195,
        1097,
        161,
        768,
        191,
        207,
        41,
        145,
        100,
        768,
        191,
        717,
        144,
        768,
        191,
        84,
        76,
        254,
        415,
        179,
        438,
        219,
        163,
        392,
        17,
        95,
        216,
        97,
        51,
        372,
        176,
        367,
        149,
        121,
        180,
        162,
        174,
        56,
        512,
        37,
        309,
        420,
        36,
        52,
        299,
        561,
        448,
        293,
        62,
        294,
        565,
        87,
        212,
        305,
        48,
        294,
        82,
        87,
        184,
        100,
        37,
        200,
        212,
        139,
        74,
        133,
        13,
        178,
        88,
        295,
        970,
        295,
        52,
        205,
        261,
        158,
        4,
        257,
        198,
        683,
        25,
        19,
        25,
        432,
        284,
        70,
        82,
        82,
        72,
        72,
        70,
        11,
        143,
        69,
        1056,
        66,
        75,
        16,
        116,
        68,
        43,
        65,
        74,
        16,
        116,
        68,
        70,
        74,
        234,
        40,
        354,
        40,
        27,
        67,
        75,
        63,
        172,
        162
    ],
    "chars_per_code_cell": [
        930,
        51,
        468,
        556,
        654,
        175,
        230,
        319,
        185,
        16,
        52,
        17,
        26,
        877,
        74,
        51,
        28,
        34,
        66,
        559,
        308,
        441,
        458,
        458,
        72,
        463,
        86,
        459,
        31,
        264,
        28,
        388,
        458,
        411,
        32,
        62,
        459,
        412,
        175,
        166,
        771,
        195,
        219,
        771,
        195,
        161,
        768,
        191,
        41,
        145,
        100,
        768,
        191,
        144,
        768,
        191,
        76,
        415,
        179,
        219,
        163,
        392,
        95,
        216,
        97,
        372,
        367,
        180,
        174,
        37,
        309,
        420,
        52,
        299,
        293,
        294,
        87,
        305,
        294,
        87,
        184,
        200,
        212,
        139,
        74,
        13,
        88,
        52,
        205,
        158,
        4,
        198,
        25,
        19,
        25,
        70,
        82,
        82,
        72,
        72,
        70,
        143,
        69,
        66,
        75,
        116,
        68,
        65,
        74,
        116,
        68,
        74,
        40,
        40,
        67,
        75,
        162
    ],
    "chars_per_markdown_cell": [
        143,
        662,
        593,
        76,
        18,
        17,
        74,
        50,
        21,
        32,
        281,
        39,
        240,
        57,
        639,
        96,
        172,
        207,
        208,
        81,
        88,
        110,
        84,
        87,
        178,
        76,
        161,
        138,
        46,
        123,
        396,
        307,
        69,
        794,
        189,
        80,
        50,
        27,
        391,
        692,
        1097,
        207,
        717,
        84,
        254,
        438,
        17,
        51,
        176,
        149,
        121,
        162,
        56,
        512,
        36,
        561,
        448,
        62,
        565,
        212,
        48,
        82,
        100,
        37,
        133,
        178,
        295,
        970,
        295,
        261,
        257,
        683,
        432,
        284,
        11,
        1056,
        16,
        43,
        16,
        70,
        234,
        354,
        27,
        63,
        172
    ],
    "ave_chars_per_line": 51.81672394043528,
    "ave_chars_per_cell": 223.94059405940595,
    "ave_chars_per_code_cell": 217.11111111111111,
    "ave_chars_per_markdown_cell": 233.34117647058824,
    "max_chars_per_cell": 1097,
    "max_chars_per_code_cell": 930,
    "max_chars_per_markdownell": 1097,
    "min_chars_per_cell": 4,
    "min_chars_per_code_cell": 4,
    "min_chars_per_markdown_cell": 11,
    "r_lines_code": 0.6575028636884307,
    "r_lines_markdown": 0.3424971363115693,
    "r_chars_markdown": 0.4384560969139623,
    "r_chars_code": 0.5615439030860376,
    "all_cells": [
        {
            "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
            "mc_idx": 0,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.12121212121212122,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.06060606060606061,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.12121212121212122,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 30,
                    "libraries": 1,
                    "install": 1,
                    "session": 1
                },
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".join(": 1,
                    ".join": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 2,
                    "save": 2
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n"
                    ]
                },
                "mc_idx": 0,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "--------------------------\n# Introduction\n\n![](https://c.tenor.com/csSu8i3jaRQAAAAC/titanic-sinking.gif)\n\nPicture Credit: https://c.tenor.com\n\n",
            "mc_idx": 1,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Missing Values\n\n> For various reasons, many real world datasets contain missing values, often encoded as blanks, NaNs or other placeholders. Such datasets however are incompatible with scikit-learn estimators which assume that all values in an array are numerical, and that all have and hold meaning. A basic strategy to use incomplete datasets is to discard entire rows and/or columns containing missing values. However, this comes at the price of losing data which may be valuable (even though incomplete). A better strategy is to impute the missing values, i.e., to infer them from the known part of the data. \n\nReference: https://scikit-learn.org/stable/",
            "mc_idx": 2,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The first projects most people start with are probably titanic. However, As I think, titatic datasets are not easy.\nThe reason for thinking like this is as follows.\n* Missing Values: There are many missing values of features that are considered important for survivor judgment, such as Age and Cabin.\n* Small Dataset: Because the dataset is small, it seems difficult to train the model sufficiently.\n\nIn this notebook, we will focus on imputation of missing values and ensemble methods to improve performance.\nIn addition, we will create new derivative variables if necessary for each feature.",
            "mc_idx": 3,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------------------------------\n# Setting up",
            "mc_idx": 4,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "!pip install pycaret-nightly\n!pip install missingno",
            "mc_idx": 5,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "!pip install": 2,
                    "install": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Collecting pycaret-nightly\r\n  Downloading pycaret_nightly-2.3.5.dev1638234228-py3-none-any.whl (288 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 288 kB 5.2 MB/s \r\n\u001b[?25hCollecting mlflow\r\n  Downloading mlflow-1.22.0-py3-none-any.whl (15.5 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15.5 MB 58.4 MB/s \r\n\u001b[?25hRequirement already satisfied: matplotlib in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.4.3)\r\nRequirement already satisfied: joblib in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.0.1)\r\nRequirement already satisfied: kmodes>=0.10.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.11.1)\r\nRequirement already satisfied: yellowbrick>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.3.post1)\r\nRequirement already satisfied: scikit-plot in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.3.7)\r\nRequirement already satisfied: numpy==1.19.5 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.19.5)\r\nRequirement already satisfied: umap-learn in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.5.1)\r\nRequirement already satisfied: textblob in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.15.3)\r\nRequirement already satisfied: pyLDAvis in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.2.2)\r\nRequirement already satisfied: mlxtend>=0.17.0 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.19.0)\r\nRequirement already satisfied: wordcloud in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.8.1)\r\nCollecting imbalanced-learn==0.7.0\r\n  Downloading imbalanced_learn-0.7.0-py3-none-any.whl (167 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 167 kB 65.4 MB/s \r\n\u001b[?25hCollecting scipy<=1.5.4\r\n  Downloading scipy-1.5.4-cp37-cp37m-manylinux1_x86_64.whl (25.9 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25.9 MB 52.5 MB/s \r\n\u001b[?25hRequirement already satisfied: scikit-learn==0.23.2 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.23.2)\r\nRequirement already satisfied: seaborn in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.11.2)\r\nRequirement already satisfied: cufflinks>=0.17.0 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.17.3)\r\nCollecting spacy<2.4.0\r\n  Downloading spacy-2.3.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (10.4 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10.4 MB 49.0 MB/s \r\n\u001b[?25hCollecting gensim<4.0.0\r\n  Downloading gensim-3.8.3-cp37-cp37m-manylinux1_x86_64.whl (24.2 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 24.2 MB 62.0 MB/s \r\n\u001b[?25hCollecting pyod\r\n  Downloading pyod-0.9.5.tar.gz (113 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 113 kB 39.9 MB/s \r\n\u001b[?25hRequirement already satisfied: pandas-profiling>=2.8.0 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.0.0)\r\nRequirement already satisfied: plotly>=4.4.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (5.3.1)\r\nRequirement already satisfied: ipywidgets in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (7.6.5)\r\nRequirement already satisfied: Boruta in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.3)\r\nRequirement already satisfied: nltk in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.2.4)\r\nRequirement already satisfied: pandas in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.3.3)\r\nRequirement already satisfied: lightgbm>=2.3.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.2.1)\r\nRequirement already satisfied: IPython in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (7.27.0)\r\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from scikit-learn==0.23.2->pycaret-nightly) (2.2.0)\r\nRequirement already satisfied: colorlover>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from cufflinks>=0.17.0->pycaret-nightly) (0.3.0)\r\nRequirement already satisfied: setuptools>=34.4.1 in /opt/conda/lib/python3.7/site-packages (from cufflinks>=0.17.0->pycaret-nightly) (58.0.4)\r\nRequirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.7/site-packages (from cufflinks>=0.17.0->pycaret-nightly) (1.16.0)\r\nRequirement already satisfied: smart-open>=1.8.1 in /opt/conda/lib/python3.7/site-packages (from gensim<4.0.0->pycaret-nightly) (5.2.1)\r\nRequirement already satisfied: backcall in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.2.0)\r\nRequirement already satisfied: decorator in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (5.1.0)\r\nRequirement already satisfied: pygments in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (2.10.0)\r\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (3.0.20)\r\nRequirement already satisfied: traitlets>=4.2 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (5.1.0)\r\nRequirement already satisfied: matplotlib-inline in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.1.3)\r\nRequirement already satisfied: pexpect>4.3 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (4.8.0)\r\nRequirement already satisfied: jedi>=0.16 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.18.0)\r\nRequirement already satisfied: pickleshare in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.7.5)\r\nRequirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (6.4.1)\r\nRequirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (5.1.3)\r\nRequirement already satisfied: widgetsnbextension~=3.5.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (3.5.1)\r\nRequirement already satisfied: ipython-genutils~=0.2.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (0.2.0)\r\nRequirement already satisfied: jupyterlab-widgets>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (1.0.2)\r\nRequirement already satisfied: debugpy<2.0,>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (1.4.1)\r\nRequirement already satisfied: importlib-metadata<5 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (4.8.1)\r\nRequirement already satisfied: argcomplete>=1.12.3 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (1.12.3)\r\nRequirement already satisfied: jupyter-client<8.0 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (7.0.3)\r\nRequirement already satisfied: tornado<7.0,>=4.2 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (6.1)\r\nRequirement already satisfied: typing-extensions>=3.6.4 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata<5->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (3.10.0.2)\r\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata<5->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (3.5.0)\r\nRequirement already satisfied: parso<0.9.0,>=0.8.0 in /opt/conda/lib/python3.7/site-packages (from jedi>=0.16->IPython->pycaret-nightly) (0.8.2)\r\nRequirement already satisfied: nest-asyncio>=1.5 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (1.5.1)\r\nRequirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (2.8.0)\r\nRequirement already satisfied: pyzmq>=13 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (22.3.0)\r\nRequirement already satisfied: entrypoints in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (0.3)\r\nRequirement already satisfied: jupyter-core>=4.6.0 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (4.8.1)\r\nRequirement already satisfied: wheel in /opt/conda/lib/python3.7/site-packages (from lightgbm>=2.3.1->pycaret-nightly) (0.37.0)\r\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (1.3.2)\r\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (8.2.0)\r\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (2.4.7)\r\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (0.10.0)\r\nRequirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.7/site-packages (from nbformat>=4.2.0->ipywidgets->pycaret-nightly) (3.2.0)\r\nRequirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.7/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets->pycaret-nightly) (21.2.0)\r\nRequirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.7/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets->pycaret-nightly) (0.17.3)\r\nRequirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.7/site-packages (from pandas->pycaret-nightly) (2021.1)\r\nRequirement already satisfied: phik>=0.11.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.11.2)\r\nRequirement already satisfied: tqdm>=4.48.2 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (4.62.3)\r\nRequirement already satisfied: htmlmin>=0.1.12 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.1.12)\r\nRequirement already satisfied: PyYAML>=5.0.0 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (5.4.1)\r\nRequirement already satisfied: visions[type_image_path]==0.7.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.7.1)\r\nRequirement already satisfied: requests>=2.24.0 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (2.25.1)\r\nRequirement already satisfied: tangled-up-in-unicode==0.1.0 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.1.0)\r\nRequirement already satisfied: missingno>=0.4.2 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.4.2)\r\nRequirement already satisfied: jinja2>=2.11.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (3.0.2)\r\nRequirement already satisfied: pydantic>=1.8.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (1.8.2)\r\nRequirement already satisfied: multimethod==1.4 in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (1.4)\r\nRequirement already satisfied: networkx>=2.4 in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (2.5)\r\nRequirement already satisfied: bottleneck in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (1.3.2)\r\nRequirement already satisfied: imagehash in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (4.2.1)\r\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.7/site-packages (from jinja2>=2.11.1->pandas-profiling>=2.8.0->pycaret-nightly) (2.0.1)\r\nRequirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.7/site-packages (from pexpect>4.3->IPython->pycaret-nightly) (0.7.0)\r\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from plotly>=4.4.1->pycaret-nightly) (8.0.1)\r\nRequirement already satisfied: wcwidth in /opt/conda/lib/python3.7/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->IPython->pycaret-nightly) (0.2.5)\r\nRequirement already satisfied: chardet<5,>=3.0.2 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (4.0.0)\r\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (2021.10.8)\r\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (1.26.6)\r\nRequirement already satisfied: idna<3,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (2.10)\r\nRequirement already satisfied: wasabi<1.1.0,>=0.4.0 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (0.8.2)\r\nRequirement already satisfied: preshed<3.1.0,>=3.0.2 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (3.0.5)\r\nCollecting catalogue<1.1.0,>=0.0.7\r\n  Downloading catalogue-1.0.0-py2.py3-none-any.whl (7.7 kB)\r\nRequirement already satisfied: cymem<2.1.0,>=2.0.2 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (2.0.5)\r\nRequirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (1.0.5)\r\nCollecting plac<1.2.0,>=0.9.6\r\n  Downloading plac-1.1.3-py2.py3-none-any.whl (20 kB)\r\nCollecting srsly<1.1.0,>=1.0.2\r\n  Downloading srsly-1.0.5-cp37-cp37m-manylinux2014_x86_64.whl (184 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 184 kB 63.4 MB/s \r\n\u001b[?25hRequirement already satisfied: blis<0.8.0,>=0.4.0 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (0.7.4)\r\nCollecting thinc<7.5.0,>=7.4.1\r\n  Downloading thinc-7.4.5-cp37-cp37m-manylinux2014_x86_64.whl (1.0 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.0 MB 46.8 MB/s \r\n\u001b[?25hRequirement already satisfied: notebook>=4.4.1 in /opt/conda/lib/python3.7/site-packages (from widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (6.4.4)\r\nRequirement already satisfied: nbconvert in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (6.1.0)\r\nRequirement already satisfied: prometheus-client in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.11.0)\r\nRequirement already satisfied: terminado>=0.8.3 in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.12.1)\r\nRequirement already satisfied: argon2-cffi in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (20.1.0)\r\nRequirement already satisfied: Send2Trash>=1.5.0 in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (1.8.0)\r\nRequirement already satisfied: cffi>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (1.14.6)\r\nRequirement already satisfied: pycparser in /opt/conda/lib/python3.7/site-packages (from cffi>=1.0.0->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (2.20)\r\nRequirement already satisfied: PyWavelets in /opt/conda/lib/python3.7/site-packages (from imagehash->visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (1.1.1)\r\nCollecting prometheus-flask-exporter\r\n  Downloading prometheus_flask_exporter-0.18.6-py3-none-any.whl (17 kB)\r\nCollecting gunicorn\r\n  Downloading gunicorn-20.1.0-py3-none-any.whl (79 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 79 kB 6.1 MB/s \r\n\u001b[?25hRequirement already satisfied: docker>=4.0.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (5.0.2)\r\nRequirement already satisfied: gitpython>=2.1.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (3.1.23)\r\nCollecting querystring-parser\r\n  Downloading querystring_parser-1.2.4-py2.py3-none-any.whl (7.9 kB)\r\nRequirement already satisfied: click>=7.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (8.0.1)\r\nRequirement already satisfied: sqlparse>=0.3.1 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (0.4.2)\r\nRequirement already satisfied: cloudpickle in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (2.0.0)\r\nRequirement already satisfied: protobuf>=3.7.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (3.18.1)\r\nCollecting databricks-cli>=0.8.7\r\n  Downloading databricks-cli-0.16.2.tar.gz (58 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 58 kB 4.0 MB/s \r\n\u001b[?25hCollecting alembic<=1.4.1\r\n  Downloading alembic-1.4.1.tar.gz (1.1 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.1 MB 59.3 MB/s \r\n\u001b[?25hRequirement already satisfied: sqlalchemy in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (1.4.25)\r\nRequirement already satisfied: packaging in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (21.0)\r\nRequirement already satisfied: Flask in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (2.0.2)\r\nRequirement already satisfied: Mako in /opt/conda/lib/python3.7/site-packages (from alembic<=1.4.1->mlflow->pycaret-nightly) (1.1.5)\r\nCollecting python-editor>=0.3\r\n  Downloading python_editor-1.0.4-py3-none-any.whl (4.9 kB)\r\nRequirement already satisfied: tabulate>=0.7.7 in /opt/conda/lib/python3.7/site-packages (from databricks-cli>=0.8.7->mlflow->pycaret-nightly) (0.8.9)\r\nRequirement already satisfied: websocket-client>=0.32.0 in /opt/conda/lib/python3.7/site-packages (from docker>=4.0.0->mlflow->pycaret-nightly) (0.57.0)\r\nRequirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.7/site-packages (from gitpython>=2.1.0->mlflow->pycaret-nightly) (4.0.7)\r\nRequirement already satisfied: smmap<5,>=3.0.1 in /opt/conda/lib/python3.7/site-packages (from gitdb<5,>=4.0.1->gitpython>=2.1.0->mlflow->pycaret-nightly) (3.0.5)\r\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.7/site-packages (from sqlalchemy->mlflow->pycaret-nightly) (1.1.1)\r\nRequirement already satisfied: itsdangerous>=2.0 in /opt/conda/lib/python3.7/site-packages (from Flask->mlflow->pycaret-nightly) (2.0.1)\r\nRequirement already satisfied: Werkzeug>=2.0 in /opt/conda/lib/python3.7/site-packages (from Flask->mlflow->pycaret-nightly) (2.0.1)\r\nRequirement already satisfied: defusedxml in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.7.1)\r\nRequirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (1.5.0)\r\nRequirement already satisfied: nbclient<0.6.0,>=0.5.0 in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.5.4)\r\nRequirement already satisfied: jupyterlab-pygments in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.1.2)\r\nRequirement already satisfied: testpath in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.5.0)\r\nRequirement already satisfied: bleach in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (4.1.0)\r\nRequirement already satisfied: mistune<2,>=0.8.1 in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.8.4)\r\nRequirement already satisfied: webencodings in /opt/conda/lib/python3.7/site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.5.1)\r\nRequirement already satisfied: numexpr in /opt/conda/lib/python3.7/site-packages (from pyLDAvis->pycaret-nightly) (2.7.3)\r\nRequirement already satisfied: funcy in /opt/conda/lib/python3.7/site-packages (from pyLDAvis->pycaret-nightly) (1.16)\r\nRequirement already satisfied: future in /opt/conda/lib/python3.7/site-packages (from pyLDAvis->pycaret-nightly) (0.18.2)\r\nRequirement already satisfied: numba>=0.35 in /opt/conda/lib/python3.7/site-packages (from pyod->pycaret-nightly) (0.54.0)\r\nRequirement already satisfied: statsmodels in /opt/conda/lib/python3.7/site-packages (from pyod->pycaret-nightly) (0.12.2)\r\nRequirement already satisfied: llvmlite<0.38,>=0.37.0rc1 in /opt/conda/lib/python3.7/site-packages (from numba>=0.35->pyod->pycaret-nightly) (0.37.0)\r\nRequirement already satisfied: patsy>=0.5 in /opt/conda/lib/python3.7/site-packages (from statsmodels->pyod->pycaret-nightly) (0.5.1)\r\nRequirement already satisfied: pynndescent>=0.5 in /opt/conda/lib/python3.7/site-packages (from umap-learn->pycaret-nightly) (0.5.4)\r\nBuilding wheels for collected packages: alembic, databricks-cli, pyod\r\n  Building wheel for alembic (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \bdone\r\n\u001b[?25h  Created wheel for alembic: filename=alembic-1.4.1-py2.py3-none-any.whl size=158172 sha256=776420b2587eb20a96ed09559cb7e6ff0e51c3553b240f95631780931f02912d\r\n  Stored in directory: /root/.cache/pip/wheels/be/5d/0a/9e13f53f4f5dfb67cd8d245bb7cdffe12f135846f491a283e3\r\n  Building wheel for databricks-cli (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \bdone\r\n\u001b[?25h  Created wheel for databricks-cli: filename=databricks_cli-0.16.2-py3-none-any.whl size=106811 sha256=a4df6e009f9bef047201171e042d044a52767ca48d8da73c7726e84579ef088d\r\n  Stored in directory: /root/.cache/pip/wheels/f4/5c/ed/e1ce20a53095f63b27b4964abbad03e59cf3472822addf7d29\r\n  Building wheel for pyod (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n\u001b[?25h  Created wheel for pyod: filename=pyod-0.9.5-py3-none-any.whl size=132699 sha256=8485aab17349e0484360aa86460f5043053ff0a578a0f72b42616003f2b108b8\r\n  Stored in directory: /root/.cache/pip/wheels/3d/bb/b7/62b60fb451b33b0df1ab8006697fba7a6a49709a629055cf77\r\nSuccessfully built alembic databricks-cli pyod\r\nInstalling collected packages: scipy, srsly, python-editor, plac, catalogue, thinc, querystring-parser, prometheus-flask-exporter, gunicorn, databricks-cli, alembic, spacy, pyod, mlflow, imbalanced-learn, gensim, pycaret-nightly\r\n  Attempting uninstall: scipy\r\n    Found existing installation: scipy 1.7.1\r\n    Uninstalling scipy-1.7.1:\r\n      Successfully uninstalled scipy-1.7.1\r\n  Attempting uninstall: srsly\r\n    Found existing installation: srsly 2.4.1\r\n    Uninstalling srsly-2.4.1:\r\n      Successfully uninstalled srsly-2.4.1\r\n  Attempting uninstall: catalogue\r\n    Found existing installation: catalogue 2.0.6\r\n    Uninstalling catalogue-2.0.6:\r\n      Successfully uninstalled catalogue-2.0.6\r\n  Attempting uninstall: thinc\r\n    Found existing installation: thinc 8.0.10\r\n    Uninstalling thinc-8.0.10:\r\n      Successfully uninstalled thinc-8.0.10\r\n  Attempting uninstall: alembic\r\n    Found existing installation: alembic 1.7.4\r\n    Uninstalling alembic-1.7.4:\r\n      Successfully uninstalled alembic-1.7.4\r\n  Attempting uninstall: spacy\r\n    Found existing installation: spacy 3.1.3\r\n    Uninstalling spacy-3.1.3:\r\n      Successfully uninstalled spacy-3.1.3\r\n  Attempting uninstall: imbalanced-learn\r\n    Found existing installation: imbalanced-learn 0.8.1\r\n    Uninstalling imbalanced-learn-0.8.1:\r\n      Successfully uninstalled imbalanced-learn-0.8.1\r\n  Attempting uninstall: gensim\r\n    Found existing installation: gensim 4.0.1\r\n    Uninstalling gensim-4.0.1:\r\n      Successfully uninstalled gensim-4.0.1\r\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\nscattertext 0.1.4 requires gensim>=4.0.0, but you have gensim 3.8.3 which is incompatible.\r\npdpbox 0.2.1 requires matplotlib==3.1.1, but you have matplotlib 3.4.3 which is incompatible.\r\nmatrixprofile 1.1.10 requires protobuf==3.11.2, but you have protobuf 3.18.1 which is incompatible.\r\nen-core-web-sm 3.1.0 requires spacy<3.2.0,>=3.1.0, but you have spacy 2.3.7 which is incompatible.\r\nen-core-web-lg 3.1.0 requires spacy<3.2.0,>=3.1.0, but you have spacy 2.3.7 which is incompatible.\u001b[0m\r\nSuccessfully installed alembic-1.4.1 catalogue-1.0.0 databricks-cli-0.16.2 gensim-3.8.3 gunicorn-20.1.0 imbalanced-learn-0.7.0 mlflow-1.22.0 plac-1.1.3 prometheus-flask-exporter-0.18.6 pycaret-nightly-2.3.5.dev1638234228 pyod-0.9.5 python-editor-1.0.4 querystring-parser-1.2.4 scipy-1.5.4 spacy-2.3.7 srsly-1.0.5 thinc-7.4.5\r\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\r\nRequirement already satisfied: missingno in /opt/conda/lib/python3.7/site-packages (0.4.2)\r\nRequirement already satisfied: numpy in /opt/conda/lib/python3.7/site-packages (from missingno) (1.19.5)\r\nRequirement already satisfied: seaborn in /opt/conda/lib/python3.7/site-packages (from missingno) (0.11.2)\r\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.7/site-packages (from missingno) (3.4.3)\r\nRequirement already satisfied: scipy in /opt/conda/lib/python3.7/site-packages (from missingno) (1.5.4)\r\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (2.4.7)\r\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (8.2.0)\r\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (0.10.0)\r\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (2.8.0)\r\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (1.3.2)\r\nRequirement already satisfied: six in /opt/conda/lib/python3.7/site-packages (from cycler>=0.10->matplotlib->missingno) (1.16.0)\r\nRequirement already satisfied: pandas>=0.23 in /opt/conda/lib/python3.7/site-packages (from seaborn->missingno) (1.3.3)\r\nRequirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.7/site-packages (from pandas>=0.23->seaborn->missingno) (2021.1)\r\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\r\n"
                    ]
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn import preprocessing\nimport umap\nimport umap.plot\n\nimport warnings\nwarnings.filterwarnings('ignore')",
            "mc_idx": 6,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.016666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.15833333333333333,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.008333333333333333,
                "Visualization": 0.025,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 12
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "accuracy_score": 2,
                    "precision_score": 2,
                    "recall_score": 2,
                    "f1_score": 3,
                    "precision": 2,
                    "recall": 2,
                    "roc_auc_score": 2,
                    "precision_recall_curve": 1,
                    "roc_curve": 1
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "matplotlib": 2,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "# Utility Function",
            "mc_idx": 7,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "def get_clf_eval(y_test, pred=None, pred_proba=None):\n    confusion = confusion_matrix( y_test, pred)\n    accuracy = accuracy_score(y_test , pred)\n    precision = precision_score(y_test , pred)\n    recall = recall_score(y_test , pred)\n    f1 = f1_score(y_test,pred)\n\n    roc_auc = roc_auc_score(y_test, pred_proba)\n    print('confusion matrix')\n    print(confusion)\n\n    # ROC-AUC print \n    print('accuracy: {0:.4f}, precision: {1:.4f}, recall: {2:.4f},\\\n    F1: {3:.4f}, AUC:{4:.4f}'.format(accuracy, precision, recall, f1, roc_auc))\n    return confusion",
            "mc_idx": 8,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "accuracy_score": 2,
                    "precision_score": 2,
                    "recall_score": 2,
                    "f1_score": 3,
                    "precision": 4,
                    "recall": 4,
                    "roc_auc_score": 2
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 8,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "def apply_pca(X, standardize=True):\n    # Standardize\n    if standardize:\n        X = (X - X.mean(axis=0)) / X.std(axis=0)\n    # Create principal components\n    pca = PCA()\n    X_pca = pca.fit_transform(X)\n    # Convert to dataframe\n    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n    X_pca = pd.DataFrame(X_pca, columns=component_names)\n    # Create loadings\n    loadings = pd.DataFrame(\n        pca.components_.T,  # transpose the matrix of loadings\n        columns=component_names,  # so the columns are the principal components\n        index=X.columns,  # and the rows are the original features\n    )\n    return pca, X_pca, loadings",
            "mc_idx": 9,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6923076923076923,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.07692307692307693,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    "columns": 4,
                    "shape": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "pca": 11
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "def outlier_iqr(data):\n    q1,q3 = np.percentile(data,[25,75])\n    iqr = q3-q1\n    lower = q1-(iqr*1.5)\n    upper = q3+(iqr*1.5)\n    return np.where((data>upper)|(data<lower))",
            "mc_idx": 10,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "np.percentile": 1
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    5,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 10,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "def encode_features(dataDF,feat_list):\n    for feature in feat_list:\n        le = preprocessing.LabelEncoder()\n        le = le.fit(dataDF[feature])\n        dataDF[feature] = le.transform(dataDF[feature])\n        \n    return dataDF",
            "mc_idx": 11,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "transform": 1,
                    "labelencoder": 2
                },
                "Model_Train": {
                    ".fit(": 1
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 11,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "# Loading Dataset",
            "mc_idx": 12,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')\nsubmission_data = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')\ntitanic_df = pd.concat([train_data, test_data], ignore_index = True, sort = False)\ntr_idx = titanic_df['Survived'].notnull()",
            "mc_idx": 13,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.08333333333333333,
                "Data_Transform": 0.16666666666666666,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 6,
                    "pd.read_": 6
                },
                "Exploratory_Data_Analysis": {
                    ".notnull": 1
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 13,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df.head(3).T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'})",
            "mc_idx": 14,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    8,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7cb947e2d0>"
                    ]
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df.shape",
            "mc_idx": 15,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "(1309, 12)"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "PassengerId has nothing to do with survior. It can be removed immediately.",
            "mc_idx": 16,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df.drop(['PassengerId'],axis=1,inplace=True)",
            "mc_idx": 17,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "--------------------------------------------\n# EDA",
            "mc_idx": 18,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Checking Data Type",
            "mc_idx": 19,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df.info()",
            "mc_idx": 20,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".info(": 1,
                    "info": 1,
                    ".info": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1309 entries, 0 to 1308\nData columns (total 11 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Survived  891 non-null    float64\n 1   Pclass    1309 non-null   int64  \n 2   Name      1309 non-null   object \n 3   Sex       1309 non-null   object \n 4   Age       1046 non-null   float64\n 5   SibSp     1309 non-null   int64  \n 6   Parch     1309 non-null   int64  \n 7   Ticket    1309 non-null   object \n 8   Fare      1308 non-null   float64\n 9   Cabin     295 non-null    object \n 10  Embarked  1307 non-null   object \ndtypes: float64(3), int64(3), object(5)\nmemory usage: 112.6+ KB\n"
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "# Checking Target Value Imbalace",
            "mc_idx": 21,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "print(plt.style.available)",
            "mc_idx": 22,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "['Solarize_Light2', '_classic_test_patch', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\n"
                    ]
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "total_cnt = titanic_df['Survived'].count()\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nf, ax = plt.subplots(1, 2, figsize = (18, 8))\ntitanic_df['Survived'].value_counts().plot.pie(explode = [0, 0.1], \n                                               autopct = '%1.1f%%', \n                                               ax = ax[0],\n                                               shadow = True,\n                                               colors = ['grey', 'green'])\nax[0].set_title('Survived %')\nax[0].set_ylabel('')\nsns.countplot('Survived', data = titanic_df, ax = ax[1], palette='Blues_r')\nax[1].set_title('Survived')\nfor p in ax[1].patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax[1].text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 23,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5555555555555556,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "sns.": 5,
                    "size": 2,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c013_o000_image_0.png",
                    13,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1296x576 with 2 Axes>"
                    ]
                },
                "mc_idx": 23,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "Although the survivor is small, the imbalance is not large enough for over/under sampling.\nIf you want to know more about over/under sampling, please refer to the notebook below.\n\n[Over/Under sampling](https://www.kaggle.com/ohseokkim/preprocessing-resolving-imbalance-by-sampling)",
            "mc_idx": 24,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Checking and Handling Missing Values",
            "mc_idx": 25,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "import missingno as msno\nmsno.matrix(titanic_df.drop(['Survived'],axis=1))",
            "mc_idx": 26,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.1,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c014_o001_image_1.png",
                    14,
                    1,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<AxesSubplot:>",
                        "<Figure size 1800x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 1
            }
        },
        {
            "source": "titanic_df.drop(['Survived'],axis=1).isnull().sum()",
            "mc_idx": 27,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Pclass         0\nName           0\nSex            0\nAge          263\nSibSp          0\nParch          0\nTicket         0\nFare           1\nCabin       1014\nEmbarked       2\ndtype: int64"
                    ]
                },
                "mc_idx": 27,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \nThere are missing values for Age, Cabin, Fare, and Embarked features. In particular, there are many missing values for Age and Cabin features. Let's think about how to handle these missing values.",
            "mc_idx": 28,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------\n# Checking features",
            "mc_idx": 29,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Cabin\n\n![](https://www.retrograph.com/wp-content/uploads/thumbnails/s5RGL181.jpg)\n\nPicture Credit: https://www.retrograph.com\n\nLooking at the picture above, it can be hypothesized that the survival rate will be different depending on the location of the cabin.\n\nIf you are the captain or sailor of titanic, you will be able to explain the relationship between cabin and survival rate well. If you have some kind of domain knowledge, you will be able to process that feature well. However, in the absence of such domain knowledge, we must examine the corresponding features in detail and process them to be suitable for machine learning.",
            "mc_idx": 30,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['Cabin'].unique()",
            "mc_idx": 31,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n       'C148', 'B45', 'B36', 'A21', 'D34', 'A9', 'C31', 'B61', 'C53',\n       'D43', 'C130', 'C132', 'C55 C57', 'C116', 'F', 'A29', 'C6', 'C28',\n       'C51', 'C97', 'D22', 'B10', 'E45', 'E52', 'A11', 'B11', 'C80',\n       'C89', 'F E46', 'B26', 'F E57', 'A18', 'E60', 'E39 E41',\n       'B52 B54 B56', 'C39', 'B24', 'D40', 'D38', 'C105'], dtype=object)"
                    ]
                },
                "mc_idx": 31,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "The first letter is an uppercase letter of the alphabet. Let's analyze it a bit more using this.",
            "mc_idx": 32,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['Cabin'].isnull().sum()",
            "mc_idx": 33,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "1014"
                    ]
                },
                "mc_idx": 33,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \nMissing values are 1014. This is used to determine whether the cabin is owned or not. To do this, create a new derived variable.",
            "mc_idx": 34,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "------------------------------------------------------------------------\n## Has_Cabin ( Derived variable )\n\n**Question: Is there a difference in the survival rate between passengers with and without cabin?**",
            "mc_idx": 35,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['Has_Cabin'] = titanic_df['Cabin'].isnull().astype(int)",
            "mc_idx": 36,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1
                },
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    18,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 36,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "total_cnt = titanic_df['Survived'].count()\nrcParams['figure.figsize'] = 12,8\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Has_Cabin\",\n                   hue=\"Survived\", \n                   data=titanic_df,\n                   palette = 'Blues_r')\nax.set_title('Survived Count/Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 37,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 4,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c019_o000_image_2.png",
                    19,
                    0,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 37,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\n* Cases with cabins have more survivors compared to cases without cabins. It is likely that the new derived variable will be helpful in the classification of survivors.",
            "mc_idx": 38,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------------\n## Cabin_Label ( Derived variable )",
            "mc_idx": 39,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 10,7\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\ntitanic_df['Cabin'] = titanic_df['Cabin'].fillna('N')\ntitanic_df['Cabin_label'] = titanic_df['Cabin'].str.get(0)\nax = sns.barplot(x = 'Cabin_label', y = 'Survived', data = titanic_df, palette = 'Blues_r',ci=False)\nsns.despine()",
            "mc_idx": 40,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.4,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.2,
                "Visualization": 0.8,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {
                    ".fillna(": 1,
                    ".fillna": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c020_o000_image_3.png",
                    20,
                    0,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 40,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Cabin_label\", hue=\"Survived\", data=titanic_df,palette = 'Blues_r')\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 41,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 4,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c021_o000_image_4.png",
                    21,
                    0,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 41,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "------------------------------------------------\n## Parch ( Number of parents/children )",
            "mc_idx": 42,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Parch',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 43,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c022_o000_image_5.png",
                    22,
                    0,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 43,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 0
            }
        },
        {
            "source": "----------------------------------------------------------------------\n## SibSp ( Number of siblings/spouses )",
            "mc_idx": 44,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='SibSp',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 45,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c023_o000_image_6.png",
                    23,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 45,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 23,
                "o_idx": 0
            }
        },
        {
            "source": "-------------------------------------------------\n## FamilySize ( Derived variable )",
            "mc_idx": 46,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**Question: Does the number of accompanying family members affect the survival rate??**",
            "mc_idx": 47,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['FamilySize'] = titanic_df['SibSp'] + titanic_df['Parch'] + 1",
            "mc_idx": 48,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    24,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 48,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 24,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='FamilySize',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 49,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.125,
                "Visualization": 0.625,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c025_o000_image_7.png",
                    25,
                    0,
                    7
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 49,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 25,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\nWhen FamilySize is 1, the survival rate is significantly lower than in other cases. I think it will be helpful when the model is learning.",
            "mc_idx": 50,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "______________________________________________\n## Alone ( Derived variable )",
            "mc_idx": 51,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['IsAlone'] = 0\ntitanic_df.loc[titanic_df['FamilySize'] == 1, 'IsAlone'] = 1",
            "mc_idx": 52,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    26,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 52,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 26,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='IsAlone',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine()",
            "mc_idx": 53,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c027_o000_image_8.png",
                    27,
                    0,
                    8
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 53,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 27,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\nThose who were alone died more than those who were not alone. The derived feature seems to be helpful for model training.",
            "mc_idx": 54,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "________________________________________________________\n## Name\n\nIt seems difficult to find the feature directly related to the survivor.",
            "mc_idx": 55,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['Name'].unique()[:5]",
            "mc_idx": 56,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    28,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array(['Braund, Mr. Owen Harris',\n       'Cumings, Mrs. John Bradley (Florence Briggs Thayer)',\n       'Heikkinen, Miss. Laina',\n       'Futrelle, Mrs. Jacques Heath (Lily May Peel)',\n       'Allen, Mr. William Henry'], dtype=object)"
                    ]
                },
                "mc_idx": 56,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 28,
                "o_idx": 0
            }
        },
        {
            "source": "English honistic looks. Let's check some more.",
            "mc_idx": 57,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "import re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\ntitanic_df['Title'] = titanic_df['Name'].apply(get_title)",
            "mc_idx": 58,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".apply(": 1,
                    ".apply": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    29,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 58,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 29,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Title'].unique()",
            "mc_idx": 59,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    30,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array(['Mr', 'Mrs', 'Miss', 'Master', 'Don', 'Rev', 'Dr', 'Mme', 'Ms',\n       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'Countess',\n       'Jonkheer', 'Dona'], dtype=object)"
                    ]
                },
                "mc_idx": 59,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 30,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Title'] = titanic_df['Title'].replace(\n       ['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], \n       'Rare')\n\ntitanic_df['Title'] = titanic_df['Title'].replace('Mlle', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Ms', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Mme', 'Mrs')\ntitanic_df['Title'].unique()",
            "mc_idx": 60,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".replace(": 4,
                    ".replace": 4
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    31,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array(['Mr', 'Mrs', 'Miss', 'Master', 'Rare'], dtype=object)"
                    ]
                },
                "mc_idx": 60,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 31,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Title',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine()",
            "mc_idx": 61,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c032_o000_image_9.png",
                    32,
                    0,
                    9
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 61,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 32,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\nThe mortality rate is higher in the case of Mr. I think it will help with learning.",
            "mc_idx": 62,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 20,15\ntitles = titanic_df['Title'].unique()\nplt.subplots_adjust(hspace=1.5)\nidx = 1\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\n\nfor title in titles:\n    plt.subplot(3,2,idx)\n    ax = sns.histplot(x='Age',data=titanic_df[titanic_df['Title']== title],hue ='Survived',palette=\"Blues_d\",kde=True)\n    ax.set_title(title)\n    sns.despine()\n    idx = idx + 1",
            "mc_idx": 63,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.8333333333333334,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c033_o000_image_10.png",
                    33,
                    0,
                    10
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x1080 with 5 Axes>"
                    ]
                },
                "mc_idx": 63,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 33,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n* In the case of Mr, the number of survivors is small.\n* In the case of Mrs and Miss, there are many survivors.\n\nI think it will be helpful in judging survivors using this.\nHowever, it seems difficult to find the relationship between age and title from the above distributions. Therefore, it seems difficult to use this to fill in the missing values of age.",
            "mc_idx": 64,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Has_Age ( Derived variable )\n\n**Question: Does the survival rate make a difference with and without age records?|**",
            "mc_idx": 65,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['Age'].isnull().sum()",
            "mc_idx": 66,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    34,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "263"
                    ]
                },
                "mc_idx": 66,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 34,
                "o_idx": 0
            }
        },
        {
            "source": "Let's check the distribution first to fill in the appropriate values.",
            "mc_idx": 67,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### An Extension To Imputation\n\n> Imputation is the standard approach, and it usually works well. However, imputed values may be systematically above or below their actual values (which weren't collected in the dataset). Or rows with missing values may be unique in some other way. In that case, your model would make better predictions by considering which values were originally missing.\n\n![](https://i.imgur.com/UWOyg4a.png)\n\n> In this approach, we impute the missing values, as before. And, additionally, for each column with missing entries in the original dataset, we add a new column that shows the location of the imputed entries.\n> \n> In some cases, this will meaningfully improve results. In other cases, it doesn't help at all.\n\nRef: https://www.kaggle.com/alexisbcook/missing-values",
            "mc_idx": 68,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['Has_Age'] = titanic_df['Age'].isnull().astype(int)",
            "mc_idx": 69,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1
                },
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    35,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 69,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 35,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Has_Age',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nplt.legend(loc = 'upper right')\nax.set_title('Survived Rate')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10,f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine()",
            "mc_idx": 70,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c036_o000_image_11.png",
                    36,
                    0,
                    11
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 70,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 36,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \n* More than the case where Age is not missing.\n* Cases in which age is not missed have a higher survival rate than cases in which age is omitted.",
            "mc_idx": 71,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------------------------------------------\n## Age",
            "mc_idx": 72,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 73,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.09090909090909091,
                "Visualization": 0.45454545454545453,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 2,
                    "sns.": 5,
                    "size": 2,
                    ".mean": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c037_o000_image_12.png",
                    37,
                    0,
                    12
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 73,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 37,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age'].mean()\nstd = titanic_df['Age'].std()\nskew = titanic_df['Age'].skew()\nprint('Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 74,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    38,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age : mean: 29.8811, std: 14.4135, skew: 0.4077\n"
                    ]
                },
                "mc_idx": 74,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 38,
                "o_idx": 0
            }
        },
        {
            "source": "Looking at the skewness, it is skewed to one side.",
            "mc_idx": 75,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Imputting Missing Values",
            "mc_idx": 76,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Univariate feature imputation\n\n> The SimpleImputer class provides basic strategies for imputing missing values. Missing values can be imputed with a provided constant value, or using the statistics (mean, median or most frequent) of each column in which the missing values are located. This class also allows for different missing values encodings.\n\nRef: https://scikit-learn.org/stable/",
            "mc_idx": 77,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Age_mean']] = imp.fit_transform(titanic_df[['Age']])",
            "mc_idx": 78,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    39,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 78,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 39,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_mean\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_mean'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_mean'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 79,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c040_o000_image_13.png",
                    40,
                    0,
                    13
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 79,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 40,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_mean'].mean()\nstd = titanic_df['Age_mean'].std()\nskew = titanic_df['Age_mean'].skew()\nprint('Age_mean : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 80,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    41,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_mean : mean: 29.8811, std: 12.8832, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 80,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 41,
                "o_idx": 0
            }
        },
        {
            "source": "### Multivariate feature imputation\n\n> A more sophisticated approach is to use the IterativeImputer class, which models each feature with missing values as a function of other features, and uses that estimate for imputation. It does so in an iterated round-robin fashion: at each step, a feature column is designated as output y and the other feature columns are treated as inputs X. A regressor is fit on (X, y) for known y. Then, the regressor is used to predict the missing values of y. This is done for each feature in an iterative fashion, and then is repeated for max_iter imputation rounds. The results of the final imputation round are returned.\n\nRef: https://scikit-learn.org/stable/",
            "mc_idx": 81,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nimp = IterativeImputer(max_iter=10, random_state=0)\ntitanic_df[['Age_iter']] = imp.fit_transform(titanic_df[['Age']])",
            "mc_idx": 82,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.15,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 20
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    ".exp": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    42,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 82,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 42,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_iter\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_iter'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_iter'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 83,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c043_o000_image_14.png",
                    43,
                    0,
                    14
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 83,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 43,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_iter'].mean()\nstd = titanic_df['Age_iter'].std()\nskew = titanic_df['Age_iter'].skew()\nprint('Age_iter : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 84,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    44,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_iter : mean: 29.8811, std: 12.8832, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 84,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 44,
                "o_idx": 0
            }
        },
        {
            "source": "### Nearest neighbors imputation\n\n> The KNNImputer class provides imputation for filling in missing values using the k-Nearest Neighbors approach. By default, a euclidean distance metric that supports missing values, nan_euclidean_distances, is used to find the nearest neighbors. Each missing feature is imputed using values from n_neighbors nearest neighbors that have a value for the feature. The feature of the neighbors are averaged uniformly or weighted by distance to each neighbor. If a sample has more than one feature missing, then the neighbors for that sample can be different depending on the particular feature being imputed. When the number of available neighbors is less than n_neighbors and there are no defined distances to the training set, the training set average for that feature is used during imputation. If there is at least one neighbor with a defined distance, the weighted or unweighted average of the remaining neighbors will be used during imputation. If a feature is always missing in training, it is removed during transform. \n\nRef: https://scikit-learn.org/stable/",
            "mc_idx": 85,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=2, weights=\"uniform\")\ntitanic_df[['Age_knn']] = imputer.fit_transform(titanic_df[['Age']])",
            "mc_idx": 86,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    45,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 86,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 45,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 87,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c046_o000_image_15.png",
                    46,
                    0,
                    15
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 87,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 46,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 88,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    47,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_knn : mean: 29.8811, std: 12.8832, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 88,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 47,
                "o_idx": 0
            }
        },
        {
            "source": "### Filling using other features\n\nAnother conceivable strategy is to use other features to fill in the missing values \u200b\u200bof the Age feature. Consider how to fill the Age feature using the Title feature above.",
            "mc_idx": 89,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['new_Age'] = titanic_df['Age']",
            "mc_idx": 90,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    48,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 90,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 48,
                "o_idx": 0
            }
        },
        {
            "source": "for title in titles:   \n    t_mean = titanic_df[titanic_df['Title']== title]\n    print('{} mean ===> {}'.format(title, t_mean['new_Age'].mean()))",
            "mc_idx": 91,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".mean": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    49,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Mr mean ===> 32.25215146299484\nMrs mean ===> 36.91812865497076\nMiss mean ===> 21.8243661971831\nMaster mean ===> 5.482641509433963\nRare mean ===> 45.17857142857143\n"
                    ]
                },
                "mc_idx": 91,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 49,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['new_Age'].fillna(titanic_df.groupby('Title')['new_Age'].transform('mean'), inplace=True)",
            "mc_idx": 92,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    ".fillna(": 1,
                    "transform": 1,
                    ".fillna": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    50,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 92,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 50,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"new_Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['new_Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['new_Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 93,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c051_o000_image_16.png",
                    51,
                    0,
                    16
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 93,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 51,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['new_Age'].mean()\nstd = titanic_df['new_Age'].std()\nskew = titanic_df['new_Age'].skew()\nprint('new_Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 94,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    52,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "new_Age : mean: 29.8938, std: 13.1949, skew: 0.3790\n"
                    ]
                },
                "mc_idx": 94,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 52,
                "o_idx": 0
            }
        },
        {
            "source": "### Scaling \nLooking at the above result, the skewness was 0.4559, not skewed to one side. Let's try linear scaling.\n\nSelect RobustScaler during linear scaling. In this way, the influence of outliers can be minimized.\n\n> This is a technique that minimizes the influence of outliers.  \n> Since the median and IQR (interquartile range) are used, it can be confirmed that the same values are more widely distributed after standardization when compared with the StandardScaler.\n> \n> $\ud835\udc3c\ud835\udc44\ud835\udc45=\ud835\udc443\u2212\ud835\udc441$: That is, it deals with values in the 25th and 75th percentiles.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling)",
            "mc_idx": 95,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.preprocessing import RobustScaler\nrobuster = RobustScaler()\ntitanic_df['Age_knn'] = robuster.fit_transform(titanic_df[['Age_knn']])",
            "mc_idx": 96,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.4,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "robustscaler": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    53,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 96,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 53,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 97,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c054_o000_image_17.png",
                    54,
                    0,
                    17
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 97,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 54,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 98,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    55,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_knn : mean: 0.0000, std: 0.9910, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 98,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 55,
                "o_idx": 0
            }
        },
        {
            "source": "**Let imputation be done with KNN. The remaining Age-related features are removed.**",
            "mc_idx": 99,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df.drop(['Age','Age_mean','Age_iter','new_Age'],axis=1,inplace=True)",
            "mc_idx": 100,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    56,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 100,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 56,
                "o_idx": 0
            }
        },
        {
            "source": "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Fare\n\nFirst, let's check the distribution for that value.",
            "mc_idx": 101,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Fare'].mean(), 90, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 102,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.09090909090909091,
                "Visualization": 0.45454545454545453,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 2,
                    "sns.": 5,
                    "size": 2,
                    ".mean": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c057_o000_image_18.png",
                    57,
                    0,
                    18
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 102,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 57,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Fare'].mean()\nstd = titanic_df['Fare'].std()\nskew = titanic_df['Fare'].skew()\nprint('Fare : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 103,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    58,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Fare : mean: 33.2955, std: 51.7587, skew: 4.3677\n"
                    ]
                },
                "mc_idx": 103,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 58,
                "o_idx": 0
            }
        },
        {
            "source": "**It is skewed to one side. Consider nonlinear scaling. In this case, we will use QuantileTransformer.**\n\n> The quantile function ranks or smooths out the relationship between observations and can be mapped onto other distributions, such as the uniform or normal distribution.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling)",
            "mc_idx": 104,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(n_quantiles=100, random_state=0, output_distribution='normal')\ntitanic_df['Fare'] = transformer.fit_transform(titanic_df[['Fare']])",
            "mc_idx": 105,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.9090909090909091,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 5,
                    "quantiletransformer": 2,
                    "tile": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    59,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 105,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 59,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Fare']] = imp.fit_transform(titanic_df[['Fare']])",
            "mc_idx": 106,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    60,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 106,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 60,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(0, 100, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 107,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.1111111111111111,
                "Visualization": 0.5555555555555556,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    "sns.": 5,
                    "size": 2,
                    ".mean": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c061_o000_image_19.png",
                    61,
                    0,
                    19
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 107,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 61,
                "o_idx": 0
            }
        },
        {
            "source": "Let's try Bining.",
            "mc_idx": 108,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df['Fare_class'] = pd.qcut(titanic_df['Fare'], 5, labels=['F1', 'F2', 'F3','F4','F5' ])",
            "mc_idx": 109,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".qcut(": 1,
                    ".qcut": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    62,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 109,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 62,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare_class\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nsns.despine()",
            "mc_idx": 110,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.8333333333333334,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c063_o000_image_20.png",
                    63,
                    0,
                    20
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 110,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 63,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Fare_class'] = titanic_df['Fare_class'].replace({'F1':1,'F2':2,'F3':3,'F4':4,'F5':5})",
            "mc_idx": 111,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".replace(": 1,
                    ".replace": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    64,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 111,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 64,
                "o_idx": 0
            }
        },
        {
            "source": "---------------------------------------\n## Embarked",
            "mc_idx": 112,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Survived',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine()",
            "mc_idx": 113,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c065_o000_image_21.png",
                    65,
                    0,
                    21
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 113,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 65,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \n* Many passengers on board at S port died.\n* For passengers boarding at port C, the survival rate is higher than the mortality rate.",
            "mc_idx": 114,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Sex',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine()",
            "mc_idx": 115,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c066_o000_image_22.png",
                    66,
                    0,
                    22
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 115,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 66,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \n* Among the passengers who boarded at S port, the proportion of males is higher than that of other ports.",
            "mc_idx": 116,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Let's impute missing value for Embarked feature. The strategy for Embarked's missing values is to choose 'most_frequent'.",
            "mc_idx": 117,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\ntitanic_df[['Embarked']] = imp.fit_transform(titanic_df[['Embarked']])",
            "mc_idx": 118,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    67,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 118,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 67,
                "o_idx": 0
            }
        },
        {
            "source": "------------------------------------------------------------------------------------------\n# Checking Missing Value Again\nFinally, let's check the missing values.",
            "mc_idx": 119,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "import missingno as msno\nmsno.matrix(titanic_df.drop('Survived',axis=1))\nprint('Number of Missing Values in Dataset ',titanic_df.drop('Survived',axis=1).isnull().sum().sum())",
            "mc_idx": 120,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.4,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "missing values": 1,
                    ".isnull": 1,
                    ".sum": 2
                },
                "Data_Transform": {
                    ".drop": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c068_o001_image_23.png",
                    68,
                    1,
                    23
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Number of Missing Values in Dataset  0\n",
                        "<Figure size 1800x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 120,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 68,
                "o_idx": 1
            }
        },
        {
            "source": "**OK! There is no missing values at the train dataset.**",
            "mc_idx": 121,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "--------------------------------------------------------------------------------------------------\n# Detecting Outliers by PCA\n\n![](https://miro.medium.com/max/602/0*PnqMbZEdnuL9yHuo.png)\n\nPicture Credit: https://miro.medium.com\n\nThe more features, the higher the dimension. When projecting to a lower dimension through PCA, new insights can be gained. PCA can effectively detect outliers.\n\nPC 1 has the largest variance in the dataset distribution. That is, the outlier in PC 1 is very likely to be real outlier",
            "mc_idx": 122,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.decomposition import PCA",
            "mc_idx": 123,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.1,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "pca": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    69,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 123,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 69,
                "o_idx": 0
            }
        },
        {
            "source": "features = [\"Sex\",\"Age_knn\",\"FamilySize\",\"IsAlone\",'Embarked','Cabin_label']\ntitanic_copy = titanic_df[tr_idx].copy()\ny_copy = titanic_copy.pop(\"Survived\")\nX_copy = titanic_copy.loc[:, features]\nencode_features(X_copy,['Sex', 'Embarked','Cabin_label'])\npca, X_pca, loadings = apply_pca(X_copy)\nprint(loadings)",
            "mc_idx": 124,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "pca": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    70,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "                  PC1       PC2       PC3       PC4       PC5       PC6\nSex         -0.370042 -0.251657  0.232628  0.856831  0.065821 -0.084437\nAge_knn     -0.295021  0.461753  0.536676 -0.085858 -0.635234  0.028839\nFamilySize   0.610268 -0.123510  0.242138  0.241910 -0.170336  0.682754\nIsAlone     -0.630538 -0.084821 -0.179272 -0.188854  0.137625  0.713080\nEmbarked    -0.046155 -0.495295  0.706762 -0.389214  0.307284 -0.084430\nCabin_label -0.062417 -0.675045 -0.259963 -0.113113 -0.670647 -0.101367\n"
                    ]
                },
                "mc_idx": 124,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 70,
                "o_idx": 0
            }
        },
        {
            "source": "import plotly.express as px\nfig = px.histogram(X_pca.melt(), color=\"variable\", \n                   marginal=\"box\",\n                   barmode =\"overlay\",\n                   histnorm ='density'\n                  )  \nfig.update_layout(\n    title_font_color=\"black\",\n    legend_title_font_color=\"green\",\n    title={\n        'text': \"PCA Histogram\",\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n)",
            "mc_idx": 125,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.18181818181818182,
                "Data_Transform": 0.36363636363636365,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.09090909090909091,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10,
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".histogram(": 1,
                    "plotly": 1
                },
                "Data_Transform": {
                    "pca": 2,
                    ".melt": 1,
                    ".exp": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "plotly.express": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    71,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.4.2.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ",
                        "<div>                            <div id=\"61e14da3-481f-4d8c-ad26-17abc7020ec9\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"61e14da3-481f-4d8c-ad26-17abc7020ec9\")) {                    Plotly.newPlot(                        \"61e14da3-481f-4d8c-ad26-17abc7020ec9\",                        [{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC1<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC1\",\"marker\":{\"color\":\"#636efa\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC1\",\"offsetgroup\":\"PC1\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.6560102792423543,1.3350817398061434,-0.3266470782576374,1.2865265559714039,-1.305019943130913,-1.1305598986421488,-1.6453363045780998,2.2445200244687045,1.6949582700669747,1.7283184688333657,2.2470948825349453,-0.9014043708167646,-0.9646688865085671,2.161459642397951,-0.05436623295974625,-0.9846591210608256,2.6810688341804916,-1.1888725962217528,1.2259618761688322,-0.29808497016266233,-1.3050199431309133,-1.1612699034345992,-0.018743605821631898,-0.9343345038445428,2.8825418327196477,2.9583119437393233,-1.0722472010625448,2.3883499006640925,-0.35639766774226633,-1.1888725962217528,-1.3018449001791539,1.5495642903534779,-0.35639766774226633,-2.0084121268170954,0.6364952517526268,0.20220887041256258,-1.0722472010625448,-0.9873589569500568,1.8991689040403827,1.7283184688333657,1.0217512421954245,1.316722157934791,-1.0722472010625448,2.7343814679541203,-0.10950388758759061,-1.1888725962217528,0.535499407991755,-0.35639766774226633,0.9720482177035431,1.520932791908199,2.509305784393439,-0.9873589569500568,1.0552259726360487,1.2713420170518115,-0.02144740070025737,-1.0375476346532229,-0.21319672605017442,-1.0409090901020221,2.572375931911933,3.175017726891849,-0.8934236322323387,-0.4173379696732638,0.28546362065662345,2.5773759957179077,-1.0722472010625448,0.9720482177035431,-0.33418730495468035,-0.9419788160670776,3.434803423010608,0.9434861096085824,-1.236949731806444,3.835729605584282,-0.9873589569500568,0.6818753926356066,-1.236949731806444,-1.0175892540886038,-1.1888725962217528,-1.1888725962217528,1.514595182620879,-0.41740736002358225,-1.0100490273915468,-1.1688795204819749,-0.35639766774226633,-1.146189450040485,-0.12243644428421527,1.9370539595502203,1.9268590382878479,-1.1888725962217528,3.071751849798016,-1.0554291682745263,-1.1688795204819749,-0.9646688865085671,0.20224356558772144,1.3217222217407663,-1.8495816337266673,-1.1888725962217528,-1.7933821376693937,0.8710055732148998,1.1578916648443631,0.3837294339444806,-0.37202721914060266,-1.1888725962217528,0.7997603189386715,-1.2596398022479336,0.6938953347521952,-1.146189450040485,-0.21319672605017442,-1.1888725962217528,-1.3730901544553826,1.3096616388916376,-1.4259758268602598,1.7169734336126212,-1.0100490273915468,1.4755526510252193,-0.0058110491250072,-0.9873589569500568,-2.0522047462241955,0.4971797861519292,0.9088454874008223,3.775154479632954,1.056936461816031,-1.1888725962217528,0.5343899347659231,-0.38333755918618834,0.05098799436950994,0.9995363788164628,-1.1305598986421488,-1.0554291682745263,1.8067404332308379,-1.5319206475458105,-1.1430144070887258,-0.9646688865085671,0.8629207491049962,1.2713420170518115,-1.078119238716016,-0.9161137026738283,1.997538802853717,0.46698418418854154,-0.873908604742608,-0.7572138192330818,1.7462104486034256,-0.2358867964916642,1.3847923692592605,-0.8836661184874737,-0.9192887456255877,1.1023166026990103,-1.1234993795989954,2.859851762278158,0.765770354600352,-1.4638504362213416,-1.6680610701947491,1.5814974717107702,-1.7701663871814528,0.614480088206981,-1.1888725962217528,0.114623631598363,-0.04143367626312162,-1.1915695909234645,-1.1888725962217528,3.881311719601808,0.1568287295295832,-0.6443080644384795,-1.1008093091575055,-0.896598675184098,2.645446207042377,1.3292173071139082,1.3421439182531516,2.4212453385167114,-1.1888725962217528,-1.146189450040485,-1.7133718207274102,2.635688693297512,2.284900101545708,-0.9873589569500568,-1.4530310810470477,1.1250066731405002,1.611895046808703,-0.6032584121256388,-1.1915695909234645,-1.327710013572403,4.6554739505016896,-1.0722472010625448,2.842161755642643,1.949503967405422,2.216829890221239,-0.9770176500258106,1.3096616388916376,-1.5319206475458105,0.6841378210073301,-1.327710013572403,-0.4627875009065617,-0.9419788160670776,1.4982427214667093,1.5258877143902583,-0.4368529971629943,-0.7545139833438506,-1.1305598986421488,0.20220887041256258,-0.35639766774226633,-0.2812669373746436,-1.146189450040485,3.881311719601808,-1.2823298726894234,-1.4266402876073474,-0.9192887456255877,1.9142389112857405,0.42910957482746015,-0.9841839139982976,-0.04143367626312162,-1.0899899539832116,-1.0554291682745263,-0.5308577122310307,-1.0100490273915468,-1.1915695909234645,0.535499407991755,1.4636472405828644,-0.349337148699113,0.20220887041256258,-0.22510213649252941,-1.1915695909234645,-0.873908604742608,-1.1234993795989954,-1.6680610701947491,-1.1888725962217528,0.44429411374705163,-1.0100490273915468,-0.9419788160670776,-0.976013921729312,-0.9192887456255877,2.3860572777085856,1.2865265559714034,-1.1688795204819749,-1.8495816337266673,3.707084268308485,-1.0554291682745263,-0.41471036532187033,0.1568287295295832,2.12606960845528,-0.9419788160670776,-1.2596398022479336,1.3679743364712416,1.3096616388916376,-1.1688795204819749,-1.0100490273915468,-1.0749441957642565,0.7447025008099014,-0.3039570078161332,1.763028481391444,0.8149553040070194,-0.07007197488531423,-1.1888725962217528,1.6798431214977014,-1.7663268834826062,0.47448971571043935,1.3772972838861186,1.7662035243432035,-0.29808497016266233,-0.23581740614134603,-0.4142323170718227,0.7948505377805271,-1.1305598986421488,2.978302178291582,0.4443392550709674,-1.2368803414561256,-0.35639766774226633,-1.327710013572403,2.305095150420032,0.5879400679178882,0.7646549358171393,-0.37953275066250053,-1.1888725962217528,-1.078119238716016,0.9990611717539347,0.5836095793477496,-0.35639766774226633,0.6209395912959847,-0.7577584166459284,-1.1888725962217528,2.567618481973043,1.5134377065350573,-1.927409358796002,-1.146189450040485,-0.873908604742608,-0.9419788160670776,-0.9770176500258106,-1.1430144070887258,-1.1915695909234645,-1.0100490273915468,-1.4638504362213416,-0.1775740989120602,-0.3266470782576233,1.7964580705081532,-1.0900246491583707,-0.2812669373746436,-1.0554291682745263,-1.0722472010625448,-0.9274587378945732,2.7917711048049325,-1.0375476346532229,1.0930658868219714,-0.35639766774226633,0.9137355201239391,-0.9419788160670776,-0.2656026908011481,-1.1888725962217528,2.042114149981859,-0.29808497016266233,1.811573219077427,0.5911151108696474,-0.2099869879232561,-0.01331658064690538,2.953856477346195,1.7176483405084646,-1.146189450040485,0.5577549121032567,-0.3266470782576233,1.3847923692592605,-1.7361312815192178,1.7555229498695464,1.6074077264279345,-1.0100490273915468,-1.1234993795989954,-0.35909466244397825,1.8084086222744238,3.881311719601808,-0.28559742594478243,-1.8949617746096463,-0.4324878134176965,1.6041979883010162,1.8645282818326225,1.6878977510238216,-1.3919407211980255,0.44429411374705163,1.1703868140234797,1.2513489413120338,-1.1888725962217528,0.6485047477204594,-0.45957776277964324,-1.5319206475458105,-1.5621856398595166,1.5485777848317483,3.0490617793565264,-1.146189450040485,-1.078119238716016,-1.327710013572403,-0.22073695274723149,-0.6443080644384795,1.2513489413120338,1.4653577297628462,-1.4638504362213416,-1.0327390978330364,-1.0375476346532229,1.3097022796241775,0.5879400679178882,-1.0722472010625448,-1.146189450040485,1.520967487083358,-0.5989279235555,-0.35639766774226633,-0.35639766774226633,1.7605334598242777,0.6138051813111373,1.0249262851471836,-1.3050199431309133,0.535499407991755,-1.1915695909234645,0.8056351977796616,-0.29808497016266233,-0.35639766774226633,0.016948411666800705,0.7953604400182144,0.7467705610083163,-0.9419788160670776,-0.8934236322323387,2.9959921849270965,1.3679743364712416,-0.2358867964916642,1.1887463958948306,-0.848043491349359,-0.9419788160670776,-0.5730628101622509,2.401525496704916,-1.236949731806444,1.1352015944028733,-1.1888725962217528,-0.9192887456255877,3.401918431306745,-0.5535477826725206,-1.1305598986421488,-0.0058110491250072,1.276411471208105,-0.9873589569500568,0.898105968725603,1.6451678041147824,1.7932934737051502,-1.0100490273915468,-0.4400974304650717,-1.5546107179873008,-1.0327390978330364,-0.37202721914060266,-1.3957802248968723,-1.1008093091575055,1.4528625805837296,0.5198698565934189,-0.19050665560868485,0.3837294339444806,-1.6680610701947491,1.4653577297628462,-0.9873589569500568,2.3860572777085856,-1.1888725962217528,-1.1305598986421488,1.3902193944339867,-1.1888725962217528,-1.5092305771043206,-0.41471036532187033,1.5361277769765467,1.8991689040403827,-1.1915695909234645,2.0806894675723004,-1.0722472010625448,-0.9290462593704529,-1.1688795204819749,1.6722681996254853,1.1250066731405002,-1.1888725962217528,1.2940320874933016,-0.16781658516719464,-1.1305598986421488,-1.1461547548653257,-0.9948644884719549,1.2513489413120338,0.976371101312445,-0.896598675184098,0.11148328382176279,2.549755251820762,2.587570916980282,2.8977368177879965,1.367296730797054,-1.2142596613649543,1.2865370021201594,-0.9646688865085671,0.5879400679178882,-0.37202721914060266,-1.1888725962217528,1.6545226055172988,1.6343831441156478,-1.2823298726894234,2.689001327071141,-1.5394261790677086,1.0948215173258689,0.477186710412151,-0.9236192341957263,0.31132873404987277,-1.1888725962217528,-1.0522541253227666,-1.8949270794344875,1.372408910566858,-0.871208768853377,-1.1305598986421488,-1.5091958819291615,-1.2823298726894234,-1.486505811487672,-1.5999908588702796,-1.1888725962217528,-1.3730901544553826,-1.1888725962217528,-1.781511422402198,-1.1305598986421488,2.7854341264474725,-1.1888725962217528,-1.3730901544553826,1.9370539595502203,-0.020891502519121842,-0.2358867964916642,-0.9770176500258106,0.3837294339444806,0.4971797861519292,-1.0100490273915468,1.8839739189720346,3.2203978677748273,-1.1888725962217528,-1.6453709997532595,-1.1661796845927435,0.8861554169593324,2.3860572777085856,1.2865265559714034,-1.5286762142437338,-1.1915695909234645,1.3292173071139082,0.477186710412151,-0.9873589569500568,-1.6074963903921782,-2.0052370838653357,-0.9873589569500568,-1.0722472010625448,0.9417756204286003,-1.1888725962217528,2.2698994846506686,-1.0554291682745263,-0.896598675184098,-0.1548840284705704,-0.35639766774226633,-0.5762378531140104,0.08184358003951063,1.0147209177360546,1.5588178474180365,-1.1888725962217528,-1.146189450040485,-1.1008093091575055,-1.1105668229023706,-1.1888725962217528,-1.2369150366312849,0.8207156511737762,-1.0554291682745263,-1.456240819173966,-0.447637657162129,-1.1305598986421488,1.1125115239613834,-1.236949731806444,-0.23581740614134603,-1.0100490273915468,-1.0722472010625448,1.2292063094709098,-1.0722472010625448,-1.3715026329795033,-0.871208768853377,-1.0375476346532229,-1.3957802248968723,1.3897924330652351,2.2622100311042184,-1.0722472010625448,1.264322138741198,1.7462104486034256,-0.41740736002358225,2.1487596788967696,-1.3503306936635744,-0.3007819648643742,-1.1888725962217528,2.106623971315868,1.6723375899758033,3.6163239865425267,3.570943845659547,0.42910957482746015,0.2886386636083829,-1.963031985934116,1.4982427214667093,-1.0722472010625448,0.7846556165181543,1.351907377555398,1.4156471003097284,-1.1234993795989954,-1.1305598986421488,-0.8934236322323387,-0.2358867964916642,-1.9176518450511364,1.1687110200186568,-1.0722472010625448,1.5134724017102161,1.1125115239613834,-1.1305598986421488,-1.4184702953383617,-1.146189450040485,-1.1888725962217528,-0.41471036532187033,0.9888662504915617,-0.9419788160670776,2.4060503534483635,-1.0722472010625448,-1.236949731806444,-1.9176518450511364,1.2563414001567719,-1.2369150366312849,-0.35639766774226633,-0.873908604742608,-0.9419788160670776,-0.508167641789541,1.1352362895780321,1.3679743364712416,-1.236949731806444,1.7403384109499547,1.690627781496836,-1.7361312815192178,-0.9992296722172527,-1.0722472010625448,1.9899638809815008,-1.57730078842879,0.47023906363937484,-1.0100490273915468,-1.1888725962217528,-1.3050199431309133,0.9871557613115796,-1.57730078842879,1.6878977510238216,0.3156592226200113,0.716585405193685,-0.41471036532187033,-1.6226809293117694,-1.0722472010625448,0.3718587186772848,2.141264593523628,-1.1888725962217528,-1.1888725962217528,-1.5092305771043206,-1.1883945479717053,0.33834929306150113,-1.1915695909234645,-1.1234993795989954,2.3032701295658162,-0.49298310286994934,2.9356218732978334,-1.1888725962217528,1.3096616388916376,-1.1305598986421488,-1.3050199431309133,2.141264593523628,0.7619655460766647,1.3394122283762806,2.6555959869808348,-1.1008093091575055,0.6591853221941167,0.3232688396673868,1.1962519274167287,-0.9873589569500568,-0.9873589569500568,-1.7739018053548223,-1.7458887952640838,-0.09213675679535029,-1.1008093091575055,-1.1305598986421488,-2.1142181668020097,-1.6680610701947491,-0.9387343827649998,-1.1888725962217528,3.238087874410342,-0.37202721914060266,-1.236949731806444,0.8300357574011336,2.5120056202826704,0.477186710412151,-0.9646688865085671,0.016948411666800705,3.39691836750077,-1.1888725962217528,2.7854341264474725,0.3037538121776564,-0.9419788160670776,-1.4530310810470477,-1.1888725962217528,-0.258576866933154,-1.1888725962217528,1.520932791908199,-0.9873589569500568,-0.35639766774226633,-0.08681381714610127,0.9888662504915617,-1.1888725962217528,1.6398206154391302,-1.0327390978330364,0.4550892198949427,0.39892441901282844,-1.3018449001791539,-1.486505811487672,-1.327710013572403,0.7013904201253366,0.8073456869596441,-1.078119238716016,-1.1888725962217528,-1.486540506662831,1.402673902880564,1.3999873543276085,0.6333895991511861,-2.0991724085830548,-1.2142596613649543,-1.1888725962217528,-0.9192887456255877,-1.0667742034952712,-0.1451265147257053,3.2230977036640582,0.6365646421029454,-0.35639766774226633,-0.8858140151849632,-0.9646688865085671,3.10694751556738,0.1720237145979306,1.4610376873414639,2.3504752913030105,-0.9419788160670776,-0.9192887456255877,1.7705929571149044,0.6333895991511861,1.9552191732482636,-1.1888725962217528,-0.9614938435568079,-1.8722717041681571,-1.6907511406362388,-1.5092305771043206,-0.35639766774226633,0.6895648461820567,-1.4033204515939295,1.7888831486359371,-1.214224966189795,1.637558187067407,-1.019806541136412,0.5652499974763986,-1.3957802248968723,-0.7577584166459284,-1.3730554592802235,-0.2358867964916642,0.9720482177035431,-0.01331658064690538,-1.0375476346532229,0.21739340933215442,-1.1688795204819749,-1.6907511406362388,-0.8814488314396653,-0.3309775668277618,-0.2585421717579948,-1.1305598986421488,-1.2596398022479336,1.7932136372060756,0.7694606314498061,-1.2823298726894234,-1.6453709997532595,0.6333549039760268,-0.9646688865085671,2.0051241708746894,-0.35639766774226633,0.5879400679178882,1.3621022988177705,-0.21312733569985626,-0.6438328573759513,-1.1888725962217528,-1.0327390978330364,-1.0327390978330364,-1.15753448526123,1.974939015060058,-1.006804594089469,-1.1888725962217528,-1.1888725962217528,-1.0678126269669288,0.4896742546300314,2.885786266021726,0.610630138359378,-1.2142596613649543,0.12671296406526938,1.1703868140234797,-0.41740736002358225,0.8451404598216509,-1.1559469637853503,2.216829890221239,1.1098463832473116,-1.2596398022479336,-1.0327390978330364,1.5967029029278743,1.5182255938915175,-1.146189450040485,-0.9192887456255877,-1.2823298726894234,-0.3038876174658152,-1.1888725962217528,-1.441160365779852,-0.848043491349359,2.0505737021079873,-0.873908604742608,0.8932204365938615,-1.0722472010625448,-0.37043969766472296,0.535499407991755,-1.236949731806444,-1.0554291682745263,-1.5999908588702796,-0.9392442850026871,-1.0722472010625448,1.8387985924111199,-0.9192887456255877,-1.070029914014737,0.14984440101366142,-1.1305598986421488,1.1352709847531914,0.08494923264095156,1.725212816231925,-1.0478195512271506,1.2336589346765188,-1.078119238716016,-1.078119238716016,-0.1451265147257053,2.5449284115315534,1.8889739827780097,-1.2563953689458562,-1.1305598986421488,-0.873908604742608,4.6554739505016896,-1.0722472010625448,-1.078119238716016,-1.3957802248968723,-0.727458729157063,-0.4400974304650717,-1.0749441957642565,1.626888058742506,-1.2823298726894234,1.6041979883010162,1.8436632322453488,1.2622873945289137,-1.1234993795989954,-1.2142596613649543,-1.18392527870093,-0.1451265147257053,-1.3957802248968723,1.2713767122269708,-1.1008093091575055,-1.3957802248968723,-1.3050199431309133,3.684394197866996,-1.2029146261442094,-1.0072826423395167,-0.258576866933154,0.9466611525603417,-1.486540506662831,2.44123557306897,1.3092964629119677,-1.1234993795989954,-1.3730901544553826,1.4075171348759092,2.6227561366008882,-1.1305598986421488,-1.1888725962217528,1.6273632658050337,-1.1305598986421488,-0.9618996602690179,1.705628398391876,1.514595182620879,-1.0722472010625448,-1.0327390978330364,-0.9192887456255877,1.630097796869424,-0.9873589569500568,-1.1888725962217528,-1.236949731806444,-0.9209222394940145,-0.9646688865085671,-0.873908604742608,-0.3007819648643742,-1.1770495127509604,-0.896598675184098,-1.4638504362213416,3.881311719601808,-1.1883945479717053,0.5198698565934189,1.5192992980397717,2.955612107850092,-2.1899326903490137,2.2200049331729983,1.6873729020460024,0.9309909604294656,1.520932791908199,1.2865370021201594,-1.577266093253631,2.257889988682836,-1.0722472010625448,0.6031350529862363,0.6787003496838473,-0.7047686587155734,4.6554739505016896,-1.0554291682745263,-0.689688205321459,1.4333475530939994,-1.002404715169012,-1.1888725962217528,1.4426676593213563,-1.1008093091575055,1.3622168304920044,-1.0780498483656975,-1.57730078842879,1.4106574826525096,0.039569091757972116,-0.9646688865085671,-0.9419788160670776,-1.1888725962217528,0.9266604718593265,1.3621022988177705,-1.2596398022479336,-0.2358867964916642,-1.146189450040485,-1.078119238716016,2.615698458745254,-1.1234993795989954,0.013773368715041603,2.0078211655764013,-0.8328589524297674,-1.1786370342268402],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC1<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC1\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"PC1\",\"notched\":true,\"offsetgroup\":\"PC1\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.6560102792423543,1.3350817398061434,-0.3266470782576374,1.2865265559714039,-1.305019943130913,-1.1305598986421488,-1.6453363045780998,2.2445200244687045,1.6949582700669747,1.7283184688333657,2.2470948825349453,-0.9014043708167646,-0.9646688865085671,2.161459642397951,-0.05436623295974625,-0.9846591210608256,2.6810688341804916,-1.1888725962217528,1.2259618761688322,-0.29808497016266233,-1.3050199431309133,-1.1612699034345992,-0.018743605821631898,-0.9343345038445428,2.8825418327196477,2.9583119437393233,-1.0722472010625448,2.3883499006640925,-0.35639766774226633,-1.1888725962217528,-1.3018449001791539,1.5495642903534779,-0.35639766774226633,-2.0084121268170954,0.6364952517526268,0.20220887041256258,-1.0722472010625448,-0.9873589569500568,1.8991689040403827,1.7283184688333657,1.0217512421954245,1.316722157934791,-1.0722472010625448,2.7343814679541203,-0.10950388758759061,-1.1888725962217528,0.535499407991755,-0.35639766774226633,0.9720482177035431,1.520932791908199,2.509305784393439,-0.9873589569500568,1.0552259726360487,1.2713420170518115,-0.02144740070025737,-1.0375476346532229,-0.21319672605017442,-1.0409090901020221,2.572375931911933,3.175017726891849,-0.8934236322323387,-0.4173379696732638,0.28546362065662345,2.5773759957179077,-1.0722472010625448,0.9720482177035431,-0.33418730495468035,-0.9419788160670776,3.434803423010608,0.9434861096085824,-1.236949731806444,3.835729605584282,-0.9873589569500568,0.6818753926356066,-1.236949731806444,-1.0175892540886038,-1.1888725962217528,-1.1888725962217528,1.514595182620879,-0.41740736002358225,-1.0100490273915468,-1.1688795204819749,-0.35639766774226633,-1.146189450040485,-0.12243644428421527,1.9370539595502203,1.9268590382878479,-1.1888725962217528,3.071751849798016,-1.0554291682745263,-1.1688795204819749,-0.9646688865085671,0.20224356558772144,1.3217222217407663,-1.8495816337266673,-1.1888725962217528,-1.7933821376693937,0.8710055732148998,1.1578916648443631,0.3837294339444806,-0.37202721914060266,-1.1888725962217528,0.7997603189386715,-1.2596398022479336,0.6938953347521952,-1.146189450040485,-0.21319672605017442,-1.1888725962217528,-1.3730901544553826,1.3096616388916376,-1.4259758268602598,1.7169734336126212,-1.0100490273915468,1.4755526510252193,-0.0058110491250072,-0.9873589569500568,-2.0522047462241955,0.4971797861519292,0.9088454874008223,3.775154479632954,1.056936461816031,-1.1888725962217528,0.5343899347659231,-0.38333755918618834,0.05098799436950994,0.9995363788164628,-1.1305598986421488,-1.0554291682745263,1.8067404332308379,-1.5319206475458105,-1.1430144070887258,-0.9646688865085671,0.8629207491049962,1.2713420170518115,-1.078119238716016,-0.9161137026738283,1.997538802853717,0.46698418418854154,-0.873908604742608,-0.7572138192330818,1.7462104486034256,-0.2358867964916642,1.3847923692592605,-0.8836661184874737,-0.9192887456255877,1.1023166026990103,-1.1234993795989954,2.859851762278158,0.765770354600352,-1.4638504362213416,-1.6680610701947491,1.5814974717107702,-1.7701663871814528,0.614480088206981,-1.1888725962217528,0.114623631598363,-0.04143367626312162,-1.1915695909234645,-1.1888725962217528,3.881311719601808,0.1568287295295832,-0.6443080644384795,-1.1008093091575055,-0.896598675184098,2.645446207042377,1.3292173071139082,1.3421439182531516,2.4212453385167114,-1.1888725962217528,-1.146189450040485,-1.7133718207274102,2.635688693297512,2.284900101545708,-0.9873589569500568,-1.4530310810470477,1.1250066731405002,1.611895046808703,-0.6032584121256388,-1.1915695909234645,-1.327710013572403,4.6554739505016896,-1.0722472010625448,2.842161755642643,1.949503967405422,2.216829890221239,-0.9770176500258106,1.3096616388916376,-1.5319206475458105,0.6841378210073301,-1.327710013572403,-0.4627875009065617,-0.9419788160670776,1.4982427214667093,1.5258877143902583,-0.4368529971629943,-0.7545139833438506,-1.1305598986421488,0.20220887041256258,-0.35639766774226633,-0.2812669373746436,-1.146189450040485,3.881311719601808,-1.2823298726894234,-1.4266402876073474,-0.9192887456255877,1.9142389112857405,0.42910957482746015,-0.9841839139982976,-0.04143367626312162,-1.0899899539832116,-1.0554291682745263,-0.5308577122310307,-1.0100490273915468,-1.1915695909234645,0.535499407991755,1.4636472405828644,-0.349337148699113,0.20220887041256258,-0.22510213649252941,-1.1915695909234645,-0.873908604742608,-1.1234993795989954,-1.6680610701947491,-1.1888725962217528,0.44429411374705163,-1.0100490273915468,-0.9419788160670776,-0.976013921729312,-0.9192887456255877,2.3860572777085856,1.2865265559714034,-1.1688795204819749,-1.8495816337266673,3.707084268308485,-1.0554291682745263,-0.41471036532187033,0.1568287295295832,2.12606960845528,-0.9419788160670776,-1.2596398022479336,1.3679743364712416,1.3096616388916376,-1.1688795204819749,-1.0100490273915468,-1.0749441957642565,0.7447025008099014,-0.3039570078161332,1.763028481391444,0.8149553040070194,-0.07007197488531423,-1.1888725962217528,1.6798431214977014,-1.7663268834826062,0.47448971571043935,1.3772972838861186,1.7662035243432035,-0.29808497016266233,-0.23581740614134603,-0.4142323170718227,0.7948505377805271,-1.1305598986421488,2.978302178291582,0.4443392550709674,-1.2368803414561256,-0.35639766774226633,-1.327710013572403,2.305095150420032,0.5879400679178882,0.7646549358171393,-0.37953275066250053,-1.1888725962217528,-1.078119238716016,0.9990611717539347,0.5836095793477496,-0.35639766774226633,0.6209395912959847,-0.7577584166459284,-1.1888725962217528,2.567618481973043,1.5134377065350573,-1.927409358796002,-1.146189450040485,-0.873908604742608,-0.9419788160670776,-0.9770176500258106,-1.1430144070887258,-1.1915695909234645,-1.0100490273915468,-1.4638504362213416,-0.1775740989120602,-0.3266470782576233,1.7964580705081532,-1.0900246491583707,-0.2812669373746436,-1.0554291682745263,-1.0722472010625448,-0.9274587378945732,2.7917711048049325,-1.0375476346532229,1.0930658868219714,-0.35639766774226633,0.9137355201239391,-0.9419788160670776,-0.2656026908011481,-1.1888725962217528,2.042114149981859,-0.29808497016266233,1.811573219077427,0.5911151108696474,-0.2099869879232561,-0.01331658064690538,2.953856477346195,1.7176483405084646,-1.146189450040485,0.5577549121032567,-0.3266470782576233,1.3847923692592605,-1.7361312815192178,1.7555229498695464,1.6074077264279345,-1.0100490273915468,-1.1234993795989954,-0.35909466244397825,1.8084086222744238,3.881311719601808,-0.28559742594478243,-1.8949617746096463,-0.4324878134176965,1.6041979883010162,1.8645282818326225,1.6878977510238216,-1.3919407211980255,0.44429411374705163,1.1703868140234797,1.2513489413120338,-1.1888725962217528,0.6485047477204594,-0.45957776277964324,-1.5319206475458105,-1.5621856398595166,1.5485777848317483,3.0490617793565264,-1.146189450040485,-1.078119238716016,-1.327710013572403,-0.22073695274723149,-0.6443080644384795,1.2513489413120338,1.4653577297628462,-1.4638504362213416,-1.0327390978330364,-1.0375476346532229,1.3097022796241775,0.5879400679178882,-1.0722472010625448,-1.146189450040485,1.520967487083358,-0.5989279235555,-0.35639766774226633,-0.35639766774226633,1.7605334598242777,0.6138051813111373,1.0249262851471836,-1.3050199431309133,0.535499407991755,-1.1915695909234645,0.8056351977796616,-0.29808497016266233,-0.35639766774226633,0.016948411666800705,0.7953604400182144,0.7467705610083163,-0.9419788160670776,-0.8934236322323387,2.9959921849270965,1.3679743364712416,-0.2358867964916642,1.1887463958948306,-0.848043491349359,-0.9419788160670776,-0.5730628101622509,2.401525496704916,-1.236949731806444,1.1352015944028733,-1.1888725962217528,-0.9192887456255877,3.401918431306745,-0.5535477826725206,-1.1305598986421488,-0.0058110491250072,1.276411471208105,-0.9873589569500568,0.898105968725603,1.6451678041147824,1.7932934737051502,-1.0100490273915468,-0.4400974304650717,-1.5546107179873008,-1.0327390978330364,-0.37202721914060266,-1.3957802248968723,-1.1008093091575055,1.4528625805837296,0.5198698565934189,-0.19050665560868485,0.3837294339444806,-1.6680610701947491,1.4653577297628462,-0.9873589569500568,2.3860572777085856,-1.1888725962217528,-1.1305598986421488,1.3902193944339867,-1.1888725962217528,-1.5092305771043206,-0.41471036532187033,1.5361277769765467,1.8991689040403827,-1.1915695909234645,2.0806894675723004,-1.0722472010625448,-0.9290462593704529,-1.1688795204819749,1.6722681996254853,1.1250066731405002,-1.1888725962217528,1.2940320874933016,-0.16781658516719464,-1.1305598986421488,-1.1461547548653257,-0.9948644884719549,1.2513489413120338,0.976371101312445,-0.896598675184098,0.11148328382176279,2.549755251820762,2.587570916980282,2.8977368177879965,1.367296730797054,-1.2142596613649543,1.2865370021201594,-0.9646688865085671,0.5879400679178882,-0.37202721914060266,-1.1888725962217528,1.6545226055172988,1.6343831441156478,-1.2823298726894234,2.689001327071141,-1.5394261790677086,1.0948215173258689,0.477186710412151,-0.9236192341957263,0.31132873404987277,-1.1888725962217528,-1.0522541253227666,-1.8949270794344875,1.372408910566858,-0.871208768853377,-1.1305598986421488,-1.5091958819291615,-1.2823298726894234,-1.486505811487672,-1.5999908588702796,-1.1888725962217528,-1.3730901544553826,-1.1888725962217528,-1.781511422402198,-1.1305598986421488,2.7854341264474725,-1.1888725962217528,-1.3730901544553826,1.9370539595502203,-0.020891502519121842,-0.2358867964916642,-0.9770176500258106,0.3837294339444806,0.4971797861519292,-1.0100490273915468,1.8839739189720346,3.2203978677748273,-1.1888725962217528,-1.6453709997532595,-1.1661796845927435,0.8861554169593324,2.3860572777085856,1.2865265559714034,-1.5286762142437338,-1.1915695909234645,1.3292173071139082,0.477186710412151,-0.9873589569500568,-1.6074963903921782,-2.0052370838653357,-0.9873589569500568,-1.0722472010625448,0.9417756204286003,-1.1888725962217528,2.2698994846506686,-1.0554291682745263,-0.896598675184098,-0.1548840284705704,-0.35639766774226633,-0.5762378531140104,0.08184358003951063,1.0147209177360546,1.5588178474180365,-1.1888725962217528,-1.146189450040485,-1.1008093091575055,-1.1105668229023706,-1.1888725962217528,-1.2369150366312849,0.8207156511737762,-1.0554291682745263,-1.456240819173966,-0.447637657162129,-1.1305598986421488,1.1125115239613834,-1.236949731806444,-0.23581740614134603,-1.0100490273915468,-1.0722472010625448,1.2292063094709098,-1.0722472010625448,-1.3715026329795033,-0.871208768853377,-1.0375476346532229,-1.3957802248968723,1.3897924330652351,2.2622100311042184,-1.0722472010625448,1.264322138741198,1.7462104486034256,-0.41740736002358225,2.1487596788967696,-1.3503306936635744,-0.3007819648643742,-1.1888725962217528,2.106623971315868,1.6723375899758033,3.6163239865425267,3.570943845659547,0.42910957482746015,0.2886386636083829,-1.963031985934116,1.4982427214667093,-1.0722472010625448,0.7846556165181543,1.351907377555398,1.4156471003097284,-1.1234993795989954,-1.1305598986421488,-0.8934236322323387,-0.2358867964916642,-1.9176518450511364,1.1687110200186568,-1.0722472010625448,1.5134724017102161,1.1125115239613834,-1.1305598986421488,-1.4184702953383617,-1.146189450040485,-1.1888725962217528,-0.41471036532187033,0.9888662504915617,-0.9419788160670776,2.4060503534483635,-1.0722472010625448,-1.236949731806444,-1.9176518450511364,1.2563414001567719,-1.2369150366312849,-0.35639766774226633,-0.873908604742608,-0.9419788160670776,-0.508167641789541,1.1352362895780321,1.3679743364712416,-1.236949731806444,1.7403384109499547,1.690627781496836,-1.7361312815192178,-0.9992296722172527,-1.0722472010625448,1.9899638809815008,-1.57730078842879,0.47023906363937484,-1.0100490273915468,-1.1888725962217528,-1.3050199431309133,0.9871557613115796,-1.57730078842879,1.6878977510238216,0.3156592226200113,0.716585405193685,-0.41471036532187033,-1.6226809293117694,-1.0722472010625448,0.3718587186772848,2.141264593523628,-1.1888725962217528,-1.1888725962217528,-1.5092305771043206,-1.1883945479717053,0.33834929306150113,-1.1915695909234645,-1.1234993795989954,2.3032701295658162,-0.49298310286994934,2.9356218732978334,-1.1888725962217528,1.3096616388916376,-1.1305598986421488,-1.3050199431309133,2.141264593523628,0.7619655460766647,1.3394122283762806,2.6555959869808348,-1.1008093091575055,0.6591853221941167,0.3232688396673868,1.1962519274167287,-0.9873589569500568,-0.9873589569500568,-1.7739018053548223,-1.7458887952640838,-0.09213675679535029,-1.1008093091575055,-1.1305598986421488,-2.1142181668020097,-1.6680610701947491,-0.9387343827649998,-1.1888725962217528,3.238087874410342,-0.37202721914060266,-1.236949731806444,0.8300357574011336,2.5120056202826704,0.477186710412151,-0.9646688865085671,0.016948411666800705,3.39691836750077,-1.1888725962217528,2.7854341264474725,0.3037538121776564,-0.9419788160670776,-1.4530310810470477,-1.1888725962217528,-0.258576866933154,-1.1888725962217528,1.520932791908199,-0.9873589569500568,-0.35639766774226633,-0.08681381714610127,0.9888662504915617,-1.1888725962217528,1.6398206154391302,-1.0327390978330364,0.4550892198949427,0.39892441901282844,-1.3018449001791539,-1.486505811487672,-1.327710013572403,0.7013904201253366,0.8073456869596441,-1.078119238716016,-1.1888725962217528,-1.486540506662831,1.402673902880564,1.3999873543276085,0.6333895991511861,-2.0991724085830548,-1.2142596613649543,-1.1888725962217528,-0.9192887456255877,-1.0667742034952712,-0.1451265147257053,3.2230977036640582,0.6365646421029454,-0.35639766774226633,-0.8858140151849632,-0.9646688865085671,3.10694751556738,0.1720237145979306,1.4610376873414639,2.3504752913030105,-0.9419788160670776,-0.9192887456255877,1.7705929571149044,0.6333895991511861,1.9552191732482636,-1.1888725962217528,-0.9614938435568079,-1.8722717041681571,-1.6907511406362388,-1.5092305771043206,-0.35639766774226633,0.6895648461820567,-1.4033204515939295,1.7888831486359371,-1.214224966189795,1.637558187067407,-1.019806541136412,0.5652499974763986,-1.3957802248968723,-0.7577584166459284,-1.3730554592802235,-0.2358867964916642,0.9720482177035431,-0.01331658064690538,-1.0375476346532229,0.21739340933215442,-1.1688795204819749,-1.6907511406362388,-0.8814488314396653,-0.3309775668277618,-0.2585421717579948,-1.1305598986421488,-1.2596398022479336,1.7932136372060756,0.7694606314498061,-1.2823298726894234,-1.6453709997532595,0.6333549039760268,-0.9646688865085671,2.0051241708746894,-0.35639766774226633,0.5879400679178882,1.3621022988177705,-0.21312733569985626,-0.6438328573759513,-1.1888725962217528,-1.0327390978330364,-1.0327390978330364,-1.15753448526123,1.974939015060058,-1.006804594089469,-1.1888725962217528,-1.1888725962217528,-1.0678126269669288,0.4896742546300314,2.885786266021726,0.610630138359378,-1.2142596613649543,0.12671296406526938,1.1703868140234797,-0.41740736002358225,0.8451404598216509,-1.1559469637853503,2.216829890221239,1.1098463832473116,-1.2596398022479336,-1.0327390978330364,1.5967029029278743,1.5182255938915175,-1.146189450040485,-0.9192887456255877,-1.2823298726894234,-0.3038876174658152,-1.1888725962217528,-1.441160365779852,-0.848043491349359,2.0505737021079873,-0.873908604742608,0.8932204365938615,-1.0722472010625448,-0.37043969766472296,0.535499407991755,-1.236949731806444,-1.0554291682745263,-1.5999908588702796,-0.9392442850026871,-1.0722472010625448,1.8387985924111199,-0.9192887456255877,-1.070029914014737,0.14984440101366142,-1.1305598986421488,1.1352709847531914,0.08494923264095156,1.725212816231925,-1.0478195512271506,1.2336589346765188,-1.078119238716016,-1.078119238716016,-0.1451265147257053,2.5449284115315534,1.8889739827780097,-1.2563953689458562,-1.1305598986421488,-0.873908604742608,4.6554739505016896,-1.0722472010625448,-1.078119238716016,-1.3957802248968723,-0.727458729157063,-0.4400974304650717,-1.0749441957642565,1.626888058742506,-1.2823298726894234,1.6041979883010162,1.8436632322453488,1.2622873945289137,-1.1234993795989954,-1.2142596613649543,-1.18392527870093,-0.1451265147257053,-1.3957802248968723,1.2713767122269708,-1.1008093091575055,-1.3957802248968723,-1.3050199431309133,3.684394197866996,-1.2029146261442094,-1.0072826423395167,-0.258576866933154,0.9466611525603417,-1.486540506662831,2.44123557306897,1.3092964629119677,-1.1234993795989954,-1.3730901544553826,1.4075171348759092,2.6227561366008882,-1.1305598986421488,-1.1888725962217528,1.6273632658050337,-1.1305598986421488,-0.9618996602690179,1.705628398391876,1.514595182620879,-1.0722472010625448,-1.0327390978330364,-0.9192887456255877,1.630097796869424,-0.9873589569500568,-1.1888725962217528,-1.236949731806444,-0.9209222394940145,-0.9646688865085671,-0.873908604742608,-0.3007819648643742,-1.1770495127509604,-0.896598675184098,-1.4638504362213416,3.881311719601808,-1.1883945479717053,0.5198698565934189,1.5192992980397717,2.955612107850092,-2.1899326903490137,2.2200049331729983,1.6873729020460024,0.9309909604294656,1.520932791908199,1.2865370021201594,-1.577266093253631,2.257889988682836,-1.0722472010625448,0.6031350529862363,0.6787003496838473,-0.7047686587155734,4.6554739505016896,-1.0554291682745263,-0.689688205321459,1.4333475530939994,-1.002404715169012,-1.1888725962217528,1.4426676593213563,-1.1008093091575055,1.3622168304920044,-1.0780498483656975,-1.57730078842879,1.4106574826525096,0.039569091757972116,-0.9646688865085671,-0.9419788160670776,-1.1888725962217528,0.9266604718593265,1.3621022988177705,-1.2596398022479336,-0.2358867964916642,-1.146189450040485,-1.078119238716016,2.615698458745254,-1.1234993795989954,0.013773368715041603,2.0078211655764013,-0.8328589524297674,-1.1786370342268402],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC2<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC2\",\"marker\":{\"color\":\"#EF553B\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC2\",\"offsetgroup\":\"PC2\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[-0.9981493621782125,2.9846809863617936,-0.4262969612164295,1.626609693916913,-0.6331659408097153,-0.1891887674604959,1.0235459716999706,-1.938066731895516,-0.3706420500922713,0.4957640593052689,-0.8601318873911024,2.346727368058836,-1.165867319969863,-0.7771692394141175,-0.8524580645445426,0.60359237182652,-1.3888508449792356,-0.8149542757669227,-0.15203872759275297,0.9630665479353084,-0.6331659408097181,0.6405964102331685,-0.19117913096077296,1.4094726908092825,-1.1984963731420801,-0.286192857602082,0.43657674084593046,0.22570659682945488,0.33730103962888197,-0.8149542757669227,0.7959322021898495,3.0236713196526113,0.33730103962888197,0.46775024278791455,0.4664622060986926,-0.28788085663135865,0.43657674084593046,-1.13035389469252,-0.690262877588358,0.4957640593052689,0.16758209990333353,-0.29409242870212526,0.43657674084593046,-0.04798286152579545,-0.04912542985140115,-0.8149542757669227,-0.0924976602235378,0.33730103962888197,0.4567182266927428,-0.6137132561982122,-1.837049226898947,-1.13035389469252,3.0480097203325034,-0.22306557814743916,3.744372605840727,0.8216404446333643,-0.6038640876031416,0.3875278115004053,-1.228487027583963,-1.8480947685698674,0.156690547197676,1.963777806592033,1.455254139600957,-1.943589502730976,0.43657674084593046,0.4567182266927428,0.3348812027757169,-1.201380745247206,-1.0319747884262849,-0.9326452824589924,-0.7397062166417471,-1.144037835093774,-1.13035389469252,0.39543535554400655,-0.7397062166417471,-0.3336623054230333,-0.8149542757669227,-0.8149542757669227,-1.8265181966897153,-0.2842432601070547,-1.094840469415177,-0.8462464924737761,0.33730103962888197,-0.8817599177511191,-0.7459177887125136,-0.2341111198183592,-1.4408787780127146,-0.8149542757669227,0.8942501050282055,-1.0238136188604912,-0.8462464924737761,-1.165867319969863,0.8361296767181855,-1.0091949038491383,0.21915626584651354,-0.8149542757669227,4.188080994347883,1.598170856032207,-0.0454984517607243,-0.5719882588501025,-0.3552701106617407,-0.8149542757669227,0.275612988864668,-0.7041927913644042,-0.5419976044082198,-0.8817599177511191,-0.6038640876031416,-0.8149542757669227,-0.5266256649776891,0.4339921468658408,1.4295898829186844,0.5135207719439409,-1.094840469415177,-0.5426864056435261,0.5056132279003397,-1.13035389469252,1.2533261648423846,-0.7495553852368175,2.288322169469665,-1.5646761675864298,-1.1102124088457073,-0.8149542757669227,0.6262726198467361,0.7864971353264749,1.447556023016987,-0.10175259833879538,-0.18918876746049618,-1.0238136188604912,1.637845921942236,-0.2780316880362882,0.5473382252484489,-1.165867319969863,0.41617607684473445,-0.22306557814743916,-0.988300193583148,0.192203972475019,0.6545263240092142,1.171146737382213,-1.3079210210792354,2.1916310622327058,0.9832080337821213,-0.5683506623257987,-0.400632704534154,-0.5756152369407794,-1.2368941705245489,-1.1812392594003935,-0.9172733430284622,-1.1629829478647369,0.09488357111322351,-0.38457196386831705,-0.06495113637223028,1.1649351653114464,0.09485927737581329,-0.41770061593751906,-0.8149542757669227,1.2832709874775812,-0.15566570568343005,-0.8107330671964331,-0.8149542757669227,-1.4072097610412782,-0.21685400607667268,0.07089099266637498,-0.9527867683058051,-1.2724075958018919,-2.050129778563005,-1.5363735121738233,0.7901834707995863,0.03895074072946474,-0.8149542757669227,-0.8817599177511191,2.2540967808815444,-1.3178239944245496,-1.293991107303189,-1.13035389469252,3.655379615187739,-1.2167526846777361,-0.947912032700402,3.314150982452945,-0.8107330671964331,-0.5976525155323754,-0.8807199539518996,0.43657674084593046,-1.8425719977344075,-1.242392647622598,-1.1874508314711596,1.4762783327934792,0.4339921468658408,-0.2780316880362882,0.19030817973023592,-0.5976525155323754,-0.2132164095523688,-1.201380745247206,-0.5781998309208691,-1.0948161756777661,3.4283893748689445,3.925577328751747,-0.18918876746049618,-0.28788085663135865,0.33730103962888197,-0.49732381177111273,-0.8817599177511191,-1.4072097610412782,-0.6686793660870611,0.9912560412152362,-1.2368941705245489,-0.8546091165556425,-0.6430151094047886,0.2987442483070476,-0.15566570568343005,3.0871648107502514,-1.0238136188604912,-0.10667613372033996,-1.094840469415177,-0.8107330671964331,-0.0924976602235378,2.4087680653403294,-0.3907835359390839,-0.28788085663135865,2.347590383380714,-0.8107330671964331,-1.3079210210792354,-0.9172733430284622,-0.06495113637223028,-0.8149542757669227,1.206660162659556,-1.094840469415177,-1.201380745247206,-1.1481106073311913,-1.2368941705245489,-0.42142222561102377,1.6266096939169052,-0.8462464924737761,0.21915626584651354,-1.4581358917544007,-1.0238136188604912,-0.28846446867754444,-0.21685400607667268,-1.0453971303617882,-1.201380745247206,-0.7041927913644042,1.0597576551722674,0.4339921468658408,-0.8462464924737761,-1.094840469415177,0.4407979494164198,1.9689566012398945,-0.4618103864937697,-0.4771823259243,0.7672781719120098,0.1382802466967574,-0.8149542757669227,0.027703744542471962,1.9622912620788295,-0.7140419599594746,0.1265459037905308,0.9519158170752678,0.9630665479353084,1.6796704043732895,1.1448548828925131,0.522716352676764,-0.18918876746049618,-2.0556525493984648,0.9726606069920977,1.5083148500573411,0.33730103962888197,-0.5976525155323754,-1.5174283994028603,-0.8916090863461894,2.4434184752957946,1.5299185866799463,-0.8149542757669227,-0.988300193583148,0.20309552518067672,2.422677753995066,0.33730103962888197,2.293666657602452,0.2484581190530901,-0.8149542757669227,-1.2112837185925205,-0.08653464787352728,1.058002325816998,-0.8817599177511191,-1.3079210210792354,-1.201380745247206,1.4762783327934792,0.5473382252484489,-0.8107330671964331,-1.094840469415177,-0.38457196386831705,0.05741484598062782,-0.4262969612164268,2.637244850172328,1.9631542774007076,-0.49732381177111273,-1.0238136188604912,0.43657674084593046,0.20996068511369062,0.30156741698429446,0.8216404446333643,3.7381610337699613,0.33730103962888197,-0.16904728161368365,-1.201380745247206,1.3192578718690542,-0.8149542757669227,-0.2632768894046137,0.9630665479353084,2.2388990555375843,0.5374890566533788,1.9492445887459706,2.3908019252420267,2.372082560724547,-0.40615547536961427,-0.8817599177511191,-0.3289170527441617,-0.4262969612164268,-0.400632704534154,0.04158913945979854,1.4080063714173874,2.324520327366213,-1.094840469415177,-0.9172733430284622,0.34152224819937177,-0.548209176478986,-1.4072097610412782,2.8169630285701426,0.2901831164012,1.2381130678772323,-0.22858834898289918,2.530704574340299,0.3574425254756948,1.3763197450026698,1.206660162659556,-1.2877795352324226,-0.19177336144058568,-0.8149542757669227,0.8870393351634691,2.3398922667967432,-0.2780316880362882,-0.6053506321163454,-1.1303296009551096,0.9297635303055486,-0.8817599177511191,-0.988300193583148,-0.5976525155323754,0.15731407638900188,0.07089099266637498,-0.19177336144058568,-1.7494540638378808,-0.38457196386831705,-1.0593270441378342,0.8216404446333643,-0.071761943896912,-0.8916090863461894,0.43657674084593046,-0.8817599177511191,0.510297277151332,-0.0001358578883109216,0.33730103962888197,0.33730103962888197,-0.6651061927466285,0.5019756313760353,1.5966802429029017,-0.6331659408097181,-0.0924976602235378,-0.8107330671964331,3.4386573983832753,0.9630665479353084,0.33730103962888197,2.7181208693220844,1.3418787625068358,-1.1402030632875906,-1.201380745247206,0.156690547197676,-1.3760634995287946,1.0597576551722674,-0.5683506623257987,1.9909938798314906,0.08566369664299006,-1.201380745247206,1.393448859833914,-0.04246009069033591,-0.7397062166417471,-0.009985026483381183,-0.8149542757669227,-1.2368941705245489,-2.203229021343297,-0.07116270844299681,-0.18918876746049618,0.5056132279003397,1.3098530134046351,-1.13035389469252,-0.8616184319043064,2.124660663121585,-0.1498633818442428,-1.094840469415177,-0.24872983482971184,-0.24251826275894506,-1.0593270441378342,-0.3552701106617407,-0.4911122397003462,-0.9527867683058051,-0.507172980366183,-0.7850688105141606,-0.6393775128804847,-0.5719882588501025,-0.06495113637223028,-1.7494540638378808,-1.13035389469252,-0.42142222561102377,-0.8149542757669227,-0.18918876746049618,2.181348351668646,-0.8149542757669227,-0.3135451133136314,-0.28846446867754444,-0.12204807315087034,-0.690262877588358,-0.8107330671964331,-0.974370279807102,0.43657674084593046,-0.5045883863860934,-0.8462464924737761,-0.3351286248149281,-1.2167526846777361,-0.8149542757669227,-0.25857900342478224,-0.6748909381578277,-0.18918876746049618,0.24225061559842512,0.7548348026491676,-0.19177336144058568,0.2386089504580194,-1.2724075958018919,0.9781833778275577,1.0550474643924677,-0.7368218445366209,-0.7068311900947379,1.8238107343098902,-0.7752196419190901,0.2685996048999027,-1.165867319969863,-0.8916090863461894,-0.3552701106617407,-0.8149542757669227,0.5772919699998635,-0.7912803825849272,-0.6686793660870611,0.023043989028890217,1.6071570093053995,-0.6540606510757084,-0.7182631685299642,2.0773926698167067,2.8488388573231824,-0.8149542757669227,0.40528452413907706,1.4141936497507437,1.1175024148796435,0.4260252454398053,-0.18918876746049618,0.8104654200359128,-0.6686793660870611,0.7749519947585699,-0.17149141220425937,-0.8149542757669227,-0.5266256649776891,-0.8149542757669227,0.11261599001448469,-0.18918876746049618,-0.12788806839981717,-0.8149542757669227,-0.5266256649776891,-0.2341111198183592,2.027969555884627,-0.5683506623257987,1.4762783327934792,-0.5719882588501025,-0.7495553852368175,-1.094840469415177,-1.1819280606356999,-1.9191216191245535,-0.8149542757669227,-0.10046456164957326,0.8876997740452639,2.323835594747008,-0.42142222561102377,1.6266096939169052,3.3990875216623686,-0.8107330671964331,-1.5363735121738233,-0.7182631685299642,-1.13035389469252,1.7136972851374288,1.8968483857874818,-1.13035389469252,0.43657674084593046,3.2255768467192185,-0.8149542757669227,1.1183761983631832,-1.0238136188604912,-1.2724075958018919,0.021901420703284904,0.33730103962888197,-0.03564928316565371,1.1824824504904876,1.7479226737255493,-0.15756149842821326,-0.8149542757669227,-0.8817599177511191,-0.9527867683058051,-0.22048098416734968,-0.8149542757669227,0.38430431670779674,1.9163010703989893,-1.0238136188604912,1.1022709388386271,0.5124483291624318,-0.18918876746049618,0.025528398793961488,-0.7397062166417471,1.6796704043732895,-1.094840469415177,0.43657674084593046,3.525080482105903,0.43657674084593046,0.18792340652209483,0.4260252454398053,0.8216404446333643,-0.4911122397003462,-1.1157351796811676,-1.2584776820258459,0.43657674084593046,-0.0007350933422267604,0.9832080337821213,-0.2842432601070547,-1.080910555639131,1.685881976444056,0.9672877565057985,-0.8149542757669227,2.6672355046142115,1.9128924418841602,-1.316082190645029,-1.2450553400903428,-0.6430151094047886,2.8843522826005255,0.3967233922332286,-0.5781998309208691,0.43657674084593046,-0.6840513055175916,-1.5718869374511666,1.63585962705806,-0.9172733430284622,-0.18918876746049618,0.156690547197676,-0.5683506623257987,0.3256965416785428,3.994453127295332,0.43657674084593046,1.0374758854760167,0.025528398793961488,-0.18918876746049618,-0.45559881442300315,-0.8817599177511191,-0.8149542757669227,-0.28846446867754444,-1.0036721330136786,-1.201380745247206,-0.4527144423178772,0.43657674084593046,-0.7397062166417471,0.3256965416785428,2.189301727518933,0.38430431670779674,0.33730103962888197,-1.3079210210792354,-1.201380745247206,-0.14218955899768296,1.1140255068661626,1.0597576551722674,-0.7397062166417471,-0.4416689006469571,2.943644790248985,0.04158913945979854,2.9451111096408797,0.43657674084593046,0.291693954651814,-0.20700483748160217,3.490255858063867,-1.094840469415177,-0.8149542757669227,-0.6331659408097181,3.154549996164532,-0.20700483748160217,0.3574425254756948,-0.46544798301807366,-0.5775110296855627,-0.28846446867754444,-0.13597798692691668,0.43657674084593046,3.503476745483297,-0.5537319473144461,-0.8149542757669227,-0.8149542757669227,-0.3135451133136314,0.6183650758031347,-0.5009614082954165,-0.8107330671964331,-0.9172733430284622,0.626772218743721,1.7074857130666616,-0.25067943232473894,-0.8149542757669227,0.4339921468658408,-0.18918876746049618,-0.6331659408097181,-0.5537319473144461,-0.6485378802402485,-0.32960585397946823,-0.609362564701191,-0.9527867683058051,0.4309487808213497,1.0213949196888708,0.1058051824898026,-1.13035389469252,-1.13035389469252,1.5994588927214293,0.7738949235982543,0.7054116887170875,-0.9527867683058051,-0.18918876746049618,3.2561708052311182,-0.06495113637223028,2.47573846445145,-0.8149542757669227,-1.2395325692548829,-0.3552701106617407,-0.7397062166417471,-0.7550781560722774,-0.10310296037990736,-0.7182631685299642,-1.165867319969863,2.7181208693220844,-1.4881265461962838,-0.8149542757669227,-0.12788806839981717,2.4860064879657813,-1.201380745247206,3.655379615187739,-0.8149542757669227,-0.5328372370484558,-0.8149542757669227,-0.6137132561982122,-1.13035389469252,0.33730103962888197,-0.0846388551287441,-1.0036721330136786,-0.8149542757669227,0.43269058460087045,-1.0593270441378342,2.7645911193490664,-0.0803230758027607,0.7959322021898495,0.7749519947585699,-0.5976525155323754,-1.0691762127329045,-0.7195647307949344,-0.988300193583148,-0.8149542757669227,-0.34905853859097435,1.4448213589597008,0.09103247851318762,1.2853851297982124,0.6098039438972866,-0.7752196419190901,-0.8149542757669227,-1.2368941705245489,-1.0060569062218196,-0.7104043634351708,-0.18517535260551315,2.714483272797781,0.33730103962888197,1.6435334499046206,-1.165867319969863,-1.7415544927378386,0.2748111769706695,0.20682268748637145,-1.588455249957546,-1.201380745247206,-1.2368941705245489,1.2436601324501038,1.2853851297982124,0.1406298065318392,-0.8149542757669227,0.2632308230297051,0.254669691123857,-0.029437711094887367,-0.3135451133136314,0.33730103962888197,2.7722892359330364,0.27006592429179765,2.2744124808149278,0.3487908914304541,0.6378177604146411,-0.3625346852767215,-0.8560956610688466,-0.4911122397003462,0.2484581190530901,0.5973848683718551,-0.5683506623257987,0.4567182266927428,2.3908019252420267,0.8216404446333643,1.561794415432986,-0.8462464924737761,-0.029437711094887367,-0.546742857087091,2.887989879124829,0.5911732963010882,-0.18918876746049618,-0.7041927913644042,-1.039874359526328,-1.1757164885649334,-0.6686793660870611,-0.10046456164957326,0.1613745964486688,-1.165867319969863,-0.3406513956503882,0.33730103962888197,-0.8916090863461894,-0.36511927925681115,1.644156979095946,-0.23395713085309744,-0.8149542757669227,-1.0593270441378342,-1.0593270441378342,-0.8640032051124474,0.2220406379516395,2.5822787402834786,-0.8149542757669227,-0.8149542757669227,0.49432150055330704,1.1356333121048703,2.478622836556577,-0.9271225116235325,-0.7752196419190901,2.5938590942244435,-1.2877795352324226,-0.2842432601070547,0.20458613830998204,-0.14945413361266355,-1.1874508314711596,-0.5844073343755338,-0.7041927913644042,-1.0593270441378342,0.29859025934178585,-1.8322003447340904,-0.8817599177511191,-1.2368941705245489,-0.6686793660870611,1.7862106802053184,-0.8149542757669227,-0.4200853891456602,0.08566369664299006,1.836342820494014,-1.3079210210792354,1.8675055542743357,0.43657674084593046,0.359278960838043,-0.0924976602235378,-0.7397062166417471,-1.0238136188604912,-0.17149141220425937,1.6565760546213781,0.43657674084593046,0.43512118961569773,-1.2368941705245489,0.4654491206996186,-1.1720788920406295,-0.18918876746049618,2.2380360402157065,0.36355952679096765,1.314686983004789,0.4630292838464531,-0.8713624113102562,-0.988300193583148,-0.988300193583148,-0.7104043634351708,-1.175770293315178,-1.8970305357827129,2.972926418334252,-0.18918876746049618,-1.3079210210792354,-0.8807199539518996,0.43657674084593046,-0.988300193583148,-0.4911122397003462,1.6997875964826914,-0.24872983482971184,0.4407979494164198,-0.2641017742602421,-0.6686793660870611,-0.22858834898289918,0.42201738147106066,-0.5129980630504271,-0.9172733430284622,-0.7752196419190901,1.8001203688600549,-0.7104043634351708,-0.4911122397003462,0.9009449552021049,-0.9527867683058051,-0.4911122397003462,-0.6331659408097181,-1.422622466477058,-0.7929763545577616,1.148959388713422,-0.5328372370484558,0.49645286054057575,-0.34905853859097435,-1.7305089510669183,2.4811072463216477,-0.9172733430284622,-0.5266256649776891,0.6878644035380468,-2.0146163532856622,-0.18918876746049618,-0.8149542757669227,-0.568949897779714,-0.18918876746049618,2.8161000132482648,0.5312774845826123,-1.8265181966897153,0.43657674084593046,-1.0593270441378342,-1.2368941705245489,2.28900690208887,-1.13035389469252,-0.8149542757669227,-0.7397062166417471,2.073171461246217,-1.165867319969863,-1.3079210210792354,0.9672877565057985,0.6006083631644633,-1.2724075958018919,-0.38457196386831705,-1.4072097610412782,0.6183650758031347,-0.7850688105141606,2.696352375572554,-2.020139124121122,0.7518576450066585,0.24164731152840802,0.6245356695673315,0.30963580101270555,-0.6137132561982122,0.2685996048999027,0.9170056958679419,0.6977990692984068,0.43657674084593046,-0.39994390329884755,-1.0336627874555617,1.6642741712053484,-0.8807199539518996,-1.0238136188604912,0.14191784322106124,0.9574385879107278,1.5160129666413116,-0.8149542757669227,-1.713940638560538,-0.9527867683058051,1.6489022317748183,1.25972087311594,-0.20700483748160217,0.992952013188071,0.43458637734565353,-1.165867319969863,-1.201380745247206,-0.8149542757669227,3.6239226413539614,-0.36511927925681115,-0.7041927913644043,-0.5683506623257987,-0.8817599177511191,-0.988300193583148,0.4516356973718334,-0.9172733430284622,1.2890227263225162,-0.3448726042208778,1.9353389687073344,-0.11394070833532072],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC2<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC2\",\"marker\":{\"color\":\"#EF553B\"},\"name\":\"PC2\",\"notched\":true,\"offsetgroup\":\"PC2\",\"showlegend\":false,\"type\":\"box\",\"x\":[-0.9981493621782125,2.9846809863617936,-0.4262969612164295,1.626609693916913,-0.6331659408097153,-0.1891887674604959,1.0235459716999706,-1.938066731895516,-0.3706420500922713,0.4957640593052689,-0.8601318873911024,2.346727368058836,-1.165867319969863,-0.7771692394141175,-0.8524580645445426,0.60359237182652,-1.3888508449792356,-0.8149542757669227,-0.15203872759275297,0.9630665479353084,-0.6331659408097181,0.6405964102331685,-0.19117913096077296,1.4094726908092825,-1.1984963731420801,-0.286192857602082,0.43657674084593046,0.22570659682945488,0.33730103962888197,-0.8149542757669227,0.7959322021898495,3.0236713196526113,0.33730103962888197,0.46775024278791455,0.4664622060986926,-0.28788085663135865,0.43657674084593046,-1.13035389469252,-0.690262877588358,0.4957640593052689,0.16758209990333353,-0.29409242870212526,0.43657674084593046,-0.04798286152579545,-0.04912542985140115,-0.8149542757669227,-0.0924976602235378,0.33730103962888197,0.4567182266927428,-0.6137132561982122,-1.837049226898947,-1.13035389469252,3.0480097203325034,-0.22306557814743916,3.744372605840727,0.8216404446333643,-0.6038640876031416,0.3875278115004053,-1.228487027583963,-1.8480947685698674,0.156690547197676,1.963777806592033,1.455254139600957,-1.943589502730976,0.43657674084593046,0.4567182266927428,0.3348812027757169,-1.201380745247206,-1.0319747884262849,-0.9326452824589924,-0.7397062166417471,-1.144037835093774,-1.13035389469252,0.39543535554400655,-0.7397062166417471,-0.3336623054230333,-0.8149542757669227,-0.8149542757669227,-1.8265181966897153,-0.2842432601070547,-1.094840469415177,-0.8462464924737761,0.33730103962888197,-0.8817599177511191,-0.7459177887125136,-0.2341111198183592,-1.4408787780127146,-0.8149542757669227,0.8942501050282055,-1.0238136188604912,-0.8462464924737761,-1.165867319969863,0.8361296767181855,-1.0091949038491383,0.21915626584651354,-0.8149542757669227,4.188080994347883,1.598170856032207,-0.0454984517607243,-0.5719882588501025,-0.3552701106617407,-0.8149542757669227,0.275612988864668,-0.7041927913644042,-0.5419976044082198,-0.8817599177511191,-0.6038640876031416,-0.8149542757669227,-0.5266256649776891,0.4339921468658408,1.4295898829186844,0.5135207719439409,-1.094840469415177,-0.5426864056435261,0.5056132279003397,-1.13035389469252,1.2533261648423846,-0.7495553852368175,2.288322169469665,-1.5646761675864298,-1.1102124088457073,-0.8149542757669227,0.6262726198467361,0.7864971353264749,1.447556023016987,-0.10175259833879538,-0.18918876746049618,-1.0238136188604912,1.637845921942236,-0.2780316880362882,0.5473382252484489,-1.165867319969863,0.41617607684473445,-0.22306557814743916,-0.988300193583148,0.192203972475019,0.6545263240092142,1.171146737382213,-1.3079210210792354,2.1916310622327058,0.9832080337821213,-0.5683506623257987,-0.400632704534154,-0.5756152369407794,-1.2368941705245489,-1.1812392594003935,-0.9172733430284622,-1.1629829478647369,0.09488357111322351,-0.38457196386831705,-0.06495113637223028,1.1649351653114464,0.09485927737581329,-0.41770061593751906,-0.8149542757669227,1.2832709874775812,-0.15566570568343005,-0.8107330671964331,-0.8149542757669227,-1.4072097610412782,-0.21685400607667268,0.07089099266637498,-0.9527867683058051,-1.2724075958018919,-2.050129778563005,-1.5363735121738233,0.7901834707995863,0.03895074072946474,-0.8149542757669227,-0.8817599177511191,2.2540967808815444,-1.3178239944245496,-1.293991107303189,-1.13035389469252,3.655379615187739,-1.2167526846777361,-0.947912032700402,3.314150982452945,-0.8107330671964331,-0.5976525155323754,-0.8807199539518996,0.43657674084593046,-1.8425719977344075,-1.242392647622598,-1.1874508314711596,1.4762783327934792,0.4339921468658408,-0.2780316880362882,0.19030817973023592,-0.5976525155323754,-0.2132164095523688,-1.201380745247206,-0.5781998309208691,-1.0948161756777661,3.4283893748689445,3.925577328751747,-0.18918876746049618,-0.28788085663135865,0.33730103962888197,-0.49732381177111273,-0.8817599177511191,-1.4072097610412782,-0.6686793660870611,0.9912560412152362,-1.2368941705245489,-0.8546091165556425,-0.6430151094047886,0.2987442483070476,-0.15566570568343005,3.0871648107502514,-1.0238136188604912,-0.10667613372033996,-1.094840469415177,-0.8107330671964331,-0.0924976602235378,2.4087680653403294,-0.3907835359390839,-0.28788085663135865,2.347590383380714,-0.8107330671964331,-1.3079210210792354,-0.9172733430284622,-0.06495113637223028,-0.8149542757669227,1.206660162659556,-1.094840469415177,-1.201380745247206,-1.1481106073311913,-1.2368941705245489,-0.42142222561102377,1.6266096939169052,-0.8462464924737761,0.21915626584651354,-1.4581358917544007,-1.0238136188604912,-0.28846446867754444,-0.21685400607667268,-1.0453971303617882,-1.201380745247206,-0.7041927913644042,1.0597576551722674,0.4339921468658408,-0.8462464924737761,-1.094840469415177,0.4407979494164198,1.9689566012398945,-0.4618103864937697,-0.4771823259243,0.7672781719120098,0.1382802466967574,-0.8149542757669227,0.027703744542471962,1.9622912620788295,-0.7140419599594746,0.1265459037905308,0.9519158170752678,0.9630665479353084,1.6796704043732895,1.1448548828925131,0.522716352676764,-0.18918876746049618,-2.0556525493984648,0.9726606069920977,1.5083148500573411,0.33730103962888197,-0.5976525155323754,-1.5174283994028603,-0.8916090863461894,2.4434184752957946,1.5299185866799463,-0.8149542757669227,-0.988300193583148,0.20309552518067672,2.422677753995066,0.33730103962888197,2.293666657602452,0.2484581190530901,-0.8149542757669227,-1.2112837185925205,-0.08653464787352728,1.058002325816998,-0.8817599177511191,-1.3079210210792354,-1.201380745247206,1.4762783327934792,0.5473382252484489,-0.8107330671964331,-1.094840469415177,-0.38457196386831705,0.05741484598062782,-0.4262969612164268,2.637244850172328,1.9631542774007076,-0.49732381177111273,-1.0238136188604912,0.43657674084593046,0.20996068511369062,0.30156741698429446,0.8216404446333643,3.7381610337699613,0.33730103962888197,-0.16904728161368365,-1.201380745247206,1.3192578718690542,-0.8149542757669227,-0.2632768894046137,0.9630665479353084,2.2388990555375843,0.5374890566533788,1.9492445887459706,2.3908019252420267,2.372082560724547,-0.40615547536961427,-0.8817599177511191,-0.3289170527441617,-0.4262969612164268,-0.400632704534154,0.04158913945979854,1.4080063714173874,2.324520327366213,-1.094840469415177,-0.9172733430284622,0.34152224819937177,-0.548209176478986,-1.4072097610412782,2.8169630285701426,0.2901831164012,1.2381130678772323,-0.22858834898289918,2.530704574340299,0.3574425254756948,1.3763197450026698,1.206660162659556,-1.2877795352324226,-0.19177336144058568,-0.8149542757669227,0.8870393351634691,2.3398922667967432,-0.2780316880362882,-0.6053506321163454,-1.1303296009551096,0.9297635303055486,-0.8817599177511191,-0.988300193583148,-0.5976525155323754,0.15731407638900188,0.07089099266637498,-0.19177336144058568,-1.7494540638378808,-0.38457196386831705,-1.0593270441378342,0.8216404446333643,-0.071761943896912,-0.8916090863461894,0.43657674084593046,-0.8817599177511191,0.510297277151332,-0.0001358578883109216,0.33730103962888197,0.33730103962888197,-0.6651061927466285,0.5019756313760353,1.5966802429029017,-0.6331659408097181,-0.0924976602235378,-0.8107330671964331,3.4386573983832753,0.9630665479353084,0.33730103962888197,2.7181208693220844,1.3418787625068358,-1.1402030632875906,-1.201380745247206,0.156690547197676,-1.3760634995287946,1.0597576551722674,-0.5683506623257987,1.9909938798314906,0.08566369664299006,-1.201380745247206,1.393448859833914,-0.04246009069033591,-0.7397062166417471,-0.009985026483381183,-0.8149542757669227,-1.2368941705245489,-2.203229021343297,-0.07116270844299681,-0.18918876746049618,0.5056132279003397,1.3098530134046351,-1.13035389469252,-0.8616184319043064,2.124660663121585,-0.1498633818442428,-1.094840469415177,-0.24872983482971184,-0.24251826275894506,-1.0593270441378342,-0.3552701106617407,-0.4911122397003462,-0.9527867683058051,-0.507172980366183,-0.7850688105141606,-0.6393775128804847,-0.5719882588501025,-0.06495113637223028,-1.7494540638378808,-1.13035389469252,-0.42142222561102377,-0.8149542757669227,-0.18918876746049618,2.181348351668646,-0.8149542757669227,-0.3135451133136314,-0.28846446867754444,-0.12204807315087034,-0.690262877588358,-0.8107330671964331,-0.974370279807102,0.43657674084593046,-0.5045883863860934,-0.8462464924737761,-0.3351286248149281,-1.2167526846777361,-0.8149542757669227,-0.25857900342478224,-0.6748909381578277,-0.18918876746049618,0.24225061559842512,0.7548348026491676,-0.19177336144058568,0.2386089504580194,-1.2724075958018919,0.9781833778275577,1.0550474643924677,-0.7368218445366209,-0.7068311900947379,1.8238107343098902,-0.7752196419190901,0.2685996048999027,-1.165867319969863,-0.8916090863461894,-0.3552701106617407,-0.8149542757669227,0.5772919699998635,-0.7912803825849272,-0.6686793660870611,0.023043989028890217,1.6071570093053995,-0.6540606510757084,-0.7182631685299642,2.0773926698167067,2.8488388573231824,-0.8149542757669227,0.40528452413907706,1.4141936497507437,1.1175024148796435,0.4260252454398053,-0.18918876746049618,0.8104654200359128,-0.6686793660870611,0.7749519947585699,-0.17149141220425937,-0.8149542757669227,-0.5266256649776891,-0.8149542757669227,0.11261599001448469,-0.18918876746049618,-0.12788806839981717,-0.8149542757669227,-0.5266256649776891,-0.2341111198183592,2.027969555884627,-0.5683506623257987,1.4762783327934792,-0.5719882588501025,-0.7495553852368175,-1.094840469415177,-1.1819280606356999,-1.9191216191245535,-0.8149542757669227,-0.10046456164957326,0.8876997740452639,2.323835594747008,-0.42142222561102377,1.6266096939169052,3.3990875216623686,-0.8107330671964331,-1.5363735121738233,-0.7182631685299642,-1.13035389469252,1.7136972851374288,1.8968483857874818,-1.13035389469252,0.43657674084593046,3.2255768467192185,-0.8149542757669227,1.1183761983631832,-1.0238136188604912,-1.2724075958018919,0.021901420703284904,0.33730103962888197,-0.03564928316565371,1.1824824504904876,1.7479226737255493,-0.15756149842821326,-0.8149542757669227,-0.8817599177511191,-0.9527867683058051,-0.22048098416734968,-0.8149542757669227,0.38430431670779674,1.9163010703989893,-1.0238136188604912,1.1022709388386271,0.5124483291624318,-0.18918876746049618,0.025528398793961488,-0.7397062166417471,1.6796704043732895,-1.094840469415177,0.43657674084593046,3.525080482105903,0.43657674084593046,0.18792340652209483,0.4260252454398053,0.8216404446333643,-0.4911122397003462,-1.1157351796811676,-1.2584776820258459,0.43657674084593046,-0.0007350933422267604,0.9832080337821213,-0.2842432601070547,-1.080910555639131,1.685881976444056,0.9672877565057985,-0.8149542757669227,2.6672355046142115,1.9128924418841602,-1.316082190645029,-1.2450553400903428,-0.6430151094047886,2.8843522826005255,0.3967233922332286,-0.5781998309208691,0.43657674084593046,-0.6840513055175916,-1.5718869374511666,1.63585962705806,-0.9172733430284622,-0.18918876746049618,0.156690547197676,-0.5683506623257987,0.3256965416785428,3.994453127295332,0.43657674084593046,1.0374758854760167,0.025528398793961488,-0.18918876746049618,-0.45559881442300315,-0.8817599177511191,-0.8149542757669227,-0.28846446867754444,-1.0036721330136786,-1.201380745247206,-0.4527144423178772,0.43657674084593046,-0.7397062166417471,0.3256965416785428,2.189301727518933,0.38430431670779674,0.33730103962888197,-1.3079210210792354,-1.201380745247206,-0.14218955899768296,1.1140255068661626,1.0597576551722674,-0.7397062166417471,-0.4416689006469571,2.943644790248985,0.04158913945979854,2.9451111096408797,0.43657674084593046,0.291693954651814,-0.20700483748160217,3.490255858063867,-1.094840469415177,-0.8149542757669227,-0.6331659408097181,3.154549996164532,-0.20700483748160217,0.3574425254756948,-0.46544798301807366,-0.5775110296855627,-0.28846446867754444,-0.13597798692691668,0.43657674084593046,3.503476745483297,-0.5537319473144461,-0.8149542757669227,-0.8149542757669227,-0.3135451133136314,0.6183650758031347,-0.5009614082954165,-0.8107330671964331,-0.9172733430284622,0.626772218743721,1.7074857130666616,-0.25067943232473894,-0.8149542757669227,0.4339921468658408,-0.18918876746049618,-0.6331659408097181,-0.5537319473144461,-0.6485378802402485,-0.32960585397946823,-0.609362564701191,-0.9527867683058051,0.4309487808213497,1.0213949196888708,0.1058051824898026,-1.13035389469252,-1.13035389469252,1.5994588927214293,0.7738949235982543,0.7054116887170875,-0.9527867683058051,-0.18918876746049618,3.2561708052311182,-0.06495113637223028,2.47573846445145,-0.8149542757669227,-1.2395325692548829,-0.3552701106617407,-0.7397062166417471,-0.7550781560722774,-0.10310296037990736,-0.7182631685299642,-1.165867319969863,2.7181208693220844,-1.4881265461962838,-0.8149542757669227,-0.12788806839981717,2.4860064879657813,-1.201380745247206,3.655379615187739,-0.8149542757669227,-0.5328372370484558,-0.8149542757669227,-0.6137132561982122,-1.13035389469252,0.33730103962888197,-0.0846388551287441,-1.0036721330136786,-0.8149542757669227,0.43269058460087045,-1.0593270441378342,2.7645911193490664,-0.0803230758027607,0.7959322021898495,0.7749519947585699,-0.5976525155323754,-1.0691762127329045,-0.7195647307949344,-0.988300193583148,-0.8149542757669227,-0.34905853859097435,1.4448213589597008,0.09103247851318762,1.2853851297982124,0.6098039438972866,-0.7752196419190901,-0.8149542757669227,-1.2368941705245489,-1.0060569062218196,-0.7104043634351708,-0.18517535260551315,2.714483272797781,0.33730103962888197,1.6435334499046206,-1.165867319969863,-1.7415544927378386,0.2748111769706695,0.20682268748637145,-1.588455249957546,-1.201380745247206,-1.2368941705245489,1.2436601324501038,1.2853851297982124,0.1406298065318392,-0.8149542757669227,0.2632308230297051,0.254669691123857,-0.029437711094887367,-0.3135451133136314,0.33730103962888197,2.7722892359330364,0.27006592429179765,2.2744124808149278,0.3487908914304541,0.6378177604146411,-0.3625346852767215,-0.8560956610688466,-0.4911122397003462,0.2484581190530901,0.5973848683718551,-0.5683506623257987,0.4567182266927428,2.3908019252420267,0.8216404446333643,1.561794415432986,-0.8462464924737761,-0.029437711094887367,-0.546742857087091,2.887989879124829,0.5911732963010882,-0.18918876746049618,-0.7041927913644042,-1.039874359526328,-1.1757164885649334,-0.6686793660870611,-0.10046456164957326,0.1613745964486688,-1.165867319969863,-0.3406513956503882,0.33730103962888197,-0.8916090863461894,-0.36511927925681115,1.644156979095946,-0.23395713085309744,-0.8149542757669227,-1.0593270441378342,-1.0593270441378342,-0.8640032051124474,0.2220406379516395,2.5822787402834786,-0.8149542757669227,-0.8149542757669227,0.49432150055330704,1.1356333121048703,2.478622836556577,-0.9271225116235325,-0.7752196419190901,2.5938590942244435,-1.2877795352324226,-0.2842432601070547,0.20458613830998204,-0.14945413361266355,-1.1874508314711596,-0.5844073343755338,-0.7041927913644042,-1.0593270441378342,0.29859025934178585,-1.8322003447340904,-0.8817599177511191,-1.2368941705245489,-0.6686793660870611,1.7862106802053184,-0.8149542757669227,-0.4200853891456602,0.08566369664299006,1.836342820494014,-1.3079210210792354,1.8675055542743357,0.43657674084593046,0.359278960838043,-0.0924976602235378,-0.7397062166417471,-1.0238136188604912,-0.17149141220425937,1.6565760546213781,0.43657674084593046,0.43512118961569773,-1.2368941705245489,0.4654491206996186,-1.1720788920406295,-0.18918876746049618,2.2380360402157065,0.36355952679096765,1.314686983004789,0.4630292838464531,-0.8713624113102562,-0.988300193583148,-0.988300193583148,-0.7104043634351708,-1.175770293315178,-1.8970305357827129,2.972926418334252,-0.18918876746049618,-1.3079210210792354,-0.8807199539518996,0.43657674084593046,-0.988300193583148,-0.4911122397003462,1.6997875964826914,-0.24872983482971184,0.4407979494164198,-0.2641017742602421,-0.6686793660870611,-0.22858834898289918,0.42201738147106066,-0.5129980630504271,-0.9172733430284622,-0.7752196419190901,1.8001203688600549,-0.7104043634351708,-0.4911122397003462,0.9009449552021049,-0.9527867683058051,-0.4911122397003462,-0.6331659408097181,-1.422622466477058,-0.7929763545577616,1.148959388713422,-0.5328372370484558,0.49645286054057575,-0.34905853859097435,-1.7305089510669183,2.4811072463216477,-0.9172733430284622,-0.5266256649776891,0.6878644035380468,-2.0146163532856622,-0.18918876746049618,-0.8149542757669227,-0.568949897779714,-0.18918876746049618,2.8161000132482648,0.5312774845826123,-1.8265181966897153,0.43657674084593046,-1.0593270441378342,-1.2368941705245489,2.28900690208887,-1.13035389469252,-0.8149542757669227,-0.7397062166417471,2.073171461246217,-1.165867319969863,-1.3079210210792354,0.9672877565057985,0.6006083631644633,-1.2724075958018919,-0.38457196386831705,-1.4072097610412782,0.6183650758031347,-0.7850688105141606,2.696352375572554,-2.020139124121122,0.7518576450066585,0.24164731152840802,0.6245356695673315,0.30963580101270555,-0.6137132561982122,0.2685996048999027,0.9170056958679419,0.6977990692984068,0.43657674084593046,-0.39994390329884755,-1.0336627874555617,1.6642741712053484,-0.8807199539518996,-1.0238136188604912,0.14191784322106124,0.9574385879107278,1.5160129666413116,-0.8149542757669227,-1.713940638560538,-0.9527867683058051,1.6489022317748183,1.25972087311594,-0.20700483748160217,0.992952013188071,0.43458637734565353,-1.165867319969863,-1.201380745247206,-0.8149542757669227,3.6239226413539614,-0.36511927925681115,-0.7041927913644043,-0.5683506623257987,-0.8817599177511191,-0.988300193583148,0.4516356973718334,-0.9172733430284622,1.2890227263225162,-0.3448726042208778,1.9353389687073344,-0.11394070833532072],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC3<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC3\",\"marker\":{\"color\":\"#00cc96\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC3\",\"offsetgroup\":\"PC3\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.3682804998768233,-0.6136006796040681,-0.4695187825045015,1.048445959035529,0.38864193383115425,-0.7155798011822432,1.5510369091798888,-0.007012127106625298,0.23805412300825135,-2.2344783275301974,-0.5852358142080495,1.4815647551486868,-0.23049410940707854,1.8203381777704841,-0.964827617095084,0.7274775677560874,-0.7498750183055151,0.17735712246137975,0.2530830354270465,-2.095195815218579,0.38864193383115475,0.8515741806112347,-1.8164888045228245,0.9820757505629129,-0.24603680020404384,1.2923833511618903,-1.6085167248258665,1.4750093997530584,-1.2022588915749552,0.17735712246137975,-1.1908532323766798,-0.8226607038725028,-1.2022588915749552,1.6681897565235035,-1.1699389301151342,1.1937952241944632,-1.6085167248258665,-0.18921837319119633,-0.1334275029346888,-2.2344783275301974,0.6245646613699869,0.08798009056351785,-1.6085167248258665,-2.388363361015435,-1.6513858596592959,0.17735712246137975,-0.19935666433011062,-1.2022588915749552,-0.9422195555290002,-0.2835015353794223,0.34944058641751935,-0.18921837319119633,-0.2856195769783577,0.1705315629952821,1.113575284366451,0.8076171012063323,-0.6758974635839086,-1.6655241988593255,-0.5199380412964241,0.8146915961705156,-1.9338164842625605,0.7821020265800325,1.9478824115870625,0.22561337776987297,-1.6085167248258665,-0.9422195555290002,-0.09358758235886955,-0.2717698456229608,0.42559289062836314,0.6834574771850811,0.26481472518350824,0.5343911868572147,-0.18921837319119633,-1.2524904025468986,0.26481472518350824,0.2279885631703136,0.17735712246137975,0.17735712246137975,-0.3554528033686744,-0.3044158376409686,-0.14794263697531415,0.1409875165358614,-1.2022588915749552,0.09971178031997925,-0.8410004084474372,0.6357825727482782,0.5708481799157259,0.17735712246137975,1.1534332542238754,-0.06539116454354969,0.1409875165358614,-0.23049410940707854,1.7370541563049637,0.8335315096298147,1.3792596030123285,0.17735712246137975,0.9710585605586026,-0.8721096281985833,0.37691024407469315,0.8635893344674054,-0.38696731007273283,0.17735712246137975,0.8312127466568985,0.30609046139939017,1.1374905755597855,0.09971178031997925,-0.6758974635839086,0.17735712246137975,0.5124691424788017,-0.6860357547228226,1.5142107471666941,-2.2138404594222565,-0.14794263697531415,-0.20095006294765774,-2.6268742557346836,-0.18921837319119633,0.9609936458513509,0.6572106533879942,-0.5787299004847201,-0.19354315260987023,0.47707879610566983,0.17735712246137975,-0.9841981171436641,0.1769294901457087,2.193312041781012,-1.83035070956925,-0.7155798011822433,-0.06539116454354969,-1.1767946544237313,0.8013992959899773,-1.4797833858878557,-0.23049410940707854,0.9134948148811622,0.1705315629952821,-0.024115428327667412,-1.8925407480466783,0.4120562162771555,1.6176765218600044,-0.3955970542706075,-1.0949530373368528,-1.4288986459217123,-0.6346217273680261,-0.03584711808412903,-1.164706769266584,-0.3130455818388431,0.3945273236739055,0.058436044104097,-0.20476106398816196,1.3689566989498254,0.6775720873423303,1.0490537132852706,0.5118613882290591,1.2347945262567404,1.2819556523153737,0.17735712246137975,-0.22059699714984277,-1.7752130683069425,0.18226325275174368,0.17735712246137975,2.0442465513161148,1.2763466966262276,0.10834152451785396,0.017160307888214696,-0.35432131805472533,0.10178616912222616,-0.018230038484916954,0.585057156167772,1.4312394722283321,0.17735712246137975,0.09971178031997925,2.2181230499380358,-0.66732354587375,-0.8351150186046865,-0.18921837319119633,0.35192251732036917,0.35325158745802315,1.1438023566477131,-0.6345149818656174,0.18226325275174368,0.4299176700470371,1.5575674609234025,-1.6085167248258665,0.582066091294017,0.05374209573074015,-0.7112878099570399,1.0597210927043135,-0.6860357547228226,0.8013992959899773,0.36838086056380936,0.4299176700470371,-0.22186436520920372,-0.2717698456229608,-0.2422257991635401,-0.013780464282228778,-0.7561174034119204,-0.1782570963895689,-0.7155798011822433,1.1937952241944632,-1.2022588915749552,-0.5520702549362617,0.09971178031997925,2.0442465513161148,0.3473661976152726,-0.9638366831893278,-0.3130455818388431,-0.8178613190845476,0.7810378620356411,-1.7687135393990312,-1.7752130683069425,-0.30848926213374617,-0.06539116454354969,-0.09803715656155718,-0.14794263697531415,0.18226325275174368,-0.19935666433011062,-1.0285828288642374,-0.42824304628861504,1.1937952241944632,-1.5035302295004882,0.18226325275174368,-0.3955970542706075,0.058436044104097,1.0490537132852706,0.17735712246137975,1.6589522580758869,-0.14794263697531415,-0.2717698456229608,-0.20985624129913744,-0.3130455818388431,0.6571232662550011,1.048445959035528,0.1409875165358614,1.3792596030123285,-0.06971594396222348,-0.06539116454354969,-0.3093219679313322,1.2763466966262276,-0.546184865093511,-0.2717698456229608,0.30609046139939017,-1.5789726783664457,-0.6860357547228226,0.1409875165358614,-0.14794263697531415,-1.6036105945355024,1.1637437841722906,-0.5107945187203795,0.1142269143606046,1.6416985585557475,1.68910405878505,0.17735712246137975,0.4466575911890063,2.1333467904049277,0.6984863896038764,0.8159144300306025,-1.4652682518472304,-2.095195815218579,0.4518961368529745,-1.8839110038488034,1.037322023528809,-0.7155798011822433,0.33441167399872435,2.134782606044991,1.351332589404509,-1.2022588915749552,0.4299176700470371,0.7209222123604595,0.4921077085244654,1.9977878920008192,0.5322228221833952,0.17735712246137975,-0.024115428327667412,0.6658403975858691,-0.16819732542724175,-1.2022588915749552,2.0781145773312404,0.3147202055972653,0.17735712246137975,-0.5434963372261037,0.5682600127353091,0.7339770966639988,0.09971178031997925,-0.3955970542706075,-0.2717698456229608,1.0597210927043135,-1.4797833858878557,0.18226325275174368,-0.14794263697531415,0.6775720873423303,-1.5275586510116492,-0.4695187825044974,-1.271787671956843,-0.8517481942442474,-0.5520702549362617,-0.06539116454354969,-1.6085167248258665,-1.8719028799387374,-0.013505271199118605,0.8076171012063323,0.0077601507355059855,-1.2022588915749552,-0.04928263188537694,-0.2717698456229608,-0.8241029043279838,0.17735712246137975,0.4285960240804412,-2.095195815218579,-1.4803911401375982,-1.0873874576833698,-1.7121336976812436,-1.7076841234785554,-0.862841310838525,0.196778386792369,0.09971178031997925,1.385144992855079,-0.4695187825044974,-0.03584711808412903,1.172880921932917,1.0334170466167325,-0.6330791662255545,-0.14794263697531415,0.058436044104097,-1.1973527612845918,0.031675441928840184,2.0442465513161148,-1.2123752888879689,1.461811075444093,0.44744656265028687,0.4031570678717802,-1.3956148806044897,-0.5359617222780891,1.4522971428428706,1.6589522580758869,0.27070011502625885,0.20690116892080043,0.17735712246137975,1.2874706321329468,-1.2581005993065388,0.8013992959899773,0.6753473002409868,-0.05505620049811151,1.1947089904397576,0.09971178031997925,-0.024115428327667412,0.4299176700470371,-0.29996626343828076,0.10834152451785396,0.20690116892080043,-0.26588445578020986,0.6775720873423303,-0.10666690075943197,0.8076171012063323,-1.5564494684768697,0.4921077085244654,-1.6085167248258665,0.09971178031997925,0.2597573967310782,0.02579005208608951,-1.2022588915749552,-1.2022588915749552,1.7115398815416327,-1.1286631938992517,-0.9549305048378482,0.38864193383115475,-0.19935666433011062,0.18226325275174368,0.16841352139634724,-2.095195815218579,-1.2022588915749552,-1.5816321277295649,-0.9156101515158092,0.20317755501328982,-0.2717698456229608,-1.9338164842625605,-0.45241548128345466,-1.5789726783664457,-0.6346217273680261,-0.4308806551413303,-2.016367956694325,-0.2717698456229608,-1.594980850337628,-2.620988865891933,0.26481472518350824,0.4181859802905757,0.17735712246137975,-0.3130455818388431,0.40193423401169337,-0.05676142034567495,-0.7155798011822433,-2.6268742557346836,2.0026008462825797,-0.18921837319119633,0.7660089496168456,-1.3587887185912955,0.24027891010959507,-0.14794263697531415,-0.263140101425086,0.8426750322058595,-0.10666690075943197,-0.38696731007273283,0.5537448786946838,0.017160307888214696,-0.15967432673177562,0.615934917172112,-0.7171731997997907,0.8635893344674054,1.0490537132852706,-0.26588445578020986,-0.18921837319119633,0.6571232662550011,0.17735712246137975,-0.7155798011822433,0.07295756296014047,0.17735712246137975,0.7601235597740948,-0.3093219679313322,0.5269842765194267,-0.1334275029346888,0.18226325275174368,-0.4636333926617467,-1.6085167248258665,-1.0821552968348196,0.1409875165358614,0.27932985922413356,0.35325158745802315,0.17735712246137975,0.12925582677940015,-0.7584489360156726,-0.7155798011822433,0.6429707124304799,0.7299717590649317,0.20690116892080043,0.7071161338017513,-0.35432131805472533,1.9021571011684928,0.6078555591404586,0.2905477706024249,0.5644490116948051,3.3324175294677594,0.22353898896762592,0.9810173748941314,-0.23049410940707854,0.4921077085244654,-0.38696731007273283,0.17735712246137975,0.657755250678606,-0.48988021645883345,0.3473661976152726,-2.3058118885836705,1.7205894282461054,1.246288871788637,0.6935802593135124,-0.9733506157905498,0.327111509163345,0.17735712246137975,-1.644886330751385,2.0050700075545933,0.7111091519167624,0.5210988866766764,-0.7155798011822433,1.3033824918845953,0.3473661976152726,1.262106755668713,0.9252265046376238,0.17735712246137975,0.5124691424788017,0.17735712246137975,1.2554323943646817,-0.7155798011822433,-2.4812337675011698,0.17735712246137975,0.5124691424788017,0.6357825727482782,-1.8750118554434285,-0.6346217273680261,1.0597210927043135,0.8635893344674054,0.6572106533879942,-0.14794263697531415,-0.943913314833538,0.7321401237387507,0.17735712246137975,1.0077779770693887,1.0576834574831453,-0.5374541642688376,0.6571232662550011,1.048445959035528,0.30842199400314346,0.18226325275174368,-0.018230038484916954,0.6935802593135124,-0.18921837319119633,1.844416636893752,0.08869459031566902,-0.18921837319119633,-1.6085167248258665,-0.07924089589894655,0.17735712246137975,0.9358366617661729,-0.06539116454354969,-0.35432131805472533,-1.5688343872275317,-1.2022588915749552,-0.015485684129792787,-0.12596417016937628,-0.9524363135290037,0.48570854030354477,0.17735712246137975,0.09971178031997925,0.017160307888214696,-0.7519494071077616,0.17735712246137975,0.8080736572940086,-0.5834488788949085,-0.06539116454354969,1.3881587514177036,0.1127910987205415,-0.7155798011822433,0.4594617165064579,0.26481472518350824,0.4518961368529745,-0.14794263697531415,-1.6085167248258665,-0.23989426655978732,-1.6085167248258665,-0.27727844062511586,0.5210988866766764,0.8076171012063323,0.5537448786946838,0.709704300982168,-0.7938392823888042,-1.6085167248258665,-1.4738979960451049,-1.4288986459217123,-0.3044158376409686,-0.5874606013093933,1.5577112704839204,-2.090289684928215,0.17735712246137975,-0.9978864308644632,1.3658477234451345,0.09538700090130545,0.1779384733330699,0.7810378620356411,0.3683872453792274,1.5856382840917396,-0.2422257991635401,-1.6085167248258665,0.9723876306962568,-0.05950577470079909,-0.8436380173001522,0.058436044104097,-0.7155798011822433,-1.9338164842625605,-0.6346217273680261,1.5030868116599754,0.05126067405273186,-1.6085167248258665,1.1115189448458096,0.4594617165064579,-0.7155798011822433,0.595020614910566,0.09971178031997925,0.17735712246137975,-0.3093219679313322,0.6009060047533166,-0.2717698456229608,0.6207536603294828,-1.6085167248258665,0.26481472518350824,1.5030868116599754,1.9414832433661415,0.8080736572940086,-1.2022588915749552,-0.3955970542706075,-0.2717698456229608,-0.13931289277743952,0.9614449124010761,-1.5789726783664457,0.26481472518350824,0.15550265057648685,-0.42225091094345557,1.172880921932917,-0.47359220699727583,-1.6085167248258665,0.2447284843122827,0.8839507684217417,1.0572706357317738,-0.14794263697531415,0.17735712246137975,0.38864193383115475,-0.1617923683307108,0.8839507684217417,-0.5359617222780891,0.9874165431150521,1.0962148393439033,-0.3093219679313322,0.966502240853506,-1.6085167248258665,0.579215500661326,0.26430094680533817,0.17735712246137975,0.17735712246137975,0.7601235597740948,-1.397231913456091,0.9461408068991697,0.18226325275174368,0.058436044104097,-1.6041243729136725,0.7386015032628064,1.3336590873777723,0.17735712246137975,-0.6860357547228226,-0.7155798011822433,0.38864193383115475,0.26430094680533817,1.013663366912139,0.04670435434763552,-0.30910978601432537,0.017160307888214696,-1.2112146663310162,1.6980032071904252,-1.3500707873974584,-0.18921837319119633,-0.18921837319119633,1.9660190584400545,0.403771206936941,-0.1716894805879466,0.017160307888214696,-0.7155798011822433,3.128414033788789,1.0490537132852706,-0.7647471476097947,0.17735712246137975,-0.05468703154342824,-0.38696731007273283,0.26481472518350824,0.8898361582644921,1.266136527364803,0.6935802593135124,-0.23049410940707854,-1.5816321277295649,-0.3436171850546037,0.17735712246137975,-2.4812337675011698,0.1597837771984727,-0.2717698456229608,0.35192251732036917,0.17735712246137975,-0.5933459911521439,0.17735712246137975,-0.2835015353794223,-0.18921837319119633,-1.2022588915749552,-1.6926615958751783,0.6009060047533166,0.17735712246137975,-0.4485041195559606,-0.10666690075943197,0.7226151718020284,1.6740751463662547,-1.1908532323766798,1.262106755668713,0.4299176700470371,0.2857290274450541,0.9311118944803746,-0.024115428327667412,0.17735712246137975,0.7188478235582126,0.8371611476657529,0.7746386938147203,1.4960741003137015,1.8332927013870337,0.22353898896762592,0.17735712246137975,-0.3130455818388431,-0.04475329643560865,-0.7997246722315551,1.6488360646860345,-0.0834210658941333,-1.2022588915749552,-1.2232298201871872,-0.23049410940707854,0.9385188048181623,2.086832508525077,-0.9936180738733137,0.6383707399286949,-0.2717698456229608,-0.3130455818388431,0.34898323046687446,1.4960741003137015,-2.64723568968902,0.17735712246137975,-1.8099892756149139,1.420535339228211,1.0903294495011528,0.7601235597740948,-1.2022588915749552,0.47718554160807847,0.9296760788403113,-1.4391154039217164,0.7667979210781263,-2.0693753826666685,-0.9170523519712906,0.5333834447403476,0.5537448786946838,0.3147202055972653,1.0557280745893018,-0.6346217273680261,-0.9422195555290002,-1.7076841234785554,0.8076171012063323,2.0717096202347087,0.1409875165358614,1.0903294495011528,-0.019665854124979804,-1.1298238164562042,-0.05008705904164354,-0.7155798011822433,0.30609046139939017,-0.7788103699700092,0.1619018187974075,0.3473661976152726,1.0077779770693887,0.9528151682032011,-0.23049410940707854,0.5119553641006315,-1.2022588915749552,0.4921077085244654,0.005428618131753325,0.4106204006370923,-2.3878495826372643,0.17735712246137975,-0.10666690075943197,-0.10666690075943197,0.12034964842792027,1.4049926484312454,-0.6409199389621482,0.17735712246137975,0.17735712246137975,0.6815651054573418,1.5764007856441222,-0.7390141021908782,0.450831972308583,0.22353898896762592,3.2559018451778425,0.27070011502625885,-0.3044158376409686,0.748661274225134,-0.6693979346759972,-0.7112878099570399,0.08602470766967475,0.30609046139939017,-0.10666690075943197,1.254918615986512,-0.3620569211632156,0.09971178031997925,-0.3130455818388431,0.3473661976152726,0.5757233455006215,0.17735712246137975,0.6362963511264481,-2.016367956694325,1.5159217558898679,-0.3955970542706075,1.5828057427406532,-1.6085167248258665,-1.1767148931766505,-0.19935666433011062,0.26481472518350824,-0.06539116454354969,0.9252265046376238,1.1881850274348236,-1.6085167248258665,1.6526470657265386,-0.3130455818388431,-0.46347580968426233,-1.3363092430380241,-0.7155798011822433,1.5047038445115761,-2.791977200598213,0.4315347028986383,0.6451954995318233,0.9937283242029796,-0.024115428327667412,-0.024115428327667412,-0.7997246722315551,-0.5022206010102215,-0.1983618957672409,-0.1868868405874438,-0.7155798011822433,-0.3955970542706075,1.5575674609234025,-1.6085167248258665,-0.024115428327667412,0.5537448786946838,0.9840311334567561,-0.263140101425086,-1.6036105945355024,0.3618813316558979,0.3473661976152726,0.4031570678717802,0.9707074408855241,-2.308323734949166,0.058436044104097,0.22353898896762592,1.4361088489376173,-0.7997246722315551,0.5537448786946838,0.7137904951057825,0.017160307888214696,0.5537448786946838,0.38864193383115475,-0.028440207746341397,0.20290112085968484,0.933669096955323,-0.5933459911521439,-0.8960376890227538,0.7188478235582126,0.47326779506516586,2.02625950289925,0.058436044104097,0.5124691424788017,0.4661360778104893,0.14306190533810806,-0.7155798011822433,0.17735712246137975,-2.13430977549922,-0.7155798011822433,1.7727196957612057,-2.1932025913143147,-0.3554528033686744,-1.6085167248258665,-0.10666690075943197,-0.3130455818388431,-0.6743549024414366,-0.18921837319119633,0.17735712246137975,0.26481472518350824,-0.978256746080914,-0.23049410940707854,-0.3955970542706075,-2.090289684928215,-1.4178697815640326,-0.35432131805472533,0.6775720873423303,2.0442465513161148,-1.397231913456091,0.615934917172112,-0.9487126996214933,0.37568741021460655,1.9983956462505619,-2.2907829761648744,0.1381549751847754,0.7896676062335157,-0.2835015353794223,0.9810173748941314,1.4272097005322422,-1.5215729004819079,-1.6085167248258665,1.3025935204233143,0.3270047636609364,0.9427553972408739,1.5575674609234025,-0.06539116454354969,0.1908929969496183,-1.6978937567237287,1.1059029592105594,0.17735712246137975,-0.22460871956432762,0.017160307888214696,1.5677768303218576,1.0624024358933333,0.8839507684217417,-1.6566180205078465,-2.7094257281664476,-0.23049410940707854,-0.2717698456229608,0.17735712246137975,0.12936257228180886,0.005428618131753224,0.3060904613993902,-0.6346217273680261,0.0997117803199793,-0.024115428327667405,0.2906481312894156,0.05843604410409708,-0.0021369615217297056,0.5070492338102676,-1.1384535606540789,-0.6281221984601149],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC3<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC3\",\"marker\":{\"color\":\"#00cc96\"},\"name\":\"PC3\",\"notched\":true,\"offsetgroup\":\"PC3\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.3682804998768233,-0.6136006796040681,-0.4695187825045015,1.048445959035529,0.38864193383115425,-0.7155798011822432,1.5510369091798888,-0.007012127106625298,0.23805412300825135,-2.2344783275301974,-0.5852358142080495,1.4815647551486868,-0.23049410940707854,1.8203381777704841,-0.964827617095084,0.7274775677560874,-0.7498750183055151,0.17735712246137975,0.2530830354270465,-2.095195815218579,0.38864193383115475,0.8515741806112347,-1.8164888045228245,0.9820757505629129,-0.24603680020404384,1.2923833511618903,-1.6085167248258665,1.4750093997530584,-1.2022588915749552,0.17735712246137975,-1.1908532323766798,-0.8226607038725028,-1.2022588915749552,1.6681897565235035,-1.1699389301151342,1.1937952241944632,-1.6085167248258665,-0.18921837319119633,-0.1334275029346888,-2.2344783275301974,0.6245646613699869,0.08798009056351785,-1.6085167248258665,-2.388363361015435,-1.6513858596592959,0.17735712246137975,-0.19935666433011062,-1.2022588915749552,-0.9422195555290002,-0.2835015353794223,0.34944058641751935,-0.18921837319119633,-0.2856195769783577,0.1705315629952821,1.113575284366451,0.8076171012063323,-0.6758974635839086,-1.6655241988593255,-0.5199380412964241,0.8146915961705156,-1.9338164842625605,0.7821020265800325,1.9478824115870625,0.22561337776987297,-1.6085167248258665,-0.9422195555290002,-0.09358758235886955,-0.2717698456229608,0.42559289062836314,0.6834574771850811,0.26481472518350824,0.5343911868572147,-0.18921837319119633,-1.2524904025468986,0.26481472518350824,0.2279885631703136,0.17735712246137975,0.17735712246137975,-0.3554528033686744,-0.3044158376409686,-0.14794263697531415,0.1409875165358614,-1.2022588915749552,0.09971178031997925,-0.8410004084474372,0.6357825727482782,0.5708481799157259,0.17735712246137975,1.1534332542238754,-0.06539116454354969,0.1409875165358614,-0.23049410940707854,1.7370541563049637,0.8335315096298147,1.3792596030123285,0.17735712246137975,0.9710585605586026,-0.8721096281985833,0.37691024407469315,0.8635893344674054,-0.38696731007273283,0.17735712246137975,0.8312127466568985,0.30609046139939017,1.1374905755597855,0.09971178031997925,-0.6758974635839086,0.17735712246137975,0.5124691424788017,-0.6860357547228226,1.5142107471666941,-2.2138404594222565,-0.14794263697531415,-0.20095006294765774,-2.6268742557346836,-0.18921837319119633,0.9609936458513509,0.6572106533879942,-0.5787299004847201,-0.19354315260987023,0.47707879610566983,0.17735712246137975,-0.9841981171436641,0.1769294901457087,2.193312041781012,-1.83035070956925,-0.7155798011822433,-0.06539116454354969,-1.1767946544237313,0.8013992959899773,-1.4797833858878557,-0.23049410940707854,0.9134948148811622,0.1705315629952821,-0.024115428327667412,-1.8925407480466783,0.4120562162771555,1.6176765218600044,-0.3955970542706075,-1.0949530373368528,-1.4288986459217123,-0.6346217273680261,-0.03584711808412903,-1.164706769266584,-0.3130455818388431,0.3945273236739055,0.058436044104097,-0.20476106398816196,1.3689566989498254,0.6775720873423303,1.0490537132852706,0.5118613882290591,1.2347945262567404,1.2819556523153737,0.17735712246137975,-0.22059699714984277,-1.7752130683069425,0.18226325275174368,0.17735712246137975,2.0442465513161148,1.2763466966262276,0.10834152451785396,0.017160307888214696,-0.35432131805472533,0.10178616912222616,-0.018230038484916954,0.585057156167772,1.4312394722283321,0.17735712246137975,0.09971178031997925,2.2181230499380358,-0.66732354587375,-0.8351150186046865,-0.18921837319119633,0.35192251732036917,0.35325158745802315,1.1438023566477131,-0.6345149818656174,0.18226325275174368,0.4299176700470371,1.5575674609234025,-1.6085167248258665,0.582066091294017,0.05374209573074015,-0.7112878099570399,1.0597210927043135,-0.6860357547228226,0.8013992959899773,0.36838086056380936,0.4299176700470371,-0.22186436520920372,-0.2717698456229608,-0.2422257991635401,-0.013780464282228778,-0.7561174034119204,-0.1782570963895689,-0.7155798011822433,1.1937952241944632,-1.2022588915749552,-0.5520702549362617,0.09971178031997925,2.0442465513161148,0.3473661976152726,-0.9638366831893278,-0.3130455818388431,-0.8178613190845476,0.7810378620356411,-1.7687135393990312,-1.7752130683069425,-0.30848926213374617,-0.06539116454354969,-0.09803715656155718,-0.14794263697531415,0.18226325275174368,-0.19935666433011062,-1.0285828288642374,-0.42824304628861504,1.1937952241944632,-1.5035302295004882,0.18226325275174368,-0.3955970542706075,0.058436044104097,1.0490537132852706,0.17735712246137975,1.6589522580758869,-0.14794263697531415,-0.2717698456229608,-0.20985624129913744,-0.3130455818388431,0.6571232662550011,1.048445959035528,0.1409875165358614,1.3792596030123285,-0.06971594396222348,-0.06539116454354969,-0.3093219679313322,1.2763466966262276,-0.546184865093511,-0.2717698456229608,0.30609046139939017,-1.5789726783664457,-0.6860357547228226,0.1409875165358614,-0.14794263697531415,-1.6036105945355024,1.1637437841722906,-0.5107945187203795,0.1142269143606046,1.6416985585557475,1.68910405878505,0.17735712246137975,0.4466575911890063,2.1333467904049277,0.6984863896038764,0.8159144300306025,-1.4652682518472304,-2.095195815218579,0.4518961368529745,-1.8839110038488034,1.037322023528809,-0.7155798011822433,0.33441167399872435,2.134782606044991,1.351332589404509,-1.2022588915749552,0.4299176700470371,0.7209222123604595,0.4921077085244654,1.9977878920008192,0.5322228221833952,0.17735712246137975,-0.024115428327667412,0.6658403975858691,-0.16819732542724175,-1.2022588915749552,2.0781145773312404,0.3147202055972653,0.17735712246137975,-0.5434963372261037,0.5682600127353091,0.7339770966639988,0.09971178031997925,-0.3955970542706075,-0.2717698456229608,1.0597210927043135,-1.4797833858878557,0.18226325275174368,-0.14794263697531415,0.6775720873423303,-1.5275586510116492,-0.4695187825044974,-1.271787671956843,-0.8517481942442474,-0.5520702549362617,-0.06539116454354969,-1.6085167248258665,-1.8719028799387374,-0.013505271199118605,0.8076171012063323,0.0077601507355059855,-1.2022588915749552,-0.04928263188537694,-0.2717698456229608,-0.8241029043279838,0.17735712246137975,0.4285960240804412,-2.095195815218579,-1.4803911401375982,-1.0873874576833698,-1.7121336976812436,-1.7076841234785554,-0.862841310838525,0.196778386792369,0.09971178031997925,1.385144992855079,-0.4695187825044974,-0.03584711808412903,1.172880921932917,1.0334170466167325,-0.6330791662255545,-0.14794263697531415,0.058436044104097,-1.1973527612845918,0.031675441928840184,2.0442465513161148,-1.2123752888879689,1.461811075444093,0.44744656265028687,0.4031570678717802,-1.3956148806044897,-0.5359617222780891,1.4522971428428706,1.6589522580758869,0.27070011502625885,0.20690116892080043,0.17735712246137975,1.2874706321329468,-1.2581005993065388,0.8013992959899773,0.6753473002409868,-0.05505620049811151,1.1947089904397576,0.09971178031997925,-0.024115428327667412,0.4299176700470371,-0.29996626343828076,0.10834152451785396,0.20690116892080043,-0.26588445578020986,0.6775720873423303,-0.10666690075943197,0.8076171012063323,-1.5564494684768697,0.4921077085244654,-1.6085167248258665,0.09971178031997925,0.2597573967310782,0.02579005208608951,-1.2022588915749552,-1.2022588915749552,1.7115398815416327,-1.1286631938992517,-0.9549305048378482,0.38864193383115475,-0.19935666433011062,0.18226325275174368,0.16841352139634724,-2.095195815218579,-1.2022588915749552,-1.5816321277295649,-0.9156101515158092,0.20317755501328982,-0.2717698456229608,-1.9338164842625605,-0.45241548128345466,-1.5789726783664457,-0.6346217273680261,-0.4308806551413303,-2.016367956694325,-0.2717698456229608,-1.594980850337628,-2.620988865891933,0.26481472518350824,0.4181859802905757,0.17735712246137975,-0.3130455818388431,0.40193423401169337,-0.05676142034567495,-0.7155798011822433,-2.6268742557346836,2.0026008462825797,-0.18921837319119633,0.7660089496168456,-1.3587887185912955,0.24027891010959507,-0.14794263697531415,-0.263140101425086,0.8426750322058595,-0.10666690075943197,-0.38696731007273283,0.5537448786946838,0.017160307888214696,-0.15967432673177562,0.615934917172112,-0.7171731997997907,0.8635893344674054,1.0490537132852706,-0.26588445578020986,-0.18921837319119633,0.6571232662550011,0.17735712246137975,-0.7155798011822433,0.07295756296014047,0.17735712246137975,0.7601235597740948,-0.3093219679313322,0.5269842765194267,-0.1334275029346888,0.18226325275174368,-0.4636333926617467,-1.6085167248258665,-1.0821552968348196,0.1409875165358614,0.27932985922413356,0.35325158745802315,0.17735712246137975,0.12925582677940015,-0.7584489360156726,-0.7155798011822433,0.6429707124304799,0.7299717590649317,0.20690116892080043,0.7071161338017513,-0.35432131805472533,1.9021571011684928,0.6078555591404586,0.2905477706024249,0.5644490116948051,3.3324175294677594,0.22353898896762592,0.9810173748941314,-0.23049410940707854,0.4921077085244654,-0.38696731007273283,0.17735712246137975,0.657755250678606,-0.48988021645883345,0.3473661976152726,-2.3058118885836705,1.7205894282461054,1.246288871788637,0.6935802593135124,-0.9733506157905498,0.327111509163345,0.17735712246137975,-1.644886330751385,2.0050700075545933,0.7111091519167624,0.5210988866766764,-0.7155798011822433,1.3033824918845953,0.3473661976152726,1.262106755668713,0.9252265046376238,0.17735712246137975,0.5124691424788017,0.17735712246137975,1.2554323943646817,-0.7155798011822433,-2.4812337675011698,0.17735712246137975,0.5124691424788017,0.6357825727482782,-1.8750118554434285,-0.6346217273680261,1.0597210927043135,0.8635893344674054,0.6572106533879942,-0.14794263697531415,-0.943913314833538,0.7321401237387507,0.17735712246137975,1.0077779770693887,1.0576834574831453,-0.5374541642688376,0.6571232662550011,1.048445959035528,0.30842199400314346,0.18226325275174368,-0.018230038484916954,0.6935802593135124,-0.18921837319119633,1.844416636893752,0.08869459031566902,-0.18921837319119633,-1.6085167248258665,-0.07924089589894655,0.17735712246137975,0.9358366617661729,-0.06539116454354969,-0.35432131805472533,-1.5688343872275317,-1.2022588915749552,-0.015485684129792787,-0.12596417016937628,-0.9524363135290037,0.48570854030354477,0.17735712246137975,0.09971178031997925,0.017160307888214696,-0.7519494071077616,0.17735712246137975,0.8080736572940086,-0.5834488788949085,-0.06539116454354969,1.3881587514177036,0.1127910987205415,-0.7155798011822433,0.4594617165064579,0.26481472518350824,0.4518961368529745,-0.14794263697531415,-1.6085167248258665,-0.23989426655978732,-1.6085167248258665,-0.27727844062511586,0.5210988866766764,0.8076171012063323,0.5537448786946838,0.709704300982168,-0.7938392823888042,-1.6085167248258665,-1.4738979960451049,-1.4288986459217123,-0.3044158376409686,-0.5874606013093933,1.5577112704839204,-2.090289684928215,0.17735712246137975,-0.9978864308644632,1.3658477234451345,0.09538700090130545,0.1779384733330699,0.7810378620356411,0.3683872453792274,1.5856382840917396,-0.2422257991635401,-1.6085167248258665,0.9723876306962568,-0.05950577470079909,-0.8436380173001522,0.058436044104097,-0.7155798011822433,-1.9338164842625605,-0.6346217273680261,1.5030868116599754,0.05126067405273186,-1.6085167248258665,1.1115189448458096,0.4594617165064579,-0.7155798011822433,0.595020614910566,0.09971178031997925,0.17735712246137975,-0.3093219679313322,0.6009060047533166,-0.2717698456229608,0.6207536603294828,-1.6085167248258665,0.26481472518350824,1.5030868116599754,1.9414832433661415,0.8080736572940086,-1.2022588915749552,-0.3955970542706075,-0.2717698456229608,-0.13931289277743952,0.9614449124010761,-1.5789726783664457,0.26481472518350824,0.15550265057648685,-0.42225091094345557,1.172880921932917,-0.47359220699727583,-1.6085167248258665,0.2447284843122827,0.8839507684217417,1.0572706357317738,-0.14794263697531415,0.17735712246137975,0.38864193383115475,-0.1617923683307108,0.8839507684217417,-0.5359617222780891,0.9874165431150521,1.0962148393439033,-0.3093219679313322,0.966502240853506,-1.6085167248258665,0.579215500661326,0.26430094680533817,0.17735712246137975,0.17735712246137975,0.7601235597740948,-1.397231913456091,0.9461408068991697,0.18226325275174368,0.058436044104097,-1.6041243729136725,0.7386015032628064,1.3336590873777723,0.17735712246137975,-0.6860357547228226,-0.7155798011822433,0.38864193383115475,0.26430094680533817,1.013663366912139,0.04670435434763552,-0.30910978601432537,0.017160307888214696,-1.2112146663310162,1.6980032071904252,-1.3500707873974584,-0.18921837319119633,-0.18921837319119633,1.9660190584400545,0.403771206936941,-0.1716894805879466,0.017160307888214696,-0.7155798011822433,3.128414033788789,1.0490537132852706,-0.7647471476097947,0.17735712246137975,-0.05468703154342824,-0.38696731007273283,0.26481472518350824,0.8898361582644921,1.266136527364803,0.6935802593135124,-0.23049410940707854,-1.5816321277295649,-0.3436171850546037,0.17735712246137975,-2.4812337675011698,0.1597837771984727,-0.2717698456229608,0.35192251732036917,0.17735712246137975,-0.5933459911521439,0.17735712246137975,-0.2835015353794223,-0.18921837319119633,-1.2022588915749552,-1.6926615958751783,0.6009060047533166,0.17735712246137975,-0.4485041195559606,-0.10666690075943197,0.7226151718020284,1.6740751463662547,-1.1908532323766798,1.262106755668713,0.4299176700470371,0.2857290274450541,0.9311118944803746,-0.024115428327667412,0.17735712246137975,0.7188478235582126,0.8371611476657529,0.7746386938147203,1.4960741003137015,1.8332927013870337,0.22353898896762592,0.17735712246137975,-0.3130455818388431,-0.04475329643560865,-0.7997246722315551,1.6488360646860345,-0.0834210658941333,-1.2022588915749552,-1.2232298201871872,-0.23049410940707854,0.9385188048181623,2.086832508525077,-0.9936180738733137,0.6383707399286949,-0.2717698456229608,-0.3130455818388431,0.34898323046687446,1.4960741003137015,-2.64723568968902,0.17735712246137975,-1.8099892756149139,1.420535339228211,1.0903294495011528,0.7601235597740948,-1.2022588915749552,0.47718554160807847,0.9296760788403113,-1.4391154039217164,0.7667979210781263,-2.0693753826666685,-0.9170523519712906,0.5333834447403476,0.5537448786946838,0.3147202055972653,1.0557280745893018,-0.6346217273680261,-0.9422195555290002,-1.7076841234785554,0.8076171012063323,2.0717096202347087,0.1409875165358614,1.0903294495011528,-0.019665854124979804,-1.1298238164562042,-0.05008705904164354,-0.7155798011822433,0.30609046139939017,-0.7788103699700092,0.1619018187974075,0.3473661976152726,1.0077779770693887,0.9528151682032011,-0.23049410940707854,0.5119553641006315,-1.2022588915749552,0.4921077085244654,0.005428618131753325,0.4106204006370923,-2.3878495826372643,0.17735712246137975,-0.10666690075943197,-0.10666690075943197,0.12034964842792027,1.4049926484312454,-0.6409199389621482,0.17735712246137975,0.17735712246137975,0.6815651054573418,1.5764007856441222,-0.7390141021908782,0.450831972308583,0.22353898896762592,3.2559018451778425,0.27070011502625885,-0.3044158376409686,0.748661274225134,-0.6693979346759972,-0.7112878099570399,0.08602470766967475,0.30609046139939017,-0.10666690075943197,1.254918615986512,-0.3620569211632156,0.09971178031997925,-0.3130455818388431,0.3473661976152726,0.5757233455006215,0.17735712246137975,0.6362963511264481,-2.016367956694325,1.5159217558898679,-0.3955970542706075,1.5828057427406532,-1.6085167248258665,-1.1767148931766505,-0.19935666433011062,0.26481472518350824,-0.06539116454354969,0.9252265046376238,1.1881850274348236,-1.6085167248258665,1.6526470657265386,-0.3130455818388431,-0.46347580968426233,-1.3363092430380241,-0.7155798011822433,1.5047038445115761,-2.791977200598213,0.4315347028986383,0.6451954995318233,0.9937283242029796,-0.024115428327667412,-0.024115428327667412,-0.7997246722315551,-0.5022206010102215,-0.1983618957672409,-0.1868868405874438,-0.7155798011822433,-0.3955970542706075,1.5575674609234025,-1.6085167248258665,-0.024115428327667412,0.5537448786946838,0.9840311334567561,-0.263140101425086,-1.6036105945355024,0.3618813316558979,0.3473661976152726,0.4031570678717802,0.9707074408855241,-2.308323734949166,0.058436044104097,0.22353898896762592,1.4361088489376173,-0.7997246722315551,0.5537448786946838,0.7137904951057825,0.017160307888214696,0.5537448786946838,0.38864193383115475,-0.028440207746341397,0.20290112085968484,0.933669096955323,-0.5933459911521439,-0.8960376890227538,0.7188478235582126,0.47326779506516586,2.02625950289925,0.058436044104097,0.5124691424788017,0.4661360778104893,0.14306190533810806,-0.7155798011822433,0.17735712246137975,-2.13430977549922,-0.7155798011822433,1.7727196957612057,-2.1932025913143147,-0.3554528033686744,-1.6085167248258665,-0.10666690075943197,-0.3130455818388431,-0.6743549024414366,-0.18921837319119633,0.17735712246137975,0.26481472518350824,-0.978256746080914,-0.23049410940707854,-0.3955970542706075,-2.090289684928215,-1.4178697815640326,-0.35432131805472533,0.6775720873423303,2.0442465513161148,-1.397231913456091,0.615934917172112,-0.9487126996214933,0.37568741021460655,1.9983956462505619,-2.2907829761648744,0.1381549751847754,0.7896676062335157,-0.2835015353794223,0.9810173748941314,1.4272097005322422,-1.5215729004819079,-1.6085167248258665,1.3025935204233143,0.3270047636609364,0.9427553972408739,1.5575674609234025,-0.06539116454354969,0.1908929969496183,-1.6978937567237287,1.1059029592105594,0.17735712246137975,-0.22460871956432762,0.017160307888214696,1.5677768303218576,1.0624024358933333,0.8839507684217417,-1.6566180205078465,-2.7094257281664476,-0.23049410940707854,-0.2717698456229608,0.17735712246137975,0.12936257228180886,0.005428618131753224,0.3060904613993902,-0.6346217273680261,0.0997117803199793,-0.024115428327667405,0.2906481312894156,0.05843604410409708,-0.0021369615217297056,0.5070492338102676,-1.1384535606540789,-0.6281221984601149],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC4<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC4\",\"marker\":{\"color\":\"#ab63fa\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC4\",\"offsetgroup\":\"PC4\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.6438428420233844,0.003332021758036449,-1.7107934359632113,-0.9603390523592518,0.022348236174656512,0.5478903273299239,0.06142476964658775,1.2257069877798157,-1.031813003209138,-0.11242108938297925,-0.8250897150434575,-1.647866991279021,0.12139823578120805,1.2812486418265576,-1.6315534362779651,-1.9022901018692084,1.8673800180039009,0.05614979031062444,-1.2081588296423376,-0.7529408075525704,0.022348236174655475,0.24833805789095753,-1.1464162325657687,0.4524979240404773,-0.6064846839645993,-0.5047196967681322,1.0396308643492234,1.53761592527534,-1.24468134457187,0.05614979031062444,0.9728126436777366,0.11179019791761412,-1.24468134457187,-0.18235509634555314,1.5877039162193658,0.5117761758813176,1.0396308643492234,0.1147949024741045,-0.9723830034452061,-0.11242108938297925,-1.2675888294062694,-1.1817454964139236,1.0396308643492234,0.2600805634047313,-1.172829565794183,0.05614979031062444,1.0835416001863103,-1.24468134457187,1.725214630410396,-1.1223154966499922,1.342622814449084,0.1147949024741045,-0.1241512667224032,-1.1949521630281306,1.672460316470334,0.3303829008221225,-1.677776769427689,1.048750976709427,-0.7366071772480747,1.616074467630242,1.0916726432055999,-1.460953703034651,0.7661992864715053,1.3624328143703943,1.0396308643492234,1.725214630410396,-1.6209101916799182,0.12800156908831145,-0.3660496973189591,0.7673620019997597,0.042158236095965994,-0.20951387080706937,0.1147949024741045,1.600910582833573,0.042158236095965994,0.19807481345028966,0.05614979031062444,0.05614979031062444,0.9335679013395546,-1.737206769191621,0.10819156916700097,0.06196823601727653,-1.24468134457187,0.06857156932438001,-1.6513634361992753,-0.9215005098469727,1.1332603214803663,0.05614979031062444,-0.2813690798548678,0.09498490255279403,0.06196823601727653,0.12139823578120805,0.6499027089598025,0.9172944952045458,-0.13613176319582865,0.05614979031062444,1.1520356658736255,1.8401070711640817,-1.2279688295636482,0.5646028423381458,-1.7240001025774137,0.05614979031062444,0.8698326637396898,0.035554902788862516,0.6947253356216212,0.06857156932438001,-1.677776769427689,0.05614979031062444,0.002538236253344861,-0.709030071715483,0.21734134700091154,-0.11572275603653072,0.10819156916700097,-1.1355221632641992,-0.667882362160676,0.1147949024741045,0.27967044079178044,0.5976195088736632,1.9431969820615773,-0.2669996977124064,0.8003786685352773,0.05614979031062444,1.5579889163374,-1.5891752361524807,0.6519226646052741,1.6933572491330213,0.5478903273299238,0.09498490255279403,0.0423362027132014,-0.043685096896379595,1.0190359768274613,0.12139823578120805,-1.3138121625559935,-1.1949521630281306,0.0883815692456904,1.0850693098984965,-0.7595998483431113,0.8190259529283332,0.14781156900962208,1.4075457092051906,-0.06735704149139782,-1.6843801027347927,-1.1619354964926132,0.6197421061076108,0.13460490239541506,0.8135853351494841,0.07517490263148349,-0.6130880172717028,0.8077202464797719,-0.023875096975069027,-0.08330509673900062,-0.874495719366908,-0.11302009662096638,0.6716136690467587,0.05614979031062444,1.4358272501559852,-1.1530195658728724,0.05536490271017299,0.05614979031062444,1.9411935020100846,0.4985695092671107,-1.8032401022626559,0.08177823593858702,0.1412082357025186,1.3822428142917047,0.8796186682205193,-1.0362307424278836,-0.7008755231226432,0.05614979031062444,0.06857156932438001,0.17974130280376213,1.8541733513896939,-0.8601263372244466,0.1147949024741045,1.2510856654801779,0.8201886684565874,1.0415985427813692,-0.6115592507835937,0.05536490271017299,0.015744902867551817,0.1486218301082907,1.0396308643492234,1.4793486410396626,1.1920710720867322,-0.8799363371457571,0.44007614502672177,-0.709030071715483,-0.043685096896379595,1.1666558727196101,0.015744902867551817,-1.7504134358058283,0.12800156908831145,-1.1289188299570956,1.0289319122677394,-0.5170926288386731,-0.6095392951381222,0.5478903273299238,0.5117761758813176,-1.24468134457187,-1.6975867693489999,0.06857156932438001,1.9411935020100846,0.028951569481759063,0.9364943104886674,0.13460490239541506,-0.9618155416340365,0.5778095089523528,1.0652593099771859,-1.1530195658728724,1.356738998393834,0.09498490255279403,-1.7702234357271385,0.10819156916700097,0.05536490271017299,1.0835416001863103,-0.005291267194540012,-1.7173967692703105,0.5117761758813176,-0.5475458733580305,0.05536490271017299,0.14781156900962208,0.07517490263148349,-0.08330509673900062,0.05614979031062444,0.8124226196212297,0.10819156916700097,0.12800156908831145,0.11809656912765623,0.13460490239541506,-0.7509731291204249,-0.9603390523592537,0.06196823601727653,-0.13613176319582865,-0.2868096976337169,0.09498490255279403,-1.7364218815911694,0.4985695092671107,-0.9063496703741711,0.12800156908831145,0.035554902788862516,-0.21728953469618362,-0.709030071715483,0.06196823601727653,0.10819156916700097,1.0388459767487717,1.414475650002694,-1.7041901026561033,-1.0120030032878273,0.9141118240308197,0.4325361761960757,0.05614979031062444,-0.9901730477210452,0.11829134739435893,0.5910161755665597,-1.1242596695085867,-0.06153859578474574,-0.7529408075525704,-1.4081270365778231,-0.7867423616885394,-1.3336221624773041,0.5478903273299238,1.5189686408822838,0.7602152023219675,0.3184113022529357,-1.24468134457187,0.015744902867551817,1.2831928146851523,0.6240328421020773,-1.112215718422634,-1.4959903252156403,0.05614979031062444,0.0883815692456904,-1.2741921627133728,1.802507026966932,-1.24468134457187,-1.2000790070604512,-1.8362567687981732,0.05614979031062444,1.8343633514683835,-1.0846396696659657,0.31598877398084974,0.06857156932438001,0.14781156900962208,0.12800156908831145,0.44007614502672177,1.0190359768274613,0.05536490271017299,0.10819156916700097,-0.023875096975069027,-1.1926395657154931,-1.7107934359632069,0.183641976695301,1.2186124653153496,-1.6975867693489999,0.09498490255279403,1.0396308643492234,1.0817676432449448,-0.4425640668152662,0.3303829008221225,-0.021061355824907504,-1.24468134457187,1.2334740933910966,0.12800156908831145,-1.080141478264971,0.05614979031062444,1.3571392050581994,-0.7529408075525704,0.14200202120720826,1.5744972496051586,-0.589185828846123,-0.4398725847989027,0.6400427896167624,-1.025209669902034,0.06857156932438001,0.6551053357789999,-1.7107934359632069,-1.1619354964926132,-0.1031150966603111,-0.7839932259260535,0.03036460414401458,0.10819156916700097,0.07517490263148349,-1.2454662321723216,-0.9987963366736201,1.9411935020100846,-0.5191125844841447,-0.1493384298100356,-1.5574402806250434,-1.0582263364375515,0.20345197661661144,-0.5590975785106973,0.22724634696156673,0.8124226196212297,0.8333953350707944,-1.2007706087347825,0.05614979031062444,0.8718526193851612,-0.6618224952242615,-0.043685096896379595,-0.0985317189986792,1.035535245574843,-0.28797241316197125,0.06857156932438001,0.0883815692456904,0.015744902867551817,-1.5878935251444004,-1.8032401022626559,-1.2007706087347825,0.91923866806314,-0.023875096975069027,0.10158823585989751,0.3303829008221225,1.8234797424164972,0.6240328421020773,1.0396308643492234,0.06857156932438001,-0.9841889635715073,-1.7900334356484489,-1.24468134457187,-1.24468134457187,1.1247128153146682,1.581100582912262,-0.31712442190318774,0.022348236174655475,1.0835416001863103,0.05536490271017299,-0.19678793310054188,-0.7529408075525704,-1.24468134457187,-0.38502596269660305,1.7720537824475748,0.6702561752518017,0.12800156908831145,1.0916726432055999,-0.5734680174290818,-0.21728953469618362,-1.6843801027347927,2.018472853242753,1.1048793098198069,0.12800156908831145,-0.8329656948382639,0.12335473681415232,0.042158236095965994,-1.2345721628707518,0.05614979031062444,0.13460490239541506,1.6821078007012769,-1.7768267690342416,0.5478903273299238,-0.667882362160676,1.1803408947473082,0.1147949024741045,0.7541553353855527,0.04753539926228792,-0.9571563811855276,0.10819156916700097,-1.7438101024987243,-0.05028843020348309,0.10158823585989751,-1.7240001025774137,-0.00406509705375858,0.08177823593858702,-1.1421254965713028,0.6042228421807667,-1.6711734361205859,0.5646028423381458,-0.08330509673900062,0.91923866806314,0.1147949024741045,-0.7509731291204249,0.05614979031062444,0.5478903273299238,-0.45539184872574706,0.05614979031062444,-0.03708176358927599,-1.7364218815911694,-1.0780363363588623,-0.9723830034452061,0.05536490271017299,-0.9195563369883782,1.0396308643492234,0.6065354394934039,0.06196823601727653,-1.0384163365162413,0.8201886684565874,0.05614979031062444,-1.1883488297210272,-1.6645701028134825,0.5478903273299238,0.20669810240286488,0.34280467983587803,-1.2007706087347825,-1.2807954960204764,0.1412082357025186,0.6234893757313885,-0.46695744439820874,-0.6923280169569448,-0.5622055236734693,1.2404659264556823,0.048761569403069506,-1.150673002737001,0.12139823578120805,0.6240328421020773,-1.7240001025774137,0.05614979031062444,1.2965616894721341,-1.0892988301144746,0.028951569481759063,0.2468738967905242,0.184324680465394,0.8512611621335106,0.5918010631670111,1.3130790872602698,1.7232670272816901,0.05614979031062444,1.0454493100558755,-0.011211896731550848,-0.9813841203255841,-1.8692734353336906,0.5478903273299238,0.10104476948920882,0.028951569481759063,0.10764810279631236,-0.06349509681769003,0.05614979031062444,0.002538236253344861,0.05614979031062444,-0.11632176327451813,0.5478903273299238,0.2749380633457142,0.05614979031062444,0.002538236253344861,-0.9215005098469727,-0.48811587359409897,-1.6843801027347927,0.44007614502672177,0.5646028423381458,0.5976195088736632,0.10819156916700097,-1.0166621637363362,1.6292811342444489,0.05614979031062444,-0.07670176343189714,-1.9551167683260366,1.936593648754474,-0.7509731291204249,-0.9603390523592537,1.1830323767636715,0.05536490271017299,0.8796186682205193,0.5918010631670111,0.1147949024741045,0.1645146805440835,0.7681093111575282,0.1147949024741045,1.0396308643492234,-0.15716793325792078,0.05614979031062444,-0.5944407328786466,0.09498490255279403,0.1412082357025186,-1.1860362324083897,-1.24468134457187,-1.7834301023413452,-1.315680370278374,1.927970359801899,-1.071433003051759,0.05614979031062444,0.06857156932438001,0.08177823593858702,0.553708773036576,0.05614979031062444,0.18028476917445066,-0.37655442166711917,0.09498490255279403,0.16249472489861197,-1.6539268582154358,0.5478903273299238,-1.2411754961778552,0.042158236095965994,-1.4081270365778231,0.10819156916700097,1.0396308643492234,0.018558644017713614,1.0396308643492234,0.4777704400048855,-1.8692734353336906,0.3303829008221225,-0.00406509705375858,0.9371044951258563,-0.8667296705315504,1.0396308643492234,1.8102730758022898,-0.06735704149139782,-1.737206769191621,-0.8997463370670677,0.2853946357174181,-0.7537256951530218,0.05614979031062444,0.3137644699787764,-0.7621632703592714,-0.3132230308621308,-0.32642969747633804,0.5778095089523528,1.7166636939745867,-0.1691484297313462,-1.1289188299570956,1.0396308643492234,0.7211386688500351,0.8862220015276229,2.0845061863137877,0.07517490263148349,0.5478903273299238,1.0916726432055999,-1.6843801027347927,-0.15594176311713911,0.046991932891599045,1.0396308643492234,-0.9465131365874813,-1.2411754961778552,0.5478903273299238,-0.010668430360862033,0.06857156932438001,0.05614979031062444,-1.7364218815911694,0.7805686686139666,0.12800156908831145,-0.745154683413773,1.0396308643492234,0.042158236095965994,-0.15594176311713911,-0.9292665586823309,0.18028476917445066,-1.24468134457187,0.14781156900962208,0.12800156908831145,-1.7636201024200349,-1.096445629792267,-0.21728953469618362,0.042158236095965994,-1.0186063365949307,0.1466611816557171,-0.1031150966603111,1.3831523316222483,1.0396308643492234,-0.8078431371383074,-0.0568917635105865,1.855409476210637,0.10819156916700097,0.05614979031062444,0.022348236174655475,-0.14396126664371398,-0.0568917635105865,-0.5590975785106973,0.5447928424168352,0.7013286689287245,-1.7364218815911694,-0.07009843012479361,1.0396308643492234,1.8329602714862896,-0.8620705100830411,0.05614979031062444,0.05614979031062444,-0.03708176358927599,1.0058293102132543,0.5513961757239388,0.05536490271017299,0.07517490263148349,0.13461723056976468,-1.529006991751158,-0.5113230300752362,0.05614979031062444,-0.709030071715483,0.5478903273299238,0.022348236174655475,-0.8620705100830411,0.7145353355429317,-1.1751421631068202,-0.620310599736372,0.08177823593858702,1.5943072495264692,0.7311626642905161,1.7904630758809799,0.1147949024741045,0.1147949024741045,0.07004805859916285,0.3688154404376777,-1.4583902810184908,0.08177823593858702,0.5478903273299238,0.10912459207109511,-0.08330509673900062,1.3547190427483624,0.05614979031062444,-0.4631555240669169,-1.7240001025774137,0.042158236095965994,0.7343453354642422,-0.674462189894229,0.5918010631670111,0.12139823578120805,-0.38502596269660305,-0.41693219091719225,0.05614979031062444,0.2749380633457142,1.6750237384864939,0.12800156908831145,1.2510856654801779,0.05614979031062444,-1.6909834360418967,0.05614979031062444,-1.1223154966499922,0.1147949024741045,-1.24468134457187,-1.1662262324870791,0.7805686686139666,0.05614979031062444,-0.5730891327253558,0.10158823585989751,1.758922898620245,0.6088820026292754,0.9728126436777366,0.10764810279631236,0.015744902867551817,0.6570495086375946,0.7277420021571386,0.0883815692456904,0.05614979031062444,-0.03047843028217253,-0.9265374982232846,-1.117656336201483,0.913492574873254,-0.20876842957396727,0.048761569403069506,0.05614979031062444,0.13460490239541506,0.09168323589924231,-1.6579667695063787,-0.3878038700988642,1.8639569823763356,-1.24468134457187,1.2780424650792808,0.12139823578120805,1.5962644677089317,0.5428486695582404,1.907378902550248,1.2963994812993593,0.12800156908831145,0.13460490239541506,-0.7734257641148836,0.913492574873254,-0.04638775631194397,0.05614979031062444,1.0718626432842893,-0.14273509650293215,-0.08990843004610408,-0.03708176358927599,-1.24468134457187,1.873199520486476,0.0858181472295302,0.13539868790010495,0.18688810248155435,-0.13883442261139312,0.58012210626499,0.6174295087949738,-0.00406509705375858,-1.8362567687981732,0.1406647693318298,-1.6843801027347927,1.725214630410396,-0.4398725847989027,0.3303829008221225,0.746389286550195,0.06196823601727653,-0.08990843004610408,0.2376948132929107,-0.5323192510983517,-1.5528569029634116,0.5478903273299238,0.035554902788862516,-1.0430754969647502,0.6768595085589052,0.028951569481759063,-0.07670176343189714,0.7753660417947691,0.12139823578120805,-0.9016905099256622,-1.24468134457187,0.6240328421020773,-1.1685388297997166,-1.4015237032707197,1.1643093095837382,0.05614979031062444,0.10158823585989751,0.10158823585989751,0.06526990267082822,-0.8706180162487395,1.3349090428270518,0.05614979031062444,0.05614979031062444,0.27553627871982295,0.8256292862354369,0.6202327896954519,0.6306361754091808,0.048761569403069506,0.8058950691010031,0.8333953350707944,-1.737206769191621,0.8830393303538966,0.540502106422369,-0.8799363371457571,0.9140360412439428,0.035554902788862516,0.10158823585989751,-1.0205505094535254,0.9346244346686915,0.06857156932438001,0.13460490239541506,0.028951569481759063,-1.427937036499134,0.05614979031062444,-0.017271763667965526,1.1048793098198069,-0.6122307771544857,0.14781156900962208,-1.120839007375209,1.0396308643492234,-1.248767898825873,1.0835416001863103,0.042158236095965994,0.09498490255279403,-0.06349509681769003,-1.7509569021765168,1.0396308643492234,-0.9102380160913605,0.13460490239541506,0.6575835715345231,-1.5721234365140333,0.5478903273299238,-0.9583190967137819,-0.6414690289322622,-0.7866324307290911,0.2813547244264749,0.891666049576583,0.0883815692456904,0.0883815692456904,-1.6579667695063787,1.8277600181612796,1.082377827882133,1.2622723764489134,0.5478903273299238,0.14781156900962208,0.1486218301082907,1.0396308643492234,0.0883815692456904,-0.00406509705375858,-1.643283613617389,-1.7438101024987243,1.0388459767487717,-1.0516230031304483,0.028951569481759063,-1.0582263364375515,1.3454242274248958,1.7698238488292801,0.07517490263148349,0.048761569403069506,0.37986125766233864,-1.6579667695063787,-0.00406509705375858,-1.056825629949646,0.08177823593858702,-0.00406509705375858,0.022348236174655475,-0.29341303094082033,0.052063236056621214,0.3852295229244222,-1.6909834360418967,1.717826409502841,-0.03047843028217253,1.3228128145277733,-0.8678166032729279,0.07517490263148349,0.002538236253344861,-1.017205630107025,1.3756394809846013,0.5478903273299238,0.05614979031062444,1.915926408715946,0.5478903273299238,-1.6194337024051355,-0.11902442269008245,0.9335679013395546,1.0396308643492234,0.10158823585989751,0.13460490239541506,0.036967937451117885,0.1147949024741045,0.05614979031062444,0.042158236095965994,1.3138639748607215,0.12139823578120805,0.14781156900962208,-0.7537256951530218,1.0091309768668062,0.1412082357025186,-0.023875096975069027,1.9411935020100846,1.0058293102132543,0.6042228421807667,0.05694357581531446,1.5123653075751804,-0.2351817628023813,0.07052807035732424,-0.8897223416265865,-1.294002162634683,-1.1223154966499922,-1.150673002737001,0.08123476956789823,0.12141056395555763,1.0396308643492234,0.6683120023932071,0.6504461753304914,-1.6366802803102856,0.1486218301082907,0.09498490255279403,-1.8164467688768626,-0.19826442237532474,0.43268792411916684,0.05614979031062444,0.9126353347560369,0.08177823593858702,-0.9444931809420093,0.3646346354026602,-0.0568917635105865,-0.20486775568242813,-0.6546756955464693,0.12139823578120805,0.12800156908831145,0.05614979031062444,-0.1155279777698282,-1.1685388297997166,0.03555490278886247,-1.6843801027347927,0.06857156932437997,0.0883815692456904,-0.16951498626072273,0.07517490263148344,-1.335490370199685,-0.900905622325211,1.3394924204886838,0.5338987731152653],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC4<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC4\",\"marker\":{\"color\":\"#ab63fa\"},\"name\":\"PC4\",\"notched\":true,\"offsetgroup\":\"PC4\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.6438428420233844,0.003332021758036449,-1.7107934359632113,-0.9603390523592518,0.022348236174656512,0.5478903273299239,0.06142476964658775,1.2257069877798157,-1.031813003209138,-0.11242108938297925,-0.8250897150434575,-1.647866991279021,0.12139823578120805,1.2812486418265576,-1.6315534362779651,-1.9022901018692084,1.8673800180039009,0.05614979031062444,-1.2081588296423376,-0.7529408075525704,0.022348236174655475,0.24833805789095753,-1.1464162325657687,0.4524979240404773,-0.6064846839645993,-0.5047196967681322,1.0396308643492234,1.53761592527534,-1.24468134457187,0.05614979031062444,0.9728126436777366,0.11179019791761412,-1.24468134457187,-0.18235509634555314,1.5877039162193658,0.5117761758813176,1.0396308643492234,0.1147949024741045,-0.9723830034452061,-0.11242108938297925,-1.2675888294062694,-1.1817454964139236,1.0396308643492234,0.2600805634047313,-1.172829565794183,0.05614979031062444,1.0835416001863103,-1.24468134457187,1.725214630410396,-1.1223154966499922,1.342622814449084,0.1147949024741045,-0.1241512667224032,-1.1949521630281306,1.672460316470334,0.3303829008221225,-1.677776769427689,1.048750976709427,-0.7366071772480747,1.616074467630242,1.0916726432055999,-1.460953703034651,0.7661992864715053,1.3624328143703943,1.0396308643492234,1.725214630410396,-1.6209101916799182,0.12800156908831145,-0.3660496973189591,0.7673620019997597,0.042158236095965994,-0.20951387080706937,0.1147949024741045,1.600910582833573,0.042158236095965994,0.19807481345028966,0.05614979031062444,0.05614979031062444,0.9335679013395546,-1.737206769191621,0.10819156916700097,0.06196823601727653,-1.24468134457187,0.06857156932438001,-1.6513634361992753,-0.9215005098469727,1.1332603214803663,0.05614979031062444,-0.2813690798548678,0.09498490255279403,0.06196823601727653,0.12139823578120805,0.6499027089598025,0.9172944952045458,-0.13613176319582865,0.05614979031062444,1.1520356658736255,1.8401070711640817,-1.2279688295636482,0.5646028423381458,-1.7240001025774137,0.05614979031062444,0.8698326637396898,0.035554902788862516,0.6947253356216212,0.06857156932438001,-1.677776769427689,0.05614979031062444,0.002538236253344861,-0.709030071715483,0.21734134700091154,-0.11572275603653072,0.10819156916700097,-1.1355221632641992,-0.667882362160676,0.1147949024741045,0.27967044079178044,0.5976195088736632,1.9431969820615773,-0.2669996977124064,0.8003786685352773,0.05614979031062444,1.5579889163374,-1.5891752361524807,0.6519226646052741,1.6933572491330213,0.5478903273299238,0.09498490255279403,0.0423362027132014,-0.043685096896379595,1.0190359768274613,0.12139823578120805,-1.3138121625559935,-1.1949521630281306,0.0883815692456904,1.0850693098984965,-0.7595998483431113,0.8190259529283332,0.14781156900962208,1.4075457092051906,-0.06735704149139782,-1.6843801027347927,-1.1619354964926132,0.6197421061076108,0.13460490239541506,0.8135853351494841,0.07517490263148349,-0.6130880172717028,0.8077202464797719,-0.023875096975069027,-0.08330509673900062,-0.874495719366908,-0.11302009662096638,0.6716136690467587,0.05614979031062444,1.4358272501559852,-1.1530195658728724,0.05536490271017299,0.05614979031062444,1.9411935020100846,0.4985695092671107,-1.8032401022626559,0.08177823593858702,0.1412082357025186,1.3822428142917047,0.8796186682205193,-1.0362307424278836,-0.7008755231226432,0.05614979031062444,0.06857156932438001,0.17974130280376213,1.8541733513896939,-0.8601263372244466,0.1147949024741045,1.2510856654801779,0.8201886684565874,1.0415985427813692,-0.6115592507835937,0.05536490271017299,0.015744902867551817,0.1486218301082907,1.0396308643492234,1.4793486410396626,1.1920710720867322,-0.8799363371457571,0.44007614502672177,-0.709030071715483,-0.043685096896379595,1.1666558727196101,0.015744902867551817,-1.7504134358058283,0.12800156908831145,-1.1289188299570956,1.0289319122677394,-0.5170926288386731,-0.6095392951381222,0.5478903273299238,0.5117761758813176,-1.24468134457187,-1.6975867693489999,0.06857156932438001,1.9411935020100846,0.028951569481759063,0.9364943104886674,0.13460490239541506,-0.9618155416340365,0.5778095089523528,1.0652593099771859,-1.1530195658728724,1.356738998393834,0.09498490255279403,-1.7702234357271385,0.10819156916700097,0.05536490271017299,1.0835416001863103,-0.005291267194540012,-1.7173967692703105,0.5117761758813176,-0.5475458733580305,0.05536490271017299,0.14781156900962208,0.07517490263148349,-0.08330509673900062,0.05614979031062444,0.8124226196212297,0.10819156916700097,0.12800156908831145,0.11809656912765623,0.13460490239541506,-0.7509731291204249,-0.9603390523592537,0.06196823601727653,-0.13613176319582865,-0.2868096976337169,0.09498490255279403,-1.7364218815911694,0.4985695092671107,-0.9063496703741711,0.12800156908831145,0.035554902788862516,-0.21728953469618362,-0.709030071715483,0.06196823601727653,0.10819156916700097,1.0388459767487717,1.414475650002694,-1.7041901026561033,-1.0120030032878273,0.9141118240308197,0.4325361761960757,0.05614979031062444,-0.9901730477210452,0.11829134739435893,0.5910161755665597,-1.1242596695085867,-0.06153859578474574,-0.7529408075525704,-1.4081270365778231,-0.7867423616885394,-1.3336221624773041,0.5478903273299238,1.5189686408822838,0.7602152023219675,0.3184113022529357,-1.24468134457187,0.015744902867551817,1.2831928146851523,0.6240328421020773,-1.112215718422634,-1.4959903252156403,0.05614979031062444,0.0883815692456904,-1.2741921627133728,1.802507026966932,-1.24468134457187,-1.2000790070604512,-1.8362567687981732,0.05614979031062444,1.8343633514683835,-1.0846396696659657,0.31598877398084974,0.06857156932438001,0.14781156900962208,0.12800156908831145,0.44007614502672177,1.0190359768274613,0.05536490271017299,0.10819156916700097,-0.023875096975069027,-1.1926395657154931,-1.7107934359632069,0.183641976695301,1.2186124653153496,-1.6975867693489999,0.09498490255279403,1.0396308643492234,1.0817676432449448,-0.4425640668152662,0.3303829008221225,-0.021061355824907504,-1.24468134457187,1.2334740933910966,0.12800156908831145,-1.080141478264971,0.05614979031062444,1.3571392050581994,-0.7529408075525704,0.14200202120720826,1.5744972496051586,-0.589185828846123,-0.4398725847989027,0.6400427896167624,-1.025209669902034,0.06857156932438001,0.6551053357789999,-1.7107934359632069,-1.1619354964926132,-0.1031150966603111,-0.7839932259260535,0.03036460414401458,0.10819156916700097,0.07517490263148349,-1.2454662321723216,-0.9987963366736201,1.9411935020100846,-0.5191125844841447,-0.1493384298100356,-1.5574402806250434,-1.0582263364375515,0.20345197661661144,-0.5590975785106973,0.22724634696156673,0.8124226196212297,0.8333953350707944,-1.2007706087347825,0.05614979031062444,0.8718526193851612,-0.6618224952242615,-0.043685096896379595,-0.0985317189986792,1.035535245574843,-0.28797241316197125,0.06857156932438001,0.0883815692456904,0.015744902867551817,-1.5878935251444004,-1.8032401022626559,-1.2007706087347825,0.91923866806314,-0.023875096975069027,0.10158823585989751,0.3303829008221225,1.8234797424164972,0.6240328421020773,1.0396308643492234,0.06857156932438001,-0.9841889635715073,-1.7900334356484489,-1.24468134457187,-1.24468134457187,1.1247128153146682,1.581100582912262,-0.31712442190318774,0.022348236174655475,1.0835416001863103,0.05536490271017299,-0.19678793310054188,-0.7529408075525704,-1.24468134457187,-0.38502596269660305,1.7720537824475748,0.6702561752518017,0.12800156908831145,1.0916726432055999,-0.5734680174290818,-0.21728953469618362,-1.6843801027347927,2.018472853242753,1.1048793098198069,0.12800156908831145,-0.8329656948382639,0.12335473681415232,0.042158236095965994,-1.2345721628707518,0.05614979031062444,0.13460490239541506,1.6821078007012769,-1.7768267690342416,0.5478903273299238,-0.667882362160676,1.1803408947473082,0.1147949024741045,0.7541553353855527,0.04753539926228792,-0.9571563811855276,0.10819156916700097,-1.7438101024987243,-0.05028843020348309,0.10158823585989751,-1.7240001025774137,-0.00406509705375858,0.08177823593858702,-1.1421254965713028,0.6042228421807667,-1.6711734361205859,0.5646028423381458,-0.08330509673900062,0.91923866806314,0.1147949024741045,-0.7509731291204249,0.05614979031062444,0.5478903273299238,-0.45539184872574706,0.05614979031062444,-0.03708176358927599,-1.7364218815911694,-1.0780363363588623,-0.9723830034452061,0.05536490271017299,-0.9195563369883782,1.0396308643492234,0.6065354394934039,0.06196823601727653,-1.0384163365162413,0.8201886684565874,0.05614979031062444,-1.1883488297210272,-1.6645701028134825,0.5478903273299238,0.20669810240286488,0.34280467983587803,-1.2007706087347825,-1.2807954960204764,0.1412082357025186,0.6234893757313885,-0.46695744439820874,-0.6923280169569448,-0.5622055236734693,1.2404659264556823,0.048761569403069506,-1.150673002737001,0.12139823578120805,0.6240328421020773,-1.7240001025774137,0.05614979031062444,1.2965616894721341,-1.0892988301144746,0.028951569481759063,0.2468738967905242,0.184324680465394,0.8512611621335106,0.5918010631670111,1.3130790872602698,1.7232670272816901,0.05614979031062444,1.0454493100558755,-0.011211896731550848,-0.9813841203255841,-1.8692734353336906,0.5478903273299238,0.10104476948920882,0.028951569481759063,0.10764810279631236,-0.06349509681769003,0.05614979031062444,0.002538236253344861,0.05614979031062444,-0.11632176327451813,0.5478903273299238,0.2749380633457142,0.05614979031062444,0.002538236253344861,-0.9215005098469727,-0.48811587359409897,-1.6843801027347927,0.44007614502672177,0.5646028423381458,0.5976195088736632,0.10819156916700097,-1.0166621637363362,1.6292811342444489,0.05614979031062444,-0.07670176343189714,-1.9551167683260366,1.936593648754474,-0.7509731291204249,-0.9603390523592537,1.1830323767636715,0.05536490271017299,0.8796186682205193,0.5918010631670111,0.1147949024741045,0.1645146805440835,0.7681093111575282,0.1147949024741045,1.0396308643492234,-0.15716793325792078,0.05614979031062444,-0.5944407328786466,0.09498490255279403,0.1412082357025186,-1.1860362324083897,-1.24468134457187,-1.7834301023413452,-1.315680370278374,1.927970359801899,-1.071433003051759,0.05614979031062444,0.06857156932438001,0.08177823593858702,0.553708773036576,0.05614979031062444,0.18028476917445066,-0.37655442166711917,0.09498490255279403,0.16249472489861197,-1.6539268582154358,0.5478903273299238,-1.2411754961778552,0.042158236095965994,-1.4081270365778231,0.10819156916700097,1.0396308643492234,0.018558644017713614,1.0396308643492234,0.4777704400048855,-1.8692734353336906,0.3303829008221225,-0.00406509705375858,0.9371044951258563,-0.8667296705315504,1.0396308643492234,1.8102730758022898,-0.06735704149139782,-1.737206769191621,-0.8997463370670677,0.2853946357174181,-0.7537256951530218,0.05614979031062444,0.3137644699787764,-0.7621632703592714,-0.3132230308621308,-0.32642969747633804,0.5778095089523528,1.7166636939745867,-0.1691484297313462,-1.1289188299570956,1.0396308643492234,0.7211386688500351,0.8862220015276229,2.0845061863137877,0.07517490263148349,0.5478903273299238,1.0916726432055999,-1.6843801027347927,-0.15594176311713911,0.046991932891599045,1.0396308643492234,-0.9465131365874813,-1.2411754961778552,0.5478903273299238,-0.010668430360862033,0.06857156932438001,0.05614979031062444,-1.7364218815911694,0.7805686686139666,0.12800156908831145,-0.745154683413773,1.0396308643492234,0.042158236095965994,-0.15594176311713911,-0.9292665586823309,0.18028476917445066,-1.24468134457187,0.14781156900962208,0.12800156908831145,-1.7636201024200349,-1.096445629792267,-0.21728953469618362,0.042158236095965994,-1.0186063365949307,0.1466611816557171,-0.1031150966603111,1.3831523316222483,1.0396308643492234,-0.8078431371383074,-0.0568917635105865,1.855409476210637,0.10819156916700097,0.05614979031062444,0.022348236174655475,-0.14396126664371398,-0.0568917635105865,-0.5590975785106973,0.5447928424168352,0.7013286689287245,-1.7364218815911694,-0.07009843012479361,1.0396308643492234,1.8329602714862896,-0.8620705100830411,0.05614979031062444,0.05614979031062444,-0.03708176358927599,1.0058293102132543,0.5513961757239388,0.05536490271017299,0.07517490263148349,0.13461723056976468,-1.529006991751158,-0.5113230300752362,0.05614979031062444,-0.709030071715483,0.5478903273299238,0.022348236174655475,-0.8620705100830411,0.7145353355429317,-1.1751421631068202,-0.620310599736372,0.08177823593858702,1.5943072495264692,0.7311626642905161,1.7904630758809799,0.1147949024741045,0.1147949024741045,0.07004805859916285,0.3688154404376777,-1.4583902810184908,0.08177823593858702,0.5478903273299238,0.10912459207109511,-0.08330509673900062,1.3547190427483624,0.05614979031062444,-0.4631555240669169,-1.7240001025774137,0.042158236095965994,0.7343453354642422,-0.674462189894229,0.5918010631670111,0.12139823578120805,-0.38502596269660305,-0.41693219091719225,0.05614979031062444,0.2749380633457142,1.6750237384864939,0.12800156908831145,1.2510856654801779,0.05614979031062444,-1.6909834360418967,0.05614979031062444,-1.1223154966499922,0.1147949024741045,-1.24468134457187,-1.1662262324870791,0.7805686686139666,0.05614979031062444,-0.5730891327253558,0.10158823585989751,1.758922898620245,0.6088820026292754,0.9728126436777366,0.10764810279631236,0.015744902867551817,0.6570495086375946,0.7277420021571386,0.0883815692456904,0.05614979031062444,-0.03047843028217253,-0.9265374982232846,-1.117656336201483,0.913492574873254,-0.20876842957396727,0.048761569403069506,0.05614979031062444,0.13460490239541506,0.09168323589924231,-1.6579667695063787,-0.3878038700988642,1.8639569823763356,-1.24468134457187,1.2780424650792808,0.12139823578120805,1.5962644677089317,0.5428486695582404,1.907378902550248,1.2963994812993593,0.12800156908831145,0.13460490239541506,-0.7734257641148836,0.913492574873254,-0.04638775631194397,0.05614979031062444,1.0718626432842893,-0.14273509650293215,-0.08990843004610408,-0.03708176358927599,-1.24468134457187,1.873199520486476,0.0858181472295302,0.13539868790010495,0.18688810248155435,-0.13883442261139312,0.58012210626499,0.6174295087949738,-0.00406509705375858,-1.8362567687981732,0.1406647693318298,-1.6843801027347927,1.725214630410396,-0.4398725847989027,0.3303829008221225,0.746389286550195,0.06196823601727653,-0.08990843004610408,0.2376948132929107,-0.5323192510983517,-1.5528569029634116,0.5478903273299238,0.035554902788862516,-1.0430754969647502,0.6768595085589052,0.028951569481759063,-0.07670176343189714,0.7753660417947691,0.12139823578120805,-0.9016905099256622,-1.24468134457187,0.6240328421020773,-1.1685388297997166,-1.4015237032707197,1.1643093095837382,0.05614979031062444,0.10158823585989751,0.10158823585989751,0.06526990267082822,-0.8706180162487395,1.3349090428270518,0.05614979031062444,0.05614979031062444,0.27553627871982295,0.8256292862354369,0.6202327896954519,0.6306361754091808,0.048761569403069506,0.8058950691010031,0.8333953350707944,-1.737206769191621,0.8830393303538966,0.540502106422369,-0.8799363371457571,0.9140360412439428,0.035554902788862516,0.10158823585989751,-1.0205505094535254,0.9346244346686915,0.06857156932438001,0.13460490239541506,0.028951569481759063,-1.427937036499134,0.05614979031062444,-0.017271763667965526,1.1048793098198069,-0.6122307771544857,0.14781156900962208,-1.120839007375209,1.0396308643492234,-1.248767898825873,1.0835416001863103,0.042158236095965994,0.09498490255279403,-0.06349509681769003,-1.7509569021765168,1.0396308643492234,-0.9102380160913605,0.13460490239541506,0.6575835715345231,-1.5721234365140333,0.5478903273299238,-0.9583190967137819,-0.6414690289322622,-0.7866324307290911,0.2813547244264749,0.891666049576583,0.0883815692456904,0.0883815692456904,-1.6579667695063787,1.8277600181612796,1.082377827882133,1.2622723764489134,0.5478903273299238,0.14781156900962208,0.1486218301082907,1.0396308643492234,0.0883815692456904,-0.00406509705375858,-1.643283613617389,-1.7438101024987243,1.0388459767487717,-1.0516230031304483,0.028951569481759063,-1.0582263364375515,1.3454242274248958,1.7698238488292801,0.07517490263148349,0.048761569403069506,0.37986125766233864,-1.6579667695063787,-0.00406509705375858,-1.056825629949646,0.08177823593858702,-0.00406509705375858,0.022348236174655475,-0.29341303094082033,0.052063236056621214,0.3852295229244222,-1.6909834360418967,1.717826409502841,-0.03047843028217253,1.3228128145277733,-0.8678166032729279,0.07517490263148349,0.002538236253344861,-1.017205630107025,1.3756394809846013,0.5478903273299238,0.05614979031062444,1.915926408715946,0.5478903273299238,-1.6194337024051355,-0.11902442269008245,0.9335679013395546,1.0396308643492234,0.10158823585989751,0.13460490239541506,0.036967937451117885,0.1147949024741045,0.05614979031062444,0.042158236095965994,1.3138639748607215,0.12139823578120805,0.14781156900962208,-0.7537256951530218,1.0091309768668062,0.1412082357025186,-0.023875096975069027,1.9411935020100846,1.0058293102132543,0.6042228421807667,0.05694357581531446,1.5123653075751804,-0.2351817628023813,0.07052807035732424,-0.8897223416265865,-1.294002162634683,-1.1223154966499922,-1.150673002737001,0.08123476956789823,0.12141056395555763,1.0396308643492234,0.6683120023932071,0.6504461753304914,-1.6366802803102856,0.1486218301082907,0.09498490255279403,-1.8164467688768626,-0.19826442237532474,0.43268792411916684,0.05614979031062444,0.9126353347560369,0.08177823593858702,-0.9444931809420093,0.3646346354026602,-0.0568917635105865,-0.20486775568242813,-0.6546756955464693,0.12139823578120805,0.12800156908831145,0.05614979031062444,-0.1155279777698282,-1.1685388297997166,0.03555490278886247,-1.6843801027347927,0.06857156932437997,0.0883815692456904,-0.16951498626072273,0.07517490263148344,-1.335490370199685,-0.900905622325211,1.3394924204886838,0.5338987731152653],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC5<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC5\",\"marker\":{\"color\":\"#FFA15A\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC5\",\"offsetgroup\":\"PC5\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.08420908214213454,0.014288412238867586,0.13774138955614146,0.9373123787055897,-0.16425719080725296,-0.3023994269378847,-0.11695794215627245,0.7446091527311998,-0.4033453039809695,-0.4391047242822147,1.04552428086114,0.20028820736127764,0.5685796567851344,-1.2741988887972107,0.7240108676300501,-1.279076515789146,0.2508089455234868,0.08582887153623564,-0.4931965546053475,-0.8283312536040456,-0.16425719080725432,1.1853442731673598,0.28692677931643684,2.454038267805656,0.3137708855022045,-1.363046627149758,-0.6906277254120057,1.4344209093951346,-0.44010295512992503,0.08582887153623564,-1.1849927369529583,0.7361282626346125,-0.44010295512992503,-1.6787866758315244,-0.9853822538430711,-0.8929067146477259,-0.6906277254120057,0.5197238669456421,0.03635680457446358,-0.4391047242822147,-0.9328986631607807,-0.2977733952473771,-0.6906277254120057,-0.11283485351498164,0.09150361995846665,0.08582887153623564,-0.6890584219019087,-0.44010295512992503,-1.1828586291096217,0.14192871330805606,0.3947582948001444,0.5197238669456421,-0.8483116945293342,-0.3954849749263623,-0.841927966701615,1.7117609642051372,0.38202033875360203,-0.6231511537987935,0.5659101637542747,-0.011808682025010857,-0.30558851984209173,1.5025904226849094,0.5864580085026975,0.5413256643186221,-0.6906277254120057,-1.1828586291096217,0.641546857105222,0.6174354466246272,-0.33707504052041387,-0.21678598594943704,-0.01768982128877647,-0.393791159414514,0.5197238669456421,-0.8876706741640858,-0.01768982128877647,0.9746735446552321,0.08582887153623564,0.08582887153623564,1.012914244310591,-0.0576817698018313,0.47086807710614936,0.12887754822970127,-0.44010295512992503,0.17773333806919378,0.5774434981115723,-0.8020519517515178,0.06062809497830368,0.08582887153623564,1.1012942218451243,0.3731564974271642,0.12887754822970127,0.5685796567851344,-0.11277061840435547,-0.32235789468302967,-1.3367961469550766,0.08582887153623564,-0.42321729224076626,0.5596423694895131,-0.6397639241238254,-0.5020603959317853,0.040029809877154,0.08582887153623564,1.4338105461167394,-0.06654561112826916,-0.7541996741838557,0.17773333806919378,0.38202033875360203,0.08582887153623564,-0.31082456032573197,-0.8267619500939486,0.875405423787736,-0.4635326192019611,0.47086807710614936,0.04421713362907076,-0.19901309883666912,0.5197238669456421,-2.2868660285833617,-0.2577814467343224,1.161159416717581,0.395761807071975,0.027492963248025755,0.08582887153623564,-1.2052333081207875,0.7957380112007781,-0.17843051858651574,-0.20368961641118968,-0.30239942693788496,0.3731564974271642,-0.6701893202341013,-0.6528150892021803,-0.8430022080765102,0.5685796567851344,-1.274889192037229,-0.3954849749263623,0.3243007075876716,-0.35444430968158436,1.2882466888700923,0.9773043272186382,0.7640028161431047,1.547818411681605,-1.3205621573016617,0.33316454891410935,-0.15120602572889938,0.22920714815050666,0.6662912364641197,0.125204542927011,0.2265891279086864,0.264915095662712,-0.07939894219654875,-0.5062477196837023,-0.9459498282391355,1.572437646618987,-1.1658008825168522,-0.9251949386220795,0.08582887153623564,-2.1090654201514005,0.23807098947694427,0.08002175839020867,0.08582887153623564,-1.2509773020301207,-0.9906182943267109,-0.5462396681967571,0.275444917748179,0.7151470263036123,0.6878930338370999,0.6137624413219369,0.5370256039815129,-1.5994652472926139,0.08582887153623564,0.17773333806919378,0.5166107845686204,0.15309736584450145,0.8669052318458373,0.5197238669456421,0.3096195553516222,0.17406033276650357,-0.6175458496285657,-0.18532207087102281,0.08002175839020867,-0.2131129806467468,-1.3886808302221607,-0.6906277254120057,0.19147480638756703,1.5494096883718453,0.7203378623273596,2.3621338012726985,-0.8267619500939486,-0.6528150892021803,-1.288995342176454,-0.2131129806467468,-0.15539334948081635,0.6174354466246272,0.09307292346856355,1.5572700174264527,0.43299908669971326,-0.25098197105318326,-0.30239942693788496,-0.8929067146477259,-0.44010295512992503,0.2354529692351244,0.17773333806919378,-1.2509773020301207,-0.11540140096776164,-1.4536995810701676,0.6662912364641197,1.2488077692737176,-0.4043488162528002,-0.5010116792000622,0.23807098947694427,1.0913121927835039,0.3731564974271642,-0.3019607189992943,0.47086807710614936,0.08002175839020867,-0.6890584219019087,0.031092522581532393,0.08888559971664647,-0.8929067146477259,0.3688957277060633,0.08002175839020867,0.7640028161431047,0.2265891279086864,-0.9459498282391355,0.08582887153623564,0.9284485373791453,0.47086807710614936,0.6174354466246272,0.5441517618653883,0.6662912364641197,-0.7552493778206055,0.9373123787055834,0.12887754822970127,-1.3367961469550766,0.24919443755349716,0.3731564974271642,-0.051874656655804284,-0.9906182943267109,0.5249147029693895,0.6174354466246272,-0.06654561112826916,-1.2149902485680695,-0.8267619500939486,0.12887754822970127,0.47086807710614936,-0.6964348385580325,0.14151359113447715,0.18659717939563175,-0.2567779344624918,0.5465459999512655,-1.479176192721637,0.08582887153623564,-0.1758704651261745,0.14256857619534735,-0.306637236573815,-1.0873263617338658,-1.277513480608196,-0.8283312536040456,1.8934367414008506,-1.0784173159475354,-1.4214565615557067,-0.30239942693788496,0.4846095454245221,-0.5114772661749034,1.5425823711979647,-0.44010295512992503,-0.2131129806467468,-0.044943813755288775,-0.06235828737635203,-0.18637078760274617,1.3239713736696068,0.08582887153623564,0.3243007075876716,-0.9817544530002733,0.20084773027039707,-0.44010295512992503,-0.7558361553339891,-0.7905186173942201,0.08582887153623564,0.006529996326023879,-0.7941916226969103,-2.0181591844661524,0.17773333806919378,0.7640028161431047,0.6174354466246272,2.3621338012726985,-0.8430022080765102,0.08002175839020867,0.47086807710614936,-0.5062477196837023,-0.05506374956001126,0.13774138955613913,1.2677348377230044,0.3111760965401331,0.2354529692351244,0.3731564974271642,-0.6906277254120057,-0.37887220460133086,2.3384096259416536,1.7117609642051372,-0.24679464730126616,-0.44010295512992503,-0.7946303306355011,0.6174354466246272,0.535456300471416,0.08582887153623564,2.5288774071603455,-0.8283312536040456,1.0402599988682086,-1.0830938335220561,0.1414208888512683,1.0849284649557842,0.999874901361719,-0.35448951414147706,0.17773333806919378,-1.0473344132208111,0.13774138955613913,-0.15120602572889938,-1.0925171977576134,1.0271636293299613,-0.8393679132412737,0.47086807710614936,0.2265891279086864,-0.4459100682759518,-0.15906635478350672,-1.2509773020301207,0.4986589868818731,-1.4345077266340618,0.9499291652963342,-0.5987684633389401,1.4143022072414815,-0.932333858827541,0.9486891085469749,0.9284485373791453,0.27177191244548876,-0.438533651619828,0.08582887153623564,1.368150645934579,-0.3959927993831502,-0.6528150892021803,-0.9780015077359606,1.6061258072659452,1.052438432005632,0.17773333806919378,0.3243007075876716,-0.2131129806467468,0.8858258063026848,-0.5462396681967571,-0.438533651619828,0.9068971803588921,-0.5062477196837023,0.42201228726665674,1.7117609642051372,-0.45582889466326004,-0.06235828737635203,-0.6906277254120057,0.17773333806919378,0.9220648095514267,-0.4485280885177722,-0.44010295512992503,-0.44010295512992503,-1.2174827699031108,-1.0342380436825636,-1.9536342093064851,-0.16425719080725432,-0.6890584219019087,0.08002175839020867,-1.385725382763753,-0.8283312536040456,-0.44010295512992503,1.410114883489565,0.1367443712767476,0.279632241500096,0.6174354466246272,-0.30558851984209173,0.558049834699667,-1.2149902485680695,0.33316454891410935,0.5838337199317307,-0.20787694016310673,0.6174354466246272,-1.4204078448239836,0.0904486348975961,-0.01768982128877647,-0.6886197139633178,0.08582887153623564,0.6662912364641197,0.4767492163699148,-0.3508165088387867,-0.30239942693788496,-0.19901309883666912,1.1402027181247258,0.5197238669456421,-0.31449756562842235,0.4219388412974729,0.06840848407128836,0.47086807710614936,-0.1065375596413238,-0.7016708790416727,0.42201228726665674,0.040029809877154,-0.3596803501652246,0.275444917748179,-0.004638656210421594,-0.20892565689482978,0.4308761285930943,-0.5020603959317853,-0.9459498282391355,0.9068971803588921,0.5197238669456421,-0.7552493778206055,0.08582887153623564,-0.30239942693788496,0.6467956599104482,0.08582887153623564,-0.6039592993626873,-0.051874656655804284,-0.7453358328574178,0.03635680457446358,0.08002175839020867,0.42720312329040433,-0.6906277254120057,0.13149556847152138,0.12887754822970127,-0.4522010938204622,0.17406033276650357,0.08582887153623564,-0.3466291850868697,0.4797319184325872,-0.30239942693788496,0.9578694343125645,1.8036654307380953,-0.438533651619828,-1.0306102428397659,0.7151470263036123,-0.30819377776232587,2.077326566401523,-0.3213543824111992,-0.5734936606632693,-0.7640896333820316,0.03116596855071608,-1.2827495210918365,0.5685796567851344,-0.06235828737635203,0.040029809877154,0.08582887153623564,3.1343463202558612,0.3862076625055191,-0.11540140096776164,-0.2105464331939664,0.6311264745902732,-0.8109157930779554,-0.30083012342778803,0.929497254110869,-0.3854217478035137,0.08582887153623564,-0.6475790487185401,-0.6543716303906911,0.862212022515293,-1.034797566591683,-0.30239942693788496,0.1761767968806832,-0.11540140096776164,0.22503258672017568,-0.7993824587206577,0.08582887153623564,-0.31082456032573197,0.08582887153623564,-1.1902287774365985,-0.30239942693788496,-0.0029093263761232244,0.08582887153623564,-0.31082456032573197,-0.8020519517515178,0.8085978362614965,0.33316454891410935,2.3621338012726985,-0.5020603959317853,-0.2577814467343224,0.47086807710614936,0.9236213507399375,0.08590289765397452,0.08582887153623564,-0.897094038399643,-1.6699228345050865,1.1123036268780886,-0.7552493778206055,0.9373123787055834,-0.11327844286114334,0.08002175839020867,0.6137624413219369,-0.30083012342778803,0.5197238669456421,0.4845591050717954,-2.6995222219772286,0.5197238669456421,-0.6906277254120057,-1.092590643726797,0.08582887153623564,1.214726459633324,0.3731564974271642,0.7151470263036123,-0.006207959720518585,-0.44010295512992503,-0.39967229867827925,2.5774177991537464,1.1291077372207563,-0.6964800430179251,0.08582887153623564,0.17773333806919378,0.275444917748179,-0.25935075024441934,0.08582887153623564,0.762446274954594,-2.393336317861918,0.3731564974271642,0.550219005253956,0.39726790790775895,-0.30239942693788496,-0.7374755038028105,-0.01768982128877647,1.8934367414008506,0.47086807710614936,-0.6906277254120057,0.046340091735689655,-0.6906277254120057,-0.821192333398584,-1.034797566591683,1.7117609642051372,-0.3596803501652246,-0.17579052516455182,0.8180494420063451,-0.6906277254120057,-0.553540474342245,-1.3205621573016617,-0.0576817698018313,0.5737704928088818,1.2983034220005014,-0.8341383667500726,0.08582887153623564,1.0155955594709336,1.1080710986662792,0.05377127819552688,-0.04394030148345821,-0.4043488162528002,-0.4342775376430065,-1.5810750961525393,0.09307292346856355,-0.6906277254120057,-0.5587765148258853,0.6626182311614295,1.0723916183266569,0.2265891279086864,-0.30239942693788496,-0.30558851984209173,0.33316454891410935,-1.483363516473554,0.1761033509114991,-0.6906277254120057,-0.014055526453539838,-0.7374755038028105,-0.30239942693788496,-0.4085361400047172,0.17773333806919378,0.08582887153623564,-0.051874656655804284,-0.11907440627045197,0.6174354466246272,-0.7122007011271398,-0.6906277254120057,-0.01768982128877647,-1.483363516473554,-0.04766374713887538,0.762446274954594,-0.44010295512992503,0.7640028161431047,0.6174354466246272,-0.25310492915980165,0.0915163822800527,-1.2149902485680695,-0.01768982128877647,-0.3056337243019845,-0.1401392863342205,-1.0925171977576134,1.2867353521414742,-0.6906277254120057,1.0119160601758044,-0.7505266688811651,-0.703220926237745,0.47086807710614936,0.08582887153623564,-0.16425719080725432,-0.994879064047812,-0.7505266688811651,-0.932333858827541,-0.6486277654502631,-0.7053438843443631,-0.051874656655804284,-0.8482382485601503,-0.6906277254120057,0.2649510892640468,-0.3623498431960843,0.08582887153623564,0.08582887153623564,-0.6039592993626873,-0.9407137877554955,-0.5997719756107706,0.08002175839020867,0.2265891279086864,-1.0410948604653405,1.0796924244721442,-1.4119024169892502,0.08582887153623564,-0.8267619500939486,-0.30239942693788496,-0.16425719080725432,-0.3623498431960843,-0.6076323046653778,-0.24891760540788452,1.2651387906613276,0.275444917748179,-0.9365264640035782,0.40783895948739524,-0.700107843860723,0.5197238669456421,0.5197238669456421,-0.1337620524989406,-1.627312865750212,1.682766012888723,0.275444917748179,-0.30239942693788496,-0.08646280384795904,-0.9459498282391355,1.1569720929656642,0.08582887153623564,0.15934318692911945,0.040029809877154,-0.01768982128877647,-0.46106493514690006,-1.4040420879346436,-0.30083012342778803,0.5685796567851344,1.410114883489565,0.5013337158055675,0.08582887153623564,-0.0029093263761232244,-0.6617523764978014,0.6174354466246272,0.3096195553516222,0.08582887153623564,0.28430875907461683,0.08582887153623564,0.14192871330805606,0.5197238669456421,-0.44010295512992503,0.1403594097979592,-0.11907440627045197,0.08582887153623564,-1.035852551652553,0.42201228726665674,-1.2558821836263203,-1.3893249420972593,-1.1849927369529583,0.22503258672017568,-0.2131129806467468,0.1819206618211107,-0.5099207249863926,0.3243007075876716,0.08582887153623564,-0.555103509523195,1.1873984410490732,-1.0384705718943734,1.5956254847893736,-1.874209835189495,0.03116596855071608,0.08582887153623564,0.6662912364641197,0.34872860250741794,0.5285877082720798,-1.7128974850808139,0.57488993864367,-0.44010295512992503,0.7508782050955664,0.5685796567851344,-0.1583760515434887,-1.8778828404921855,-1.0499587017917782,0.052767765923696516,0.6174354466246272,0.6662912364641197,2.239614594029216,1.5956254847893736,0.04945317411271075,0.08582887153623564,-0.4521558893605697,-1.3856519367945692,-0.9948056180786281,-0.6039592993626873,-0.44010295512992503,-0.49099365653710625,0.14412511738385825,0.9914042090287161,0.8113020647940866,-0.6345278836401853,-0.06392759088644905,-0.11121407721584457,-0.3596803501652246,-0.7905186173942201,0.4693115359176385,0.33316454891410935,-1.1828586291096217,1.0849284649557842,1.7117609642051372,0.4398906389842199,0.12887754822970127,-0.9948056180786281,1.2678082836921878,0.40094740720288796,1.0644448553179875,-0.30239942693788496,-0.06654561112826916,0.728198191381967,0.3284880313395887,-0.11540140096776164,-0.897094038399643,0.8154893885460037,0.5685796567851344,-0.65548458223304,-0.44010295512992503,-0.06235828737635203,-0.20006181556839203,1.9422925312403427,0.23182516839232686,0.08582887153623564,0.42201228726665674,0.42201228726665674,0.15330544314944752,-1.640460708077499,1.0104047234471862,0.08582887153623564,0.08582887153623564,1.3865745456713572,1.026160117058131,0.8533075318432417,-0.0135024975368595,0.03116596855071608,-0.41532222768442895,0.27177191244548876,-0.0576817698018313,1.5315221257957248,-0.35706232992340453,0.7203378623273596,1.841460975175348,-0.06654561112826916,0.42201228726665674,-1.5348887993439062,1.0207311706849096,0.17773333806919378,0.6662912364641197,-0.11540140096776164,1.746869371882373,0.08582887153623564,-0.4573919298442098,-0.20787694016310673,1.0024991899326863,0.7640028161431047,-0.16956667726007815,-0.6906277254120057,-0.4703379631956982,-0.6890584219019087,-0.01768982128877647,0.3731564974271642,-0.7993824587206577,-0.4012288398667904,-0.6906277254120057,-1.9335954471144547,0.6662912364641197,0.3479734101296756,1.1637129761854834,-0.30239942693788496,0.8716524785234229,-0.003589939478698508,2.14190301435023,1.4296232223648222,-0.5119739408949731,0.3243007075876716,0.3243007075876716,0.5285877082720798,-0.04232579351346872,0.8990368513042848,0.4729910352127676,-0.30239942693788496,0.7640028161431047,-1.3886808302221607,-0.6906277254120057,0.3243007075876716,-0.3596803501652246,0.3148038973829309,-0.1065375596413238,-0.6964348385580325,-0.5499126734994475,-0.11540140096776164,-0.5987684633389401,2.3615974641120405,0.36206042993013454,0.2265891279086864,0.03116596855071608,1.916624579571237,0.5285877082720798,-0.3596803501652246,0.3846511213170081,0.275444917748179,-0.3596803501652246,-0.16425719080725432,0.20033864771400456,0.05559386347046243,2.036947382738918,0.28430875907461683,-1.2375215320951412,-0.555103509523195,0.24819092528166695,0.3263784612343974,0.2265891279086864,-0.31082456032573197,0.6777858603539637,0.6390372439976074,-0.30239942693788496,0.08582887153623564,0.22815216308963598,-0.30239942693788496,0.33005146653708717,-0.48796051412170743,1.012914244310591,-0.6906277254120057,0.42201228726665674,0.6662912364641197,-0.7905121234017811,0.5197238669456421,0.08582887153623564,-0.01768982128877647,0.9353043672568959,0.5685796567851344,0.7640028161431047,-0.8341383667500726,-0.916285892835749,0.7151470263036123,-0.5062477196837023,-1.2509773020301207,-0.9407137877554955,-0.20892565689482978,0.41094184410083207,0.43575375558502955,-2.0696329945474656,-0.30039768381834414,1.5403859671221625,-1.128321822518751,0.14192871330805606,-1.2827495210918365,0.029609427362205436,-1.1388064401443256,-0.6906277254120057,-0.949622833541826,0.13306487198161812,0.3636596872224232,-1.3886808302221607,0.3731564974271642,-0.6439512478757423,-1.0742299921956184,2.3074708982871783,0.08582887153623564,0.8580413905193995,0.275444917748179,-0.07971542663570026,1.8845729000744127,-0.7505266688811651,-1.123085782035111,-0.10130151915768382,0.5685796567851344,0.6174354466246272,0.08582887153623564,-0.8651158048720028,-0.200061815568392,-0.06654561112826914,0.33316454891410935,0.17773333806919386,0.3243007075876716,-1.6945588067297788,0.22658912790868646,2.4308504296352687,-0.649677469087013,1.1249204134688393,-0.4059181197628971],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC5<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC5\",\"marker\":{\"color\":\"#FFA15A\"},\"name\":\"PC5\",\"notched\":true,\"offsetgroup\":\"PC5\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.08420908214213454,0.014288412238867586,0.13774138955614146,0.9373123787055897,-0.16425719080725296,-0.3023994269378847,-0.11695794215627245,0.7446091527311998,-0.4033453039809695,-0.4391047242822147,1.04552428086114,0.20028820736127764,0.5685796567851344,-1.2741988887972107,0.7240108676300501,-1.279076515789146,0.2508089455234868,0.08582887153623564,-0.4931965546053475,-0.8283312536040456,-0.16425719080725432,1.1853442731673598,0.28692677931643684,2.454038267805656,0.3137708855022045,-1.363046627149758,-0.6906277254120057,1.4344209093951346,-0.44010295512992503,0.08582887153623564,-1.1849927369529583,0.7361282626346125,-0.44010295512992503,-1.6787866758315244,-0.9853822538430711,-0.8929067146477259,-0.6906277254120057,0.5197238669456421,0.03635680457446358,-0.4391047242822147,-0.9328986631607807,-0.2977733952473771,-0.6906277254120057,-0.11283485351498164,0.09150361995846665,0.08582887153623564,-0.6890584219019087,-0.44010295512992503,-1.1828586291096217,0.14192871330805606,0.3947582948001444,0.5197238669456421,-0.8483116945293342,-0.3954849749263623,-0.841927966701615,1.7117609642051372,0.38202033875360203,-0.6231511537987935,0.5659101637542747,-0.011808682025010857,-0.30558851984209173,1.5025904226849094,0.5864580085026975,0.5413256643186221,-0.6906277254120057,-1.1828586291096217,0.641546857105222,0.6174354466246272,-0.33707504052041387,-0.21678598594943704,-0.01768982128877647,-0.393791159414514,0.5197238669456421,-0.8876706741640858,-0.01768982128877647,0.9746735446552321,0.08582887153623564,0.08582887153623564,1.012914244310591,-0.0576817698018313,0.47086807710614936,0.12887754822970127,-0.44010295512992503,0.17773333806919378,0.5774434981115723,-0.8020519517515178,0.06062809497830368,0.08582887153623564,1.1012942218451243,0.3731564974271642,0.12887754822970127,0.5685796567851344,-0.11277061840435547,-0.32235789468302967,-1.3367961469550766,0.08582887153623564,-0.42321729224076626,0.5596423694895131,-0.6397639241238254,-0.5020603959317853,0.040029809877154,0.08582887153623564,1.4338105461167394,-0.06654561112826916,-0.7541996741838557,0.17773333806919378,0.38202033875360203,0.08582887153623564,-0.31082456032573197,-0.8267619500939486,0.875405423787736,-0.4635326192019611,0.47086807710614936,0.04421713362907076,-0.19901309883666912,0.5197238669456421,-2.2868660285833617,-0.2577814467343224,1.161159416717581,0.395761807071975,0.027492963248025755,0.08582887153623564,-1.2052333081207875,0.7957380112007781,-0.17843051858651574,-0.20368961641118968,-0.30239942693788496,0.3731564974271642,-0.6701893202341013,-0.6528150892021803,-0.8430022080765102,0.5685796567851344,-1.274889192037229,-0.3954849749263623,0.3243007075876716,-0.35444430968158436,1.2882466888700923,0.9773043272186382,0.7640028161431047,1.547818411681605,-1.3205621573016617,0.33316454891410935,-0.15120602572889938,0.22920714815050666,0.6662912364641197,0.125204542927011,0.2265891279086864,0.264915095662712,-0.07939894219654875,-0.5062477196837023,-0.9459498282391355,1.572437646618987,-1.1658008825168522,-0.9251949386220795,0.08582887153623564,-2.1090654201514005,0.23807098947694427,0.08002175839020867,0.08582887153623564,-1.2509773020301207,-0.9906182943267109,-0.5462396681967571,0.275444917748179,0.7151470263036123,0.6878930338370999,0.6137624413219369,0.5370256039815129,-1.5994652472926139,0.08582887153623564,0.17773333806919378,0.5166107845686204,0.15309736584450145,0.8669052318458373,0.5197238669456421,0.3096195553516222,0.17406033276650357,-0.6175458496285657,-0.18532207087102281,0.08002175839020867,-0.2131129806467468,-1.3886808302221607,-0.6906277254120057,0.19147480638756703,1.5494096883718453,0.7203378623273596,2.3621338012726985,-0.8267619500939486,-0.6528150892021803,-1.288995342176454,-0.2131129806467468,-0.15539334948081635,0.6174354466246272,0.09307292346856355,1.5572700174264527,0.43299908669971326,-0.25098197105318326,-0.30239942693788496,-0.8929067146477259,-0.44010295512992503,0.2354529692351244,0.17773333806919378,-1.2509773020301207,-0.11540140096776164,-1.4536995810701676,0.6662912364641197,1.2488077692737176,-0.4043488162528002,-0.5010116792000622,0.23807098947694427,1.0913121927835039,0.3731564974271642,-0.3019607189992943,0.47086807710614936,0.08002175839020867,-0.6890584219019087,0.031092522581532393,0.08888559971664647,-0.8929067146477259,0.3688957277060633,0.08002175839020867,0.7640028161431047,0.2265891279086864,-0.9459498282391355,0.08582887153623564,0.9284485373791453,0.47086807710614936,0.6174354466246272,0.5441517618653883,0.6662912364641197,-0.7552493778206055,0.9373123787055834,0.12887754822970127,-1.3367961469550766,0.24919443755349716,0.3731564974271642,-0.051874656655804284,-0.9906182943267109,0.5249147029693895,0.6174354466246272,-0.06654561112826916,-1.2149902485680695,-0.8267619500939486,0.12887754822970127,0.47086807710614936,-0.6964348385580325,0.14151359113447715,0.18659717939563175,-0.2567779344624918,0.5465459999512655,-1.479176192721637,0.08582887153623564,-0.1758704651261745,0.14256857619534735,-0.306637236573815,-1.0873263617338658,-1.277513480608196,-0.8283312536040456,1.8934367414008506,-1.0784173159475354,-1.4214565615557067,-0.30239942693788496,0.4846095454245221,-0.5114772661749034,1.5425823711979647,-0.44010295512992503,-0.2131129806467468,-0.044943813755288775,-0.06235828737635203,-0.18637078760274617,1.3239713736696068,0.08582887153623564,0.3243007075876716,-0.9817544530002733,0.20084773027039707,-0.44010295512992503,-0.7558361553339891,-0.7905186173942201,0.08582887153623564,0.006529996326023879,-0.7941916226969103,-2.0181591844661524,0.17773333806919378,0.7640028161431047,0.6174354466246272,2.3621338012726985,-0.8430022080765102,0.08002175839020867,0.47086807710614936,-0.5062477196837023,-0.05506374956001126,0.13774138955613913,1.2677348377230044,0.3111760965401331,0.2354529692351244,0.3731564974271642,-0.6906277254120057,-0.37887220460133086,2.3384096259416536,1.7117609642051372,-0.24679464730126616,-0.44010295512992503,-0.7946303306355011,0.6174354466246272,0.535456300471416,0.08582887153623564,2.5288774071603455,-0.8283312536040456,1.0402599988682086,-1.0830938335220561,0.1414208888512683,1.0849284649557842,0.999874901361719,-0.35448951414147706,0.17773333806919378,-1.0473344132208111,0.13774138955613913,-0.15120602572889938,-1.0925171977576134,1.0271636293299613,-0.8393679132412737,0.47086807710614936,0.2265891279086864,-0.4459100682759518,-0.15906635478350672,-1.2509773020301207,0.4986589868818731,-1.4345077266340618,0.9499291652963342,-0.5987684633389401,1.4143022072414815,-0.932333858827541,0.9486891085469749,0.9284485373791453,0.27177191244548876,-0.438533651619828,0.08582887153623564,1.368150645934579,-0.3959927993831502,-0.6528150892021803,-0.9780015077359606,1.6061258072659452,1.052438432005632,0.17773333806919378,0.3243007075876716,-0.2131129806467468,0.8858258063026848,-0.5462396681967571,-0.438533651619828,0.9068971803588921,-0.5062477196837023,0.42201228726665674,1.7117609642051372,-0.45582889466326004,-0.06235828737635203,-0.6906277254120057,0.17773333806919378,0.9220648095514267,-0.4485280885177722,-0.44010295512992503,-0.44010295512992503,-1.2174827699031108,-1.0342380436825636,-1.9536342093064851,-0.16425719080725432,-0.6890584219019087,0.08002175839020867,-1.385725382763753,-0.8283312536040456,-0.44010295512992503,1.410114883489565,0.1367443712767476,0.279632241500096,0.6174354466246272,-0.30558851984209173,0.558049834699667,-1.2149902485680695,0.33316454891410935,0.5838337199317307,-0.20787694016310673,0.6174354466246272,-1.4204078448239836,0.0904486348975961,-0.01768982128877647,-0.6886197139633178,0.08582887153623564,0.6662912364641197,0.4767492163699148,-0.3508165088387867,-0.30239942693788496,-0.19901309883666912,1.1402027181247258,0.5197238669456421,-0.31449756562842235,0.4219388412974729,0.06840848407128836,0.47086807710614936,-0.1065375596413238,-0.7016708790416727,0.42201228726665674,0.040029809877154,-0.3596803501652246,0.275444917748179,-0.004638656210421594,-0.20892565689482978,0.4308761285930943,-0.5020603959317853,-0.9459498282391355,0.9068971803588921,0.5197238669456421,-0.7552493778206055,0.08582887153623564,-0.30239942693788496,0.6467956599104482,0.08582887153623564,-0.6039592993626873,-0.051874656655804284,-0.7453358328574178,0.03635680457446358,0.08002175839020867,0.42720312329040433,-0.6906277254120057,0.13149556847152138,0.12887754822970127,-0.4522010938204622,0.17406033276650357,0.08582887153623564,-0.3466291850868697,0.4797319184325872,-0.30239942693788496,0.9578694343125645,1.8036654307380953,-0.438533651619828,-1.0306102428397659,0.7151470263036123,-0.30819377776232587,2.077326566401523,-0.3213543824111992,-0.5734936606632693,-0.7640896333820316,0.03116596855071608,-1.2827495210918365,0.5685796567851344,-0.06235828737635203,0.040029809877154,0.08582887153623564,3.1343463202558612,0.3862076625055191,-0.11540140096776164,-0.2105464331939664,0.6311264745902732,-0.8109157930779554,-0.30083012342778803,0.929497254110869,-0.3854217478035137,0.08582887153623564,-0.6475790487185401,-0.6543716303906911,0.862212022515293,-1.034797566591683,-0.30239942693788496,0.1761767968806832,-0.11540140096776164,0.22503258672017568,-0.7993824587206577,0.08582887153623564,-0.31082456032573197,0.08582887153623564,-1.1902287774365985,-0.30239942693788496,-0.0029093263761232244,0.08582887153623564,-0.31082456032573197,-0.8020519517515178,0.8085978362614965,0.33316454891410935,2.3621338012726985,-0.5020603959317853,-0.2577814467343224,0.47086807710614936,0.9236213507399375,0.08590289765397452,0.08582887153623564,-0.897094038399643,-1.6699228345050865,1.1123036268780886,-0.7552493778206055,0.9373123787055834,-0.11327844286114334,0.08002175839020867,0.6137624413219369,-0.30083012342778803,0.5197238669456421,0.4845591050717954,-2.6995222219772286,0.5197238669456421,-0.6906277254120057,-1.092590643726797,0.08582887153623564,1.214726459633324,0.3731564974271642,0.7151470263036123,-0.006207959720518585,-0.44010295512992503,-0.39967229867827925,2.5774177991537464,1.1291077372207563,-0.6964800430179251,0.08582887153623564,0.17773333806919378,0.275444917748179,-0.25935075024441934,0.08582887153623564,0.762446274954594,-2.393336317861918,0.3731564974271642,0.550219005253956,0.39726790790775895,-0.30239942693788496,-0.7374755038028105,-0.01768982128877647,1.8934367414008506,0.47086807710614936,-0.6906277254120057,0.046340091735689655,-0.6906277254120057,-0.821192333398584,-1.034797566591683,1.7117609642051372,-0.3596803501652246,-0.17579052516455182,0.8180494420063451,-0.6906277254120057,-0.553540474342245,-1.3205621573016617,-0.0576817698018313,0.5737704928088818,1.2983034220005014,-0.8341383667500726,0.08582887153623564,1.0155955594709336,1.1080710986662792,0.05377127819552688,-0.04394030148345821,-0.4043488162528002,-0.4342775376430065,-1.5810750961525393,0.09307292346856355,-0.6906277254120057,-0.5587765148258853,0.6626182311614295,1.0723916183266569,0.2265891279086864,-0.30239942693788496,-0.30558851984209173,0.33316454891410935,-1.483363516473554,0.1761033509114991,-0.6906277254120057,-0.014055526453539838,-0.7374755038028105,-0.30239942693788496,-0.4085361400047172,0.17773333806919378,0.08582887153623564,-0.051874656655804284,-0.11907440627045197,0.6174354466246272,-0.7122007011271398,-0.6906277254120057,-0.01768982128877647,-1.483363516473554,-0.04766374713887538,0.762446274954594,-0.44010295512992503,0.7640028161431047,0.6174354466246272,-0.25310492915980165,0.0915163822800527,-1.2149902485680695,-0.01768982128877647,-0.3056337243019845,-0.1401392863342205,-1.0925171977576134,1.2867353521414742,-0.6906277254120057,1.0119160601758044,-0.7505266688811651,-0.703220926237745,0.47086807710614936,0.08582887153623564,-0.16425719080725432,-0.994879064047812,-0.7505266688811651,-0.932333858827541,-0.6486277654502631,-0.7053438843443631,-0.051874656655804284,-0.8482382485601503,-0.6906277254120057,0.2649510892640468,-0.3623498431960843,0.08582887153623564,0.08582887153623564,-0.6039592993626873,-0.9407137877554955,-0.5997719756107706,0.08002175839020867,0.2265891279086864,-1.0410948604653405,1.0796924244721442,-1.4119024169892502,0.08582887153623564,-0.8267619500939486,-0.30239942693788496,-0.16425719080725432,-0.3623498431960843,-0.6076323046653778,-0.24891760540788452,1.2651387906613276,0.275444917748179,-0.9365264640035782,0.40783895948739524,-0.700107843860723,0.5197238669456421,0.5197238669456421,-0.1337620524989406,-1.627312865750212,1.682766012888723,0.275444917748179,-0.30239942693788496,-0.08646280384795904,-0.9459498282391355,1.1569720929656642,0.08582887153623564,0.15934318692911945,0.040029809877154,-0.01768982128877647,-0.46106493514690006,-1.4040420879346436,-0.30083012342778803,0.5685796567851344,1.410114883489565,0.5013337158055675,0.08582887153623564,-0.0029093263761232244,-0.6617523764978014,0.6174354466246272,0.3096195553516222,0.08582887153623564,0.28430875907461683,0.08582887153623564,0.14192871330805606,0.5197238669456421,-0.44010295512992503,0.1403594097979592,-0.11907440627045197,0.08582887153623564,-1.035852551652553,0.42201228726665674,-1.2558821836263203,-1.3893249420972593,-1.1849927369529583,0.22503258672017568,-0.2131129806467468,0.1819206618211107,-0.5099207249863926,0.3243007075876716,0.08582887153623564,-0.555103509523195,1.1873984410490732,-1.0384705718943734,1.5956254847893736,-1.874209835189495,0.03116596855071608,0.08582887153623564,0.6662912364641197,0.34872860250741794,0.5285877082720798,-1.7128974850808139,0.57488993864367,-0.44010295512992503,0.7508782050955664,0.5685796567851344,-0.1583760515434887,-1.8778828404921855,-1.0499587017917782,0.052767765923696516,0.6174354466246272,0.6662912364641197,2.239614594029216,1.5956254847893736,0.04945317411271075,0.08582887153623564,-0.4521558893605697,-1.3856519367945692,-0.9948056180786281,-0.6039592993626873,-0.44010295512992503,-0.49099365653710625,0.14412511738385825,0.9914042090287161,0.8113020647940866,-0.6345278836401853,-0.06392759088644905,-0.11121407721584457,-0.3596803501652246,-0.7905186173942201,0.4693115359176385,0.33316454891410935,-1.1828586291096217,1.0849284649557842,1.7117609642051372,0.4398906389842199,0.12887754822970127,-0.9948056180786281,1.2678082836921878,0.40094740720288796,1.0644448553179875,-0.30239942693788496,-0.06654561112826916,0.728198191381967,0.3284880313395887,-0.11540140096776164,-0.897094038399643,0.8154893885460037,0.5685796567851344,-0.65548458223304,-0.44010295512992503,-0.06235828737635203,-0.20006181556839203,1.9422925312403427,0.23182516839232686,0.08582887153623564,0.42201228726665674,0.42201228726665674,0.15330544314944752,-1.640460708077499,1.0104047234471862,0.08582887153623564,0.08582887153623564,1.3865745456713572,1.026160117058131,0.8533075318432417,-0.0135024975368595,0.03116596855071608,-0.41532222768442895,0.27177191244548876,-0.0576817698018313,1.5315221257957248,-0.35706232992340453,0.7203378623273596,1.841460975175348,-0.06654561112826916,0.42201228726665674,-1.5348887993439062,1.0207311706849096,0.17773333806919378,0.6662912364641197,-0.11540140096776164,1.746869371882373,0.08582887153623564,-0.4573919298442098,-0.20787694016310673,1.0024991899326863,0.7640028161431047,-0.16956667726007815,-0.6906277254120057,-0.4703379631956982,-0.6890584219019087,-0.01768982128877647,0.3731564974271642,-0.7993824587206577,-0.4012288398667904,-0.6906277254120057,-1.9335954471144547,0.6662912364641197,0.3479734101296756,1.1637129761854834,-0.30239942693788496,0.8716524785234229,-0.003589939478698508,2.14190301435023,1.4296232223648222,-0.5119739408949731,0.3243007075876716,0.3243007075876716,0.5285877082720798,-0.04232579351346872,0.8990368513042848,0.4729910352127676,-0.30239942693788496,0.7640028161431047,-1.3886808302221607,-0.6906277254120057,0.3243007075876716,-0.3596803501652246,0.3148038973829309,-0.1065375596413238,-0.6964348385580325,-0.5499126734994475,-0.11540140096776164,-0.5987684633389401,2.3615974641120405,0.36206042993013454,0.2265891279086864,0.03116596855071608,1.916624579571237,0.5285877082720798,-0.3596803501652246,0.3846511213170081,0.275444917748179,-0.3596803501652246,-0.16425719080725432,0.20033864771400456,0.05559386347046243,2.036947382738918,0.28430875907461683,-1.2375215320951412,-0.555103509523195,0.24819092528166695,0.3263784612343974,0.2265891279086864,-0.31082456032573197,0.6777858603539637,0.6390372439976074,-0.30239942693788496,0.08582887153623564,0.22815216308963598,-0.30239942693788496,0.33005146653708717,-0.48796051412170743,1.012914244310591,-0.6906277254120057,0.42201228726665674,0.6662912364641197,-0.7905121234017811,0.5197238669456421,0.08582887153623564,-0.01768982128877647,0.9353043672568959,0.5685796567851344,0.7640028161431047,-0.8341383667500726,-0.916285892835749,0.7151470263036123,-0.5062477196837023,-1.2509773020301207,-0.9407137877554955,-0.20892565689482978,0.41094184410083207,0.43575375558502955,-2.0696329945474656,-0.30039768381834414,1.5403859671221625,-1.128321822518751,0.14192871330805606,-1.2827495210918365,0.029609427362205436,-1.1388064401443256,-0.6906277254120057,-0.949622833541826,0.13306487198161812,0.3636596872224232,-1.3886808302221607,0.3731564974271642,-0.6439512478757423,-1.0742299921956184,2.3074708982871783,0.08582887153623564,0.8580413905193995,0.275444917748179,-0.07971542663570026,1.8845729000744127,-0.7505266688811651,-1.123085782035111,-0.10130151915768382,0.5685796567851344,0.6174354466246272,0.08582887153623564,-0.8651158048720028,-0.200061815568392,-0.06654561112826914,0.33316454891410935,0.17773333806919386,0.3243007075876716,-1.6945588067297788,0.22658912790868646,2.4308504296352687,-0.649677469087013,1.1249204134688393,-0.4059181197628971],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC6<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC6\",\"marker\":{\"color\":\"#19d3f3\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC6\",\"offsetgroup\":\"PC6\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[-1.0180534287361318,-0.34681701570629314,0.20071545094380872,-0.5668123467042091,0.04402763091626962,0.1393445006969723,0.2336241275043729,0.20707055646820222,-0.40715178364635696,-0.645806325774661,-0.4090149897215899,0.5174489532679581,0.010757270436643889,1.135460422880513,0.1740991625600937,0.26503814787106966,0.7369026745338139,0.032673871245977794,-0.8214411761330743,0.4226651664632664,0.044027630916269184,0.23841499352506507,0.28298781604306295,0.372560889313793,0.39702873697535246,1.3098924351638381,0.24601513014796672,0.9136951869273587,0.315994537012272,0.032673871245977794,0.26845900997813316,-0.3156735008123205,0.315994537012272,0.11278637590749506,-0.7914040256423104,-0.9736929480966489,0.24601513014796672,0.012975294468618857,-0.42711399993413224,-0.645806325774661,-0.801478959845299,-0.8303132722609745,0.24601513014796672,0.17611838710284863,0.291859912170963,0.032673871245977794,-0.8939022465397709,0.315994537012272,-0.36407012847415904,-0.8502754885487496,0.6413221652426948,0.012975294468618857,-0.371570098014764,-0.8258772241970244,-0.41442905649807793,0.27843060454694135,0.18962533078391877,0.2429517336104204,-0.032786823735190325,1.4965172385998302,0.22853457740258273,0.5222398192886504,-0.7212821426997603,0.6346680931467699,0.24601513014796672,-0.36407012847415904,0.30567221636010433,0.008539246404668795,1.2633139304923624,-0.5860198439936319,0.037373558820344197,1.684257395075005,0.012975294468618857,-0.7958400737062604,0.037373558820344197,0.12015008391690436,0.032673871245977794,0.032673871245977794,-0.6418475088784432,0.2095875470716941,0.015193318500593835,0.030719486724419005,0.315994537012272,0.028501462692444003,0.18075323465601856,0.02931784916011069,0.2381228929158528,0.032673871245977794,1.0992173193705586,0.019629366564543897,0.030719486724419005,0.010757270436643889,-0.8173668119881706,-0.16285835537901452,0.09726020768366987,0.032673871245977794,0.6812771815907082,-0.6058887591614147,-0.8147871040371493,-0.9914371403524493,0.2051514990077439,0.032673871245977794,-0.8236660661273537,0.039591582852319174,-0.5616215796419066,0.028501462692444003,0.18962533078391877,0.032673871245977794,0.05068170301219434,-0.7172522102244713,0.31640065260093314,-0.6446973137586735,0.015193318500593835,-0.8458394404847996,0.39409449355800746,0.012975294468618857,0.22943811350237717,-1.002527260512324,-0.5053680418090543,1.2300435700127366,-0.5971099641535071,0.032673871245977794,-0.7814229174984226,0.36258664713220956,-0.7504712730721776,-0.8268924101539108,0.13934450069697227,0.019629366564543897,-0.0891173988384739,0.06620787123601946,0.252932841754308,0.010757270436643889,-0.7859527916214738,-0.8258772241970244,0.021847390596518926,0.23075260143455784,-0.22829058926138643,-0.7390263349555605,0.0018851743087436835,0.527878705427689,-0.1874200921588593,0.19184335481589368,-0.8369673443568996,0.11520987585566324,0.0063212223726937435,-0.6015460122174571,0.02628343866046896,0.39924676100732726,-0.4644278983375087,0.05955379914009452,0.07951601542786974,-0.595646659119886,0.08949712357175728,-0.5538584955299938,0.032673871245977794,-0.740389472906885,0.28520584007503796,0.03293751075639407,0.032673871245977794,2.807880521540792,-0.9692569000326989,0.23176778739144432,0.024065414628493972,0.004103198340718751,0.6280140210508445,-0.6237262525372074,-0.6764687996948875,0.9022571147730455,0.032673871245977794,0.028501462692444003,0.39660433570877635,0.7413387225977643,-0.46482040847770767,0.012975294468618857,0.6480068211110827,-0.6037640362494322,0.268911589853087,0.7130460199141468,0.03293751075639407,0.0462456549482443,2.9845305578560923,0.24601513014796672,1.0689197019212622,-0.12000626285800485,-0.4581663363817826,0.3767332978673269,-0.7172522102244713,0.06620787123601946,-0.44829687809498703,0.0462456549482443,0.21402359513564395,0.008539246404668795,-0.8480574645167747,-0.5387317034086722,0.7488892223824896,0.7799415588301399,0.13934450069697227,-0.9736929480966489,0.315994537012272,0.19627940287984377,0.028501462692444003,2.807880521540792,0.041809606884294206,0.280658142153996,0.0063212223726937435,-0.8366125264001573,-0.9958731884163994,0.23740667353048284,0.28520584007503796,0.6125184365994822,0.019629366564543897,0.22067766723156912,0.015193318500593835,0.03293751075639407,-0.8939022465397709,-0.41149453059031466,0.20293347497576883,-0.9736929480966489,0.6239702406784037,0.03293751075639407,0.0018851743087436835,0.02628343866046896,0.07951601542786974,0.032673871245977794,-0.7368083109235856,0.015193318500593835,0.008539246404668795,0.011866282452631324,0.0063212223726937435,0.4455616261683867,-0.5668123467042109,0.030719486724419005,0.09726020768366987,1.2366976421086624,0.019629366564543897,0.2093239075612775,-0.9692569000326989,-0.44929424025388237,0.008539246404668795,0.039591582852319174,-0.6105815807734768,-0.7172522102244713,0.030719486724419005,0.015193318500593835,0.24627876965838294,-0.1936680486661235,0.19849742691181876,-0.4138058557422821,-0.3650161930011358,-0.9470766597129486,0.032673871245977794,-0.35356438892221415,0.34967101308055853,-1.000309236480349,-0.3760994471987067,-0.18937447668041796,0.4226651664632664,0.5044956270328504,0.4340189261335581,-0.7792987195255487,0.13934450069697227,1.0556115577294123,-0.3808971791817032,0.3500258310373006,0.315994537012272,0.0462456549482443,0.6612843815304701,-1.0113993566402244,-0.5157977939687851,0.4664344005325326,0.032673871245977794,0.021847390596518926,-0.7992609358133239,-0.5256850760535715,0.315994537012272,-0.5538590204691027,0.2428579075513193,0.032673871245977794,0.7479927946936893,-0.38940759139055675,0.21723898132651454,0.028501462692444003,0.0018851743087436835,0.008539246404668795,0.3767332978673269,0.252932841754308,0.03293751075639407,0.015193318500593835,0.05955379914009452,0.2985139842668882,0.20071545094379384,-0.33980812565362933,0.4561923004910042,0.19627940287984377,0.019629366564543897,0.24601513014796672,0.23186161345054535,0.20631583746984813,0.27843060454694135,-0.2710493806624036,0.315994537012272,-0.4707407579251535,0.008539246404668795,0.4634485769928501,0.032673871245977794,0.02727033520001529,0.4226651664632664,-0.3933955203777725,-0.7869679775783602,0.5703828459542613,0.6553773950827962,0.9274583161582478,-0.40936980767833214,0.028501462692444003,-0.5483134354500565,0.20071545094379384,-0.8369673443568996,0.08617008752379476,-0.1525229542174933,-0.017522172348114533,0.015193318500593835,0.02628343866046896,0.3162581765226885,-0.41824190380623216,2.807880521540792,0.6819936834664966,0.10169625574761998,0.41950107790431496,-0.3982796875184568,-0.3464621977495549,-0.2940907216098538,0.3130736165529706,-0.7368083109235856,-0.6082000843133821,-0.8239228396754656,0.032673871245977794,-0.7567705272113606,0.5947811103059863,0.06620787123601946,0.017056524575826754,-0.5409497274406473,1.1014353434025337,0.028501462692444003,0.021847390596518926,0.0462456549482443,0.2945820962002292,0.23176778739144432,-0.8239228396754656,-0.6370343967290576,0.05955379914009452,0.017411342532568926,0.27843060454694135,-0.3970768494433684,-1.0113993566402244,0.24601513014796672,0.028501462692444003,-0.6939493524402714,0.22733173932749412,0.315994537012272,0.315994537012272,0.7145169582978707,-0.7891860016103354,-0.577047580783435,0.044027630916269184,-0.8939022465397709,0.03293751075639407,-0.34717183366303866,0.4226651664632664,0.315994537012272,0.704528741742989,-0.6506040577576574,-1.0269255248640496,0.008539246404668795,0.22853457740258273,0.3859386168154773,-0.6105815807734768,0.19184335481589368,-0.12470382775870431,0.22409852933863278,0.008539246404668795,0.44954509435738305,-0.2514791495757187,0.037373558820344197,-0.8125690800051744,0.032673871245977794,0.0063212223726937435,1.4743369982800796,0.22289569126354417,0.13934450069697227,0.39409449355800746,0.1542299649018919,0.012975294468618857,-0.5815837959296819,-0.42923872284611503,-0.3646545090820894,0.015193318500593835,0.21180557110366896,0.06842589526799464,0.017411342532568926,0.2051514990077439,0.052899727044169294,0.024065414628493972,-0.8436214164528245,-1.0047452845442992,0.18740730675194361,-0.9914371403524493,0.07951601542786974,-0.6370343967290576,0.012975294468618857,0.4455616261683867,0.032673871245977794,0.13934450069697227,-0.46457776531716627,0.032673871245977794,0.06398984720404449,0.2093239075612775,-0.3916256154225318,-0.42711399993413224,0.03293751075639407,-0.44485819218993244,0.24601513014796672,0.11964592391961333,0.030719486724419005,-0.40493375961438194,-0.6037640362494322,0.032673871245977794,-0.8280952482289995,0.1851892827199686,0.13934450069697227,0.18482759880092237,0.27425819599340756,-0.8239228396754656,-0.797042911781349,0.004103198340718751,-0.8084947158602708,0.2820834725137412,0.4258630493910279,0.8556786101015703,1.0135062683662348,0.035155534788369094,-0.36722735107080656,0.010757270436643889,-1.0113993566402244,0.2051514990077439,0.032673871245977794,-0.2907569460757335,-0.8613656087086247,0.041809606884294206,0.18055443516679856,0.32749077276080824,-0.14067811505926434,-1.0005728759907653,0.4920355029593465,-0.4990687876698711,0.032673871245977794,0.2440607456264079,0.25802239185609827,-0.6273174530346948,0.2539480277111944,0.13934450069697227,0.22031598331252278,0.041809606884294206,0.21809795928054776,0.07286194333194462,0.032673871245977794,0.05068170301219434,0.032673871245977794,0.09060613558774484,0.13934450069697227,0.1711278330309049,0.032673871245977794,0.05068170301219434,0.02931784916011069,0.6040080243906284,0.19184335481589368,0.3767332978673269,-0.9914371403524493,-1.002527260512324,0.015193318500593835,-0.88576387306035,1.49208119053588,0.032673871245977794,0.07729799139589463,0.28278234012686976,-0.5031500177770792,0.4455616261683867,-0.5668123467042109,0.6032915225148402,0.03293751075639407,-0.6237262525372074,-1.0005728759907653,0.012975294468618857,0.33414484485673346,0.3372177549693592,0.012975294468618857,0.24601513014796672,-0.3604799778548889,0.032673871245977794,0.25733039020527393,0.019629366564543897,0.004103198340718751,0.2962959602349132,0.315994537012272,0.22511371529551916,0.47344329058519985,-0.5678275326610971,-0.39384363945450684,0.032673871245977794,0.028501462692444003,0.024065414628493972,0.1373901161754134,0.032673871245977794,0.19369969492882244,-0.5570853644956597,0.019629366564543897,0.2672493059407404,0.3167623365199795,0.13934450069697227,-0.8103510559731993,0.037373558820344197,0.5044956270328504,0.015193318500593835,0.24601513014796672,-0.28435752485425386,0.24601513014796672,0.1628973925431262,0.2539480277111944,0.27843060454694135,0.052899727044169294,-0.16951242747493964,-0.4626023844457327,0.24601513014796672,-0.3926408013794183,-0.1874200921588593,0.2095875470716941,-0.45151226428585756,0.3611159511971757,0.42292880597368304,0.032673871245977794,0.09000743505691303,-0.09228148739742548,1.2455697382365623,1.250005786300512,-0.9958731884163994,-0.49685076363789643,0.10835032784354502,-0.8480574645167747,0.24601513014796672,-0.5704936757698067,-0.6259442765691824,-0.14688406807845475,0.02628343866046896,0.13934450069697227,0.22853457740258273,0.19184335481589368,0.10391427977959498,-0.22633408206616104,0.24601513014796672,-0.23308145528207855,-0.8103510559731993,0.13934450069697227,0.055117751076144354,0.028501462692444003,0.032673871245977794,0.2093239075612775,-0.5904558920575819,0.008539246404668795,0.44360724164682797,0.24601513014796672,0.037373558820344197,0.10391427977959498,-0.10372642551404275,0.19369969492882244,0.315994537012272,0.0018851743087436835,0.008539246404668795,0.21845964319959402,-0.6562429438966958,-0.6105815807734768,0.037373558820344197,-0.411587831710307,0.07856249694029577,0.08617008752379476,0.6036463404715823,0.24601513014796672,-0.27965995995355414,0.0706439192999696,-0.002357688043335518,0.015193318500593835,0.032673871245977794,0.044027630916269184,-0.36491602591883887,0.0706439192999696,-0.2940907216098538,-0.9847830682565241,-0.5638396036738818,0.2093239075612775,0.07507996736391957,0.24601513014796672,-0.40076609434948574,0.009355632872335352,0.032673871245977794,0.032673871245977794,0.06398984720404449,0.257368889818258,-0.9870010922884992,0.03293751075639407,0.02628343866046896,0.21826084371037408,0.47752452069240786,1.3121104591958124,0.032673871245977794,-0.7172522102244713,0.13934450069697227,0.044027630916269184,0.009355632872335352,-0.5682756517378316,-0.8325312962929498,0.06329784555322021,0.024065414628493972,-0.7936220496742854,-0.7770875614558781,-0.3859867292834929,0.012975294468618857,0.012975294468618857,0.2983016423883908,0.19949478907071425,0.38623071742468956,0.024065414628493972,0.13934450069697227,0.4878981389764945,0.07951601542786974,0.5456228976834894,0.032673871245977794,0.8224082496219446,0.2051514990077439,0.037373558820344197,-0.5749297238337567,0.8933850186451457,-1.0005728759907653,0.010757270436643889,0.704528741742989,0.8068820813981197,0.032673871245977794,0.1711278330309049,-0.5504381583620391,0.008539246404668795,0.6480068211110827,0.032673871245977794,0.19406137884786862,0.032673871245977794,-0.8502754885487496,0.012975294468618857,0.315994537012272,0.2896418881389881,-0.5904558920575819,0.032673871245977794,-0.2893910340354873,0.017411342532568926,-0.1050964294276712,-0.5327872672262312,0.26845900997813316,0.21809795928054776,0.0462456549482443,-1.0224894768000992,-0.5727116998017819,0.021847390596518926,0.032673871245977794,0.06177182317206953,-0.5781661063745022,-0.37831747123068155,-0.7031831324872181,0.12165847203539523,0.035155534788369094,0.032673871245977794,0.0063212223726937435,0.02073837858053153,0.18297125868799366,1.7441440439383307,-0.4787517534253541,0.315994537012272,0.4362300842032287,0.010757270436643889,1.5031713106957554,-0.5106070269064806,0.048264879490999155,0.65684833346652,0.008539246404668795,0.0063212223726937435,-0.5620214806835184,-0.7031831324872181,-0.6679865660944111,0.032673871245977794,0.23518864949850785,0.09947823171564496,0.08173403945984468,0.06398984720404449,0.315994537012272,-0.07590729905525379,0.15785649246047992,-0.3911774963457971,0.19148167089684734,-0.6369342296467606,0.1285180200475134,-1.0091813326082495,0.052899727044169294,0.2428579075513193,0.20700783912067267,0.19184335481589368,-0.36407012847415904,0.6553773950827962,0.27843060454694135,-0.7146280706038353,0.030719486724419005,0.08173403945984468,0.10684193972505424,0.6864297315304466,0.35038751495634696,0.13934450069697227,0.039591582852319174,-0.87689177693245,-1.0291435488960246,0.041809606884294206,0.07729799139589463,-0.8595092685956961,0.010757270436643889,0.022663777064185445,0.315994537012272,-1.0113993566402244,-0.8347493203249244,0.5022776030008752,0.20413631305085744,0.032673871245977794,0.017411342532568926,0.017411342532568926,0.029610474708431585,0.48574969825435327,0.5522769697794143,0.032673871245977794,0.032673871245977794,0.2292792578867487,-0.7412443589875356,0.9341123882541732,-1.0136173806721993,0.035155534788369094,-0.19351870662557438,-0.6082000843133821,0.2095875470716941,-0.8281021141913038,0.14182616423936356,-0.4581663363817826,-0.9060877732671719,0.039591582852319174,0.017411342532568926,0.06258820963973595,-0.6422023927235594,0.028501462692444003,0.0063212223726937435,0.041809606884294206,0.5111496991287754,0.032673871245977794,0.05733577510811937,0.22409852933863278,0.3308800012171919,0.0018851743087436835,-0.580475308852803,0.24601513014796672,0.3173671885386758,-0.8939022465397709,0.037373558820344197,0.019629366564543897,0.07286194333194462,0.41692823591559786,0.24601513014796672,0.4990578424462036,0.0063212223726937435,0.23764719401735765,0.1541369462723182,0.13934450069697227,-0.4999168077882176,0.3852223974301074,-0.5575854326195686,0.22732487336518983,-0.1542498987615307,0.021847390596518926,0.021847390596518926,0.18297125868799366,0.7502108187256645,-0.2183089561783903,0.5766752341311397,0.13934450069697227,0.0018851743087436835,2.9845305578560923,0.24601513014796672,0.021847390596518926,0.052899727044169294,0.4483353903199902,0.21180557110366896,0.24627876965838294,-0.4004977115504319,0.041809606884294206,-0.3982796875184568,0.09877936410251618,-0.8525771284441815,0.02628343866046896,0.035155534788369094,0.3969591536655182,0.18297125868799366,0.052899727044169294,-0.669551088088546,0.024065414628493972,0.052899727044169294,0.044027630916269184,1.2389156661406369,0.034046522772381606,0.3275819512071342,0.19406137884786862,-0.36158846493176783,0.06177182317206953,0.6479762373386198,-0.05679310288582496,0.02628343866046896,0.05068170301219434,-0.6828592322803964,0.6302320450828195,0.13934450069697227,0.032673871245977794,-0.4281291858910189,0.13934450069697227,0.575472396056051,-0.6435883017426858,-0.6418475088784432,0.24601513014796672,0.017411342532568926,0.0063212223726937435,-0.01974019638008966,0.012975294468618857,0.032673871245977794,0.037373558820344197,0.49177186344893026,0.010757270436643889,0.0018851743087436835,0.42292880597368304,0.2562598778022707,0.004103198340718751,0.05955379914009452,2.807880521540792,0.257368889818258,-1.0047452845442992,-0.3648248474725132,1.057829581761387,0.1305305681632953,-0.23373495731991858,-0.6581061499719291,-0.792606863717399,-0.8502754885487496,-0.36722735107080656,0.22697005540844786,0.22269689177432422,0.24601513014796672,-0.5527494835140064,-1.0202714527681245,0.44611736628801524,2.9845305578560923,0.019629366564543897,0.23620383545539422,-0.6169720133589857,0.3792149614097181,0.032673871245977794,-0.6348163726970825,0.024065414628493972,-0.16618591636608546,0.33449966281347543,0.0706439192999696,-0.6147539893270105,0.38965844549405737,0.010757270436643889,0.008539246404668795,0.032673871245977794,-0.3068925831307461,-0.8347493203249245,0.039591582852319174,0.19184335481589368,0.028501462692443993,0.02184739059651893,0.9956196000321897,0.02628343866046895,0.4800973626811248,0.022400137553769125,0.4831634068314464,0.1440441882713386],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC6<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC6\",\"marker\":{\"color\":\"#19d3f3\"},\"name\":\"PC6\",\"notched\":true,\"offsetgroup\":\"PC6\",\"showlegend\":false,\"type\":\"box\",\"x\":[-1.0180534287361318,-0.34681701570629314,0.20071545094380872,-0.5668123467042091,0.04402763091626962,0.1393445006969723,0.2336241275043729,0.20707055646820222,-0.40715178364635696,-0.645806325774661,-0.4090149897215899,0.5174489532679581,0.010757270436643889,1.135460422880513,0.1740991625600937,0.26503814787106966,0.7369026745338139,0.032673871245977794,-0.8214411761330743,0.4226651664632664,0.044027630916269184,0.23841499352506507,0.28298781604306295,0.372560889313793,0.39702873697535246,1.3098924351638381,0.24601513014796672,0.9136951869273587,0.315994537012272,0.032673871245977794,0.26845900997813316,-0.3156735008123205,0.315994537012272,0.11278637590749506,-0.7914040256423104,-0.9736929480966489,0.24601513014796672,0.012975294468618857,-0.42711399993413224,-0.645806325774661,-0.801478959845299,-0.8303132722609745,0.24601513014796672,0.17611838710284863,0.291859912170963,0.032673871245977794,-0.8939022465397709,0.315994537012272,-0.36407012847415904,-0.8502754885487496,0.6413221652426948,0.012975294468618857,-0.371570098014764,-0.8258772241970244,-0.41442905649807793,0.27843060454694135,0.18962533078391877,0.2429517336104204,-0.032786823735190325,1.4965172385998302,0.22853457740258273,0.5222398192886504,-0.7212821426997603,0.6346680931467699,0.24601513014796672,-0.36407012847415904,0.30567221636010433,0.008539246404668795,1.2633139304923624,-0.5860198439936319,0.037373558820344197,1.684257395075005,0.012975294468618857,-0.7958400737062604,0.037373558820344197,0.12015008391690436,0.032673871245977794,0.032673871245977794,-0.6418475088784432,0.2095875470716941,0.015193318500593835,0.030719486724419005,0.315994537012272,0.028501462692444003,0.18075323465601856,0.02931784916011069,0.2381228929158528,0.032673871245977794,1.0992173193705586,0.019629366564543897,0.030719486724419005,0.010757270436643889,-0.8173668119881706,-0.16285835537901452,0.09726020768366987,0.032673871245977794,0.6812771815907082,-0.6058887591614147,-0.8147871040371493,-0.9914371403524493,0.2051514990077439,0.032673871245977794,-0.8236660661273537,0.039591582852319174,-0.5616215796419066,0.028501462692444003,0.18962533078391877,0.032673871245977794,0.05068170301219434,-0.7172522102244713,0.31640065260093314,-0.6446973137586735,0.015193318500593835,-0.8458394404847996,0.39409449355800746,0.012975294468618857,0.22943811350237717,-1.002527260512324,-0.5053680418090543,1.2300435700127366,-0.5971099641535071,0.032673871245977794,-0.7814229174984226,0.36258664713220956,-0.7504712730721776,-0.8268924101539108,0.13934450069697227,0.019629366564543897,-0.0891173988384739,0.06620787123601946,0.252932841754308,0.010757270436643889,-0.7859527916214738,-0.8258772241970244,0.021847390596518926,0.23075260143455784,-0.22829058926138643,-0.7390263349555605,0.0018851743087436835,0.527878705427689,-0.1874200921588593,0.19184335481589368,-0.8369673443568996,0.11520987585566324,0.0063212223726937435,-0.6015460122174571,0.02628343866046896,0.39924676100732726,-0.4644278983375087,0.05955379914009452,0.07951601542786974,-0.595646659119886,0.08949712357175728,-0.5538584955299938,0.032673871245977794,-0.740389472906885,0.28520584007503796,0.03293751075639407,0.032673871245977794,2.807880521540792,-0.9692569000326989,0.23176778739144432,0.024065414628493972,0.004103198340718751,0.6280140210508445,-0.6237262525372074,-0.6764687996948875,0.9022571147730455,0.032673871245977794,0.028501462692444003,0.39660433570877635,0.7413387225977643,-0.46482040847770767,0.012975294468618857,0.6480068211110827,-0.6037640362494322,0.268911589853087,0.7130460199141468,0.03293751075639407,0.0462456549482443,2.9845305578560923,0.24601513014796672,1.0689197019212622,-0.12000626285800485,-0.4581663363817826,0.3767332978673269,-0.7172522102244713,0.06620787123601946,-0.44829687809498703,0.0462456549482443,0.21402359513564395,0.008539246404668795,-0.8480574645167747,-0.5387317034086722,0.7488892223824896,0.7799415588301399,0.13934450069697227,-0.9736929480966489,0.315994537012272,0.19627940287984377,0.028501462692444003,2.807880521540792,0.041809606884294206,0.280658142153996,0.0063212223726937435,-0.8366125264001573,-0.9958731884163994,0.23740667353048284,0.28520584007503796,0.6125184365994822,0.019629366564543897,0.22067766723156912,0.015193318500593835,0.03293751075639407,-0.8939022465397709,-0.41149453059031466,0.20293347497576883,-0.9736929480966489,0.6239702406784037,0.03293751075639407,0.0018851743087436835,0.02628343866046896,0.07951601542786974,0.032673871245977794,-0.7368083109235856,0.015193318500593835,0.008539246404668795,0.011866282452631324,0.0063212223726937435,0.4455616261683867,-0.5668123467042109,0.030719486724419005,0.09726020768366987,1.2366976421086624,0.019629366564543897,0.2093239075612775,-0.9692569000326989,-0.44929424025388237,0.008539246404668795,0.039591582852319174,-0.6105815807734768,-0.7172522102244713,0.030719486724419005,0.015193318500593835,0.24627876965838294,-0.1936680486661235,0.19849742691181876,-0.4138058557422821,-0.3650161930011358,-0.9470766597129486,0.032673871245977794,-0.35356438892221415,0.34967101308055853,-1.000309236480349,-0.3760994471987067,-0.18937447668041796,0.4226651664632664,0.5044956270328504,0.4340189261335581,-0.7792987195255487,0.13934450069697227,1.0556115577294123,-0.3808971791817032,0.3500258310373006,0.315994537012272,0.0462456549482443,0.6612843815304701,-1.0113993566402244,-0.5157977939687851,0.4664344005325326,0.032673871245977794,0.021847390596518926,-0.7992609358133239,-0.5256850760535715,0.315994537012272,-0.5538590204691027,0.2428579075513193,0.032673871245977794,0.7479927946936893,-0.38940759139055675,0.21723898132651454,0.028501462692444003,0.0018851743087436835,0.008539246404668795,0.3767332978673269,0.252932841754308,0.03293751075639407,0.015193318500593835,0.05955379914009452,0.2985139842668882,0.20071545094379384,-0.33980812565362933,0.4561923004910042,0.19627940287984377,0.019629366564543897,0.24601513014796672,0.23186161345054535,0.20631583746984813,0.27843060454694135,-0.2710493806624036,0.315994537012272,-0.4707407579251535,0.008539246404668795,0.4634485769928501,0.032673871245977794,0.02727033520001529,0.4226651664632664,-0.3933955203777725,-0.7869679775783602,0.5703828459542613,0.6553773950827962,0.9274583161582478,-0.40936980767833214,0.028501462692444003,-0.5483134354500565,0.20071545094379384,-0.8369673443568996,0.08617008752379476,-0.1525229542174933,-0.017522172348114533,0.015193318500593835,0.02628343866046896,0.3162581765226885,-0.41824190380623216,2.807880521540792,0.6819936834664966,0.10169625574761998,0.41950107790431496,-0.3982796875184568,-0.3464621977495549,-0.2940907216098538,0.3130736165529706,-0.7368083109235856,-0.6082000843133821,-0.8239228396754656,0.032673871245977794,-0.7567705272113606,0.5947811103059863,0.06620787123601946,0.017056524575826754,-0.5409497274406473,1.1014353434025337,0.028501462692444003,0.021847390596518926,0.0462456549482443,0.2945820962002292,0.23176778739144432,-0.8239228396754656,-0.6370343967290576,0.05955379914009452,0.017411342532568926,0.27843060454694135,-0.3970768494433684,-1.0113993566402244,0.24601513014796672,0.028501462692444003,-0.6939493524402714,0.22733173932749412,0.315994537012272,0.315994537012272,0.7145169582978707,-0.7891860016103354,-0.577047580783435,0.044027630916269184,-0.8939022465397709,0.03293751075639407,-0.34717183366303866,0.4226651664632664,0.315994537012272,0.704528741742989,-0.6506040577576574,-1.0269255248640496,0.008539246404668795,0.22853457740258273,0.3859386168154773,-0.6105815807734768,0.19184335481589368,-0.12470382775870431,0.22409852933863278,0.008539246404668795,0.44954509435738305,-0.2514791495757187,0.037373558820344197,-0.8125690800051744,0.032673871245977794,0.0063212223726937435,1.4743369982800796,0.22289569126354417,0.13934450069697227,0.39409449355800746,0.1542299649018919,0.012975294468618857,-0.5815837959296819,-0.42923872284611503,-0.3646545090820894,0.015193318500593835,0.21180557110366896,0.06842589526799464,0.017411342532568926,0.2051514990077439,0.052899727044169294,0.024065414628493972,-0.8436214164528245,-1.0047452845442992,0.18740730675194361,-0.9914371403524493,0.07951601542786974,-0.6370343967290576,0.012975294468618857,0.4455616261683867,0.032673871245977794,0.13934450069697227,-0.46457776531716627,0.032673871245977794,0.06398984720404449,0.2093239075612775,-0.3916256154225318,-0.42711399993413224,0.03293751075639407,-0.44485819218993244,0.24601513014796672,0.11964592391961333,0.030719486724419005,-0.40493375961438194,-0.6037640362494322,0.032673871245977794,-0.8280952482289995,0.1851892827199686,0.13934450069697227,0.18482759880092237,0.27425819599340756,-0.8239228396754656,-0.797042911781349,0.004103198340718751,-0.8084947158602708,0.2820834725137412,0.4258630493910279,0.8556786101015703,1.0135062683662348,0.035155534788369094,-0.36722735107080656,0.010757270436643889,-1.0113993566402244,0.2051514990077439,0.032673871245977794,-0.2907569460757335,-0.8613656087086247,0.041809606884294206,0.18055443516679856,0.32749077276080824,-0.14067811505926434,-1.0005728759907653,0.4920355029593465,-0.4990687876698711,0.032673871245977794,0.2440607456264079,0.25802239185609827,-0.6273174530346948,0.2539480277111944,0.13934450069697227,0.22031598331252278,0.041809606884294206,0.21809795928054776,0.07286194333194462,0.032673871245977794,0.05068170301219434,0.032673871245977794,0.09060613558774484,0.13934450069697227,0.1711278330309049,0.032673871245977794,0.05068170301219434,0.02931784916011069,0.6040080243906284,0.19184335481589368,0.3767332978673269,-0.9914371403524493,-1.002527260512324,0.015193318500593835,-0.88576387306035,1.49208119053588,0.032673871245977794,0.07729799139589463,0.28278234012686976,-0.5031500177770792,0.4455616261683867,-0.5668123467042109,0.6032915225148402,0.03293751075639407,-0.6237262525372074,-1.0005728759907653,0.012975294468618857,0.33414484485673346,0.3372177549693592,0.012975294468618857,0.24601513014796672,-0.3604799778548889,0.032673871245977794,0.25733039020527393,0.019629366564543897,0.004103198340718751,0.2962959602349132,0.315994537012272,0.22511371529551916,0.47344329058519985,-0.5678275326610971,-0.39384363945450684,0.032673871245977794,0.028501462692444003,0.024065414628493972,0.1373901161754134,0.032673871245977794,0.19369969492882244,-0.5570853644956597,0.019629366564543897,0.2672493059407404,0.3167623365199795,0.13934450069697227,-0.8103510559731993,0.037373558820344197,0.5044956270328504,0.015193318500593835,0.24601513014796672,-0.28435752485425386,0.24601513014796672,0.1628973925431262,0.2539480277111944,0.27843060454694135,0.052899727044169294,-0.16951242747493964,-0.4626023844457327,0.24601513014796672,-0.3926408013794183,-0.1874200921588593,0.2095875470716941,-0.45151226428585756,0.3611159511971757,0.42292880597368304,0.032673871245977794,0.09000743505691303,-0.09228148739742548,1.2455697382365623,1.250005786300512,-0.9958731884163994,-0.49685076363789643,0.10835032784354502,-0.8480574645167747,0.24601513014796672,-0.5704936757698067,-0.6259442765691824,-0.14688406807845475,0.02628343866046896,0.13934450069697227,0.22853457740258273,0.19184335481589368,0.10391427977959498,-0.22633408206616104,0.24601513014796672,-0.23308145528207855,-0.8103510559731993,0.13934450069697227,0.055117751076144354,0.028501462692444003,0.032673871245977794,0.2093239075612775,-0.5904558920575819,0.008539246404668795,0.44360724164682797,0.24601513014796672,0.037373558820344197,0.10391427977959498,-0.10372642551404275,0.19369969492882244,0.315994537012272,0.0018851743087436835,0.008539246404668795,0.21845964319959402,-0.6562429438966958,-0.6105815807734768,0.037373558820344197,-0.411587831710307,0.07856249694029577,0.08617008752379476,0.6036463404715823,0.24601513014796672,-0.27965995995355414,0.0706439192999696,-0.002357688043335518,0.015193318500593835,0.032673871245977794,0.044027630916269184,-0.36491602591883887,0.0706439192999696,-0.2940907216098538,-0.9847830682565241,-0.5638396036738818,0.2093239075612775,0.07507996736391957,0.24601513014796672,-0.40076609434948574,0.009355632872335352,0.032673871245977794,0.032673871245977794,0.06398984720404449,0.257368889818258,-0.9870010922884992,0.03293751075639407,0.02628343866046896,0.21826084371037408,0.47752452069240786,1.3121104591958124,0.032673871245977794,-0.7172522102244713,0.13934450069697227,0.044027630916269184,0.009355632872335352,-0.5682756517378316,-0.8325312962929498,0.06329784555322021,0.024065414628493972,-0.7936220496742854,-0.7770875614558781,-0.3859867292834929,0.012975294468618857,0.012975294468618857,0.2983016423883908,0.19949478907071425,0.38623071742468956,0.024065414628493972,0.13934450069697227,0.4878981389764945,0.07951601542786974,0.5456228976834894,0.032673871245977794,0.8224082496219446,0.2051514990077439,0.037373558820344197,-0.5749297238337567,0.8933850186451457,-1.0005728759907653,0.010757270436643889,0.704528741742989,0.8068820813981197,0.032673871245977794,0.1711278330309049,-0.5504381583620391,0.008539246404668795,0.6480068211110827,0.032673871245977794,0.19406137884786862,0.032673871245977794,-0.8502754885487496,0.012975294468618857,0.315994537012272,0.2896418881389881,-0.5904558920575819,0.032673871245977794,-0.2893910340354873,0.017411342532568926,-0.1050964294276712,-0.5327872672262312,0.26845900997813316,0.21809795928054776,0.0462456549482443,-1.0224894768000992,-0.5727116998017819,0.021847390596518926,0.032673871245977794,0.06177182317206953,-0.5781661063745022,-0.37831747123068155,-0.7031831324872181,0.12165847203539523,0.035155534788369094,0.032673871245977794,0.0063212223726937435,0.02073837858053153,0.18297125868799366,1.7441440439383307,-0.4787517534253541,0.315994537012272,0.4362300842032287,0.010757270436643889,1.5031713106957554,-0.5106070269064806,0.048264879490999155,0.65684833346652,0.008539246404668795,0.0063212223726937435,-0.5620214806835184,-0.7031831324872181,-0.6679865660944111,0.032673871245977794,0.23518864949850785,0.09947823171564496,0.08173403945984468,0.06398984720404449,0.315994537012272,-0.07590729905525379,0.15785649246047992,-0.3911774963457971,0.19148167089684734,-0.6369342296467606,0.1285180200475134,-1.0091813326082495,0.052899727044169294,0.2428579075513193,0.20700783912067267,0.19184335481589368,-0.36407012847415904,0.6553773950827962,0.27843060454694135,-0.7146280706038353,0.030719486724419005,0.08173403945984468,0.10684193972505424,0.6864297315304466,0.35038751495634696,0.13934450069697227,0.039591582852319174,-0.87689177693245,-1.0291435488960246,0.041809606884294206,0.07729799139589463,-0.8595092685956961,0.010757270436643889,0.022663777064185445,0.315994537012272,-1.0113993566402244,-0.8347493203249244,0.5022776030008752,0.20413631305085744,0.032673871245977794,0.017411342532568926,0.017411342532568926,0.029610474708431585,0.48574969825435327,0.5522769697794143,0.032673871245977794,0.032673871245977794,0.2292792578867487,-0.7412443589875356,0.9341123882541732,-1.0136173806721993,0.035155534788369094,-0.19351870662557438,-0.6082000843133821,0.2095875470716941,-0.8281021141913038,0.14182616423936356,-0.4581663363817826,-0.9060877732671719,0.039591582852319174,0.017411342532568926,0.06258820963973595,-0.6422023927235594,0.028501462692444003,0.0063212223726937435,0.041809606884294206,0.5111496991287754,0.032673871245977794,0.05733577510811937,0.22409852933863278,0.3308800012171919,0.0018851743087436835,-0.580475308852803,0.24601513014796672,0.3173671885386758,-0.8939022465397709,0.037373558820344197,0.019629366564543897,0.07286194333194462,0.41692823591559786,0.24601513014796672,0.4990578424462036,0.0063212223726937435,0.23764719401735765,0.1541369462723182,0.13934450069697227,-0.4999168077882176,0.3852223974301074,-0.5575854326195686,0.22732487336518983,-0.1542498987615307,0.021847390596518926,0.021847390596518926,0.18297125868799366,0.7502108187256645,-0.2183089561783903,0.5766752341311397,0.13934450069697227,0.0018851743087436835,2.9845305578560923,0.24601513014796672,0.021847390596518926,0.052899727044169294,0.4483353903199902,0.21180557110366896,0.24627876965838294,-0.4004977115504319,0.041809606884294206,-0.3982796875184568,0.09877936410251618,-0.8525771284441815,0.02628343866046896,0.035155534788369094,0.3969591536655182,0.18297125868799366,0.052899727044169294,-0.669551088088546,0.024065414628493972,0.052899727044169294,0.044027630916269184,1.2389156661406369,0.034046522772381606,0.3275819512071342,0.19406137884786862,-0.36158846493176783,0.06177182317206953,0.6479762373386198,-0.05679310288582496,0.02628343866046896,0.05068170301219434,-0.6828592322803964,0.6302320450828195,0.13934450069697227,0.032673871245977794,-0.4281291858910189,0.13934450069697227,0.575472396056051,-0.6435883017426858,-0.6418475088784432,0.24601513014796672,0.017411342532568926,0.0063212223726937435,-0.01974019638008966,0.012975294468618857,0.032673871245977794,0.037373558820344197,0.49177186344893026,0.010757270436643889,0.0018851743087436835,0.42292880597368304,0.2562598778022707,0.004103198340718751,0.05955379914009452,2.807880521540792,0.257368889818258,-1.0047452845442992,-0.3648248474725132,1.057829581761387,0.1305305681632953,-0.23373495731991858,-0.6581061499719291,-0.792606863717399,-0.8502754885487496,-0.36722735107080656,0.22697005540844786,0.22269689177432422,0.24601513014796672,-0.5527494835140064,-1.0202714527681245,0.44611736628801524,2.9845305578560923,0.019629366564543897,0.23620383545539422,-0.6169720133589857,0.3792149614097181,0.032673871245977794,-0.6348163726970825,0.024065414628493972,-0.16618591636608546,0.33449966281347543,0.0706439192999696,-0.6147539893270105,0.38965844549405737,0.010757270436643889,0.008539246404668795,0.032673871245977794,-0.3068925831307461,-0.8347493203249245,0.039591582852319174,0.19184335481589368,0.028501462692443993,0.02184739059651893,0.9956196000321897,0.02628343866046895,0.4800973626811248,0.022400137553769125,0.4831634068314464,0.1440441882713386],\"xaxis\":\"x2\",\"yaxis\":\"y2\"}],                        {\"barmode\":\"overlay\",\"legend\":{\"title\":{\"font\":{\"color\":\"green\"},\"text\":\"variable\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"color\":\"black\"},\"text\":\"PCA Histogram\",\"x\":0.5,\"xanchor\":\"center\",\"yanchor\":\"top\"},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"_value\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.0,1.0],\"matches\":\"x\",\"showgrid\":true,\"showticklabels\":false},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.7326],\"title\":{\"text\":\"density\"}},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.7426,1.0],\"matches\":\"y2\",\"showgrid\":false,\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('61e14da3-481f-4d8c-ad26-17abc7020ec9');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"
                    ]
                },
                "mc_idx": 125,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 71,
                "o_idx": 1
            }
        },
        {
            "source": "**Let's check out outliers in PC 1**",
            "mc_idx": 126,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "pc1_outlier_idx = list(outlier_iqr(X_pca['PC1'])[0])",
            "mc_idx": 127,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "pca": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    72,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 127,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 72,
                "o_idx": 0
            }
        },
        {
            "source": "component = \"PC1\"\n\ndef highlight_min(s, props=''):\n    return np.where(s == np.nanmin(s.values), props, '')\n\ntrain_data.iloc[pc1_outlier_idx,:].style.set_properties(**{'background-color': 'Grey',\n                            'color': 'white',\n                            'border-color': 'darkblack'})",
            "mc_idx": 128,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".nanmin": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    73,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7cab22af50>"
                    ]
                },
                "mc_idx": 128,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 73,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n* The Sage family started from S port, there was no Cabin, and the ages were not recorded, and they appear to be a poor and pitiful family with a pclass 3 rating.\n* All three females in this family using the Miss title have died.\n\n**The last sad news is that the training dataset is small, so it seems difficult to remove even if the above data are outliers.    \nNevertheless, fortunately, this problem is not a regression problem, but a classification problem. If it is a regression problem, outliers should be removed.**",
            "mc_idx": 129,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "------------------------------------------------------\n# Encoding\n\nLet's perform encoding on categorical features.\n\nWhen only tree-based models are used, label encoding is sufficient. However, we will use one-hot encoding for model extension in the future.\n\nIf you want to know more about the encoding of categorical features, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/preprocessing-encoding-categorical-data)",
            "mc_idx": 130,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "titanic_df = pd.get_dummies(titanic_df, columns = ['Title','Sex', 'Embarked','Cabin_label'],drop_first=True)\ntitanic_df.head().T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'})",
            "mc_idx": 131,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    ".get_dummies": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    74,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7caa4a2910>"
                    ]
                },
                "mc_idx": 131,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 74,
                "o_idx": 0
            }
        },
        {
            "source": "---------------------------------------\n# Checking Correlation",
            "mc_idx": 132,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot')",
            "mc_idx": 133,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.1111111111111111,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".corr": 2,
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {
                    ".round": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c075_o001_image_24.png",
                    75,
                    1,
                    24
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Text(0.5, 1.0, 'Correlation Plot')",
                        "<Figure size 1008x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 133,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 75,
                "o_idx": 1
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation and Decision:\n    \n* There is a large correlation between FamilySize and SibSp and Parch. Since the derived variable FamilySize is made of SibSp and Parch, SibSp and Parch are removed.\n* The relationship between Cabin and Has_Cabin is high. Therefore, the derived variable Has_Cabin is left and Cabin is removed.\n* The relationship between Fare and Fare_class is high. Fare is selected because skewness is removed by nonlinear transform of the Fare feature.\n* There are many features that are not related to the survived value.",
            "mc_idx": 134,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF')",
            "mc_idx": 135,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".sort_values": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c076_o000_image_25.png",
                    76,
                    0,
                    25
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 135,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 76,
                "o_idx": 0
            }
        },
        {
            "source": "-------------------------------------------------------------\n# Selecting Features\n\nFeatures that are not helpful in judging the above heatmap and survivors, or that have other derived variables, will be removed.",
            "mc_idx": 136,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "def drop_features(df):\n    df.drop(['Name','Ticket','SibSp','Parch','Fare_class',\n             'Cabin','Cabin_label_G','Cabin_label_T',\n             'Cabin_label_F','FamilySize','Embarked_Q','Title_Rare'],\n            axis=1,\n            inplace=True)\n    return df\n\ntitanic_df = drop_features(titanic_df)",
            "mc_idx": 137,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    77,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 137,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 77,
                "o_idx": 0
            }
        },
        {
            "source": "**Let's check the correlation of each feature.**",
            "mc_idx": 138,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot')",
            "mc_idx": 139,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.1111111111111111,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".corr": 2,
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {
                    ".round": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c078_o001_image_26.png",
                    78,
                    1,
                    26
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Text(0.5, 1.0, 'Correlation Plot')",
                        "<Figure size 1008x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 139,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 78,
                "o_idx": 1
            }
        },
        {
            "source": "Let's check the correlation between the target value (Suvived) and other features.",
            "mc_idx": 140,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF')",
            "mc_idx": 141,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".sort_values": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c079_o000_image_27.png",
                    79,
                    0,
                    27
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 141,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 79,
                "o_idx": 0
            }
        },
        {
            "source": "sns.set(font_scale=2)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nsns.pairplot(titanic_df,kind = 'reg',corner = True,palette ='Blues',hue='Survived' )",
            "mc_idx": 142,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.pairplot": 1,
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c080_o002_image_28.png",
                    80,
                    2,
                    28
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<seaborn.axisgrid.PairGrid at 0x7f7cab6939d0>",
                        "<Figure size 1008x720 with 0 Axes>",
                        "<Figure size 3003.1x2880 with 152 Axes>"
                    ]
                },
                "mc_idx": 142,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 80,
                "o_idx": 2
            }
        },
        {
            "source": "**OK! Looking at the heatmap and pairplot above, it seems that the features are properly selected.**",
            "mc_idx": 143,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Spliting Train/Validation/Test Data",
            "mc_idx": 144,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "tr_idx = titanic_df['Survived'].notnull()\ny_titanic_df = titanic_df[tr_idx]['Survived']\nX_titanic_df= titanic_df[tr_idx].drop('Survived',axis=1)\nX_test_df = titanic_df[~tr_idx].drop('Survived',axis=1)",
            "mc_idx": 145,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".notnull": 1
                },
                "Data_Transform": {
                    ".drop": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    81,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 145,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 81,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val=train_test_split(X_titanic_df, y_titanic_df, \\\n                                                  test_size=0.2, random_state=11)",
            "mc_idx": 146,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.2,
                "Data_Transform": 0.1,
                "Model_Train": 0.4,
                "Model_Evaluation": 0.1,
                "Model_Interpretation": 0.1,
                "Hyperparameter_Tuning": 0.2,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    ".mod": 1
                },
                "Model_Train": {
                    "train_test_split": 2,
                    "model": 1,
                    "model_selection": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 2
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    82,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 146,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 82,
                "o_idx": 0
            }
        },
        {
            "source": "y_train.names='Survived'\ntrain_data = pd.concat([X_train,y_train],axis=1)\ny_val.names='Survived'\nval_data = pd.concat([X_val,y_val],axis=1)",
            "mc_idx": 147,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".concat(": 2,
                    ".concat": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    83,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 147,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 83,
                "o_idx": 0
            }
        },
        {
            "source": "tr_idx = titanic_df['Survived'].notnull()\ntrain_final = titanic_df[tr_idx]",
            "mc_idx": 148,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".notnull": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    84,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 148,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 84,
                "o_idx": 0
            }
        },
        {
            "source": "----------------------------------------------------------------------------\n# Visualizing Training Dataset after Dimension Reduction",
            "mc_idx": 149,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "X_train.shape",
            "mc_idx": 150,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    85,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "(712, 16)"
                    ]
                },
                "mc_idx": 150,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 85,
                "o_idx": 0
            }
        },
        {
            "source": "The training dataset has 16 dimensions. To show the approximate distribution of the training dataset preprocessed above, let's reduce the dimension to two dimensions and draw it.",
            "mc_idx": 151,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "mapper = umap.UMAP().fit(X_train)\numap.plot.points(mapper, labels=y_train, theme='fire')",
            "mc_idx": 152,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    ".fit(": 1
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c086_o001_image_29.png",
                    86,
                    1,
                    29
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<AxesSubplot:>",
                        "<Figure size 800x800 with 1 Axes>"
                    ]
                },
                "mc_idx": 152,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 86,
                "o_idx": 1
            }
        },
        {
            "source": "As shown in the figure above, when viewed in two dimensions, there are quite a few areas where the survivors and the dead overlap. First, let's feel for a moment that the task of classification is a difficult task before learning the model. Our model does this difficult job!\n\n**Thanks models!**",
            "mc_idx": 153,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------------------\n# Ensemble\n\n![](https://media3.giphy.com/media/26xBvMWzk7FQr54Sk/giphy.gif)\n\nPicture Credit: https://media3.giphy.com\n\n\n> Empirically, ensembles tend to yield better results when there is a significant diversity among the models.Many ensemble methods, therefore, seek to promote diversity among the models they combine.Although perhaps non-intuitive, more random algorithms (like random decision trees) can be used to produce a stronger ensemble than very deliberate algorithms (like entropy-reducing decision trees).Using a variety of strong learning algorithms, however, has been shown to be more effective than using techniques that attempt to dumb-down the models in order to promote diversity. It is possible to increase diversity in the training stage of the model using correlation for regression tasks or using information measures such as cross entropy for classification tasks\n\nRef: https://en.wikipedia.org/",
            "mc_idx": 154,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Setting up models\n\n> This function trains and evaluates performance of all estimators available in the model library using cross validation. The output of this function is a score grid with average cross validated scores.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 155,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_cols = [cname for cname in X_titanic_df.columns]",
            "mc_idx": 156,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "columns": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    87,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 156,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 87,
                "o_idx": 0
            }
        },
        {
            "source": "from pycaret.classification import *\nclf1 = setup(data = train_final, \n             target = 'Survived',\n             preprocess = False,\n             numeric_features = all_cols,\n             silent=True)",
            "mc_idx": 157,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    88,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9509f490>"
                    ]
                },
                "mc_idx": 157,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 88,
                "o_idx": 0
            }
        },
        {
            "source": "## Choosing top models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 158,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "top5 = compare_models(sort='Accuracy',n_select = 5,\n                      exclude = ['knn', 'svm','ridge','nb','dummy','qda','xgboost']\n                     )",
            "mc_idx": 159,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1,
                    "ridge": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    89,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9d26dbd0>"
                    ]
                },
                "mc_idx": 159,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 89,
                "o_idx": 0
            }
        },
        {
            "source": "top5",
            "mc_idx": 160,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    90,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n                importance_type='split', learning_rate=0.1, max_depth=-1,\n                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,\n                random_state=8055, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                subsample=1.0, subsample_for_bin=200000, subsample_freq=0),\n GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n                            learning_rate=0.1, loss='deviance', max_depth=3,\n                            max_features=None, max_leaf_nodes=None,\n                            min_impurity_decrease=0.0, min_impurity_split=None,\n                            min_samples_leaf=1, min_samples_split=2,\n                            min_weight_fraction_leaf=0.0, n_estimators=100,\n                            n_iter_no_change=None, presort='deprecated',\n                            random_state=8055, subsample=1.0, tol=0.0001,\n                            validation_fraction=0.1, verbose=0,\n                            warm_start=False),\n <catboost.core.CatBoostClassifier at 0x7f7c9d371110>,\n LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n                    intercept_scaling=1, l1_ratio=None, max_iter=1000,\n                    multi_class='auto', n_jobs=None, penalty='l2',\n                    random_state=8055, solver='lbfgs', tol=0.0001, verbose=0,\n                    warm_start=False),\n LinearDiscriminantAnalysis(n_components=None, priors=None, shrinkage=None,\n                            solver='svd', store_covariance=False, tol=0.0001)]"
                    ]
                },
                "mc_idx": 160,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 90,
                "o_idx": 0
            }
        },
        {
            "source": "## Creating Models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 161,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "catboost = create_model('catboost')\nrf = create_model('rf')\nlightgbm = create_model('lightgbm')\n#mlp = create_model('mlp')\ngbc = create_model('gbc')\nlda = create_model('lda')\nlr = create_model('lr')",
            "mc_idx": 162,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 7
                },
                "Model_Evaluation": {
                    "model": 7
                },
                "Model_Interpretation": {
                    "model": 7
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    91,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9d4c7950>"
                    ]
                },
                "mc_idx": 162,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 91,
                "o_idx": 0
            }
        },
        {
            "source": "# Interpreting Models\n\nThis function analyzes the predictions generated from a trained model. Most plots in this function are implemented based on the SHAP (SHapley Additive exPlanations).\n\n> SHAP (SHapley Additive exPlanations) is a game theoretic approach to explain the output of any machine learning model. It connects optimal credit allocation with local explanations using the classic Shapley values from game theory and their related extensions\n\nRef: https://shap.readthedocs.io/en/latest/\n\n**If you want to know more about feature importance and SHAP, please refer to the notebook below.**\n\n[Notebook](https://www.kaggle.com/ohseokkim/explaning-machine-by-feature-importnace)",
            "mc_idx": 163,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "interpret_model(catboost)",
            "mc_idx": 164,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "interpret_model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c092_o001_image_30.png",
                    92,
                    1,
                    30
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "\nUser settings:\n\n   KMP_AFFINITY=granularity=fine,verbose,compact,1,0\n   KMP_BLOCKTIME=0\n   KMP_DUPLICATE_LIB_OK=True\n   KMP_INIT_AT_FORK=FALSE\n   KMP_SETTINGS=1\n   KMP_WARNINGS=0\n\nEffective settings:\n\n   KMP_ABORT_DELAY=0\n   KMP_ADAPTIVE_LOCK_PROPS='1,1024'\n   KMP_ALIGN_ALLOC=64\n   KMP_ALL_THREADPRIVATE=128\n   KMP_ATOMIC_MODE=2\n   KMP_BLOCKTIME=0\n   KMP_CPUINFO_FILE: value is not defined\n   KMP_DETERMINISTIC_REDUCTION=false\n   KMP_DEVICE_THREAD_LIMIT=2147483647\n   KMP_DISP_NUM_BUFFERS=7\n   KMP_DUPLICATE_LIB_OK=true\n   KMP_ENABLE_TASK_THROTTLING=true\n   KMP_FORCE_REDUCTION: value is not defined\n   KMP_FOREIGN_THREADS_THREADPRIVATE=true\n   KMP_FORKJOIN_BARRIER='2,2'\n   KMP_FORKJOIN_BARRIER_PATTERN='hyper,hyper'\n   KMP_GTID_MODE=3\n   KMP_HANDLE_SIGNALS=false\n   KMP_HOT_TEAMS_MAX_LEVEL=1\n   KMP_HOT_TEAMS_MODE=0\n   KMP_INIT_AT_FORK=true\n   KMP_LIBRARY=throughput\n   KMP_LOCK_KIND=queuing\n   KMP_MALLOC_POOL_INCR=1M\n   KMP_NUM_LOCKS_IN_BLOCK=1\n   KMP_PLAIN_BARRIER='2,2'\n   KMP_PLAIN_BARRIER_PATTERN='hyper,hyper'\n   KMP_REDUCTION_BARRIER='1,1'\n   KMP_REDUCTION_BARRIER_PATTERN='hyper,hyper'\n   KMP_SCHEDULE='static,balanced;guided,iterative'\n   KMP_SETTINGS=true\n   KMP_SPIN_BACKOFF_PARAMS='4096,100'\n   KMP_STACKOFFSET=64\n   KMP_STACKPAD=0\n   KMP_STACKSIZE=8M\n   KMP_STORAGE_MAP=false\n   KMP_TASKING=2\n   KMP_TASKLOOP_MIN_TASKS=0\n   KMP_TASK_STEALING_CONSTRAINT=1\n   KMP_TEAMS_THREAD_LIMIT=4\n   KMP_TOPOLOGY_METHOD=all\n   KMP_USE_YIELD=1\n   KMP_VERSION=false\n   KMP_WARNINGS=false\n   OMP_AFFINITY_FORMAT='OMP: pid %P tid %i thread %n bound to OS proc set {%A}'\n   OMP_ALLOCATOR=omp_default_mem_alloc\n   OMP_CANCELLATION=false\n   OMP_DEFAULT_DEVICE=0\n   OMP_DISPLAY_AFFINITY=false\n   OMP_DISPLAY_ENV=false\n   OMP_DYNAMIC=false\n   OMP_MAX_ACTIVE_LEVELS=1\n   OMP_MAX_TASK_PRIORITY=0\n   OMP_NESTED: deprecated; max-active-levels-var=1\n   OMP_NUM_THREADS: value is not defined\n   OMP_PLACES: value is not defined\n   OMP_PROC_BIND='intel'\n   OMP_SCHEDULE='static'\n   OMP_STACKSIZE=8M\n   OMP_TARGET_OFFLOAD=DEFAULT\n   OMP_THREAD_LIMIT=2147483647\n   OMP_WAIT_POLICY=PASSIVE\n   KMP_AFFINITY='verbose,warnings,respect,granularity=fine,compact,1,0'\n\n",
                        "<Figure size 576x568.8 with 2 Axes>"
                    ]
                },
                "mc_idx": 164,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 92,
                "o_idx": 1
            }
        },
        {
            "source": "interpret_model(rf)",
            "mc_idx": 165,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "interpret_model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c093_o000_image_31.png",
                    93,
                    0,
                    31
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x568.8 with 2 Axes>"
                    ]
                },
                "mc_idx": 165,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 93,
                "o_idx": 0
            }
        },
        {
            "source": "interpret_model(lightgbm)",
            "mc_idx": 166,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "interpret_model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c094_o000_image_32.png",
                    94,
                    0,
                    32
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x568.8 with 2 Axes>"
                    ]
                },
                "mc_idx": 166,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 94,
                "o_idx": 0
            }
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n* Among the features, if you look at Fare and Age_knn, the features are spread in a wide distribution of importance, and the colors are also spread from blue to red. \n* Each model is learning with the importance of different features. The diversity of these models seems to increase the performance of the ensemble model.\n* Title_Mr and Sex_male play an important role in how the model learns.",
            "mc_idx": 167,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Tuning Hyperparameters\n\n> This function tunes the hyperparameters of a given estimator. The output of this function is a score grid with CV scores by fold of the best selected model based on optimize parameter. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 168,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "tuned_rf = tune_model(rf, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 169,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    95,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca965e510>"
                    ]
                },
                "mc_idx": 169,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 95,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_lightgbm = tune_model(lightgbm, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 170,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    96,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca8b54190>"
                    ]
                },
                "mc_idx": 170,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 96,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_catboost = tune_model(catboost, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 171,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    97,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9d266950>"
                    ]
                },
                "mc_idx": 171,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 97,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_gbc = tune_model(gbc, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 172,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    98,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca95a1c50>"
                    ]
                },
                "mc_idx": 172,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 98,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_lda = tune_model(lda, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 173,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    99,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca7877450>"
                    ]
                },
                "mc_idx": 173,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 99,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_lr = tune_model(lr, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 174,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    100,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca6670410>"
                    ]
                },
                "mc_idx": 174,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 100,
                "o_idx": 0
            }
        },
        {
            "source": "## Stacking",
            "mc_idx": 175,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# stack top5 models\nstack_model = stack_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], meta_model = top5[0] ,optimize = 'Accuracy')",
            "mc_idx": 176,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.75,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "stack": 3
                },
                "Model_Train": {
                    "model": 4
                },
                "Model_Evaluation": {
                    "model": 4
                },
                "Model_Interpretation": {
                    "model": 4
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    101,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca2950610>"
                    ]
                },
                "mc_idx": 176,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 101,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot='boundary')",
            "mc_idx": 177,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.5,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "stack": 1
                },
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c102_o000_image_33.png",
                    102,
                    0,
                    33
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 177,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 102,
                "o_idx": 0
            }
        },
        {
            "source": "In machine learning, it is important to determine the boundary. In particular, in tree-based models, it is more important to determine the boundary, because the process of creating a new leaf in the tree is also the process of determining the boundary.\nLooking at the above picture again, there are many overlapping points with the green dot indicating the survior and the blue dot indicating the non-survior. Determining the boundary in this situation would be a very difficult task.\nIf the feature engineer work was done well, the distribution of the two points to determine the boundary would have been well divided. However, the titanic dataset is difficult to do with some missing values \u200b\u200band a small dataset.\n\nLet's look again at the picture above.\nBoundary is not very clean. It can be judged that overfitting has occurred, and therefore it can be judged that it does not have generality.\n\nIf you want to know more about overfitting, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/overfitting-and-underfitting-eda)",
            "mc_idx": 178,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot = 'auc')",
            "mc_idx": 179,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.5,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "stack": 1
                },
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c103_o000_image_34.png",
                    103,
                    0,
                    34
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 179,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 103,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(stack_model, plot='confusion_matrix')",
            "mc_idx": 180,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 0.25,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "stack": 1
                },
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c104_o000_image_35.png",
                    104,
                    0,
                    35
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 180,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 104,
                "o_idx": 0
            }
        },
        {
            "source": "## Soft Blending",
            "mc_idx": 181,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "blend_soft = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'soft')",
            "mc_idx": 182,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    105,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c95154c50>"
                    ]
                },
                "mc_idx": 182,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 105,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot='boundary')",
            "mc_idx": 183,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c106_o000_image_36.png",
                    106,
                    0,
                    36
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 183,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 106,
                "o_idx": 0
            }
        },
        {
            "source": "It seems that the Boundary is set properly.",
            "mc_idx": 184,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot = 'auc')",
            "mc_idx": 185,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c107_o000_image_37.png",
                    107,
                    0,
                    37
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 185,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 107,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(blend_soft, plot='confusion_matrix')",
            "mc_idx": 186,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 0.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.3333333333333333,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c108_o000_image_38.png",
                    108,
                    0,
                    38
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 186,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 108,
                "o_idx": 0
            }
        },
        {
            "source": "## Hard Blending",
            "mc_idx": 187,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "blend_hard = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'hard')",
            "mc_idx": 188,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    109,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca829b910>"
                    ]
                },
                "mc_idx": 188,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 109,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(blend_hard, plot='boundary')",
            "mc_idx": 189,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c110_o000_image_39.png",
                    110,
                    0,
                    39
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 189,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 110,
                "o_idx": 0
            }
        },
        {
            "source": "Compared to the soft blending model, the boundary does not look clean.",
            "mc_idx": 190,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(blend_hard, plot='confusion_matrix')",
            "mc_idx": 191,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 0.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.3333333333333333,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c111_o000_image_40.png",
                    111,
                    0,
                    40
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 191,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 111,
                "o_idx": 0
            }
        },
        {
            "source": "-------------------------------------------------------------------------------------------------\n## Calibrating the final model\n\n> This function calibrates the probability of a given estimator using isotonic or logistic regression. \n",
            "mc_idx": 192,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "cali_model = calibrate_model(blend_soft)",
            "mc_idx": 193,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    112,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7caae86790>"
                    ]
                },
                "mc_idx": 193,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 112,
                "o_idx": 0
            }
        },
        {
            "source": "--------------------------------------------------\n# Finalizing the last model\n> This function trains a given estimator on the entire dataset including the holdout set.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html\n\nThe blend_soft model is selected based on the above result. Finally, the model is tuned with the entire dataset.\n",
            "mc_idx": 194,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "final_model = finalize_model(cali_model)",
            "mc_idx": 195,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 3
                },
                "Model_Evaluation": {
                    "model": 3
                },
                "Model_Interpretation": {
                    "model": 3
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    113,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 195,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 113,
                "o_idx": 0
            }
        },
        {
            "source": "## Checking the final model",
            "mc_idx": 196,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='boundary')",
            "mc_idx": 197,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c114_o000_image_41.png",
                    114,
                    0,
                    41
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 197,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 114,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='confusion_matrix')",
            "mc_idx": 198,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c115_o000_image_42.png",
                    115,
                    0,
                    42
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 198,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 115,
                "o_idx": 0
            }
        },
        {
            "source": "---------------------------------------\n# Checking Last Results",
            "mc_idx": 199,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Considering above results, the soft blending model seems appropriate among ensemble models. Therefore, we use this model to make the final prediction with the test dataset.",
            "mc_idx": 200,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "last_prediction = final_model.predict(X_test_df)\nsubmission_data['Survived'] = last_prediction.astype(int)\nsubmission_data.to_csv('submission.csv', index = False)",
            "mc_idx": 201,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    ".to_csv(": 1,
                    "to_csv": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    116,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 201,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 116,
                "o_idx": 0
            }
        }
    ],
    "code_cells": [
        {
            "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session",
            "mc_idx": 0,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.12121212121212122,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.06060606060606061,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.12121212121212122,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 30,
                    "libraries": 1,
                    "install": 1,
                    "session": 1
                },
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".join(": 1,
                    ".join": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    "write": 2,
                    "save": 2
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n"
                    ]
                },
                "mc_idx": 0,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "!pip install pycaret-nightly\n!pip install missingno",
            "mc_idx": 5,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "!pip install": 2,
                    "install": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Collecting pycaret-nightly\r\n  Downloading pycaret_nightly-2.3.5.dev1638234228-py3-none-any.whl (288 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 288 kB 5.2 MB/s \r\n\u001b[?25hCollecting mlflow\r\n  Downloading mlflow-1.22.0-py3-none-any.whl (15.5 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 15.5 MB 58.4 MB/s \r\n\u001b[?25hRequirement already satisfied: matplotlib in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.4.3)\r\nRequirement already satisfied: joblib in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.0.1)\r\nRequirement already satisfied: kmodes>=0.10.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.11.1)\r\nRequirement already satisfied: yellowbrick>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.3.post1)\r\nRequirement already satisfied: scikit-plot in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.3.7)\r\nRequirement already satisfied: numpy==1.19.5 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.19.5)\r\nRequirement already satisfied: umap-learn in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.5.1)\r\nRequirement already satisfied: textblob in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.15.3)\r\nRequirement already satisfied: pyLDAvis in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.2.2)\r\nRequirement already satisfied: mlxtend>=0.17.0 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.19.0)\r\nRequirement already satisfied: wordcloud in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.8.1)\r\nCollecting imbalanced-learn==0.7.0\r\n  Downloading imbalanced_learn-0.7.0-py3-none-any.whl (167 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 167 kB 65.4 MB/s \r\n\u001b[?25hCollecting scipy<=1.5.4\r\n  Downloading scipy-1.5.4-cp37-cp37m-manylinux1_x86_64.whl (25.9 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 25.9 MB 52.5 MB/s \r\n\u001b[?25hRequirement already satisfied: scikit-learn==0.23.2 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.23.2)\r\nRequirement already satisfied: seaborn in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.11.2)\r\nRequirement already satisfied: cufflinks>=0.17.0 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.17.3)\r\nCollecting spacy<2.4.0\r\n  Downloading spacy-2.3.7-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (10.4 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10.4 MB 49.0 MB/s \r\n\u001b[?25hCollecting gensim<4.0.0\r\n  Downloading gensim-3.8.3-cp37-cp37m-manylinux1_x86_64.whl (24.2 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 24.2 MB 62.0 MB/s \r\n\u001b[?25hCollecting pyod\r\n  Downloading pyod-0.9.5.tar.gz (113 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 113 kB 39.9 MB/s \r\n\u001b[?25hRequirement already satisfied: pandas-profiling>=2.8.0 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.0.0)\r\nRequirement already satisfied: plotly>=4.4.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (5.3.1)\r\nRequirement already satisfied: ipywidgets in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (7.6.5)\r\nRequirement already satisfied: Boruta in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (0.3)\r\nRequirement already satisfied: nltk in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.2.4)\r\nRequirement already satisfied: pandas in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (1.3.3)\r\nRequirement already satisfied: lightgbm>=2.3.1 in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (3.2.1)\r\nRequirement already satisfied: IPython in /opt/conda/lib/python3.7/site-packages (from pycaret-nightly) (7.27.0)\r\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from scikit-learn==0.23.2->pycaret-nightly) (2.2.0)\r\nRequirement already satisfied: colorlover>=0.2.1 in /opt/conda/lib/python3.7/site-packages (from cufflinks>=0.17.0->pycaret-nightly) (0.3.0)\r\nRequirement already satisfied: setuptools>=34.4.1 in /opt/conda/lib/python3.7/site-packages (from cufflinks>=0.17.0->pycaret-nightly) (58.0.4)\r\nRequirement already satisfied: six>=1.9.0 in /opt/conda/lib/python3.7/site-packages (from cufflinks>=0.17.0->pycaret-nightly) (1.16.0)\r\nRequirement already satisfied: smart-open>=1.8.1 in /opt/conda/lib/python3.7/site-packages (from gensim<4.0.0->pycaret-nightly) (5.2.1)\r\nRequirement already satisfied: backcall in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.2.0)\r\nRequirement already satisfied: decorator in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (5.1.0)\r\nRequirement already satisfied: pygments in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (2.10.0)\r\nRequirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (3.0.20)\r\nRequirement already satisfied: traitlets>=4.2 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (5.1.0)\r\nRequirement already satisfied: matplotlib-inline in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.1.3)\r\nRequirement already satisfied: pexpect>4.3 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (4.8.0)\r\nRequirement already satisfied: jedi>=0.16 in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.18.0)\r\nRequirement already satisfied: pickleshare in /opt/conda/lib/python3.7/site-packages (from IPython->pycaret-nightly) (0.7.5)\r\nRequirement already satisfied: ipykernel>=4.5.1 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (6.4.1)\r\nRequirement already satisfied: nbformat>=4.2.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (5.1.3)\r\nRequirement already satisfied: widgetsnbextension~=3.5.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (3.5.1)\r\nRequirement already satisfied: ipython-genutils~=0.2.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (0.2.0)\r\nRequirement already satisfied: jupyterlab-widgets>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from ipywidgets->pycaret-nightly) (1.0.2)\r\nRequirement already satisfied: debugpy<2.0,>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (1.4.1)\r\nRequirement already satisfied: importlib-metadata<5 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (4.8.1)\r\nRequirement already satisfied: argcomplete>=1.12.3 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (1.12.3)\r\nRequirement already satisfied: jupyter-client<8.0 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (7.0.3)\r\nRequirement already satisfied: tornado<7.0,>=4.2 in /opt/conda/lib/python3.7/site-packages (from ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (6.1)\r\nRequirement already satisfied: typing-extensions>=3.6.4 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata<5->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (3.10.0.2)\r\nRequirement already satisfied: zipp>=0.5 in /opt/conda/lib/python3.7/site-packages (from importlib-metadata<5->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (3.5.0)\r\nRequirement already satisfied: parso<0.9.0,>=0.8.0 in /opt/conda/lib/python3.7/site-packages (from jedi>=0.16->IPython->pycaret-nightly) (0.8.2)\r\nRequirement already satisfied: nest-asyncio>=1.5 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (1.5.1)\r\nRequirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (2.8.0)\r\nRequirement already satisfied: pyzmq>=13 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (22.3.0)\r\nRequirement already satisfied: entrypoints in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (0.3)\r\nRequirement already satisfied: jupyter-core>=4.6.0 in /opt/conda/lib/python3.7/site-packages (from jupyter-client<8.0->ipykernel>=4.5.1->ipywidgets->pycaret-nightly) (4.8.1)\r\nRequirement already satisfied: wheel in /opt/conda/lib/python3.7/site-packages (from lightgbm>=2.3.1->pycaret-nightly) (0.37.0)\r\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (1.3.2)\r\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (8.2.0)\r\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (2.4.7)\r\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib->pycaret-nightly) (0.10.0)\r\nRequirement already satisfied: jsonschema!=2.5.0,>=2.4 in /opt/conda/lib/python3.7/site-packages (from nbformat>=4.2.0->ipywidgets->pycaret-nightly) (3.2.0)\r\nRequirement already satisfied: attrs>=17.4.0 in /opt/conda/lib/python3.7/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets->pycaret-nightly) (21.2.0)\r\nRequirement already satisfied: pyrsistent>=0.14.0 in /opt/conda/lib/python3.7/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.2.0->ipywidgets->pycaret-nightly) (0.17.3)\r\nRequirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.7/site-packages (from pandas->pycaret-nightly) (2021.1)\r\nRequirement already satisfied: phik>=0.11.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.11.2)\r\nRequirement already satisfied: tqdm>=4.48.2 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (4.62.3)\r\nRequirement already satisfied: htmlmin>=0.1.12 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.1.12)\r\nRequirement already satisfied: PyYAML>=5.0.0 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (5.4.1)\r\nRequirement already satisfied: visions[type_image_path]==0.7.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.7.1)\r\nRequirement already satisfied: requests>=2.24.0 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (2.25.1)\r\nRequirement already satisfied: tangled-up-in-unicode==0.1.0 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.1.0)\r\nRequirement already satisfied: missingno>=0.4.2 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (0.4.2)\r\nRequirement already satisfied: jinja2>=2.11.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (3.0.2)\r\nRequirement already satisfied: pydantic>=1.8.1 in /opt/conda/lib/python3.7/site-packages (from pandas-profiling>=2.8.0->pycaret-nightly) (1.8.2)\r\nRequirement already satisfied: multimethod==1.4 in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (1.4)\r\nRequirement already satisfied: networkx>=2.4 in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (2.5)\r\nRequirement already satisfied: bottleneck in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (1.3.2)\r\nRequirement already satisfied: imagehash in /opt/conda/lib/python3.7/site-packages (from visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (4.2.1)\r\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.7/site-packages (from jinja2>=2.11.1->pandas-profiling>=2.8.0->pycaret-nightly) (2.0.1)\r\nRequirement already satisfied: ptyprocess>=0.5 in /opt/conda/lib/python3.7/site-packages (from pexpect>4.3->IPython->pycaret-nightly) (0.7.0)\r\nRequirement already satisfied: tenacity>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from plotly>=4.4.1->pycaret-nightly) (8.0.1)\r\nRequirement already satisfied: wcwidth in /opt/conda/lib/python3.7/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->IPython->pycaret-nightly) (0.2.5)\r\nRequirement already satisfied: chardet<5,>=3.0.2 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (4.0.0)\r\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (2021.10.8)\r\nRequirement already satisfied: urllib3<1.27,>=1.21.1 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (1.26.6)\r\nRequirement already satisfied: idna<3,>=2.5 in /opt/conda/lib/python3.7/site-packages (from requests>=2.24.0->pandas-profiling>=2.8.0->pycaret-nightly) (2.10)\r\nRequirement already satisfied: wasabi<1.1.0,>=0.4.0 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (0.8.2)\r\nRequirement already satisfied: preshed<3.1.0,>=3.0.2 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (3.0.5)\r\nCollecting catalogue<1.1.0,>=0.0.7\r\n  Downloading catalogue-1.0.0-py2.py3-none-any.whl (7.7 kB)\r\nRequirement already satisfied: cymem<2.1.0,>=2.0.2 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (2.0.5)\r\nRequirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (1.0.5)\r\nCollecting plac<1.2.0,>=0.9.6\r\n  Downloading plac-1.1.3-py2.py3-none-any.whl (20 kB)\r\nCollecting srsly<1.1.0,>=1.0.2\r\n  Downloading srsly-1.0.5-cp37-cp37m-manylinux2014_x86_64.whl (184 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 184 kB 63.4 MB/s \r\n\u001b[?25hRequirement already satisfied: blis<0.8.0,>=0.4.0 in /opt/conda/lib/python3.7/site-packages (from spacy<2.4.0->pycaret-nightly) (0.7.4)\r\nCollecting thinc<7.5.0,>=7.4.1\r\n  Downloading thinc-7.4.5-cp37-cp37m-manylinux2014_x86_64.whl (1.0 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.0 MB 46.8 MB/s \r\n\u001b[?25hRequirement already satisfied: notebook>=4.4.1 in /opt/conda/lib/python3.7/site-packages (from widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (6.4.4)\r\nRequirement already satisfied: nbconvert in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (6.1.0)\r\nRequirement already satisfied: prometheus-client in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.11.0)\r\nRequirement already satisfied: terminado>=0.8.3 in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.12.1)\r\nRequirement already satisfied: argon2-cffi in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (20.1.0)\r\nRequirement already satisfied: Send2Trash>=1.5.0 in /opt/conda/lib/python3.7/site-packages (from notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (1.8.0)\r\nRequirement already satisfied: cffi>=1.0.0 in /opt/conda/lib/python3.7/site-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (1.14.6)\r\nRequirement already satisfied: pycparser in /opt/conda/lib/python3.7/site-packages (from cffi>=1.0.0->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (2.20)\r\nRequirement already satisfied: PyWavelets in /opt/conda/lib/python3.7/site-packages (from imagehash->visions[type_image_path]==0.7.1->pandas-profiling>=2.8.0->pycaret-nightly) (1.1.1)\r\nCollecting prometheus-flask-exporter\r\n  Downloading prometheus_flask_exporter-0.18.6-py3-none-any.whl (17 kB)\r\nCollecting gunicorn\r\n  Downloading gunicorn-20.1.0-py3-none-any.whl (79 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 79 kB 6.1 MB/s \r\n\u001b[?25hRequirement already satisfied: docker>=4.0.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (5.0.2)\r\nRequirement already satisfied: gitpython>=2.1.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (3.1.23)\r\nCollecting querystring-parser\r\n  Downloading querystring_parser-1.2.4-py2.py3-none-any.whl (7.9 kB)\r\nRequirement already satisfied: click>=7.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (8.0.1)\r\nRequirement already satisfied: sqlparse>=0.3.1 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (0.4.2)\r\nRequirement already satisfied: cloudpickle in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (2.0.0)\r\nRequirement already satisfied: protobuf>=3.7.0 in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (3.18.1)\r\nCollecting databricks-cli>=0.8.7\r\n  Downloading databricks-cli-0.16.2.tar.gz (58 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 58 kB 4.0 MB/s \r\n\u001b[?25hCollecting alembic<=1.4.1\r\n  Downloading alembic-1.4.1.tar.gz (1.1 MB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1.1 MB 59.3 MB/s \r\n\u001b[?25hRequirement already satisfied: sqlalchemy in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (1.4.25)\r\nRequirement already satisfied: packaging in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (21.0)\r\nRequirement already satisfied: Flask in /opt/conda/lib/python3.7/site-packages (from mlflow->pycaret-nightly) (2.0.2)\r\nRequirement already satisfied: Mako in /opt/conda/lib/python3.7/site-packages (from alembic<=1.4.1->mlflow->pycaret-nightly) (1.1.5)\r\nCollecting python-editor>=0.3\r\n  Downloading python_editor-1.0.4-py3-none-any.whl (4.9 kB)\r\nRequirement already satisfied: tabulate>=0.7.7 in /opt/conda/lib/python3.7/site-packages (from databricks-cli>=0.8.7->mlflow->pycaret-nightly) (0.8.9)\r\nRequirement already satisfied: websocket-client>=0.32.0 in /opt/conda/lib/python3.7/site-packages (from docker>=4.0.0->mlflow->pycaret-nightly) (0.57.0)\r\nRequirement already satisfied: gitdb<5,>=4.0.1 in /opt/conda/lib/python3.7/site-packages (from gitpython>=2.1.0->mlflow->pycaret-nightly) (4.0.7)\r\nRequirement already satisfied: smmap<5,>=3.0.1 in /opt/conda/lib/python3.7/site-packages (from gitdb<5,>=4.0.1->gitpython>=2.1.0->mlflow->pycaret-nightly) (3.0.5)\r\nRequirement already satisfied: greenlet!=0.4.17 in /opt/conda/lib/python3.7/site-packages (from sqlalchemy->mlflow->pycaret-nightly) (1.1.1)\r\nRequirement already satisfied: itsdangerous>=2.0 in /opt/conda/lib/python3.7/site-packages (from Flask->mlflow->pycaret-nightly) (2.0.1)\r\nRequirement already satisfied: Werkzeug>=2.0 in /opt/conda/lib/python3.7/site-packages (from Flask->mlflow->pycaret-nightly) (2.0.1)\r\nRequirement already satisfied: defusedxml in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.7.1)\r\nRequirement already satisfied: pandocfilters>=1.4.1 in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (1.5.0)\r\nRequirement already satisfied: nbclient<0.6.0,>=0.5.0 in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.5.4)\r\nRequirement already satisfied: jupyterlab-pygments in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.1.2)\r\nRequirement already satisfied: testpath in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.5.0)\r\nRequirement already satisfied: bleach in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (4.1.0)\r\nRequirement already satisfied: mistune<2,>=0.8.1 in /opt/conda/lib/python3.7/site-packages (from nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.8.4)\r\nRequirement already satisfied: webencodings in /opt/conda/lib/python3.7/site-packages (from bleach->nbconvert->notebook>=4.4.1->widgetsnbextension~=3.5.0->ipywidgets->pycaret-nightly) (0.5.1)\r\nRequirement already satisfied: numexpr in /opt/conda/lib/python3.7/site-packages (from pyLDAvis->pycaret-nightly) (2.7.3)\r\nRequirement already satisfied: funcy in /opt/conda/lib/python3.7/site-packages (from pyLDAvis->pycaret-nightly) (1.16)\r\nRequirement already satisfied: future in /opt/conda/lib/python3.7/site-packages (from pyLDAvis->pycaret-nightly) (0.18.2)\r\nRequirement already satisfied: numba>=0.35 in /opt/conda/lib/python3.7/site-packages (from pyod->pycaret-nightly) (0.54.0)\r\nRequirement already satisfied: statsmodels in /opt/conda/lib/python3.7/site-packages (from pyod->pycaret-nightly) (0.12.2)\r\nRequirement already satisfied: llvmlite<0.38,>=0.37.0rc1 in /opt/conda/lib/python3.7/site-packages (from numba>=0.35->pyod->pycaret-nightly) (0.37.0)\r\nRequirement already satisfied: patsy>=0.5 in /opt/conda/lib/python3.7/site-packages (from statsmodels->pyod->pycaret-nightly) (0.5.1)\r\nRequirement already satisfied: pynndescent>=0.5 in /opt/conda/lib/python3.7/site-packages (from umap-learn->pycaret-nightly) (0.5.4)\r\nBuilding wheels for collected packages: alembic, databricks-cli, pyod\r\n  Building wheel for alembic (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \bdone\r\n\u001b[?25h  Created wheel for alembic: filename=alembic-1.4.1-py2.py3-none-any.whl size=158172 sha256=776420b2587eb20a96ed09559cb7e6ff0e51c3553b240f95631780931f02912d\r\n  Stored in directory: /root/.cache/pip/wheels/be/5d/0a/9e13f53f4f5dfb67cd8d245bb7cdffe12f135846f491a283e3\r\n  Building wheel for databricks-cli (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \bdone\r\n\u001b[?25h  Created wheel for databricks-cli: filename=databricks_cli-0.16.2-py3-none-any.whl size=106811 sha256=a4df6e009f9bef047201171e042d044a52767ca48d8da73c7726e84579ef088d\r\n  Stored in directory: /root/.cache/pip/wheels/f4/5c/ed/e1ce20a53095f63b27b4964abbad03e59cf3472822addf7d29\r\n  Building wheel for pyod (setup.py) ... \u001b[?25l-\b \b\\\b \bdone\r\n\u001b[?25h  Created wheel for pyod: filename=pyod-0.9.5-py3-none-any.whl size=132699 sha256=8485aab17349e0484360aa86460f5043053ff0a578a0f72b42616003f2b108b8\r\n  Stored in directory: /root/.cache/pip/wheels/3d/bb/b7/62b60fb451b33b0df1ab8006697fba7a6a49709a629055cf77\r\nSuccessfully built alembic databricks-cli pyod\r\nInstalling collected packages: scipy, srsly, python-editor, plac, catalogue, thinc, querystring-parser, prometheus-flask-exporter, gunicorn, databricks-cli, alembic, spacy, pyod, mlflow, imbalanced-learn, gensim, pycaret-nightly\r\n  Attempting uninstall: scipy\r\n    Found existing installation: scipy 1.7.1\r\n    Uninstalling scipy-1.7.1:\r\n      Successfully uninstalled scipy-1.7.1\r\n  Attempting uninstall: srsly\r\n    Found existing installation: srsly 2.4.1\r\n    Uninstalling srsly-2.4.1:\r\n      Successfully uninstalled srsly-2.4.1\r\n  Attempting uninstall: catalogue\r\n    Found existing installation: catalogue 2.0.6\r\n    Uninstalling catalogue-2.0.6:\r\n      Successfully uninstalled catalogue-2.0.6\r\n  Attempting uninstall: thinc\r\n    Found existing installation: thinc 8.0.10\r\n    Uninstalling thinc-8.0.10:\r\n      Successfully uninstalled thinc-8.0.10\r\n  Attempting uninstall: alembic\r\n    Found existing installation: alembic 1.7.4\r\n    Uninstalling alembic-1.7.4:\r\n      Successfully uninstalled alembic-1.7.4\r\n  Attempting uninstall: spacy\r\n    Found existing installation: spacy 3.1.3\r\n    Uninstalling spacy-3.1.3:\r\n      Successfully uninstalled spacy-3.1.3\r\n  Attempting uninstall: imbalanced-learn\r\n    Found existing installation: imbalanced-learn 0.8.1\r\n    Uninstalling imbalanced-learn-0.8.1:\r\n      Successfully uninstalled imbalanced-learn-0.8.1\r\n  Attempting uninstall: gensim\r\n    Found existing installation: gensim 4.0.1\r\n    Uninstalling gensim-4.0.1:\r\n      Successfully uninstalled gensim-4.0.1\r\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\nscattertext 0.1.4 requires gensim>=4.0.0, but you have gensim 3.8.3 which is incompatible.\r\npdpbox 0.2.1 requires matplotlib==3.1.1, but you have matplotlib 3.4.3 which is incompatible.\r\nmatrixprofile 1.1.10 requires protobuf==3.11.2, but you have protobuf 3.18.1 which is incompatible.\r\nen-core-web-sm 3.1.0 requires spacy<3.2.0,>=3.1.0, but you have spacy 2.3.7 which is incompatible.\r\nen-core-web-lg 3.1.0 requires spacy<3.2.0,>=3.1.0, but you have spacy 2.3.7 which is incompatible.\u001b[0m\r\nSuccessfully installed alembic-1.4.1 catalogue-1.0.0 databricks-cli-0.16.2 gensim-3.8.3 gunicorn-20.1.0 imbalanced-learn-0.7.0 mlflow-1.22.0 plac-1.1.3 prometheus-flask-exporter-0.18.6 pycaret-nightly-2.3.5.dev1638234228 pyod-0.9.5 python-editor-1.0.4 querystring-parser-1.2.4 scipy-1.5.4 spacy-2.3.7 srsly-1.0.5 thinc-7.4.5\r\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\r\nRequirement already satisfied: missingno in /opt/conda/lib/python3.7/site-packages (0.4.2)\r\nRequirement already satisfied: numpy in /opt/conda/lib/python3.7/site-packages (from missingno) (1.19.5)\r\nRequirement already satisfied: seaborn in /opt/conda/lib/python3.7/site-packages (from missingno) (0.11.2)\r\nRequirement already satisfied: matplotlib in /opt/conda/lib/python3.7/site-packages (from missingno) (3.4.3)\r\nRequirement already satisfied: scipy in /opt/conda/lib/python3.7/site-packages (from missingno) (1.5.4)\r\nRequirement already satisfied: pyparsing>=2.2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (2.4.7)\r\nRequirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (8.2.0)\r\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (0.10.0)\r\nRequirement already satisfied: python-dateutil>=2.7 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (2.8.0)\r\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->missingno) (1.3.2)\r\nRequirement already satisfied: six in /opt/conda/lib/python3.7/site-packages (from cycler>=0.10->matplotlib->missingno) (1.16.0)\r\nRequirement already satisfied: pandas>=0.23 in /opt/conda/lib/python3.7/site-packages (from seaborn->missingno) (1.3.3)\r\nRequirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.7/site-packages (from pandas>=0.23->seaborn->missingno) (2021.1)\r\n\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\r\n"
                    ]
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import f1_score, confusion_matrix, precision_recall_curve, roc_curve\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn import preprocessing\nimport umap\nimport umap.plot\n\nimport warnings\nwarnings.filterwarnings('ignore')",
            "mc_idx": 6,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.016666666666666666,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.15833333333333333,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.008333333333333333,
                "Visualization": 0.025,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 12
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "accuracy_score": 2,
                    "precision_score": 2,
                    "recall_score": 2,
                    "f1_score": 3,
                    "precision": 2,
                    "recall": 2,
                    "roc_auc_score": 2,
                    "precision_recall_curve": 1,
                    "roc_curve": 1
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "matplotlib": 2,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "def get_clf_eval(y_test, pred=None, pred_proba=None):\n    confusion = confusion_matrix( y_test, pred)\n    accuracy = accuracy_score(y_test , pred)\n    precision = precision_score(y_test , pred)\n    recall = recall_score(y_test , pred)\n    f1 = f1_score(y_test,pred)\n\n    roc_auc = roc_auc_score(y_test, pred_proba)\n    print('confusion matrix')\n    print(confusion)\n\n    # ROC-AUC print \n    print('accuracy: {0:.4f}, precision: {1:.4f}, recall: {2:.4f},\\\n    F1: {3:.4f}, AUC:{4:.4f}'.format(accuracy, precision, recall, f1, roc_auc))\n    return confusion",
            "mc_idx": 8,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "accuracy_score": 2,
                    "precision_score": 2,
                    "recall_score": 2,
                    "f1_score": 3,
                    "precision": 4,
                    "recall": 4,
                    "roc_auc_score": 2
                },
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 8,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "def apply_pca(X, standardize=True):\n    # Standardize\n    if standardize:\n        X = (X - X.mean(axis=0)) / X.std(axis=0)\n    # Create principal components\n    pca = PCA()\n    X_pca = pca.fit_transform(X)\n    # Convert to dataframe\n    component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n    X_pca = pd.DataFrame(X_pca, columns=component_names)\n    # Create loadings\n    loadings = pd.DataFrame(\n        pca.components_.T,  # transpose the matrix of loadings\n        columns=component_names,  # so the columns are the principal components\n        index=X.columns,  # and the rows are the original features\n    )\n    return pca, X_pca, loadings",
            "mc_idx": 9,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6923076923076923,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.07692307692307693,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    "columns": 4,
                    "shape": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "pca": 11
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "def outlier_iqr(data):\n    q1,q3 = np.percentile(data,[25,75])\n    iqr = q3-q1\n    lower = q1-(iqr*1.5)\n    upper = q3+(iqr*1.5)\n    return np.where((data>upper)|(data<lower))",
            "mc_idx": 10,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "np.percentile": 1
                },
                "Data_Transform": {
                    "tile": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    5,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 10,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "def encode_features(dataDF,feat_list):\n    for feature in feat_list:\n        le = preprocessing.LabelEncoder()\n        le = le.fit(dataDF[feature])\n        dataDF[feature] = le.transform(dataDF[feature])\n        \n    return dataDF",
            "mc_idx": 11,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "transform": 1,
                    "labelencoder": 2
                },
                "Model_Train": {
                    ".fit(": 1
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 11,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_data = pd.read_csv('/kaggle/input/titanic/test.csv')\nsubmission_data = pd.read_csv('/kaggle/input/titanic/gender_submission.csv')\ntitanic_df = pd.concat([train_data, test_data], ignore_index = True, sort = False)\ntr_idx = titanic_df['Survived'].notnull()",
            "mc_idx": 13,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.08333333333333333,
                "Data_Transform": 0.16666666666666666,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 6,
                    "pd.read_": 6
                },
                "Exploratory_Data_Analysis": {
                    ".notnull": 1
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 13,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df.head(3).T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'})",
            "mc_idx": 14,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    ".head": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    8,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7cb947e2d0>"
                    ]
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df.shape",
            "mc_idx": 15,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    9,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "(1309, 12)"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df.drop(['PassengerId'],axis=1,inplace=True)",
            "mc_idx": 17,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df.info()",
            "mc_idx": 20,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".info(": 1,
                    "info": 1,
                    ".info": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1309 entries, 0 to 1308\nData columns (total 11 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Survived  891 non-null    float64\n 1   Pclass    1309 non-null   int64  \n 2   Name      1309 non-null   object \n 3   Sex       1309 non-null   object \n 4   Age       1046 non-null   float64\n 5   SibSp     1309 non-null   int64  \n 6   Parch     1309 non-null   int64  \n 7   Ticket    1309 non-null   object \n 8   Fare      1308 non-null   float64\n 9   Cabin     295 non-null    object \n 10  Embarked  1307 non-null   object \ndtypes: float64(3), int64(3), object(5)\nmemory usage: 112.6+ KB\n"
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "print(plt.style.available)",
            "mc_idx": 22,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "['Solarize_Light2', '_classic_test_patch', 'bmh', 'classic', 'dark_background', 'fast', 'fivethirtyeight', 'ggplot', 'grayscale', 'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark', 'seaborn-dark-palette', 'seaborn-darkgrid', 'seaborn-deep', 'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel', 'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white', 'seaborn-whitegrid', 'tableau-colorblind10']\n"
                    ]
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "total_cnt = titanic_df['Survived'].count()\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nf, ax = plt.subplots(1, 2, figsize = (18, 8))\ntitanic_df['Survived'].value_counts().plot.pie(explode = [0, 0.1], \n                                               autopct = '%1.1f%%', \n                                               ax = ax[0],\n                                               shadow = True,\n                                               colors = ['grey', 'green'])\nax[0].set_title('Survived %')\nax[0].set_ylabel('')\nsns.countplot('Survived', data = titanic_df, ax = ax[1], palette='Blues_r')\nax[1].set_title('Survived')\nfor p in ax[1].patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax[1].text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 23,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5555555555555556,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "sns.": 5,
                    "size": 2,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c013_o000_image_0.png",
                    13,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1296x576 with 2 Axes>"
                    ]
                },
                "mc_idx": 23,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "import missingno as msno\nmsno.matrix(titanic_df.drop(['Survived'],axis=1))",
            "mc_idx": 26,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.1,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c014_o001_image_1.png",
                    14,
                    1,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<AxesSubplot:>",
                        "<Figure size 1800x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 1
            }
        },
        {
            "source": "titanic_df.drop(['Survived'],axis=1).isnull().sum()",
            "mc_idx": 27,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Pclass         0\nName           0\nSex            0\nAge          263\nSibSp          0\nParch          0\nTicket         0\nFare           1\nCabin       1014\nEmbarked       2\ndtype: int64"
                    ]
                },
                "mc_idx": 27,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Cabin'].unique()",
            "mc_idx": 31,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array([nan, 'C85', 'C123', 'E46', 'G6', 'C103', 'D56', 'A6',\n       'C23 C25 C27', 'B78', 'D33', 'B30', 'C52', 'B28', 'C83', 'F33',\n       'F G73', 'E31', 'A5', 'D10 D12', 'D26', 'C110', 'B58 B60', 'E101',\n       'F E69', 'D47', 'B86', 'F2', 'C2', 'E33', 'B19', 'A7', 'C49', 'F4',\n       'A32', 'B4', 'B80', 'A31', 'D36', 'D15', 'C93', 'C78', 'D35',\n       'C87', 'B77', 'E67', 'B94', 'C125', 'C99', 'C118', 'D7', 'A19',\n       'B49', 'D', 'C22 C26', 'C106', 'C65', 'E36', 'C54',\n       'B57 B59 B63 B66', 'C7', 'E34', 'C32', 'B18', 'C124', 'C91', 'E40',\n       'T', 'C128', 'D37', 'B35', 'E50', 'C82', 'B96 B98', 'E10', 'E44',\n       'A34', 'C104', 'C111', 'C92', 'E38', 'D21', 'E12', 'E63', 'A14',\n       'B37', 'C30', 'D20', 'B79', 'E25', 'D46', 'B73', 'C95', 'B38',\n       'B39', 'B22', 'C86', 'C70', 'A16', 'C101', 'C68', 'A10', 'E68',\n       'B41', 'A20', 'D19', 'D50', 'D9', 'A23', 'B50', 'A26', 'D48',\n       'E58', 'C126', 'B71', 'B51 B53 B55', 'D49', 'B5', 'B20', 'F G63',\n       'C62 C64', 'E24', 'C90', 'C45', 'E8', 'B101', 'D45', 'C46', 'D30',\n       'E121', 'D11', 'E77', 'F38', 'B3', 'D6', 'B82 B84', 'D17', 'A36',\n       'B102', 'B69', 'E49', 'C47', 'D28', 'E17', 'A24', 'C50', 'B42',\n       'C148', 'B45', 'B36', 'A21', 'D34', 'A9', 'C31', 'B61', 'C53',\n       'D43', 'C130', 'C132', 'C55 C57', 'C116', 'F', 'A29', 'C6', 'C28',\n       'C51', 'C97', 'D22', 'B10', 'E45', 'E52', 'A11', 'B11', 'C80',\n       'C89', 'F E46', 'B26', 'F E57', 'A18', 'E60', 'E39 E41',\n       'B52 B54 B56', 'C39', 'B24', 'D40', 'D38', 'C105'], dtype=object)"
                    ]
                },
                "mc_idx": 31,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Cabin'].isnull().sum()",
            "mc_idx": 33,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "1014"
                    ]
                },
                "mc_idx": 33,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Has_Cabin'] = titanic_df['Cabin'].isnull().astype(int)",
            "mc_idx": 36,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1
                },
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    18,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 36,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "total_cnt = titanic_df['Survived'].count()\nrcParams['figure.figsize'] = 12,8\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Has_Cabin\",\n                   hue=\"Survived\", \n                   data=titanic_df,\n                   palette = 'Blues_r')\nax.set_title('Survived Count/Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10, f'{height} / {height / total_cnt * 100:2.1f}%', va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 37,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 4,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c019_o000_image_2.png",
                    19,
                    0,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 37,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 10,7\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\ntitanic_df['Cabin'] = titanic_df['Cabin'].fillna('N')\ntitanic_df['Cabin_label'] = titanic_df['Cabin'].str.get(0)\nax = sns.barplot(x = 'Cabin_label', y = 'Survived', data = titanic_df, palette = 'Blues_r',ci=False)\nsns.despine()",
            "mc_idx": 40,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.4,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.2,
                "Visualization": 0.8,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {
                    ".fillna(": 1,
                    ".fillna": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c020_o000_image_3.png",
                    20,
                    0,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 40,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x=\"Cabin_label\", hue=\"Survived\", data=titanic_df,palette = 'Blues_r')\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 41,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 4,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c021_o000_image_4.png",
                    21,
                    0,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 41,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Parch',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 43,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c022_o000_image_5.png",
                    22,
                    0,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 43,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='SibSp',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 45,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c023_o000_image_6.png",
                    23,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 45,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 23,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['FamilySize'] = titanic_df['SibSp'] + titanic_df['Parch'] + 1",
            "mc_idx": 48,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    24,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 48,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 24,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='FamilySize',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=20)\nsns.despine()",
            "mc_idx": 49,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.125,
                "Visualization": 0.625,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c025_o000_image_7.png",
                    25,
                    0,
                    7
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 49,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 25,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['IsAlone'] = 0\ntitanic_df.loc[titanic_df['FamilySize'] == 1, 'IsAlone'] = 1",
            "mc_idx": 52,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    26,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 52,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 26,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='IsAlone',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine()",
            "mc_idx": 53,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c027_o000_image_8.png",
                    27,
                    0,
                    8
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 53,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 27,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Name'].unique()[:5]",
            "mc_idx": 56,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    28,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array(['Braund, Mr. Owen Harris',\n       'Cumings, Mrs. John Bradley (Florence Briggs Thayer)',\n       'Heikkinen, Miss. Laina',\n       'Futrelle, Mrs. Jacques Heath (Lily May Peel)',\n       'Allen, Mr. William Henry'], dtype=object)"
                    ]
                },
                "mc_idx": 56,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 28,
                "o_idx": 0
            }
        },
        {
            "source": "import re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+)\\.', name)\n    # If the title exists, extract and return it.\n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\ntitanic_df['Title'] = titanic_df['Name'].apply(get_title)",
            "mc_idx": 58,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {
                    "extract": 1
                },
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".apply(": 1,
                    ".apply": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    29,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 58,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 29,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Title'].unique()",
            "mc_idx": 59,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    30,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array(['Mr', 'Mrs', 'Miss', 'Master', 'Don', 'Rev', 'Dr', 'Mme', 'Ms',\n       'Major', 'Lady', 'Sir', 'Mlle', 'Col', 'Capt', 'Countess',\n       'Jonkheer', 'Dona'], dtype=object)"
                    ]
                },
                "mc_idx": 59,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 30,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Title'] = titanic_df['Title'].replace(\n       ['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], \n       'Rare')\n\ntitanic_df['Title'] = titanic_df['Title'].replace('Mlle', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Ms', 'Miss')\ntitanic_df['Title'] = titanic_df['Title'].replace('Mme', 'Mrs')\ntitanic_df['Title'].unique()",
            "mc_idx": 60,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".replace(": 4,
                    ".replace": 4
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    31,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "array(['Mr', 'Mrs', 'Miss', 'Master', 'Rare'], dtype=object)"
                    ]
                },
                "mc_idx": 60,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 31,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,10\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Title',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nax.set_title('Survived Rate')\nplt.legend(loc = 'upper right')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 7, f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine()",
            "mc_idx": 61,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c032_o000_image_9.png",
                    32,
                    0,
                    9
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 61,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 32,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,15\ntitles = titanic_df['Title'].unique()\nplt.subplots_adjust(hspace=1.5)\nidx = 1\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\n\nfor title in titles:\n    plt.subplot(3,2,idx)\n    ax = sns.histplot(x='Age',data=titanic_df[titanic_df['Title']== title],hue ='Survived',palette=\"Blues_d\",kde=True)\n    ax.set_title(title)\n    sns.despine()\n    idx = idx + 1",
            "mc_idx": 63,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.8333333333333334,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c033_o000_image_10.png",
                    33,
                    0,
                    10
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x1080 with 5 Axes>"
                    ]
                },
                "mc_idx": 63,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 33,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Age'].isnull().sum()",
            "mc_idx": 66,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1,
                    ".sum": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    34,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "263"
                    ]
                },
                "mc_idx": 66,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 34,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Has_Age'] = titanic_df['Age'].isnull().astype(int)",
            "mc_idx": 69,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isnull": 1
                },
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    35,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 69,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 35,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 10,6\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nax = sns.countplot(x='Has_Age',hue ='Survived',data=titanic_df,palette=\"Blues_r\")\nplt.legend(loc = 'upper right')\nax.set_title('Survived Rate')\nfor p in ax.patches:\n    x, height, width = p.get_x(), p.get_height(), p.get_width()\n    ax.text(x + width / 2, height + 10,f'{height / total_cnt * 100:2.1f}%',va='center', ha='center', size=25)\nsns.despine()",
            "mc_idx": 70,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c036_o000_image_11.png",
                    36,
                    0,
                    11
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 70,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 36,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 73,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.09090909090909091,
                "Visualization": 0.45454545454545453,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 2,
                    "sns.": 5,
                    "size": 2,
                    ".mean": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c037_o000_image_12.png",
                    37,
                    0,
                    12
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 73,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 37,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age'].mean()\nstd = titanic_df['Age'].std()\nskew = titanic_df['Age'].skew()\nprint('Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 74,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    38,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age : mean: 29.8811, std: 14.4135, skew: 0.4077\n"
                    ]
                },
                "mc_idx": 74,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 38,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Age_mean']] = imp.fit_transform(titanic_df[['Age']])",
            "mc_idx": 78,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    39,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 78,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 39,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_mean\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_mean'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_mean'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 79,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c040_o000_image_13.png",
                    40,
                    0,
                    13
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 79,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 40,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_mean'].mean()\nstd = titanic_df['Age_mean'].std()\nskew = titanic_df['Age_mean'].skew()\nprint('Age_mean : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 80,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    41,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_mean : mean: 29.8811, std: 12.8832, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 80,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 41,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nimp = IterativeImputer(max_iter=10, random_state=0)\ntitanic_df[['Age_iter']] = imp.fit_transform(titanic_df[['Age']])",
            "mc_idx": 82,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.15,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 20
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    ".exp": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    42,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 82,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 42,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_iter\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_iter'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_iter'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 83,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c043_o000_image_14.png",
                    43,
                    0,
                    14
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 83,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 43,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_iter'].mean()\nstd = titanic_df['Age_iter'].std()\nskew = titanic_df['Age_iter'].skew()\nprint('Age_iter : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 84,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    44,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_iter : mean: 29.8811, std: 12.8832, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 84,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 44,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=2, weights=\"uniform\")\ntitanic_df[['Age_knn']] = imputer.fit_transform(titanic_df[['Age']])",
            "mc_idx": 86,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    45,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 86,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 45,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 87,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c046_o000_image_15.png",
                    46,
                    0,
                    15
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 87,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 46,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 88,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    47,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_knn : mean: 29.8811, std: 12.8832, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 88,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 47,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['new_Age'] = titanic_df['Age']",
            "mc_idx": 90,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    48,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 90,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 48,
                "o_idx": 0
            }
        },
        {
            "source": "for title in titles:   \n    t_mean = titanic_df[titanic_df['Title']== title]\n    print('{} mean ===> {}'.format(title, t_mean['new_Age'].mean()))",
            "mc_idx": 91,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".mean": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    49,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Mr mean ===> 32.25215146299484\nMrs mean ===> 36.91812865497076\nMiss mean ===> 21.8243661971831\nMaster mean ===> 5.482641509433963\nRare mean ===> 45.17857142857143\n"
                    ]
                },
                "mc_idx": 91,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 49,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['new_Age'].fillna(titanic_df.groupby('Title')['new_Age'].transform('mean'), inplace=True)",
            "mc_idx": 92,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    ".fillna(": 1,
                    "transform": 1,
                    ".fillna": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    50,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 92,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 50,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"new_Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['new_Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['new_Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 93,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c051_o000_image_16.png",
                    51,
                    0,
                    16
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 93,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 51,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['new_Age'].mean()\nstd = titanic_df['new_Age'].std()\nskew = titanic_df['new_Age'].skew()\nprint('new_Age : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 94,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    52,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "new_Age : mean: 29.8938, std: 13.1949, skew: 0.3790\n"
                    ]
                },
                "mc_idx": 94,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 52,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.preprocessing import RobustScaler\nrobuster = RobustScaler()\ntitanic_df['Age_knn'] = robuster.fit_transform(titanic_df[['Age_knn']])",
            "mc_idx": 96,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.4,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1,
                    "robustscaler": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    53,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 96,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 53,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 20,6\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nplt.subplot(1,2,1)\nax = sns.histplot(x=\"Age\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()\nplt.subplot(1,2,2)\nax = sns.histplot(x=\"Age_knn\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Age_knn'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Age_knn'].mean(), 60, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 97,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.05555555555555555,
                "Visualization": 0.3888888888888889,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 4,
                    "sns.": 7,
                    "size": 3,
                    ".mean": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 7
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c054_o000_image_17.png",
                    54,
                    0,
                    17
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 97,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 54,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Age_knn'].mean()\nstd = titanic_df['Age_knn'].std()\nskew = titanic_df['Age_knn'].skew()\nprint('Age_knn : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 98,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    55,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Age_knn : mean: 0.0000, std: 0.9910, skew: 0.4559\n"
                    ]
                },
                "mc_idx": 98,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 55,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df.drop(['Age','Age_mean','Age_iter','new_Age'],axis=1,inplace=True)",
            "mc_idx": 100,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    56,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 100,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 56,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(titanic_df['Fare'].mean(), 90, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 102,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.09090909090909091,
                "Visualization": 0.45454545454545453,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 2,
                    "sns.": 5,
                    "size": 2,
                    ".mean": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c057_o000_image_18.png",
                    57,
                    0,
                    18
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 102,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 57,
                "o_idx": 0
            }
        },
        {
            "source": "mean = titanic_df['Fare'].mean()\nstd = titanic_df['Fare'].std()\nskew = titanic_df['Fare'].skew()\nprint('Fare : mean: {0:.4f}, std: {1:.4f}, skew: {2:.4f}'.format(mean, std, skew))",
            "mc_idx": 103,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".std(": 1,
                    ".skew": 1,
                    ".mean": 1,
                    ".std": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    58,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Fare : mean: 33.2955, std: 51.7587, skew: 4.3677\n"
                    ]
                },
                "mc_idx": 103,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 58,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.preprocessing import QuantileTransformer\ntransformer = QuantileTransformer(n_quantiles=100, random_state=0, output_distribution='normal')\ntitanic_df['Fare'] = transformer.fit_transform(titanic_df[['Fare']])",
            "mc_idx": 105,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.9090909090909091,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 5,
                    "quantiletransformer": 2,
                    "tile": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    59,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 105,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 59,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\ntitanic_df[['Fare']] = imp.fit_transform(titanic_df[['Fare']])",
            "mc_idx": 106,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    60,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 106,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 60,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nplt.axvline(x=titanic_df['Fare'].mean(), color='g', linestyle='--', linewidth=3)\nplt.text(0, 100, \"Mean\", horizontalalignment='left', size='small', color='black', weight='semibold')\nsns.despine()",
            "mc_idx": 107,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.1111111111111111,
                "Visualization": 0.5555555555555556,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    "sns.": 5,
                    "size": 2,
                    ".mean": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c061_o000_image_19.png",
                    61,
                    0,
                    19
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 107,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 61,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Fare_class'] = pd.qcut(titanic_df['Fare'], 5, labels=['F1', 'F2', 'F3','F4','F5' ])",
            "mc_idx": 109,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".qcut(": 1,
                    ".qcut": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    62,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 109,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 62,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.histplot(x=\"Fare_class\", hue=\"Survived\", data=titanic_df,palette = 'Blues_d',kde=True)\nsns.despine()",
            "mc_idx": 110,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.16666666666666666,
                "Visualization": 0.8333333333333334,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c063_o000_image_20.png",
                    63,
                    0,
                    20
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 110,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 63,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df['Fare_class'] = titanic_df['Fare_class'].replace({'F1':1,'F2':2,'F3':3,'F4':4,'F5':5})",
            "mc_idx": 111,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".replace(": 1,
                    ".replace": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    64,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 111,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 64,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Survived',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine()",
            "mc_idx": 113,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c065_o000_image_21.png",
                    65,
                    0,
                    21
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 113,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 65,
                "o_idx": 0
            }
        },
        {
            "source": "rcParams['figure.figsize'] = 12,7\nsns.set_palette(\"bright\")\nsns.set(font_scale = 2)\nsns.set_style(\"white\")\nax = sns.countplot(x='Embarked',hue = 'Sex',data=titanic_df,palette=\"Blues_d\")\nfor p in ax.patches:\n    height = p.get_height()\n    ax.text(p.get_x() + p.get_width() / 2., height + 3, f'{height / total_cnt * 100:2.1f}%', ha = 'center', size = 25)\nsns.despine()",
            "mc_idx": 115,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.14285714285714285,
                "Visualization": 0.7142857142857143,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 5,
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {
                    "param": 1
                },
                "Visualization": {
                    "sns.": 5
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c066_o000_image_22.png",
                    66,
                    0,
                    22
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 115,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 66,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\ntitanic_df[['Embarked']] = imp.fit_transform(titanic_df[['Embarked']])",
            "mc_idx": 118,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    67,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 118,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 67,
                "o_idx": 0
            }
        },
        {
            "source": "import missingno as msno\nmsno.matrix(titanic_df.drop('Survived',axis=1))\nprint('Number of Missing Values in Dataset ',titanic_df.drop('Survived',axis=1).isnull().sum().sum())",
            "mc_idx": 120,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 0.4,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "missing values": 1,
                    ".isnull": 1,
                    ".sum": 2
                },
                "Data_Transform": {
                    ".drop": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c068_o001_image_23.png",
                    68,
                    1,
                    23
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Number of Missing Values in Dataset  0\n",
                        "<Figure size 1800x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 120,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 68,
                "o_idx": 1
            }
        },
        {
            "source": "from sklearn.decomposition import PCA",
            "mc_idx": 123,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.1,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "pca": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    69,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 123,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 69,
                "o_idx": 0
            }
        },
        {
            "source": "features = [\"Sex\",\"Age_knn\",\"FamilySize\",\"IsAlone\",'Embarked','Cabin_label']\ntitanic_copy = titanic_df[tr_idx].copy()\ny_copy = titanic_copy.pop(\"Survived\")\nX_copy = titanic_copy.loc[:, features]\nencode_features(X_copy,['Sex', 'Embarked','Cabin_label'])\npca, X_pca, loadings = apply_pca(X_copy)\nprint(loadings)",
            "mc_idx": 124,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "pca": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    70,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "                  PC1       PC2       PC3       PC4       PC5       PC6\nSex         -0.370042 -0.251657  0.232628  0.856831  0.065821 -0.084437\nAge_knn     -0.295021  0.461753  0.536676 -0.085858 -0.635234  0.028839\nFamilySize   0.610268 -0.123510  0.242138  0.241910 -0.170336  0.682754\nIsAlone     -0.630538 -0.084821 -0.179272 -0.188854  0.137625  0.713080\nEmbarked    -0.046155 -0.495295  0.706762 -0.389214  0.307284 -0.084430\nCabin_label -0.062417 -0.675045 -0.259963 -0.113113 -0.670647 -0.101367\n"
                    ]
                },
                "mc_idx": 124,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 70,
                "o_idx": 0
            }
        },
        {
            "source": "import plotly.express as px\nfig = px.histogram(X_pca.melt(), color=\"variable\", \n                   marginal=\"box\",\n                   barmode =\"overlay\",\n                   histnorm ='density'\n                  )  \nfig.update_layout(\n    title_font_color=\"black\",\n    legend_title_font_color=\"green\",\n    title={\n        'text': \"PCA Histogram\",\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n)",
            "mc_idx": 125,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.18181818181818182,
                "Data_Transform": 0.36363636363636365,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.09090909090909091,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10,
                    "variable": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".histogram(": 1,
                    "plotly": 1
                },
                "Data_Transform": {
                    "pca": 2,
                    ".melt": 1,
                    ".exp": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "plotly.express": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    71,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.4.2.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        ",
                        "<div>                            <div id=\"61e14da3-481f-4d8c-ad26-17abc7020ec9\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"61e14da3-481f-4d8c-ad26-17abc7020ec9\")) {                    Plotly.newPlot(                        \"61e14da3-481f-4d8c-ad26-17abc7020ec9\",                        [{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC1<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC1\",\"marker\":{\"color\":\"#636efa\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC1\",\"offsetgroup\":\"PC1\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.6560102792423543,1.3350817398061434,-0.3266470782576374,1.2865265559714039,-1.305019943130913,-1.1305598986421488,-1.6453363045780998,2.2445200244687045,1.6949582700669747,1.7283184688333657,2.2470948825349453,-0.9014043708167646,-0.9646688865085671,2.161459642397951,-0.05436623295974625,-0.9846591210608256,2.6810688341804916,-1.1888725962217528,1.2259618761688322,-0.29808497016266233,-1.3050199431309133,-1.1612699034345992,-0.018743605821631898,-0.9343345038445428,2.8825418327196477,2.9583119437393233,-1.0722472010625448,2.3883499006640925,-0.35639766774226633,-1.1888725962217528,-1.3018449001791539,1.5495642903534779,-0.35639766774226633,-2.0084121268170954,0.6364952517526268,0.20220887041256258,-1.0722472010625448,-0.9873589569500568,1.8991689040403827,1.7283184688333657,1.0217512421954245,1.316722157934791,-1.0722472010625448,2.7343814679541203,-0.10950388758759061,-1.1888725962217528,0.535499407991755,-0.35639766774226633,0.9720482177035431,1.520932791908199,2.509305784393439,-0.9873589569500568,1.0552259726360487,1.2713420170518115,-0.02144740070025737,-1.0375476346532229,-0.21319672605017442,-1.0409090901020221,2.572375931911933,3.175017726891849,-0.8934236322323387,-0.4173379696732638,0.28546362065662345,2.5773759957179077,-1.0722472010625448,0.9720482177035431,-0.33418730495468035,-0.9419788160670776,3.434803423010608,0.9434861096085824,-1.236949731806444,3.835729605584282,-0.9873589569500568,0.6818753926356066,-1.236949731806444,-1.0175892540886038,-1.1888725962217528,-1.1888725962217528,1.514595182620879,-0.41740736002358225,-1.0100490273915468,-1.1688795204819749,-0.35639766774226633,-1.146189450040485,-0.12243644428421527,1.9370539595502203,1.9268590382878479,-1.1888725962217528,3.071751849798016,-1.0554291682745263,-1.1688795204819749,-0.9646688865085671,0.20224356558772144,1.3217222217407663,-1.8495816337266673,-1.1888725962217528,-1.7933821376693937,0.8710055732148998,1.1578916648443631,0.3837294339444806,-0.37202721914060266,-1.1888725962217528,0.7997603189386715,-1.2596398022479336,0.6938953347521952,-1.146189450040485,-0.21319672605017442,-1.1888725962217528,-1.3730901544553826,1.3096616388916376,-1.4259758268602598,1.7169734336126212,-1.0100490273915468,1.4755526510252193,-0.0058110491250072,-0.9873589569500568,-2.0522047462241955,0.4971797861519292,0.9088454874008223,3.775154479632954,1.056936461816031,-1.1888725962217528,0.5343899347659231,-0.38333755918618834,0.05098799436950994,0.9995363788164628,-1.1305598986421488,-1.0554291682745263,1.8067404332308379,-1.5319206475458105,-1.1430144070887258,-0.9646688865085671,0.8629207491049962,1.2713420170518115,-1.078119238716016,-0.9161137026738283,1.997538802853717,0.46698418418854154,-0.873908604742608,-0.7572138192330818,1.7462104486034256,-0.2358867964916642,1.3847923692592605,-0.8836661184874737,-0.9192887456255877,1.1023166026990103,-1.1234993795989954,2.859851762278158,0.765770354600352,-1.4638504362213416,-1.6680610701947491,1.5814974717107702,-1.7701663871814528,0.614480088206981,-1.1888725962217528,0.114623631598363,-0.04143367626312162,-1.1915695909234645,-1.1888725962217528,3.881311719601808,0.1568287295295832,-0.6443080644384795,-1.1008093091575055,-0.896598675184098,2.645446207042377,1.3292173071139082,1.3421439182531516,2.4212453385167114,-1.1888725962217528,-1.146189450040485,-1.7133718207274102,2.635688693297512,2.284900101545708,-0.9873589569500568,-1.4530310810470477,1.1250066731405002,1.611895046808703,-0.6032584121256388,-1.1915695909234645,-1.327710013572403,4.6554739505016896,-1.0722472010625448,2.842161755642643,1.949503967405422,2.216829890221239,-0.9770176500258106,1.3096616388916376,-1.5319206475458105,0.6841378210073301,-1.327710013572403,-0.4627875009065617,-0.9419788160670776,1.4982427214667093,1.5258877143902583,-0.4368529971629943,-0.7545139833438506,-1.1305598986421488,0.20220887041256258,-0.35639766774226633,-0.2812669373746436,-1.146189450040485,3.881311719601808,-1.2823298726894234,-1.4266402876073474,-0.9192887456255877,1.9142389112857405,0.42910957482746015,-0.9841839139982976,-0.04143367626312162,-1.0899899539832116,-1.0554291682745263,-0.5308577122310307,-1.0100490273915468,-1.1915695909234645,0.535499407991755,1.4636472405828644,-0.349337148699113,0.20220887041256258,-0.22510213649252941,-1.1915695909234645,-0.873908604742608,-1.1234993795989954,-1.6680610701947491,-1.1888725962217528,0.44429411374705163,-1.0100490273915468,-0.9419788160670776,-0.976013921729312,-0.9192887456255877,2.3860572777085856,1.2865265559714034,-1.1688795204819749,-1.8495816337266673,3.707084268308485,-1.0554291682745263,-0.41471036532187033,0.1568287295295832,2.12606960845528,-0.9419788160670776,-1.2596398022479336,1.3679743364712416,1.3096616388916376,-1.1688795204819749,-1.0100490273915468,-1.0749441957642565,0.7447025008099014,-0.3039570078161332,1.763028481391444,0.8149553040070194,-0.07007197488531423,-1.1888725962217528,1.6798431214977014,-1.7663268834826062,0.47448971571043935,1.3772972838861186,1.7662035243432035,-0.29808497016266233,-0.23581740614134603,-0.4142323170718227,0.7948505377805271,-1.1305598986421488,2.978302178291582,0.4443392550709674,-1.2368803414561256,-0.35639766774226633,-1.327710013572403,2.305095150420032,0.5879400679178882,0.7646549358171393,-0.37953275066250053,-1.1888725962217528,-1.078119238716016,0.9990611717539347,0.5836095793477496,-0.35639766774226633,0.6209395912959847,-0.7577584166459284,-1.1888725962217528,2.567618481973043,1.5134377065350573,-1.927409358796002,-1.146189450040485,-0.873908604742608,-0.9419788160670776,-0.9770176500258106,-1.1430144070887258,-1.1915695909234645,-1.0100490273915468,-1.4638504362213416,-0.1775740989120602,-0.3266470782576233,1.7964580705081532,-1.0900246491583707,-0.2812669373746436,-1.0554291682745263,-1.0722472010625448,-0.9274587378945732,2.7917711048049325,-1.0375476346532229,1.0930658868219714,-0.35639766774226633,0.9137355201239391,-0.9419788160670776,-0.2656026908011481,-1.1888725962217528,2.042114149981859,-0.29808497016266233,1.811573219077427,0.5911151108696474,-0.2099869879232561,-0.01331658064690538,2.953856477346195,1.7176483405084646,-1.146189450040485,0.5577549121032567,-0.3266470782576233,1.3847923692592605,-1.7361312815192178,1.7555229498695464,1.6074077264279345,-1.0100490273915468,-1.1234993795989954,-0.35909466244397825,1.8084086222744238,3.881311719601808,-0.28559742594478243,-1.8949617746096463,-0.4324878134176965,1.6041979883010162,1.8645282818326225,1.6878977510238216,-1.3919407211980255,0.44429411374705163,1.1703868140234797,1.2513489413120338,-1.1888725962217528,0.6485047477204594,-0.45957776277964324,-1.5319206475458105,-1.5621856398595166,1.5485777848317483,3.0490617793565264,-1.146189450040485,-1.078119238716016,-1.327710013572403,-0.22073695274723149,-0.6443080644384795,1.2513489413120338,1.4653577297628462,-1.4638504362213416,-1.0327390978330364,-1.0375476346532229,1.3097022796241775,0.5879400679178882,-1.0722472010625448,-1.146189450040485,1.520967487083358,-0.5989279235555,-0.35639766774226633,-0.35639766774226633,1.7605334598242777,0.6138051813111373,1.0249262851471836,-1.3050199431309133,0.535499407991755,-1.1915695909234645,0.8056351977796616,-0.29808497016266233,-0.35639766774226633,0.016948411666800705,0.7953604400182144,0.7467705610083163,-0.9419788160670776,-0.8934236322323387,2.9959921849270965,1.3679743364712416,-0.2358867964916642,1.1887463958948306,-0.848043491349359,-0.9419788160670776,-0.5730628101622509,2.401525496704916,-1.236949731806444,1.1352015944028733,-1.1888725962217528,-0.9192887456255877,3.401918431306745,-0.5535477826725206,-1.1305598986421488,-0.0058110491250072,1.276411471208105,-0.9873589569500568,0.898105968725603,1.6451678041147824,1.7932934737051502,-1.0100490273915468,-0.4400974304650717,-1.5546107179873008,-1.0327390978330364,-0.37202721914060266,-1.3957802248968723,-1.1008093091575055,1.4528625805837296,0.5198698565934189,-0.19050665560868485,0.3837294339444806,-1.6680610701947491,1.4653577297628462,-0.9873589569500568,2.3860572777085856,-1.1888725962217528,-1.1305598986421488,1.3902193944339867,-1.1888725962217528,-1.5092305771043206,-0.41471036532187033,1.5361277769765467,1.8991689040403827,-1.1915695909234645,2.0806894675723004,-1.0722472010625448,-0.9290462593704529,-1.1688795204819749,1.6722681996254853,1.1250066731405002,-1.1888725962217528,1.2940320874933016,-0.16781658516719464,-1.1305598986421488,-1.1461547548653257,-0.9948644884719549,1.2513489413120338,0.976371101312445,-0.896598675184098,0.11148328382176279,2.549755251820762,2.587570916980282,2.8977368177879965,1.367296730797054,-1.2142596613649543,1.2865370021201594,-0.9646688865085671,0.5879400679178882,-0.37202721914060266,-1.1888725962217528,1.6545226055172988,1.6343831441156478,-1.2823298726894234,2.689001327071141,-1.5394261790677086,1.0948215173258689,0.477186710412151,-0.9236192341957263,0.31132873404987277,-1.1888725962217528,-1.0522541253227666,-1.8949270794344875,1.372408910566858,-0.871208768853377,-1.1305598986421488,-1.5091958819291615,-1.2823298726894234,-1.486505811487672,-1.5999908588702796,-1.1888725962217528,-1.3730901544553826,-1.1888725962217528,-1.781511422402198,-1.1305598986421488,2.7854341264474725,-1.1888725962217528,-1.3730901544553826,1.9370539595502203,-0.020891502519121842,-0.2358867964916642,-0.9770176500258106,0.3837294339444806,0.4971797861519292,-1.0100490273915468,1.8839739189720346,3.2203978677748273,-1.1888725962217528,-1.6453709997532595,-1.1661796845927435,0.8861554169593324,2.3860572777085856,1.2865265559714034,-1.5286762142437338,-1.1915695909234645,1.3292173071139082,0.477186710412151,-0.9873589569500568,-1.6074963903921782,-2.0052370838653357,-0.9873589569500568,-1.0722472010625448,0.9417756204286003,-1.1888725962217528,2.2698994846506686,-1.0554291682745263,-0.896598675184098,-0.1548840284705704,-0.35639766774226633,-0.5762378531140104,0.08184358003951063,1.0147209177360546,1.5588178474180365,-1.1888725962217528,-1.146189450040485,-1.1008093091575055,-1.1105668229023706,-1.1888725962217528,-1.2369150366312849,0.8207156511737762,-1.0554291682745263,-1.456240819173966,-0.447637657162129,-1.1305598986421488,1.1125115239613834,-1.236949731806444,-0.23581740614134603,-1.0100490273915468,-1.0722472010625448,1.2292063094709098,-1.0722472010625448,-1.3715026329795033,-0.871208768853377,-1.0375476346532229,-1.3957802248968723,1.3897924330652351,2.2622100311042184,-1.0722472010625448,1.264322138741198,1.7462104486034256,-0.41740736002358225,2.1487596788967696,-1.3503306936635744,-0.3007819648643742,-1.1888725962217528,2.106623971315868,1.6723375899758033,3.6163239865425267,3.570943845659547,0.42910957482746015,0.2886386636083829,-1.963031985934116,1.4982427214667093,-1.0722472010625448,0.7846556165181543,1.351907377555398,1.4156471003097284,-1.1234993795989954,-1.1305598986421488,-0.8934236322323387,-0.2358867964916642,-1.9176518450511364,1.1687110200186568,-1.0722472010625448,1.5134724017102161,1.1125115239613834,-1.1305598986421488,-1.4184702953383617,-1.146189450040485,-1.1888725962217528,-0.41471036532187033,0.9888662504915617,-0.9419788160670776,2.4060503534483635,-1.0722472010625448,-1.236949731806444,-1.9176518450511364,1.2563414001567719,-1.2369150366312849,-0.35639766774226633,-0.873908604742608,-0.9419788160670776,-0.508167641789541,1.1352362895780321,1.3679743364712416,-1.236949731806444,1.7403384109499547,1.690627781496836,-1.7361312815192178,-0.9992296722172527,-1.0722472010625448,1.9899638809815008,-1.57730078842879,0.47023906363937484,-1.0100490273915468,-1.1888725962217528,-1.3050199431309133,0.9871557613115796,-1.57730078842879,1.6878977510238216,0.3156592226200113,0.716585405193685,-0.41471036532187033,-1.6226809293117694,-1.0722472010625448,0.3718587186772848,2.141264593523628,-1.1888725962217528,-1.1888725962217528,-1.5092305771043206,-1.1883945479717053,0.33834929306150113,-1.1915695909234645,-1.1234993795989954,2.3032701295658162,-0.49298310286994934,2.9356218732978334,-1.1888725962217528,1.3096616388916376,-1.1305598986421488,-1.3050199431309133,2.141264593523628,0.7619655460766647,1.3394122283762806,2.6555959869808348,-1.1008093091575055,0.6591853221941167,0.3232688396673868,1.1962519274167287,-0.9873589569500568,-0.9873589569500568,-1.7739018053548223,-1.7458887952640838,-0.09213675679535029,-1.1008093091575055,-1.1305598986421488,-2.1142181668020097,-1.6680610701947491,-0.9387343827649998,-1.1888725962217528,3.238087874410342,-0.37202721914060266,-1.236949731806444,0.8300357574011336,2.5120056202826704,0.477186710412151,-0.9646688865085671,0.016948411666800705,3.39691836750077,-1.1888725962217528,2.7854341264474725,0.3037538121776564,-0.9419788160670776,-1.4530310810470477,-1.1888725962217528,-0.258576866933154,-1.1888725962217528,1.520932791908199,-0.9873589569500568,-0.35639766774226633,-0.08681381714610127,0.9888662504915617,-1.1888725962217528,1.6398206154391302,-1.0327390978330364,0.4550892198949427,0.39892441901282844,-1.3018449001791539,-1.486505811487672,-1.327710013572403,0.7013904201253366,0.8073456869596441,-1.078119238716016,-1.1888725962217528,-1.486540506662831,1.402673902880564,1.3999873543276085,0.6333895991511861,-2.0991724085830548,-1.2142596613649543,-1.1888725962217528,-0.9192887456255877,-1.0667742034952712,-0.1451265147257053,3.2230977036640582,0.6365646421029454,-0.35639766774226633,-0.8858140151849632,-0.9646688865085671,3.10694751556738,0.1720237145979306,1.4610376873414639,2.3504752913030105,-0.9419788160670776,-0.9192887456255877,1.7705929571149044,0.6333895991511861,1.9552191732482636,-1.1888725962217528,-0.9614938435568079,-1.8722717041681571,-1.6907511406362388,-1.5092305771043206,-0.35639766774226633,0.6895648461820567,-1.4033204515939295,1.7888831486359371,-1.214224966189795,1.637558187067407,-1.019806541136412,0.5652499974763986,-1.3957802248968723,-0.7577584166459284,-1.3730554592802235,-0.2358867964916642,0.9720482177035431,-0.01331658064690538,-1.0375476346532229,0.21739340933215442,-1.1688795204819749,-1.6907511406362388,-0.8814488314396653,-0.3309775668277618,-0.2585421717579948,-1.1305598986421488,-1.2596398022479336,1.7932136372060756,0.7694606314498061,-1.2823298726894234,-1.6453709997532595,0.6333549039760268,-0.9646688865085671,2.0051241708746894,-0.35639766774226633,0.5879400679178882,1.3621022988177705,-0.21312733569985626,-0.6438328573759513,-1.1888725962217528,-1.0327390978330364,-1.0327390978330364,-1.15753448526123,1.974939015060058,-1.006804594089469,-1.1888725962217528,-1.1888725962217528,-1.0678126269669288,0.4896742546300314,2.885786266021726,0.610630138359378,-1.2142596613649543,0.12671296406526938,1.1703868140234797,-0.41740736002358225,0.8451404598216509,-1.1559469637853503,2.216829890221239,1.1098463832473116,-1.2596398022479336,-1.0327390978330364,1.5967029029278743,1.5182255938915175,-1.146189450040485,-0.9192887456255877,-1.2823298726894234,-0.3038876174658152,-1.1888725962217528,-1.441160365779852,-0.848043491349359,2.0505737021079873,-0.873908604742608,0.8932204365938615,-1.0722472010625448,-0.37043969766472296,0.535499407991755,-1.236949731806444,-1.0554291682745263,-1.5999908588702796,-0.9392442850026871,-1.0722472010625448,1.8387985924111199,-0.9192887456255877,-1.070029914014737,0.14984440101366142,-1.1305598986421488,1.1352709847531914,0.08494923264095156,1.725212816231925,-1.0478195512271506,1.2336589346765188,-1.078119238716016,-1.078119238716016,-0.1451265147257053,2.5449284115315534,1.8889739827780097,-1.2563953689458562,-1.1305598986421488,-0.873908604742608,4.6554739505016896,-1.0722472010625448,-1.078119238716016,-1.3957802248968723,-0.727458729157063,-0.4400974304650717,-1.0749441957642565,1.626888058742506,-1.2823298726894234,1.6041979883010162,1.8436632322453488,1.2622873945289137,-1.1234993795989954,-1.2142596613649543,-1.18392527870093,-0.1451265147257053,-1.3957802248968723,1.2713767122269708,-1.1008093091575055,-1.3957802248968723,-1.3050199431309133,3.684394197866996,-1.2029146261442094,-1.0072826423395167,-0.258576866933154,0.9466611525603417,-1.486540506662831,2.44123557306897,1.3092964629119677,-1.1234993795989954,-1.3730901544553826,1.4075171348759092,2.6227561366008882,-1.1305598986421488,-1.1888725962217528,1.6273632658050337,-1.1305598986421488,-0.9618996602690179,1.705628398391876,1.514595182620879,-1.0722472010625448,-1.0327390978330364,-0.9192887456255877,1.630097796869424,-0.9873589569500568,-1.1888725962217528,-1.236949731806444,-0.9209222394940145,-0.9646688865085671,-0.873908604742608,-0.3007819648643742,-1.1770495127509604,-0.896598675184098,-1.4638504362213416,3.881311719601808,-1.1883945479717053,0.5198698565934189,1.5192992980397717,2.955612107850092,-2.1899326903490137,2.2200049331729983,1.6873729020460024,0.9309909604294656,1.520932791908199,1.2865370021201594,-1.577266093253631,2.257889988682836,-1.0722472010625448,0.6031350529862363,0.6787003496838473,-0.7047686587155734,4.6554739505016896,-1.0554291682745263,-0.689688205321459,1.4333475530939994,-1.002404715169012,-1.1888725962217528,1.4426676593213563,-1.1008093091575055,1.3622168304920044,-1.0780498483656975,-1.57730078842879,1.4106574826525096,0.039569091757972116,-0.9646688865085671,-0.9419788160670776,-1.1888725962217528,0.9266604718593265,1.3621022988177705,-1.2596398022479336,-0.2358867964916642,-1.146189450040485,-1.078119238716016,2.615698458745254,-1.1234993795989954,0.013773368715041603,2.0078211655764013,-0.8328589524297674,-1.1786370342268402],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC1<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC1\",\"marker\":{\"color\":\"#636efa\"},\"name\":\"PC1\",\"notched\":true,\"offsetgroup\":\"PC1\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.6560102792423543,1.3350817398061434,-0.3266470782576374,1.2865265559714039,-1.305019943130913,-1.1305598986421488,-1.6453363045780998,2.2445200244687045,1.6949582700669747,1.7283184688333657,2.2470948825349453,-0.9014043708167646,-0.9646688865085671,2.161459642397951,-0.05436623295974625,-0.9846591210608256,2.6810688341804916,-1.1888725962217528,1.2259618761688322,-0.29808497016266233,-1.3050199431309133,-1.1612699034345992,-0.018743605821631898,-0.9343345038445428,2.8825418327196477,2.9583119437393233,-1.0722472010625448,2.3883499006640925,-0.35639766774226633,-1.1888725962217528,-1.3018449001791539,1.5495642903534779,-0.35639766774226633,-2.0084121268170954,0.6364952517526268,0.20220887041256258,-1.0722472010625448,-0.9873589569500568,1.8991689040403827,1.7283184688333657,1.0217512421954245,1.316722157934791,-1.0722472010625448,2.7343814679541203,-0.10950388758759061,-1.1888725962217528,0.535499407991755,-0.35639766774226633,0.9720482177035431,1.520932791908199,2.509305784393439,-0.9873589569500568,1.0552259726360487,1.2713420170518115,-0.02144740070025737,-1.0375476346532229,-0.21319672605017442,-1.0409090901020221,2.572375931911933,3.175017726891849,-0.8934236322323387,-0.4173379696732638,0.28546362065662345,2.5773759957179077,-1.0722472010625448,0.9720482177035431,-0.33418730495468035,-0.9419788160670776,3.434803423010608,0.9434861096085824,-1.236949731806444,3.835729605584282,-0.9873589569500568,0.6818753926356066,-1.236949731806444,-1.0175892540886038,-1.1888725962217528,-1.1888725962217528,1.514595182620879,-0.41740736002358225,-1.0100490273915468,-1.1688795204819749,-0.35639766774226633,-1.146189450040485,-0.12243644428421527,1.9370539595502203,1.9268590382878479,-1.1888725962217528,3.071751849798016,-1.0554291682745263,-1.1688795204819749,-0.9646688865085671,0.20224356558772144,1.3217222217407663,-1.8495816337266673,-1.1888725962217528,-1.7933821376693937,0.8710055732148998,1.1578916648443631,0.3837294339444806,-0.37202721914060266,-1.1888725962217528,0.7997603189386715,-1.2596398022479336,0.6938953347521952,-1.146189450040485,-0.21319672605017442,-1.1888725962217528,-1.3730901544553826,1.3096616388916376,-1.4259758268602598,1.7169734336126212,-1.0100490273915468,1.4755526510252193,-0.0058110491250072,-0.9873589569500568,-2.0522047462241955,0.4971797861519292,0.9088454874008223,3.775154479632954,1.056936461816031,-1.1888725962217528,0.5343899347659231,-0.38333755918618834,0.05098799436950994,0.9995363788164628,-1.1305598986421488,-1.0554291682745263,1.8067404332308379,-1.5319206475458105,-1.1430144070887258,-0.9646688865085671,0.8629207491049962,1.2713420170518115,-1.078119238716016,-0.9161137026738283,1.997538802853717,0.46698418418854154,-0.873908604742608,-0.7572138192330818,1.7462104486034256,-0.2358867964916642,1.3847923692592605,-0.8836661184874737,-0.9192887456255877,1.1023166026990103,-1.1234993795989954,2.859851762278158,0.765770354600352,-1.4638504362213416,-1.6680610701947491,1.5814974717107702,-1.7701663871814528,0.614480088206981,-1.1888725962217528,0.114623631598363,-0.04143367626312162,-1.1915695909234645,-1.1888725962217528,3.881311719601808,0.1568287295295832,-0.6443080644384795,-1.1008093091575055,-0.896598675184098,2.645446207042377,1.3292173071139082,1.3421439182531516,2.4212453385167114,-1.1888725962217528,-1.146189450040485,-1.7133718207274102,2.635688693297512,2.284900101545708,-0.9873589569500568,-1.4530310810470477,1.1250066731405002,1.611895046808703,-0.6032584121256388,-1.1915695909234645,-1.327710013572403,4.6554739505016896,-1.0722472010625448,2.842161755642643,1.949503967405422,2.216829890221239,-0.9770176500258106,1.3096616388916376,-1.5319206475458105,0.6841378210073301,-1.327710013572403,-0.4627875009065617,-0.9419788160670776,1.4982427214667093,1.5258877143902583,-0.4368529971629943,-0.7545139833438506,-1.1305598986421488,0.20220887041256258,-0.35639766774226633,-0.2812669373746436,-1.146189450040485,3.881311719601808,-1.2823298726894234,-1.4266402876073474,-0.9192887456255877,1.9142389112857405,0.42910957482746015,-0.9841839139982976,-0.04143367626312162,-1.0899899539832116,-1.0554291682745263,-0.5308577122310307,-1.0100490273915468,-1.1915695909234645,0.535499407991755,1.4636472405828644,-0.349337148699113,0.20220887041256258,-0.22510213649252941,-1.1915695909234645,-0.873908604742608,-1.1234993795989954,-1.6680610701947491,-1.1888725962217528,0.44429411374705163,-1.0100490273915468,-0.9419788160670776,-0.976013921729312,-0.9192887456255877,2.3860572777085856,1.2865265559714034,-1.1688795204819749,-1.8495816337266673,3.707084268308485,-1.0554291682745263,-0.41471036532187033,0.1568287295295832,2.12606960845528,-0.9419788160670776,-1.2596398022479336,1.3679743364712416,1.3096616388916376,-1.1688795204819749,-1.0100490273915468,-1.0749441957642565,0.7447025008099014,-0.3039570078161332,1.763028481391444,0.8149553040070194,-0.07007197488531423,-1.1888725962217528,1.6798431214977014,-1.7663268834826062,0.47448971571043935,1.3772972838861186,1.7662035243432035,-0.29808497016266233,-0.23581740614134603,-0.4142323170718227,0.7948505377805271,-1.1305598986421488,2.978302178291582,0.4443392550709674,-1.2368803414561256,-0.35639766774226633,-1.327710013572403,2.305095150420032,0.5879400679178882,0.7646549358171393,-0.37953275066250053,-1.1888725962217528,-1.078119238716016,0.9990611717539347,0.5836095793477496,-0.35639766774226633,0.6209395912959847,-0.7577584166459284,-1.1888725962217528,2.567618481973043,1.5134377065350573,-1.927409358796002,-1.146189450040485,-0.873908604742608,-0.9419788160670776,-0.9770176500258106,-1.1430144070887258,-1.1915695909234645,-1.0100490273915468,-1.4638504362213416,-0.1775740989120602,-0.3266470782576233,1.7964580705081532,-1.0900246491583707,-0.2812669373746436,-1.0554291682745263,-1.0722472010625448,-0.9274587378945732,2.7917711048049325,-1.0375476346532229,1.0930658868219714,-0.35639766774226633,0.9137355201239391,-0.9419788160670776,-0.2656026908011481,-1.1888725962217528,2.042114149981859,-0.29808497016266233,1.811573219077427,0.5911151108696474,-0.2099869879232561,-0.01331658064690538,2.953856477346195,1.7176483405084646,-1.146189450040485,0.5577549121032567,-0.3266470782576233,1.3847923692592605,-1.7361312815192178,1.7555229498695464,1.6074077264279345,-1.0100490273915468,-1.1234993795989954,-0.35909466244397825,1.8084086222744238,3.881311719601808,-0.28559742594478243,-1.8949617746096463,-0.4324878134176965,1.6041979883010162,1.8645282818326225,1.6878977510238216,-1.3919407211980255,0.44429411374705163,1.1703868140234797,1.2513489413120338,-1.1888725962217528,0.6485047477204594,-0.45957776277964324,-1.5319206475458105,-1.5621856398595166,1.5485777848317483,3.0490617793565264,-1.146189450040485,-1.078119238716016,-1.327710013572403,-0.22073695274723149,-0.6443080644384795,1.2513489413120338,1.4653577297628462,-1.4638504362213416,-1.0327390978330364,-1.0375476346532229,1.3097022796241775,0.5879400679178882,-1.0722472010625448,-1.146189450040485,1.520967487083358,-0.5989279235555,-0.35639766774226633,-0.35639766774226633,1.7605334598242777,0.6138051813111373,1.0249262851471836,-1.3050199431309133,0.535499407991755,-1.1915695909234645,0.8056351977796616,-0.29808497016266233,-0.35639766774226633,0.016948411666800705,0.7953604400182144,0.7467705610083163,-0.9419788160670776,-0.8934236322323387,2.9959921849270965,1.3679743364712416,-0.2358867964916642,1.1887463958948306,-0.848043491349359,-0.9419788160670776,-0.5730628101622509,2.401525496704916,-1.236949731806444,1.1352015944028733,-1.1888725962217528,-0.9192887456255877,3.401918431306745,-0.5535477826725206,-1.1305598986421488,-0.0058110491250072,1.276411471208105,-0.9873589569500568,0.898105968725603,1.6451678041147824,1.7932934737051502,-1.0100490273915468,-0.4400974304650717,-1.5546107179873008,-1.0327390978330364,-0.37202721914060266,-1.3957802248968723,-1.1008093091575055,1.4528625805837296,0.5198698565934189,-0.19050665560868485,0.3837294339444806,-1.6680610701947491,1.4653577297628462,-0.9873589569500568,2.3860572777085856,-1.1888725962217528,-1.1305598986421488,1.3902193944339867,-1.1888725962217528,-1.5092305771043206,-0.41471036532187033,1.5361277769765467,1.8991689040403827,-1.1915695909234645,2.0806894675723004,-1.0722472010625448,-0.9290462593704529,-1.1688795204819749,1.6722681996254853,1.1250066731405002,-1.1888725962217528,1.2940320874933016,-0.16781658516719464,-1.1305598986421488,-1.1461547548653257,-0.9948644884719549,1.2513489413120338,0.976371101312445,-0.896598675184098,0.11148328382176279,2.549755251820762,2.587570916980282,2.8977368177879965,1.367296730797054,-1.2142596613649543,1.2865370021201594,-0.9646688865085671,0.5879400679178882,-0.37202721914060266,-1.1888725962217528,1.6545226055172988,1.6343831441156478,-1.2823298726894234,2.689001327071141,-1.5394261790677086,1.0948215173258689,0.477186710412151,-0.9236192341957263,0.31132873404987277,-1.1888725962217528,-1.0522541253227666,-1.8949270794344875,1.372408910566858,-0.871208768853377,-1.1305598986421488,-1.5091958819291615,-1.2823298726894234,-1.486505811487672,-1.5999908588702796,-1.1888725962217528,-1.3730901544553826,-1.1888725962217528,-1.781511422402198,-1.1305598986421488,2.7854341264474725,-1.1888725962217528,-1.3730901544553826,1.9370539595502203,-0.020891502519121842,-0.2358867964916642,-0.9770176500258106,0.3837294339444806,0.4971797861519292,-1.0100490273915468,1.8839739189720346,3.2203978677748273,-1.1888725962217528,-1.6453709997532595,-1.1661796845927435,0.8861554169593324,2.3860572777085856,1.2865265559714034,-1.5286762142437338,-1.1915695909234645,1.3292173071139082,0.477186710412151,-0.9873589569500568,-1.6074963903921782,-2.0052370838653357,-0.9873589569500568,-1.0722472010625448,0.9417756204286003,-1.1888725962217528,2.2698994846506686,-1.0554291682745263,-0.896598675184098,-0.1548840284705704,-0.35639766774226633,-0.5762378531140104,0.08184358003951063,1.0147209177360546,1.5588178474180365,-1.1888725962217528,-1.146189450040485,-1.1008093091575055,-1.1105668229023706,-1.1888725962217528,-1.2369150366312849,0.8207156511737762,-1.0554291682745263,-1.456240819173966,-0.447637657162129,-1.1305598986421488,1.1125115239613834,-1.236949731806444,-0.23581740614134603,-1.0100490273915468,-1.0722472010625448,1.2292063094709098,-1.0722472010625448,-1.3715026329795033,-0.871208768853377,-1.0375476346532229,-1.3957802248968723,1.3897924330652351,2.2622100311042184,-1.0722472010625448,1.264322138741198,1.7462104486034256,-0.41740736002358225,2.1487596788967696,-1.3503306936635744,-0.3007819648643742,-1.1888725962217528,2.106623971315868,1.6723375899758033,3.6163239865425267,3.570943845659547,0.42910957482746015,0.2886386636083829,-1.963031985934116,1.4982427214667093,-1.0722472010625448,0.7846556165181543,1.351907377555398,1.4156471003097284,-1.1234993795989954,-1.1305598986421488,-0.8934236322323387,-0.2358867964916642,-1.9176518450511364,1.1687110200186568,-1.0722472010625448,1.5134724017102161,1.1125115239613834,-1.1305598986421488,-1.4184702953383617,-1.146189450040485,-1.1888725962217528,-0.41471036532187033,0.9888662504915617,-0.9419788160670776,2.4060503534483635,-1.0722472010625448,-1.236949731806444,-1.9176518450511364,1.2563414001567719,-1.2369150366312849,-0.35639766774226633,-0.873908604742608,-0.9419788160670776,-0.508167641789541,1.1352362895780321,1.3679743364712416,-1.236949731806444,1.7403384109499547,1.690627781496836,-1.7361312815192178,-0.9992296722172527,-1.0722472010625448,1.9899638809815008,-1.57730078842879,0.47023906363937484,-1.0100490273915468,-1.1888725962217528,-1.3050199431309133,0.9871557613115796,-1.57730078842879,1.6878977510238216,0.3156592226200113,0.716585405193685,-0.41471036532187033,-1.6226809293117694,-1.0722472010625448,0.3718587186772848,2.141264593523628,-1.1888725962217528,-1.1888725962217528,-1.5092305771043206,-1.1883945479717053,0.33834929306150113,-1.1915695909234645,-1.1234993795989954,2.3032701295658162,-0.49298310286994934,2.9356218732978334,-1.1888725962217528,1.3096616388916376,-1.1305598986421488,-1.3050199431309133,2.141264593523628,0.7619655460766647,1.3394122283762806,2.6555959869808348,-1.1008093091575055,0.6591853221941167,0.3232688396673868,1.1962519274167287,-0.9873589569500568,-0.9873589569500568,-1.7739018053548223,-1.7458887952640838,-0.09213675679535029,-1.1008093091575055,-1.1305598986421488,-2.1142181668020097,-1.6680610701947491,-0.9387343827649998,-1.1888725962217528,3.238087874410342,-0.37202721914060266,-1.236949731806444,0.8300357574011336,2.5120056202826704,0.477186710412151,-0.9646688865085671,0.016948411666800705,3.39691836750077,-1.1888725962217528,2.7854341264474725,0.3037538121776564,-0.9419788160670776,-1.4530310810470477,-1.1888725962217528,-0.258576866933154,-1.1888725962217528,1.520932791908199,-0.9873589569500568,-0.35639766774226633,-0.08681381714610127,0.9888662504915617,-1.1888725962217528,1.6398206154391302,-1.0327390978330364,0.4550892198949427,0.39892441901282844,-1.3018449001791539,-1.486505811487672,-1.327710013572403,0.7013904201253366,0.8073456869596441,-1.078119238716016,-1.1888725962217528,-1.486540506662831,1.402673902880564,1.3999873543276085,0.6333895991511861,-2.0991724085830548,-1.2142596613649543,-1.1888725962217528,-0.9192887456255877,-1.0667742034952712,-0.1451265147257053,3.2230977036640582,0.6365646421029454,-0.35639766774226633,-0.8858140151849632,-0.9646688865085671,3.10694751556738,0.1720237145979306,1.4610376873414639,2.3504752913030105,-0.9419788160670776,-0.9192887456255877,1.7705929571149044,0.6333895991511861,1.9552191732482636,-1.1888725962217528,-0.9614938435568079,-1.8722717041681571,-1.6907511406362388,-1.5092305771043206,-0.35639766774226633,0.6895648461820567,-1.4033204515939295,1.7888831486359371,-1.214224966189795,1.637558187067407,-1.019806541136412,0.5652499974763986,-1.3957802248968723,-0.7577584166459284,-1.3730554592802235,-0.2358867964916642,0.9720482177035431,-0.01331658064690538,-1.0375476346532229,0.21739340933215442,-1.1688795204819749,-1.6907511406362388,-0.8814488314396653,-0.3309775668277618,-0.2585421717579948,-1.1305598986421488,-1.2596398022479336,1.7932136372060756,0.7694606314498061,-1.2823298726894234,-1.6453709997532595,0.6333549039760268,-0.9646688865085671,2.0051241708746894,-0.35639766774226633,0.5879400679178882,1.3621022988177705,-0.21312733569985626,-0.6438328573759513,-1.1888725962217528,-1.0327390978330364,-1.0327390978330364,-1.15753448526123,1.974939015060058,-1.006804594089469,-1.1888725962217528,-1.1888725962217528,-1.0678126269669288,0.4896742546300314,2.885786266021726,0.610630138359378,-1.2142596613649543,0.12671296406526938,1.1703868140234797,-0.41740736002358225,0.8451404598216509,-1.1559469637853503,2.216829890221239,1.1098463832473116,-1.2596398022479336,-1.0327390978330364,1.5967029029278743,1.5182255938915175,-1.146189450040485,-0.9192887456255877,-1.2823298726894234,-0.3038876174658152,-1.1888725962217528,-1.441160365779852,-0.848043491349359,2.0505737021079873,-0.873908604742608,0.8932204365938615,-1.0722472010625448,-0.37043969766472296,0.535499407991755,-1.236949731806444,-1.0554291682745263,-1.5999908588702796,-0.9392442850026871,-1.0722472010625448,1.8387985924111199,-0.9192887456255877,-1.070029914014737,0.14984440101366142,-1.1305598986421488,1.1352709847531914,0.08494923264095156,1.725212816231925,-1.0478195512271506,1.2336589346765188,-1.078119238716016,-1.078119238716016,-0.1451265147257053,2.5449284115315534,1.8889739827780097,-1.2563953689458562,-1.1305598986421488,-0.873908604742608,4.6554739505016896,-1.0722472010625448,-1.078119238716016,-1.3957802248968723,-0.727458729157063,-0.4400974304650717,-1.0749441957642565,1.626888058742506,-1.2823298726894234,1.6041979883010162,1.8436632322453488,1.2622873945289137,-1.1234993795989954,-1.2142596613649543,-1.18392527870093,-0.1451265147257053,-1.3957802248968723,1.2713767122269708,-1.1008093091575055,-1.3957802248968723,-1.3050199431309133,3.684394197866996,-1.2029146261442094,-1.0072826423395167,-0.258576866933154,0.9466611525603417,-1.486540506662831,2.44123557306897,1.3092964629119677,-1.1234993795989954,-1.3730901544553826,1.4075171348759092,2.6227561366008882,-1.1305598986421488,-1.1888725962217528,1.6273632658050337,-1.1305598986421488,-0.9618996602690179,1.705628398391876,1.514595182620879,-1.0722472010625448,-1.0327390978330364,-0.9192887456255877,1.630097796869424,-0.9873589569500568,-1.1888725962217528,-1.236949731806444,-0.9209222394940145,-0.9646688865085671,-0.873908604742608,-0.3007819648643742,-1.1770495127509604,-0.896598675184098,-1.4638504362213416,3.881311719601808,-1.1883945479717053,0.5198698565934189,1.5192992980397717,2.955612107850092,-2.1899326903490137,2.2200049331729983,1.6873729020460024,0.9309909604294656,1.520932791908199,1.2865370021201594,-1.577266093253631,2.257889988682836,-1.0722472010625448,0.6031350529862363,0.6787003496838473,-0.7047686587155734,4.6554739505016896,-1.0554291682745263,-0.689688205321459,1.4333475530939994,-1.002404715169012,-1.1888725962217528,1.4426676593213563,-1.1008093091575055,1.3622168304920044,-1.0780498483656975,-1.57730078842879,1.4106574826525096,0.039569091757972116,-0.9646688865085671,-0.9419788160670776,-1.1888725962217528,0.9266604718593265,1.3621022988177705,-1.2596398022479336,-0.2358867964916642,-1.146189450040485,-1.078119238716016,2.615698458745254,-1.1234993795989954,0.013773368715041603,2.0078211655764013,-0.8328589524297674,-1.1786370342268402],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC2<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC2\",\"marker\":{\"color\":\"#EF553B\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC2\",\"offsetgroup\":\"PC2\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[-0.9981493621782125,2.9846809863617936,-0.4262969612164295,1.626609693916913,-0.6331659408097153,-0.1891887674604959,1.0235459716999706,-1.938066731895516,-0.3706420500922713,0.4957640593052689,-0.8601318873911024,2.346727368058836,-1.165867319969863,-0.7771692394141175,-0.8524580645445426,0.60359237182652,-1.3888508449792356,-0.8149542757669227,-0.15203872759275297,0.9630665479353084,-0.6331659408097181,0.6405964102331685,-0.19117913096077296,1.4094726908092825,-1.1984963731420801,-0.286192857602082,0.43657674084593046,0.22570659682945488,0.33730103962888197,-0.8149542757669227,0.7959322021898495,3.0236713196526113,0.33730103962888197,0.46775024278791455,0.4664622060986926,-0.28788085663135865,0.43657674084593046,-1.13035389469252,-0.690262877588358,0.4957640593052689,0.16758209990333353,-0.29409242870212526,0.43657674084593046,-0.04798286152579545,-0.04912542985140115,-0.8149542757669227,-0.0924976602235378,0.33730103962888197,0.4567182266927428,-0.6137132561982122,-1.837049226898947,-1.13035389469252,3.0480097203325034,-0.22306557814743916,3.744372605840727,0.8216404446333643,-0.6038640876031416,0.3875278115004053,-1.228487027583963,-1.8480947685698674,0.156690547197676,1.963777806592033,1.455254139600957,-1.943589502730976,0.43657674084593046,0.4567182266927428,0.3348812027757169,-1.201380745247206,-1.0319747884262849,-0.9326452824589924,-0.7397062166417471,-1.144037835093774,-1.13035389469252,0.39543535554400655,-0.7397062166417471,-0.3336623054230333,-0.8149542757669227,-0.8149542757669227,-1.8265181966897153,-0.2842432601070547,-1.094840469415177,-0.8462464924737761,0.33730103962888197,-0.8817599177511191,-0.7459177887125136,-0.2341111198183592,-1.4408787780127146,-0.8149542757669227,0.8942501050282055,-1.0238136188604912,-0.8462464924737761,-1.165867319969863,0.8361296767181855,-1.0091949038491383,0.21915626584651354,-0.8149542757669227,4.188080994347883,1.598170856032207,-0.0454984517607243,-0.5719882588501025,-0.3552701106617407,-0.8149542757669227,0.275612988864668,-0.7041927913644042,-0.5419976044082198,-0.8817599177511191,-0.6038640876031416,-0.8149542757669227,-0.5266256649776891,0.4339921468658408,1.4295898829186844,0.5135207719439409,-1.094840469415177,-0.5426864056435261,0.5056132279003397,-1.13035389469252,1.2533261648423846,-0.7495553852368175,2.288322169469665,-1.5646761675864298,-1.1102124088457073,-0.8149542757669227,0.6262726198467361,0.7864971353264749,1.447556023016987,-0.10175259833879538,-0.18918876746049618,-1.0238136188604912,1.637845921942236,-0.2780316880362882,0.5473382252484489,-1.165867319969863,0.41617607684473445,-0.22306557814743916,-0.988300193583148,0.192203972475019,0.6545263240092142,1.171146737382213,-1.3079210210792354,2.1916310622327058,0.9832080337821213,-0.5683506623257987,-0.400632704534154,-0.5756152369407794,-1.2368941705245489,-1.1812392594003935,-0.9172733430284622,-1.1629829478647369,0.09488357111322351,-0.38457196386831705,-0.06495113637223028,1.1649351653114464,0.09485927737581329,-0.41770061593751906,-0.8149542757669227,1.2832709874775812,-0.15566570568343005,-0.8107330671964331,-0.8149542757669227,-1.4072097610412782,-0.21685400607667268,0.07089099266637498,-0.9527867683058051,-1.2724075958018919,-2.050129778563005,-1.5363735121738233,0.7901834707995863,0.03895074072946474,-0.8149542757669227,-0.8817599177511191,2.2540967808815444,-1.3178239944245496,-1.293991107303189,-1.13035389469252,3.655379615187739,-1.2167526846777361,-0.947912032700402,3.314150982452945,-0.8107330671964331,-0.5976525155323754,-0.8807199539518996,0.43657674084593046,-1.8425719977344075,-1.242392647622598,-1.1874508314711596,1.4762783327934792,0.4339921468658408,-0.2780316880362882,0.19030817973023592,-0.5976525155323754,-0.2132164095523688,-1.201380745247206,-0.5781998309208691,-1.0948161756777661,3.4283893748689445,3.925577328751747,-0.18918876746049618,-0.28788085663135865,0.33730103962888197,-0.49732381177111273,-0.8817599177511191,-1.4072097610412782,-0.6686793660870611,0.9912560412152362,-1.2368941705245489,-0.8546091165556425,-0.6430151094047886,0.2987442483070476,-0.15566570568343005,3.0871648107502514,-1.0238136188604912,-0.10667613372033996,-1.094840469415177,-0.8107330671964331,-0.0924976602235378,2.4087680653403294,-0.3907835359390839,-0.28788085663135865,2.347590383380714,-0.8107330671964331,-1.3079210210792354,-0.9172733430284622,-0.06495113637223028,-0.8149542757669227,1.206660162659556,-1.094840469415177,-1.201380745247206,-1.1481106073311913,-1.2368941705245489,-0.42142222561102377,1.6266096939169052,-0.8462464924737761,0.21915626584651354,-1.4581358917544007,-1.0238136188604912,-0.28846446867754444,-0.21685400607667268,-1.0453971303617882,-1.201380745247206,-0.7041927913644042,1.0597576551722674,0.4339921468658408,-0.8462464924737761,-1.094840469415177,0.4407979494164198,1.9689566012398945,-0.4618103864937697,-0.4771823259243,0.7672781719120098,0.1382802466967574,-0.8149542757669227,0.027703744542471962,1.9622912620788295,-0.7140419599594746,0.1265459037905308,0.9519158170752678,0.9630665479353084,1.6796704043732895,1.1448548828925131,0.522716352676764,-0.18918876746049618,-2.0556525493984648,0.9726606069920977,1.5083148500573411,0.33730103962888197,-0.5976525155323754,-1.5174283994028603,-0.8916090863461894,2.4434184752957946,1.5299185866799463,-0.8149542757669227,-0.988300193583148,0.20309552518067672,2.422677753995066,0.33730103962888197,2.293666657602452,0.2484581190530901,-0.8149542757669227,-1.2112837185925205,-0.08653464787352728,1.058002325816998,-0.8817599177511191,-1.3079210210792354,-1.201380745247206,1.4762783327934792,0.5473382252484489,-0.8107330671964331,-1.094840469415177,-0.38457196386831705,0.05741484598062782,-0.4262969612164268,2.637244850172328,1.9631542774007076,-0.49732381177111273,-1.0238136188604912,0.43657674084593046,0.20996068511369062,0.30156741698429446,0.8216404446333643,3.7381610337699613,0.33730103962888197,-0.16904728161368365,-1.201380745247206,1.3192578718690542,-0.8149542757669227,-0.2632768894046137,0.9630665479353084,2.2388990555375843,0.5374890566533788,1.9492445887459706,2.3908019252420267,2.372082560724547,-0.40615547536961427,-0.8817599177511191,-0.3289170527441617,-0.4262969612164268,-0.400632704534154,0.04158913945979854,1.4080063714173874,2.324520327366213,-1.094840469415177,-0.9172733430284622,0.34152224819937177,-0.548209176478986,-1.4072097610412782,2.8169630285701426,0.2901831164012,1.2381130678772323,-0.22858834898289918,2.530704574340299,0.3574425254756948,1.3763197450026698,1.206660162659556,-1.2877795352324226,-0.19177336144058568,-0.8149542757669227,0.8870393351634691,2.3398922667967432,-0.2780316880362882,-0.6053506321163454,-1.1303296009551096,0.9297635303055486,-0.8817599177511191,-0.988300193583148,-0.5976525155323754,0.15731407638900188,0.07089099266637498,-0.19177336144058568,-1.7494540638378808,-0.38457196386831705,-1.0593270441378342,0.8216404446333643,-0.071761943896912,-0.8916090863461894,0.43657674084593046,-0.8817599177511191,0.510297277151332,-0.0001358578883109216,0.33730103962888197,0.33730103962888197,-0.6651061927466285,0.5019756313760353,1.5966802429029017,-0.6331659408097181,-0.0924976602235378,-0.8107330671964331,3.4386573983832753,0.9630665479353084,0.33730103962888197,2.7181208693220844,1.3418787625068358,-1.1402030632875906,-1.201380745247206,0.156690547197676,-1.3760634995287946,1.0597576551722674,-0.5683506623257987,1.9909938798314906,0.08566369664299006,-1.201380745247206,1.393448859833914,-0.04246009069033591,-0.7397062166417471,-0.009985026483381183,-0.8149542757669227,-1.2368941705245489,-2.203229021343297,-0.07116270844299681,-0.18918876746049618,0.5056132279003397,1.3098530134046351,-1.13035389469252,-0.8616184319043064,2.124660663121585,-0.1498633818442428,-1.094840469415177,-0.24872983482971184,-0.24251826275894506,-1.0593270441378342,-0.3552701106617407,-0.4911122397003462,-0.9527867683058051,-0.507172980366183,-0.7850688105141606,-0.6393775128804847,-0.5719882588501025,-0.06495113637223028,-1.7494540638378808,-1.13035389469252,-0.42142222561102377,-0.8149542757669227,-0.18918876746049618,2.181348351668646,-0.8149542757669227,-0.3135451133136314,-0.28846446867754444,-0.12204807315087034,-0.690262877588358,-0.8107330671964331,-0.974370279807102,0.43657674084593046,-0.5045883863860934,-0.8462464924737761,-0.3351286248149281,-1.2167526846777361,-0.8149542757669227,-0.25857900342478224,-0.6748909381578277,-0.18918876746049618,0.24225061559842512,0.7548348026491676,-0.19177336144058568,0.2386089504580194,-1.2724075958018919,0.9781833778275577,1.0550474643924677,-0.7368218445366209,-0.7068311900947379,1.8238107343098902,-0.7752196419190901,0.2685996048999027,-1.165867319969863,-0.8916090863461894,-0.3552701106617407,-0.8149542757669227,0.5772919699998635,-0.7912803825849272,-0.6686793660870611,0.023043989028890217,1.6071570093053995,-0.6540606510757084,-0.7182631685299642,2.0773926698167067,2.8488388573231824,-0.8149542757669227,0.40528452413907706,1.4141936497507437,1.1175024148796435,0.4260252454398053,-0.18918876746049618,0.8104654200359128,-0.6686793660870611,0.7749519947585699,-0.17149141220425937,-0.8149542757669227,-0.5266256649776891,-0.8149542757669227,0.11261599001448469,-0.18918876746049618,-0.12788806839981717,-0.8149542757669227,-0.5266256649776891,-0.2341111198183592,2.027969555884627,-0.5683506623257987,1.4762783327934792,-0.5719882588501025,-0.7495553852368175,-1.094840469415177,-1.1819280606356999,-1.9191216191245535,-0.8149542757669227,-0.10046456164957326,0.8876997740452639,2.323835594747008,-0.42142222561102377,1.6266096939169052,3.3990875216623686,-0.8107330671964331,-1.5363735121738233,-0.7182631685299642,-1.13035389469252,1.7136972851374288,1.8968483857874818,-1.13035389469252,0.43657674084593046,3.2255768467192185,-0.8149542757669227,1.1183761983631832,-1.0238136188604912,-1.2724075958018919,0.021901420703284904,0.33730103962888197,-0.03564928316565371,1.1824824504904876,1.7479226737255493,-0.15756149842821326,-0.8149542757669227,-0.8817599177511191,-0.9527867683058051,-0.22048098416734968,-0.8149542757669227,0.38430431670779674,1.9163010703989893,-1.0238136188604912,1.1022709388386271,0.5124483291624318,-0.18918876746049618,0.025528398793961488,-0.7397062166417471,1.6796704043732895,-1.094840469415177,0.43657674084593046,3.525080482105903,0.43657674084593046,0.18792340652209483,0.4260252454398053,0.8216404446333643,-0.4911122397003462,-1.1157351796811676,-1.2584776820258459,0.43657674084593046,-0.0007350933422267604,0.9832080337821213,-0.2842432601070547,-1.080910555639131,1.685881976444056,0.9672877565057985,-0.8149542757669227,2.6672355046142115,1.9128924418841602,-1.316082190645029,-1.2450553400903428,-0.6430151094047886,2.8843522826005255,0.3967233922332286,-0.5781998309208691,0.43657674084593046,-0.6840513055175916,-1.5718869374511666,1.63585962705806,-0.9172733430284622,-0.18918876746049618,0.156690547197676,-0.5683506623257987,0.3256965416785428,3.994453127295332,0.43657674084593046,1.0374758854760167,0.025528398793961488,-0.18918876746049618,-0.45559881442300315,-0.8817599177511191,-0.8149542757669227,-0.28846446867754444,-1.0036721330136786,-1.201380745247206,-0.4527144423178772,0.43657674084593046,-0.7397062166417471,0.3256965416785428,2.189301727518933,0.38430431670779674,0.33730103962888197,-1.3079210210792354,-1.201380745247206,-0.14218955899768296,1.1140255068661626,1.0597576551722674,-0.7397062166417471,-0.4416689006469571,2.943644790248985,0.04158913945979854,2.9451111096408797,0.43657674084593046,0.291693954651814,-0.20700483748160217,3.490255858063867,-1.094840469415177,-0.8149542757669227,-0.6331659408097181,3.154549996164532,-0.20700483748160217,0.3574425254756948,-0.46544798301807366,-0.5775110296855627,-0.28846446867754444,-0.13597798692691668,0.43657674084593046,3.503476745483297,-0.5537319473144461,-0.8149542757669227,-0.8149542757669227,-0.3135451133136314,0.6183650758031347,-0.5009614082954165,-0.8107330671964331,-0.9172733430284622,0.626772218743721,1.7074857130666616,-0.25067943232473894,-0.8149542757669227,0.4339921468658408,-0.18918876746049618,-0.6331659408097181,-0.5537319473144461,-0.6485378802402485,-0.32960585397946823,-0.609362564701191,-0.9527867683058051,0.4309487808213497,1.0213949196888708,0.1058051824898026,-1.13035389469252,-1.13035389469252,1.5994588927214293,0.7738949235982543,0.7054116887170875,-0.9527867683058051,-0.18918876746049618,3.2561708052311182,-0.06495113637223028,2.47573846445145,-0.8149542757669227,-1.2395325692548829,-0.3552701106617407,-0.7397062166417471,-0.7550781560722774,-0.10310296037990736,-0.7182631685299642,-1.165867319969863,2.7181208693220844,-1.4881265461962838,-0.8149542757669227,-0.12788806839981717,2.4860064879657813,-1.201380745247206,3.655379615187739,-0.8149542757669227,-0.5328372370484558,-0.8149542757669227,-0.6137132561982122,-1.13035389469252,0.33730103962888197,-0.0846388551287441,-1.0036721330136786,-0.8149542757669227,0.43269058460087045,-1.0593270441378342,2.7645911193490664,-0.0803230758027607,0.7959322021898495,0.7749519947585699,-0.5976525155323754,-1.0691762127329045,-0.7195647307949344,-0.988300193583148,-0.8149542757669227,-0.34905853859097435,1.4448213589597008,0.09103247851318762,1.2853851297982124,0.6098039438972866,-0.7752196419190901,-0.8149542757669227,-1.2368941705245489,-1.0060569062218196,-0.7104043634351708,-0.18517535260551315,2.714483272797781,0.33730103962888197,1.6435334499046206,-1.165867319969863,-1.7415544927378386,0.2748111769706695,0.20682268748637145,-1.588455249957546,-1.201380745247206,-1.2368941705245489,1.2436601324501038,1.2853851297982124,0.1406298065318392,-0.8149542757669227,0.2632308230297051,0.254669691123857,-0.029437711094887367,-0.3135451133136314,0.33730103962888197,2.7722892359330364,0.27006592429179765,2.2744124808149278,0.3487908914304541,0.6378177604146411,-0.3625346852767215,-0.8560956610688466,-0.4911122397003462,0.2484581190530901,0.5973848683718551,-0.5683506623257987,0.4567182266927428,2.3908019252420267,0.8216404446333643,1.561794415432986,-0.8462464924737761,-0.029437711094887367,-0.546742857087091,2.887989879124829,0.5911732963010882,-0.18918876746049618,-0.7041927913644042,-1.039874359526328,-1.1757164885649334,-0.6686793660870611,-0.10046456164957326,0.1613745964486688,-1.165867319969863,-0.3406513956503882,0.33730103962888197,-0.8916090863461894,-0.36511927925681115,1.644156979095946,-0.23395713085309744,-0.8149542757669227,-1.0593270441378342,-1.0593270441378342,-0.8640032051124474,0.2220406379516395,2.5822787402834786,-0.8149542757669227,-0.8149542757669227,0.49432150055330704,1.1356333121048703,2.478622836556577,-0.9271225116235325,-0.7752196419190901,2.5938590942244435,-1.2877795352324226,-0.2842432601070547,0.20458613830998204,-0.14945413361266355,-1.1874508314711596,-0.5844073343755338,-0.7041927913644042,-1.0593270441378342,0.29859025934178585,-1.8322003447340904,-0.8817599177511191,-1.2368941705245489,-0.6686793660870611,1.7862106802053184,-0.8149542757669227,-0.4200853891456602,0.08566369664299006,1.836342820494014,-1.3079210210792354,1.8675055542743357,0.43657674084593046,0.359278960838043,-0.0924976602235378,-0.7397062166417471,-1.0238136188604912,-0.17149141220425937,1.6565760546213781,0.43657674084593046,0.43512118961569773,-1.2368941705245489,0.4654491206996186,-1.1720788920406295,-0.18918876746049618,2.2380360402157065,0.36355952679096765,1.314686983004789,0.4630292838464531,-0.8713624113102562,-0.988300193583148,-0.988300193583148,-0.7104043634351708,-1.175770293315178,-1.8970305357827129,2.972926418334252,-0.18918876746049618,-1.3079210210792354,-0.8807199539518996,0.43657674084593046,-0.988300193583148,-0.4911122397003462,1.6997875964826914,-0.24872983482971184,0.4407979494164198,-0.2641017742602421,-0.6686793660870611,-0.22858834898289918,0.42201738147106066,-0.5129980630504271,-0.9172733430284622,-0.7752196419190901,1.8001203688600549,-0.7104043634351708,-0.4911122397003462,0.9009449552021049,-0.9527867683058051,-0.4911122397003462,-0.6331659408097181,-1.422622466477058,-0.7929763545577616,1.148959388713422,-0.5328372370484558,0.49645286054057575,-0.34905853859097435,-1.7305089510669183,2.4811072463216477,-0.9172733430284622,-0.5266256649776891,0.6878644035380468,-2.0146163532856622,-0.18918876746049618,-0.8149542757669227,-0.568949897779714,-0.18918876746049618,2.8161000132482648,0.5312774845826123,-1.8265181966897153,0.43657674084593046,-1.0593270441378342,-1.2368941705245489,2.28900690208887,-1.13035389469252,-0.8149542757669227,-0.7397062166417471,2.073171461246217,-1.165867319969863,-1.3079210210792354,0.9672877565057985,0.6006083631644633,-1.2724075958018919,-0.38457196386831705,-1.4072097610412782,0.6183650758031347,-0.7850688105141606,2.696352375572554,-2.020139124121122,0.7518576450066585,0.24164731152840802,0.6245356695673315,0.30963580101270555,-0.6137132561982122,0.2685996048999027,0.9170056958679419,0.6977990692984068,0.43657674084593046,-0.39994390329884755,-1.0336627874555617,1.6642741712053484,-0.8807199539518996,-1.0238136188604912,0.14191784322106124,0.9574385879107278,1.5160129666413116,-0.8149542757669227,-1.713940638560538,-0.9527867683058051,1.6489022317748183,1.25972087311594,-0.20700483748160217,0.992952013188071,0.43458637734565353,-1.165867319969863,-1.201380745247206,-0.8149542757669227,3.6239226413539614,-0.36511927925681115,-0.7041927913644043,-0.5683506623257987,-0.8817599177511191,-0.988300193583148,0.4516356973718334,-0.9172733430284622,1.2890227263225162,-0.3448726042208778,1.9353389687073344,-0.11394070833532072],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC2<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC2\",\"marker\":{\"color\":\"#EF553B\"},\"name\":\"PC2\",\"notched\":true,\"offsetgroup\":\"PC2\",\"showlegend\":false,\"type\":\"box\",\"x\":[-0.9981493621782125,2.9846809863617936,-0.4262969612164295,1.626609693916913,-0.6331659408097153,-0.1891887674604959,1.0235459716999706,-1.938066731895516,-0.3706420500922713,0.4957640593052689,-0.8601318873911024,2.346727368058836,-1.165867319969863,-0.7771692394141175,-0.8524580645445426,0.60359237182652,-1.3888508449792356,-0.8149542757669227,-0.15203872759275297,0.9630665479353084,-0.6331659408097181,0.6405964102331685,-0.19117913096077296,1.4094726908092825,-1.1984963731420801,-0.286192857602082,0.43657674084593046,0.22570659682945488,0.33730103962888197,-0.8149542757669227,0.7959322021898495,3.0236713196526113,0.33730103962888197,0.46775024278791455,0.4664622060986926,-0.28788085663135865,0.43657674084593046,-1.13035389469252,-0.690262877588358,0.4957640593052689,0.16758209990333353,-0.29409242870212526,0.43657674084593046,-0.04798286152579545,-0.04912542985140115,-0.8149542757669227,-0.0924976602235378,0.33730103962888197,0.4567182266927428,-0.6137132561982122,-1.837049226898947,-1.13035389469252,3.0480097203325034,-0.22306557814743916,3.744372605840727,0.8216404446333643,-0.6038640876031416,0.3875278115004053,-1.228487027583963,-1.8480947685698674,0.156690547197676,1.963777806592033,1.455254139600957,-1.943589502730976,0.43657674084593046,0.4567182266927428,0.3348812027757169,-1.201380745247206,-1.0319747884262849,-0.9326452824589924,-0.7397062166417471,-1.144037835093774,-1.13035389469252,0.39543535554400655,-0.7397062166417471,-0.3336623054230333,-0.8149542757669227,-0.8149542757669227,-1.8265181966897153,-0.2842432601070547,-1.094840469415177,-0.8462464924737761,0.33730103962888197,-0.8817599177511191,-0.7459177887125136,-0.2341111198183592,-1.4408787780127146,-0.8149542757669227,0.8942501050282055,-1.0238136188604912,-0.8462464924737761,-1.165867319969863,0.8361296767181855,-1.0091949038491383,0.21915626584651354,-0.8149542757669227,4.188080994347883,1.598170856032207,-0.0454984517607243,-0.5719882588501025,-0.3552701106617407,-0.8149542757669227,0.275612988864668,-0.7041927913644042,-0.5419976044082198,-0.8817599177511191,-0.6038640876031416,-0.8149542757669227,-0.5266256649776891,0.4339921468658408,1.4295898829186844,0.5135207719439409,-1.094840469415177,-0.5426864056435261,0.5056132279003397,-1.13035389469252,1.2533261648423846,-0.7495553852368175,2.288322169469665,-1.5646761675864298,-1.1102124088457073,-0.8149542757669227,0.6262726198467361,0.7864971353264749,1.447556023016987,-0.10175259833879538,-0.18918876746049618,-1.0238136188604912,1.637845921942236,-0.2780316880362882,0.5473382252484489,-1.165867319969863,0.41617607684473445,-0.22306557814743916,-0.988300193583148,0.192203972475019,0.6545263240092142,1.171146737382213,-1.3079210210792354,2.1916310622327058,0.9832080337821213,-0.5683506623257987,-0.400632704534154,-0.5756152369407794,-1.2368941705245489,-1.1812392594003935,-0.9172733430284622,-1.1629829478647369,0.09488357111322351,-0.38457196386831705,-0.06495113637223028,1.1649351653114464,0.09485927737581329,-0.41770061593751906,-0.8149542757669227,1.2832709874775812,-0.15566570568343005,-0.8107330671964331,-0.8149542757669227,-1.4072097610412782,-0.21685400607667268,0.07089099266637498,-0.9527867683058051,-1.2724075958018919,-2.050129778563005,-1.5363735121738233,0.7901834707995863,0.03895074072946474,-0.8149542757669227,-0.8817599177511191,2.2540967808815444,-1.3178239944245496,-1.293991107303189,-1.13035389469252,3.655379615187739,-1.2167526846777361,-0.947912032700402,3.314150982452945,-0.8107330671964331,-0.5976525155323754,-0.8807199539518996,0.43657674084593046,-1.8425719977344075,-1.242392647622598,-1.1874508314711596,1.4762783327934792,0.4339921468658408,-0.2780316880362882,0.19030817973023592,-0.5976525155323754,-0.2132164095523688,-1.201380745247206,-0.5781998309208691,-1.0948161756777661,3.4283893748689445,3.925577328751747,-0.18918876746049618,-0.28788085663135865,0.33730103962888197,-0.49732381177111273,-0.8817599177511191,-1.4072097610412782,-0.6686793660870611,0.9912560412152362,-1.2368941705245489,-0.8546091165556425,-0.6430151094047886,0.2987442483070476,-0.15566570568343005,3.0871648107502514,-1.0238136188604912,-0.10667613372033996,-1.094840469415177,-0.8107330671964331,-0.0924976602235378,2.4087680653403294,-0.3907835359390839,-0.28788085663135865,2.347590383380714,-0.8107330671964331,-1.3079210210792354,-0.9172733430284622,-0.06495113637223028,-0.8149542757669227,1.206660162659556,-1.094840469415177,-1.201380745247206,-1.1481106073311913,-1.2368941705245489,-0.42142222561102377,1.6266096939169052,-0.8462464924737761,0.21915626584651354,-1.4581358917544007,-1.0238136188604912,-0.28846446867754444,-0.21685400607667268,-1.0453971303617882,-1.201380745247206,-0.7041927913644042,1.0597576551722674,0.4339921468658408,-0.8462464924737761,-1.094840469415177,0.4407979494164198,1.9689566012398945,-0.4618103864937697,-0.4771823259243,0.7672781719120098,0.1382802466967574,-0.8149542757669227,0.027703744542471962,1.9622912620788295,-0.7140419599594746,0.1265459037905308,0.9519158170752678,0.9630665479353084,1.6796704043732895,1.1448548828925131,0.522716352676764,-0.18918876746049618,-2.0556525493984648,0.9726606069920977,1.5083148500573411,0.33730103962888197,-0.5976525155323754,-1.5174283994028603,-0.8916090863461894,2.4434184752957946,1.5299185866799463,-0.8149542757669227,-0.988300193583148,0.20309552518067672,2.422677753995066,0.33730103962888197,2.293666657602452,0.2484581190530901,-0.8149542757669227,-1.2112837185925205,-0.08653464787352728,1.058002325816998,-0.8817599177511191,-1.3079210210792354,-1.201380745247206,1.4762783327934792,0.5473382252484489,-0.8107330671964331,-1.094840469415177,-0.38457196386831705,0.05741484598062782,-0.4262969612164268,2.637244850172328,1.9631542774007076,-0.49732381177111273,-1.0238136188604912,0.43657674084593046,0.20996068511369062,0.30156741698429446,0.8216404446333643,3.7381610337699613,0.33730103962888197,-0.16904728161368365,-1.201380745247206,1.3192578718690542,-0.8149542757669227,-0.2632768894046137,0.9630665479353084,2.2388990555375843,0.5374890566533788,1.9492445887459706,2.3908019252420267,2.372082560724547,-0.40615547536961427,-0.8817599177511191,-0.3289170527441617,-0.4262969612164268,-0.400632704534154,0.04158913945979854,1.4080063714173874,2.324520327366213,-1.094840469415177,-0.9172733430284622,0.34152224819937177,-0.548209176478986,-1.4072097610412782,2.8169630285701426,0.2901831164012,1.2381130678772323,-0.22858834898289918,2.530704574340299,0.3574425254756948,1.3763197450026698,1.206660162659556,-1.2877795352324226,-0.19177336144058568,-0.8149542757669227,0.8870393351634691,2.3398922667967432,-0.2780316880362882,-0.6053506321163454,-1.1303296009551096,0.9297635303055486,-0.8817599177511191,-0.988300193583148,-0.5976525155323754,0.15731407638900188,0.07089099266637498,-0.19177336144058568,-1.7494540638378808,-0.38457196386831705,-1.0593270441378342,0.8216404446333643,-0.071761943896912,-0.8916090863461894,0.43657674084593046,-0.8817599177511191,0.510297277151332,-0.0001358578883109216,0.33730103962888197,0.33730103962888197,-0.6651061927466285,0.5019756313760353,1.5966802429029017,-0.6331659408097181,-0.0924976602235378,-0.8107330671964331,3.4386573983832753,0.9630665479353084,0.33730103962888197,2.7181208693220844,1.3418787625068358,-1.1402030632875906,-1.201380745247206,0.156690547197676,-1.3760634995287946,1.0597576551722674,-0.5683506623257987,1.9909938798314906,0.08566369664299006,-1.201380745247206,1.393448859833914,-0.04246009069033591,-0.7397062166417471,-0.009985026483381183,-0.8149542757669227,-1.2368941705245489,-2.203229021343297,-0.07116270844299681,-0.18918876746049618,0.5056132279003397,1.3098530134046351,-1.13035389469252,-0.8616184319043064,2.124660663121585,-0.1498633818442428,-1.094840469415177,-0.24872983482971184,-0.24251826275894506,-1.0593270441378342,-0.3552701106617407,-0.4911122397003462,-0.9527867683058051,-0.507172980366183,-0.7850688105141606,-0.6393775128804847,-0.5719882588501025,-0.06495113637223028,-1.7494540638378808,-1.13035389469252,-0.42142222561102377,-0.8149542757669227,-0.18918876746049618,2.181348351668646,-0.8149542757669227,-0.3135451133136314,-0.28846446867754444,-0.12204807315087034,-0.690262877588358,-0.8107330671964331,-0.974370279807102,0.43657674084593046,-0.5045883863860934,-0.8462464924737761,-0.3351286248149281,-1.2167526846777361,-0.8149542757669227,-0.25857900342478224,-0.6748909381578277,-0.18918876746049618,0.24225061559842512,0.7548348026491676,-0.19177336144058568,0.2386089504580194,-1.2724075958018919,0.9781833778275577,1.0550474643924677,-0.7368218445366209,-0.7068311900947379,1.8238107343098902,-0.7752196419190901,0.2685996048999027,-1.165867319969863,-0.8916090863461894,-0.3552701106617407,-0.8149542757669227,0.5772919699998635,-0.7912803825849272,-0.6686793660870611,0.023043989028890217,1.6071570093053995,-0.6540606510757084,-0.7182631685299642,2.0773926698167067,2.8488388573231824,-0.8149542757669227,0.40528452413907706,1.4141936497507437,1.1175024148796435,0.4260252454398053,-0.18918876746049618,0.8104654200359128,-0.6686793660870611,0.7749519947585699,-0.17149141220425937,-0.8149542757669227,-0.5266256649776891,-0.8149542757669227,0.11261599001448469,-0.18918876746049618,-0.12788806839981717,-0.8149542757669227,-0.5266256649776891,-0.2341111198183592,2.027969555884627,-0.5683506623257987,1.4762783327934792,-0.5719882588501025,-0.7495553852368175,-1.094840469415177,-1.1819280606356999,-1.9191216191245535,-0.8149542757669227,-0.10046456164957326,0.8876997740452639,2.323835594747008,-0.42142222561102377,1.6266096939169052,3.3990875216623686,-0.8107330671964331,-1.5363735121738233,-0.7182631685299642,-1.13035389469252,1.7136972851374288,1.8968483857874818,-1.13035389469252,0.43657674084593046,3.2255768467192185,-0.8149542757669227,1.1183761983631832,-1.0238136188604912,-1.2724075958018919,0.021901420703284904,0.33730103962888197,-0.03564928316565371,1.1824824504904876,1.7479226737255493,-0.15756149842821326,-0.8149542757669227,-0.8817599177511191,-0.9527867683058051,-0.22048098416734968,-0.8149542757669227,0.38430431670779674,1.9163010703989893,-1.0238136188604912,1.1022709388386271,0.5124483291624318,-0.18918876746049618,0.025528398793961488,-0.7397062166417471,1.6796704043732895,-1.094840469415177,0.43657674084593046,3.525080482105903,0.43657674084593046,0.18792340652209483,0.4260252454398053,0.8216404446333643,-0.4911122397003462,-1.1157351796811676,-1.2584776820258459,0.43657674084593046,-0.0007350933422267604,0.9832080337821213,-0.2842432601070547,-1.080910555639131,1.685881976444056,0.9672877565057985,-0.8149542757669227,2.6672355046142115,1.9128924418841602,-1.316082190645029,-1.2450553400903428,-0.6430151094047886,2.8843522826005255,0.3967233922332286,-0.5781998309208691,0.43657674084593046,-0.6840513055175916,-1.5718869374511666,1.63585962705806,-0.9172733430284622,-0.18918876746049618,0.156690547197676,-0.5683506623257987,0.3256965416785428,3.994453127295332,0.43657674084593046,1.0374758854760167,0.025528398793961488,-0.18918876746049618,-0.45559881442300315,-0.8817599177511191,-0.8149542757669227,-0.28846446867754444,-1.0036721330136786,-1.201380745247206,-0.4527144423178772,0.43657674084593046,-0.7397062166417471,0.3256965416785428,2.189301727518933,0.38430431670779674,0.33730103962888197,-1.3079210210792354,-1.201380745247206,-0.14218955899768296,1.1140255068661626,1.0597576551722674,-0.7397062166417471,-0.4416689006469571,2.943644790248985,0.04158913945979854,2.9451111096408797,0.43657674084593046,0.291693954651814,-0.20700483748160217,3.490255858063867,-1.094840469415177,-0.8149542757669227,-0.6331659408097181,3.154549996164532,-0.20700483748160217,0.3574425254756948,-0.46544798301807366,-0.5775110296855627,-0.28846446867754444,-0.13597798692691668,0.43657674084593046,3.503476745483297,-0.5537319473144461,-0.8149542757669227,-0.8149542757669227,-0.3135451133136314,0.6183650758031347,-0.5009614082954165,-0.8107330671964331,-0.9172733430284622,0.626772218743721,1.7074857130666616,-0.25067943232473894,-0.8149542757669227,0.4339921468658408,-0.18918876746049618,-0.6331659408097181,-0.5537319473144461,-0.6485378802402485,-0.32960585397946823,-0.609362564701191,-0.9527867683058051,0.4309487808213497,1.0213949196888708,0.1058051824898026,-1.13035389469252,-1.13035389469252,1.5994588927214293,0.7738949235982543,0.7054116887170875,-0.9527867683058051,-0.18918876746049618,3.2561708052311182,-0.06495113637223028,2.47573846445145,-0.8149542757669227,-1.2395325692548829,-0.3552701106617407,-0.7397062166417471,-0.7550781560722774,-0.10310296037990736,-0.7182631685299642,-1.165867319969863,2.7181208693220844,-1.4881265461962838,-0.8149542757669227,-0.12788806839981717,2.4860064879657813,-1.201380745247206,3.655379615187739,-0.8149542757669227,-0.5328372370484558,-0.8149542757669227,-0.6137132561982122,-1.13035389469252,0.33730103962888197,-0.0846388551287441,-1.0036721330136786,-0.8149542757669227,0.43269058460087045,-1.0593270441378342,2.7645911193490664,-0.0803230758027607,0.7959322021898495,0.7749519947585699,-0.5976525155323754,-1.0691762127329045,-0.7195647307949344,-0.988300193583148,-0.8149542757669227,-0.34905853859097435,1.4448213589597008,0.09103247851318762,1.2853851297982124,0.6098039438972866,-0.7752196419190901,-0.8149542757669227,-1.2368941705245489,-1.0060569062218196,-0.7104043634351708,-0.18517535260551315,2.714483272797781,0.33730103962888197,1.6435334499046206,-1.165867319969863,-1.7415544927378386,0.2748111769706695,0.20682268748637145,-1.588455249957546,-1.201380745247206,-1.2368941705245489,1.2436601324501038,1.2853851297982124,0.1406298065318392,-0.8149542757669227,0.2632308230297051,0.254669691123857,-0.029437711094887367,-0.3135451133136314,0.33730103962888197,2.7722892359330364,0.27006592429179765,2.2744124808149278,0.3487908914304541,0.6378177604146411,-0.3625346852767215,-0.8560956610688466,-0.4911122397003462,0.2484581190530901,0.5973848683718551,-0.5683506623257987,0.4567182266927428,2.3908019252420267,0.8216404446333643,1.561794415432986,-0.8462464924737761,-0.029437711094887367,-0.546742857087091,2.887989879124829,0.5911732963010882,-0.18918876746049618,-0.7041927913644042,-1.039874359526328,-1.1757164885649334,-0.6686793660870611,-0.10046456164957326,0.1613745964486688,-1.165867319969863,-0.3406513956503882,0.33730103962888197,-0.8916090863461894,-0.36511927925681115,1.644156979095946,-0.23395713085309744,-0.8149542757669227,-1.0593270441378342,-1.0593270441378342,-0.8640032051124474,0.2220406379516395,2.5822787402834786,-0.8149542757669227,-0.8149542757669227,0.49432150055330704,1.1356333121048703,2.478622836556577,-0.9271225116235325,-0.7752196419190901,2.5938590942244435,-1.2877795352324226,-0.2842432601070547,0.20458613830998204,-0.14945413361266355,-1.1874508314711596,-0.5844073343755338,-0.7041927913644042,-1.0593270441378342,0.29859025934178585,-1.8322003447340904,-0.8817599177511191,-1.2368941705245489,-0.6686793660870611,1.7862106802053184,-0.8149542757669227,-0.4200853891456602,0.08566369664299006,1.836342820494014,-1.3079210210792354,1.8675055542743357,0.43657674084593046,0.359278960838043,-0.0924976602235378,-0.7397062166417471,-1.0238136188604912,-0.17149141220425937,1.6565760546213781,0.43657674084593046,0.43512118961569773,-1.2368941705245489,0.4654491206996186,-1.1720788920406295,-0.18918876746049618,2.2380360402157065,0.36355952679096765,1.314686983004789,0.4630292838464531,-0.8713624113102562,-0.988300193583148,-0.988300193583148,-0.7104043634351708,-1.175770293315178,-1.8970305357827129,2.972926418334252,-0.18918876746049618,-1.3079210210792354,-0.8807199539518996,0.43657674084593046,-0.988300193583148,-0.4911122397003462,1.6997875964826914,-0.24872983482971184,0.4407979494164198,-0.2641017742602421,-0.6686793660870611,-0.22858834898289918,0.42201738147106066,-0.5129980630504271,-0.9172733430284622,-0.7752196419190901,1.8001203688600549,-0.7104043634351708,-0.4911122397003462,0.9009449552021049,-0.9527867683058051,-0.4911122397003462,-0.6331659408097181,-1.422622466477058,-0.7929763545577616,1.148959388713422,-0.5328372370484558,0.49645286054057575,-0.34905853859097435,-1.7305089510669183,2.4811072463216477,-0.9172733430284622,-0.5266256649776891,0.6878644035380468,-2.0146163532856622,-0.18918876746049618,-0.8149542757669227,-0.568949897779714,-0.18918876746049618,2.8161000132482648,0.5312774845826123,-1.8265181966897153,0.43657674084593046,-1.0593270441378342,-1.2368941705245489,2.28900690208887,-1.13035389469252,-0.8149542757669227,-0.7397062166417471,2.073171461246217,-1.165867319969863,-1.3079210210792354,0.9672877565057985,0.6006083631644633,-1.2724075958018919,-0.38457196386831705,-1.4072097610412782,0.6183650758031347,-0.7850688105141606,2.696352375572554,-2.020139124121122,0.7518576450066585,0.24164731152840802,0.6245356695673315,0.30963580101270555,-0.6137132561982122,0.2685996048999027,0.9170056958679419,0.6977990692984068,0.43657674084593046,-0.39994390329884755,-1.0336627874555617,1.6642741712053484,-0.8807199539518996,-1.0238136188604912,0.14191784322106124,0.9574385879107278,1.5160129666413116,-0.8149542757669227,-1.713940638560538,-0.9527867683058051,1.6489022317748183,1.25972087311594,-0.20700483748160217,0.992952013188071,0.43458637734565353,-1.165867319969863,-1.201380745247206,-0.8149542757669227,3.6239226413539614,-0.36511927925681115,-0.7041927913644043,-0.5683506623257987,-0.8817599177511191,-0.988300193583148,0.4516356973718334,-0.9172733430284622,1.2890227263225162,-0.3448726042208778,1.9353389687073344,-0.11394070833532072],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC3<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC3\",\"marker\":{\"color\":\"#00cc96\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC3\",\"offsetgroup\":\"PC3\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.3682804998768233,-0.6136006796040681,-0.4695187825045015,1.048445959035529,0.38864193383115425,-0.7155798011822432,1.5510369091798888,-0.007012127106625298,0.23805412300825135,-2.2344783275301974,-0.5852358142080495,1.4815647551486868,-0.23049410940707854,1.8203381777704841,-0.964827617095084,0.7274775677560874,-0.7498750183055151,0.17735712246137975,0.2530830354270465,-2.095195815218579,0.38864193383115475,0.8515741806112347,-1.8164888045228245,0.9820757505629129,-0.24603680020404384,1.2923833511618903,-1.6085167248258665,1.4750093997530584,-1.2022588915749552,0.17735712246137975,-1.1908532323766798,-0.8226607038725028,-1.2022588915749552,1.6681897565235035,-1.1699389301151342,1.1937952241944632,-1.6085167248258665,-0.18921837319119633,-0.1334275029346888,-2.2344783275301974,0.6245646613699869,0.08798009056351785,-1.6085167248258665,-2.388363361015435,-1.6513858596592959,0.17735712246137975,-0.19935666433011062,-1.2022588915749552,-0.9422195555290002,-0.2835015353794223,0.34944058641751935,-0.18921837319119633,-0.2856195769783577,0.1705315629952821,1.113575284366451,0.8076171012063323,-0.6758974635839086,-1.6655241988593255,-0.5199380412964241,0.8146915961705156,-1.9338164842625605,0.7821020265800325,1.9478824115870625,0.22561337776987297,-1.6085167248258665,-0.9422195555290002,-0.09358758235886955,-0.2717698456229608,0.42559289062836314,0.6834574771850811,0.26481472518350824,0.5343911868572147,-0.18921837319119633,-1.2524904025468986,0.26481472518350824,0.2279885631703136,0.17735712246137975,0.17735712246137975,-0.3554528033686744,-0.3044158376409686,-0.14794263697531415,0.1409875165358614,-1.2022588915749552,0.09971178031997925,-0.8410004084474372,0.6357825727482782,0.5708481799157259,0.17735712246137975,1.1534332542238754,-0.06539116454354969,0.1409875165358614,-0.23049410940707854,1.7370541563049637,0.8335315096298147,1.3792596030123285,0.17735712246137975,0.9710585605586026,-0.8721096281985833,0.37691024407469315,0.8635893344674054,-0.38696731007273283,0.17735712246137975,0.8312127466568985,0.30609046139939017,1.1374905755597855,0.09971178031997925,-0.6758974635839086,0.17735712246137975,0.5124691424788017,-0.6860357547228226,1.5142107471666941,-2.2138404594222565,-0.14794263697531415,-0.20095006294765774,-2.6268742557346836,-0.18921837319119633,0.9609936458513509,0.6572106533879942,-0.5787299004847201,-0.19354315260987023,0.47707879610566983,0.17735712246137975,-0.9841981171436641,0.1769294901457087,2.193312041781012,-1.83035070956925,-0.7155798011822433,-0.06539116454354969,-1.1767946544237313,0.8013992959899773,-1.4797833858878557,-0.23049410940707854,0.9134948148811622,0.1705315629952821,-0.024115428327667412,-1.8925407480466783,0.4120562162771555,1.6176765218600044,-0.3955970542706075,-1.0949530373368528,-1.4288986459217123,-0.6346217273680261,-0.03584711808412903,-1.164706769266584,-0.3130455818388431,0.3945273236739055,0.058436044104097,-0.20476106398816196,1.3689566989498254,0.6775720873423303,1.0490537132852706,0.5118613882290591,1.2347945262567404,1.2819556523153737,0.17735712246137975,-0.22059699714984277,-1.7752130683069425,0.18226325275174368,0.17735712246137975,2.0442465513161148,1.2763466966262276,0.10834152451785396,0.017160307888214696,-0.35432131805472533,0.10178616912222616,-0.018230038484916954,0.585057156167772,1.4312394722283321,0.17735712246137975,0.09971178031997925,2.2181230499380358,-0.66732354587375,-0.8351150186046865,-0.18921837319119633,0.35192251732036917,0.35325158745802315,1.1438023566477131,-0.6345149818656174,0.18226325275174368,0.4299176700470371,1.5575674609234025,-1.6085167248258665,0.582066091294017,0.05374209573074015,-0.7112878099570399,1.0597210927043135,-0.6860357547228226,0.8013992959899773,0.36838086056380936,0.4299176700470371,-0.22186436520920372,-0.2717698456229608,-0.2422257991635401,-0.013780464282228778,-0.7561174034119204,-0.1782570963895689,-0.7155798011822433,1.1937952241944632,-1.2022588915749552,-0.5520702549362617,0.09971178031997925,2.0442465513161148,0.3473661976152726,-0.9638366831893278,-0.3130455818388431,-0.8178613190845476,0.7810378620356411,-1.7687135393990312,-1.7752130683069425,-0.30848926213374617,-0.06539116454354969,-0.09803715656155718,-0.14794263697531415,0.18226325275174368,-0.19935666433011062,-1.0285828288642374,-0.42824304628861504,1.1937952241944632,-1.5035302295004882,0.18226325275174368,-0.3955970542706075,0.058436044104097,1.0490537132852706,0.17735712246137975,1.6589522580758869,-0.14794263697531415,-0.2717698456229608,-0.20985624129913744,-0.3130455818388431,0.6571232662550011,1.048445959035528,0.1409875165358614,1.3792596030123285,-0.06971594396222348,-0.06539116454354969,-0.3093219679313322,1.2763466966262276,-0.546184865093511,-0.2717698456229608,0.30609046139939017,-1.5789726783664457,-0.6860357547228226,0.1409875165358614,-0.14794263697531415,-1.6036105945355024,1.1637437841722906,-0.5107945187203795,0.1142269143606046,1.6416985585557475,1.68910405878505,0.17735712246137975,0.4466575911890063,2.1333467904049277,0.6984863896038764,0.8159144300306025,-1.4652682518472304,-2.095195815218579,0.4518961368529745,-1.8839110038488034,1.037322023528809,-0.7155798011822433,0.33441167399872435,2.134782606044991,1.351332589404509,-1.2022588915749552,0.4299176700470371,0.7209222123604595,0.4921077085244654,1.9977878920008192,0.5322228221833952,0.17735712246137975,-0.024115428327667412,0.6658403975858691,-0.16819732542724175,-1.2022588915749552,2.0781145773312404,0.3147202055972653,0.17735712246137975,-0.5434963372261037,0.5682600127353091,0.7339770966639988,0.09971178031997925,-0.3955970542706075,-0.2717698456229608,1.0597210927043135,-1.4797833858878557,0.18226325275174368,-0.14794263697531415,0.6775720873423303,-1.5275586510116492,-0.4695187825044974,-1.271787671956843,-0.8517481942442474,-0.5520702549362617,-0.06539116454354969,-1.6085167248258665,-1.8719028799387374,-0.013505271199118605,0.8076171012063323,0.0077601507355059855,-1.2022588915749552,-0.04928263188537694,-0.2717698456229608,-0.8241029043279838,0.17735712246137975,0.4285960240804412,-2.095195815218579,-1.4803911401375982,-1.0873874576833698,-1.7121336976812436,-1.7076841234785554,-0.862841310838525,0.196778386792369,0.09971178031997925,1.385144992855079,-0.4695187825044974,-0.03584711808412903,1.172880921932917,1.0334170466167325,-0.6330791662255545,-0.14794263697531415,0.058436044104097,-1.1973527612845918,0.031675441928840184,2.0442465513161148,-1.2123752888879689,1.461811075444093,0.44744656265028687,0.4031570678717802,-1.3956148806044897,-0.5359617222780891,1.4522971428428706,1.6589522580758869,0.27070011502625885,0.20690116892080043,0.17735712246137975,1.2874706321329468,-1.2581005993065388,0.8013992959899773,0.6753473002409868,-0.05505620049811151,1.1947089904397576,0.09971178031997925,-0.024115428327667412,0.4299176700470371,-0.29996626343828076,0.10834152451785396,0.20690116892080043,-0.26588445578020986,0.6775720873423303,-0.10666690075943197,0.8076171012063323,-1.5564494684768697,0.4921077085244654,-1.6085167248258665,0.09971178031997925,0.2597573967310782,0.02579005208608951,-1.2022588915749552,-1.2022588915749552,1.7115398815416327,-1.1286631938992517,-0.9549305048378482,0.38864193383115475,-0.19935666433011062,0.18226325275174368,0.16841352139634724,-2.095195815218579,-1.2022588915749552,-1.5816321277295649,-0.9156101515158092,0.20317755501328982,-0.2717698456229608,-1.9338164842625605,-0.45241548128345466,-1.5789726783664457,-0.6346217273680261,-0.4308806551413303,-2.016367956694325,-0.2717698456229608,-1.594980850337628,-2.620988865891933,0.26481472518350824,0.4181859802905757,0.17735712246137975,-0.3130455818388431,0.40193423401169337,-0.05676142034567495,-0.7155798011822433,-2.6268742557346836,2.0026008462825797,-0.18921837319119633,0.7660089496168456,-1.3587887185912955,0.24027891010959507,-0.14794263697531415,-0.263140101425086,0.8426750322058595,-0.10666690075943197,-0.38696731007273283,0.5537448786946838,0.017160307888214696,-0.15967432673177562,0.615934917172112,-0.7171731997997907,0.8635893344674054,1.0490537132852706,-0.26588445578020986,-0.18921837319119633,0.6571232662550011,0.17735712246137975,-0.7155798011822433,0.07295756296014047,0.17735712246137975,0.7601235597740948,-0.3093219679313322,0.5269842765194267,-0.1334275029346888,0.18226325275174368,-0.4636333926617467,-1.6085167248258665,-1.0821552968348196,0.1409875165358614,0.27932985922413356,0.35325158745802315,0.17735712246137975,0.12925582677940015,-0.7584489360156726,-0.7155798011822433,0.6429707124304799,0.7299717590649317,0.20690116892080043,0.7071161338017513,-0.35432131805472533,1.9021571011684928,0.6078555591404586,0.2905477706024249,0.5644490116948051,3.3324175294677594,0.22353898896762592,0.9810173748941314,-0.23049410940707854,0.4921077085244654,-0.38696731007273283,0.17735712246137975,0.657755250678606,-0.48988021645883345,0.3473661976152726,-2.3058118885836705,1.7205894282461054,1.246288871788637,0.6935802593135124,-0.9733506157905498,0.327111509163345,0.17735712246137975,-1.644886330751385,2.0050700075545933,0.7111091519167624,0.5210988866766764,-0.7155798011822433,1.3033824918845953,0.3473661976152726,1.262106755668713,0.9252265046376238,0.17735712246137975,0.5124691424788017,0.17735712246137975,1.2554323943646817,-0.7155798011822433,-2.4812337675011698,0.17735712246137975,0.5124691424788017,0.6357825727482782,-1.8750118554434285,-0.6346217273680261,1.0597210927043135,0.8635893344674054,0.6572106533879942,-0.14794263697531415,-0.943913314833538,0.7321401237387507,0.17735712246137975,1.0077779770693887,1.0576834574831453,-0.5374541642688376,0.6571232662550011,1.048445959035528,0.30842199400314346,0.18226325275174368,-0.018230038484916954,0.6935802593135124,-0.18921837319119633,1.844416636893752,0.08869459031566902,-0.18921837319119633,-1.6085167248258665,-0.07924089589894655,0.17735712246137975,0.9358366617661729,-0.06539116454354969,-0.35432131805472533,-1.5688343872275317,-1.2022588915749552,-0.015485684129792787,-0.12596417016937628,-0.9524363135290037,0.48570854030354477,0.17735712246137975,0.09971178031997925,0.017160307888214696,-0.7519494071077616,0.17735712246137975,0.8080736572940086,-0.5834488788949085,-0.06539116454354969,1.3881587514177036,0.1127910987205415,-0.7155798011822433,0.4594617165064579,0.26481472518350824,0.4518961368529745,-0.14794263697531415,-1.6085167248258665,-0.23989426655978732,-1.6085167248258665,-0.27727844062511586,0.5210988866766764,0.8076171012063323,0.5537448786946838,0.709704300982168,-0.7938392823888042,-1.6085167248258665,-1.4738979960451049,-1.4288986459217123,-0.3044158376409686,-0.5874606013093933,1.5577112704839204,-2.090289684928215,0.17735712246137975,-0.9978864308644632,1.3658477234451345,0.09538700090130545,0.1779384733330699,0.7810378620356411,0.3683872453792274,1.5856382840917396,-0.2422257991635401,-1.6085167248258665,0.9723876306962568,-0.05950577470079909,-0.8436380173001522,0.058436044104097,-0.7155798011822433,-1.9338164842625605,-0.6346217273680261,1.5030868116599754,0.05126067405273186,-1.6085167248258665,1.1115189448458096,0.4594617165064579,-0.7155798011822433,0.595020614910566,0.09971178031997925,0.17735712246137975,-0.3093219679313322,0.6009060047533166,-0.2717698456229608,0.6207536603294828,-1.6085167248258665,0.26481472518350824,1.5030868116599754,1.9414832433661415,0.8080736572940086,-1.2022588915749552,-0.3955970542706075,-0.2717698456229608,-0.13931289277743952,0.9614449124010761,-1.5789726783664457,0.26481472518350824,0.15550265057648685,-0.42225091094345557,1.172880921932917,-0.47359220699727583,-1.6085167248258665,0.2447284843122827,0.8839507684217417,1.0572706357317738,-0.14794263697531415,0.17735712246137975,0.38864193383115475,-0.1617923683307108,0.8839507684217417,-0.5359617222780891,0.9874165431150521,1.0962148393439033,-0.3093219679313322,0.966502240853506,-1.6085167248258665,0.579215500661326,0.26430094680533817,0.17735712246137975,0.17735712246137975,0.7601235597740948,-1.397231913456091,0.9461408068991697,0.18226325275174368,0.058436044104097,-1.6041243729136725,0.7386015032628064,1.3336590873777723,0.17735712246137975,-0.6860357547228226,-0.7155798011822433,0.38864193383115475,0.26430094680533817,1.013663366912139,0.04670435434763552,-0.30910978601432537,0.017160307888214696,-1.2112146663310162,1.6980032071904252,-1.3500707873974584,-0.18921837319119633,-0.18921837319119633,1.9660190584400545,0.403771206936941,-0.1716894805879466,0.017160307888214696,-0.7155798011822433,3.128414033788789,1.0490537132852706,-0.7647471476097947,0.17735712246137975,-0.05468703154342824,-0.38696731007273283,0.26481472518350824,0.8898361582644921,1.266136527364803,0.6935802593135124,-0.23049410940707854,-1.5816321277295649,-0.3436171850546037,0.17735712246137975,-2.4812337675011698,0.1597837771984727,-0.2717698456229608,0.35192251732036917,0.17735712246137975,-0.5933459911521439,0.17735712246137975,-0.2835015353794223,-0.18921837319119633,-1.2022588915749552,-1.6926615958751783,0.6009060047533166,0.17735712246137975,-0.4485041195559606,-0.10666690075943197,0.7226151718020284,1.6740751463662547,-1.1908532323766798,1.262106755668713,0.4299176700470371,0.2857290274450541,0.9311118944803746,-0.024115428327667412,0.17735712246137975,0.7188478235582126,0.8371611476657529,0.7746386938147203,1.4960741003137015,1.8332927013870337,0.22353898896762592,0.17735712246137975,-0.3130455818388431,-0.04475329643560865,-0.7997246722315551,1.6488360646860345,-0.0834210658941333,-1.2022588915749552,-1.2232298201871872,-0.23049410940707854,0.9385188048181623,2.086832508525077,-0.9936180738733137,0.6383707399286949,-0.2717698456229608,-0.3130455818388431,0.34898323046687446,1.4960741003137015,-2.64723568968902,0.17735712246137975,-1.8099892756149139,1.420535339228211,1.0903294495011528,0.7601235597740948,-1.2022588915749552,0.47718554160807847,0.9296760788403113,-1.4391154039217164,0.7667979210781263,-2.0693753826666685,-0.9170523519712906,0.5333834447403476,0.5537448786946838,0.3147202055972653,1.0557280745893018,-0.6346217273680261,-0.9422195555290002,-1.7076841234785554,0.8076171012063323,2.0717096202347087,0.1409875165358614,1.0903294495011528,-0.019665854124979804,-1.1298238164562042,-0.05008705904164354,-0.7155798011822433,0.30609046139939017,-0.7788103699700092,0.1619018187974075,0.3473661976152726,1.0077779770693887,0.9528151682032011,-0.23049410940707854,0.5119553641006315,-1.2022588915749552,0.4921077085244654,0.005428618131753325,0.4106204006370923,-2.3878495826372643,0.17735712246137975,-0.10666690075943197,-0.10666690075943197,0.12034964842792027,1.4049926484312454,-0.6409199389621482,0.17735712246137975,0.17735712246137975,0.6815651054573418,1.5764007856441222,-0.7390141021908782,0.450831972308583,0.22353898896762592,3.2559018451778425,0.27070011502625885,-0.3044158376409686,0.748661274225134,-0.6693979346759972,-0.7112878099570399,0.08602470766967475,0.30609046139939017,-0.10666690075943197,1.254918615986512,-0.3620569211632156,0.09971178031997925,-0.3130455818388431,0.3473661976152726,0.5757233455006215,0.17735712246137975,0.6362963511264481,-2.016367956694325,1.5159217558898679,-0.3955970542706075,1.5828057427406532,-1.6085167248258665,-1.1767148931766505,-0.19935666433011062,0.26481472518350824,-0.06539116454354969,0.9252265046376238,1.1881850274348236,-1.6085167248258665,1.6526470657265386,-0.3130455818388431,-0.46347580968426233,-1.3363092430380241,-0.7155798011822433,1.5047038445115761,-2.791977200598213,0.4315347028986383,0.6451954995318233,0.9937283242029796,-0.024115428327667412,-0.024115428327667412,-0.7997246722315551,-0.5022206010102215,-0.1983618957672409,-0.1868868405874438,-0.7155798011822433,-0.3955970542706075,1.5575674609234025,-1.6085167248258665,-0.024115428327667412,0.5537448786946838,0.9840311334567561,-0.263140101425086,-1.6036105945355024,0.3618813316558979,0.3473661976152726,0.4031570678717802,0.9707074408855241,-2.308323734949166,0.058436044104097,0.22353898896762592,1.4361088489376173,-0.7997246722315551,0.5537448786946838,0.7137904951057825,0.017160307888214696,0.5537448786946838,0.38864193383115475,-0.028440207746341397,0.20290112085968484,0.933669096955323,-0.5933459911521439,-0.8960376890227538,0.7188478235582126,0.47326779506516586,2.02625950289925,0.058436044104097,0.5124691424788017,0.4661360778104893,0.14306190533810806,-0.7155798011822433,0.17735712246137975,-2.13430977549922,-0.7155798011822433,1.7727196957612057,-2.1932025913143147,-0.3554528033686744,-1.6085167248258665,-0.10666690075943197,-0.3130455818388431,-0.6743549024414366,-0.18921837319119633,0.17735712246137975,0.26481472518350824,-0.978256746080914,-0.23049410940707854,-0.3955970542706075,-2.090289684928215,-1.4178697815640326,-0.35432131805472533,0.6775720873423303,2.0442465513161148,-1.397231913456091,0.615934917172112,-0.9487126996214933,0.37568741021460655,1.9983956462505619,-2.2907829761648744,0.1381549751847754,0.7896676062335157,-0.2835015353794223,0.9810173748941314,1.4272097005322422,-1.5215729004819079,-1.6085167248258665,1.3025935204233143,0.3270047636609364,0.9427553972408739,1.5575674609234025,-0.06539116454354969,0.1908929969496183,-1.6978937567237287,1.1059029592105594,0.17735712246137975,-0.22460871956432762,0.017160307888214696,1.5677768303218576,1.0624024358933333,0.8839507684217417,-1.6566180205078465,-2.7094257281664476,-0.23049410940707854,-0.2717698456229608,0.17735712246137975,0.12936257228180886,0.005428618131753224,0.3060904613993902,-0.6346217273680261,0.0997117803199793,-0.024115428327667405,0.2906481312894156,0.05843604410409708,-0.0021369615217297056,0.5070492338102676,-1.1384535606540789,-0.6281221984601149],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC3<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC3\",\"marker\":{\"color\":\"#00cc96\"},\"name\":\"PC3\",\"notched\":true,\"offsetgroup\":\"PC3\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.3682804998768233,-0.6136006796040681,-0.4695187825045015,1.048445959035529,0.38864193383115425,-0.7155798011822432,1.5510369091798888,-0.007012127106625298,0.23805412300825135,-2.2344783275301974,-0.5852358142080495,1.4815647551486868,-0.23049410940707854,1.8203381777704841,-0.964827617095084,0.7274775677560874,-0.7498750183055151,0.17735712246137975,0.2530830354270465,-2.095195815218579,0.38864193383115475,0.8515741806112347,-1.8164888045228245,0.9820757505629129,-0.24603680020404384,1.2923833511618903,-1.6085167248258665,1.4750093997530584,-1.2022588915749552,0.17735712246137975,-1.1908532323766798,-0.8226607038725028,-1.2022588915749552,1.6681897565235035,-1.1699389301151342,1.1937952241944632,-1.6085167248258665,-0.18921837319119633,-0.1334275029346888,-2.2344783275301974,0.6245646613699869,0.08798009056351785,-1.6085167248258665,-2.388363361015435,-1.6513858596592959,0.17735712246137975,-0.19935666433011062,-1.2022588915749552,-0.9422195555290002,-0.2835015353794223,0.34944058641751935,-0.18921837319119633,-0.2856195769783577,0.1705315629952821,1.113575284366451,0.8076171012063323,-0.6758974635839086,-1.6655241988593255,-0.5199380412964241,0.8146915961705156,-1.9338164842625605,0.7821020265800325,1.9478824115870625,0.22561337776987297,-1.6085167248258665,-0.9422195555290002,-0.09358758235886955,-0.2717698456229608,0.42559289062836314,0.6834574771850811,0.26481472518350824,0.5343911868572147,-0.18921837319119633,-1.2524904025468986,0.26481472518350824,0.2279885631703136,0.17735712246137975,0.17735712246137975,-0.3554528033686744,-0.3044158376409686,-0.14794263697531415,0.1409875165358614,-1.2022588915749552,0.09971178031997925,-0.8410004084474372,0.6357825727482782,0.5708481799157259,0.17735712246137975,1.1534332542238754,-0.06539116454354969,0.1409875165358614,-0.23049410940707854,1.7370541563049637,0.8335315096298147,1.3792596030123285,0.17735712246137975,0.9710585605586026,-0.8721096281985833,0.37691024407469315,0.8635893344674054,-0.38696731007273283,0.17735712246137975,0.8312127466568985,0.30609046139939017,1.1374905755597855,0.09971178031997925,-0.6758974635839086,0.17735712246137975,0.5124691424788017,-0.6860357547228226,1.5142107471666941,-2.2138404594222565,-0.14794263697531415,-0.20095006294765774,-2.6268742557346836,-0.18921837319119633,0.9609936458513509,0.6572106533879942,-0.5787299004847201,-0.19354315260987023,0.47707879610566983,0.17735712246137975,-0.9841981171436641,0.1769294901457087,2.193312041781012,-1.83035070956925,-0.7155798011822433,-0.06539116454354969,-1.1767946544237313,0.8013992959899773,-1.4797833858878557,-0.23049410940707854,0.9134948148811622,0.1705315629952821,-0.024115428327667412,-1.8925407480466783,0.4120562162771555,1.6176765218600044,-0.3955970542706075,-1.0949530373368528,-1.4288986459217123,-0.6346217273680261,-0.03584711808412903,-1.164706769266584,-0.3130455818388431,0.3945273236739055,0.058436044104097,-0.20476106398816196,1.3689566989498254,0.6775720873423303,1.0490537132852706,0.5118613882290591,1.2347945262567404,1.2819556523153737,0.17735712246137975,-0.22059699714984277,-1.7752130683069425,0.18226325275174368,0.17735712246137975,2.0442465513161148,1.2763466966262276,0.10834152451785396,0.017160307888214696,-0.35432131805472533,0.10178616912222616,-0.018230038484916954,0.585057156167772,1.4312394722283321,0.17735712246137975,0.09971178031997925,2.2181230499380358,-0.66732354587375,-0.8351150186046865,-0.18921837319119633,0.35192251732036917,0.35325158745802315,1.1438023566477131,-0.6345149818656174,0.18226325275174368,0.4299176700470371,1.5575674609234025,-1.6085167248258665,0.582066091294017,0.05374209573074015,-0.7112878099570399,1.0597210927043135,-0.6860357547228226,0.8013992959899773,0.36838086056380936,0.4299176700470371,-0.22186436520920372,-0.2717698456229608,-0.2422257991635401,-0.013780464282228778,-0.7561174034119204,-0.1782570963895689,-0.7155798011822433,1.1937952241944632,-1.2022588915749552,-0.5520702549362617,0.09971178031997925,2.0442465513161148,0.3473661976152726,-0.9638366831893278,-0.3130455818388431,-0.8178613190845476,0.7810378620356411,-1.7687135393990312,-1.7752130683069425,-0.30848926213374617,-0.06539116454354969,-0.09803715656155718,-0.14794263697531415,0.18226325275174368,-0.19935666433011062,-1.0285828288642374,-0.42824304628861504,1.1937952241944632,-1.5035302295004882,0.18226325275174368,-0.3955970542706075,0.058436044104097,1.0490537132852706,0.17735712246137975,1.6589522580758869,-0.14794263697531415,-0.2717698456229608,-0.20985624129913744,-0.3130455818388431,0.6571232662550011,1.048445959035528,0.1409875165358614,1.3792596030123285,-0.06971594396222348,-0.06539116454354969,-0.3093219679313322,1.2763466966262276,-0.546184865093511,-0.2717698456229608,0.30609046139939017,-1.5789726783664457,-0.6860357547228226,0.1409875165358614,-0.14794263697531415,-1.6036105945355024,1.1637437841722906,-0.5107945187203795,0.1142269143606046,1.6416985585557475,1.68910405878505,0.17735712246137975,0.4466575911890063,2.1333467904049277,0.6984863896038764,0.8159144300306025,-1.4652682518472304,-2.095195815218579,0.4518961368529745,-1.8839110038488034,1.037322023528809,-0.7155798011822433,0.33441167399872435,2.134782606044991,1.351332589404509,-1.2022588915749552,0.4299176700470371,0.7209222123604595,0.4921077085244654,1.9977878920008192,0.5322228221833952,0.17735712246137975,-0.024115428327667412,0.6658403975858691,-0.16819732542724175,-1.2022588915749552,2.0781145773312404,0.3147202055972653,0.17735712246137975,-0.5434963372261037,0.5682600127353091,0.7339770966639988,0.09971178031997925,-0.3955970542706075,-0.2717698456229608,1.0597210927043135,-1.4797833858878557,0.18226325275174368,-0.14794263697531415,0.6775720873423303,-1.5275586510116492,-0.4695187825044974,-1.271787671956843,-0.8517481942442474,-0.5520702549362617,-0.06539116454354969,-1.6085167248258665,-1.8719028799387374,-0.013505271199118605,0.8076171012063323,0.0077601507355059855,-1.2022588915749552,-0.04928263188537694,-0.2717698456229608,-0.8241029043279838,0.17735712246137975,0.4285960240804412,-2.095195815218579,-1.4803911401375982,-1.0873874576833698,-1.7121336976812436,-1.7076841234785554,-0.862841310838525,0.196778386792369,0.09971178031997925,1.385144992855079,-0.4695187825044974,-0.03584711808412903,1.172880921932917,1.0334170466167325,-0.6330791662255545,-0.14794263697531415,0.058436044104097,-1.1973527612845918,0.031675441928840184,2.0442465513161148,-1.2123752888879689,1.461811075444093,0.44744656265028687,0.4031570678717802,-1.3956148806044897,-0.5359617222780891,1.4522971428428706,1.6589522580758869,0.27070011502625885,0.20690116892080043,0.17735712246137975,1.2874706321329468,-1.2581005993065388,0.8013992959899773,0.6753473002409868,-0.05505620049811151,1.1947089904397576,0.09971178031997925,-0.024115428327667412,0.4299176700470371,-0.29996626343828076,0.10834152451785396,0.20690116892080043,-0.26588445578020986,0.6775720873423303,-0.10666690075943197,0.8076171012063323,-1.5564494684768697,0.4921077085244654,-1.6085167248258665,0.09971178031997925,0.2597573967310782,0.02579005208608951,-1.2022588915749552,-1.2022588915749552,1.7115398815416327,-1.1286631938992517,-0.9549305048378482,0.38864193383115475,-0.19935666433011062,0.18226325275174368,0.16841352139634724,-2.095195815218579,-1.2022588915749552,-1.5816321277295649,-0.9156101515158092,0.20317755501328982,-0.2717698456229608,-1.9338164842625605,-0.45241548128345466,-1.5789726783664457,-0.6346217273680261,-0.4308806551413303,-2.016367956694325,-0.2717698456229608,-1.594980850337628,-2.620988865891933,0.26481472518350824,0.4181859802905757,0.17735712246137975,-0.3130455818388431,0.40193423401169337,-0.05676142034567495,-0.7155798011822433,-2.6268742557346836,2.0026008462825797,-0.18921837319119633,0.7660089496168456,-1.3587887185912955,0.24027891010959507,-0.14794263697531415,-0.263140101425086,0.8426750322058595,-0.10666690075943197,-0.38696731007273283,0.5537448786946838,0.017160307888214696,-0.15967432673177562,0.615934917172112,-0.7171731997997907,0.8635893344674054,1.0490537132852706,-0.26588445578020986,-0.18921837319119633,0.6571232662550011,0.17735712246137975,-0.7155798011822433,0.07295756296014047,0.17735712246137975,0.7601235597740948,-0.3093219679313322,0.5269842765194267,-0.1334275029346888,0.18226325275174368,-0.4636333926617467,-1.6085167248258665,-1.0821552968348196,0.1409875165358614,0.27932985922413356,0.35325158745802315,0.17735712246137975,0.12925582677940015,-0.7584489360156726,-0.7155798011822433,0.6429707124304799,0.7299717590649317,0.20690116892080043,0.7071161338017513,-0.35432131805472533,1.9021571011684928,0.6078555591404586,0.2905477706024249,0.5644490116948051,3.3324175294677594,0.22353898896762592,0.9810173748941314,-0.23049410940707854,0.4921077085244654,-0.38696731007273283,0.17735712246137975,0.657755250678606,-0.48988021645883345,0.3473661976152726,-2.3058118885836705,1.7205894282461054,1.246288871788637,0.6935802593135124,-0.9733506157905498,0.327111509163345,0.17735712246137975,-1.644886330751385,2.0050700075545933,0.7111091519167624,0.5210988866766764,-0.7155798011822433,1.3033824918845953,0.3473661976152726,1.262106755668713,0.9252265046376238,0.17735712246137975,0.5124691424788017,0.17735712246137975,1.2554323943646817,-0.7155798011822433,-2.4812337675011698,0.17735712246137975,0.5124691424788017,0.6357825727482782,-1.8750118554434285,-0.6346217273680261,1.0597210927043135,0.8635893344674054,0.6572106533879942,-0.14794263697531415,-0.943913314833538,0.7321401237387507,0.17735712246137975,1.0077779770693887,1.0576834574831453,-0.5374541642688376,0.6571232662550011,1.048445959035528,0.30842199400314346,0.18226325275174368,-0.018230038484916954,0.6935802593135124,-0.18921837319119633,1.844416636893752,0.08869459031566902,-0.18921837319119633,-1.6085167248258665,-0.07924089589894655,0.17735712246137975,0.9358366617661729,-0.06539116454354969,-0.35432131805472533,-1.5688343872275317,-1.2022588915749552,-0.015485684129792787,-0.12596417016937628,-0.9524363135290037,0.48570854030354477,0.17735712246137975,0.09971178031997925,0.017160307888214696,-0.7519494071077616,0.17735712246137975,0.8080736572940086,-0.5834488788949085,-0.06539116454354969,1.3881587514177036,0.1127910987205415,-0.7155798011822433,0.4594617165064579,0.26481472518350824,0.4518961368529745,-0.14794263697531415,-1.6085167248258665,-0.23989426655978732,-1.6085167248258665,-0.27727844062511586,0.5210988866766764,0.8076171012063323,0.5537448786946838,0.709704300982168,-0.7938392823888042,-1.6085167248258665,-1.4738979960451049,-1.4288986459217123,-0.3044158376409686,-0.5874606013093933,1.5577112704839204,-2.090289684928215,0.17735712246137975,-0.9978864308644632,1.3658477234451345,0.09538700090130545,0.1779384733330699,0.7810378620356411,0.3683872453792274,1.5856382840917396,-0.2422257991635401,-1.6085167248258665,0.9723876306962568,-0.05950577470079909,-0.8436380173001522,0.058436044104097,-0.7155798011822433,-1.9338164842625605,-0.6346217273680261,1.5030868116599754,0.05126067405273186,-1.6085167248258665,1.1115189448458096,0.4594617165064579,-0.7155798011822433,0.595020614910566,0.09971178031997925,0.17735712246137975,-0.3093219679313322,0.6009060047533166,-0.2717698456229608,0.6207536603294828,-1.6085167248258665,0.26481472518350824,1.5030868116599754,1.9414832433661415,0.8080736572940086,-1.2022588915749552,-0.3955970542706075,-0.2717698456229608,-0.13931289277743952,0.9614449124010761,-1.5789726783664457,0.26481472518350824,0.15550265057648685,-0.42225091094345557,1.172880921932917,-0.47359220699727583,-1.6085167248258665,0.2447284843122827,0.8839507684217417,1.0572706357317738,-0.14794263697531415,0.17735712246137975,0.38864193383115475,-0.1617923683307108,0.8839507684217417,-0.5359617222780891,0.9874165431150521,1.0962148393439033,-0.3093219679313322,0.966502240853506,-1.6085167248258665,0.579215500661326,0.26430094680533817,0.17735712246137975,0.17735712246137975,0.7601235597740948,-1.397231913456091,0.9461408068991697,0.18226325275174368,0.058436044104097,-1.6041243729136725,0.7386015032628064,1.3336590873777723,0.17735712246137975,-0.6860357547228226,-0.7155798011822433,0.38864193383115475,0.26430094680533817,1.013663366912139,0.04670435434763552,-0.30910978601432537,0.017160307888214696,-1.2112146663310162,1.6980032071904252,-1.3500707873974584,-0.18921837319119633,-0.18921837319119633,1.9660190584400545,0.403771206936941,-0.1716894805879466,0.017160307888214696,-0.7155798011822433,3.128414033788789,1.0490537132852706,-0.7647471476097947,0.17735712246137975,-0.05468703154342824,-0.38696731007273283,0.26481472518350824,0.8898361582644921,1.266136527364803,0.6935802593135124,-0.23049410940707854,-1.5816321277295649,-0.3436171850546037,0.17735712246137975,-2.4812337675011698,0.1597837771984727,-0.2717698456229608,0.35192251732036917,0.17735712246137975,-0.5933459911521439,0.17735712246137975,-0.2835015353794223,-0.18921837319119633,-1.2022588915749552,-1.6926615958751783,0.6009060047533166,0.17735712246137975,-0.4485041195559606,-0.10666690075943197,0.7226151718020284,1.6740751463662547,-1.1908532323766798,1.262106755668713,0.4299176700470371,0.2857290274450541,0.9311118944803746,-0.024115428327667412,0.17735712246137975,0.7188478235582126,0.8371611476657529,0.7746386938147203,1.4960741003137015,1.8332927013870337,0.22353898896762592,0.17735712246137975,-0.3130455818388431,-0.04475329643560865,-0.7997246722315551,1.6488360646860345,-0.0834210658941333,-1.2022588915749552,-1.2232298201871872,-0.23049410940707854,0.9385188048181623,2.086832508525077,-0.9936180738733137,0.6383707399286949,-0.2717698456229608,-0.3130455818388431,0.34898323046687446,1.4960741003137015,-2.64723568968902,0.17735712246137975,-1.8099892756149139,1.420535339228211,1.0903294495011528,0.7601235597740948,-1.2022588915749552,0.47718554160807847,0.9296760788403113,-1.4391154039217164,0.7667979210781263,-2.0693753826666685,-0.9170523519712906,0.5333834447403476,0.5537448786946838,0.3147202055972653,1.0557280745893018,-0.6346217273680261,-0.9422195555290002,-1.7076841234785554,0.8076171012063323,2.0717096202347087,0.1409875165358614,1.0903294495011528,-0.019665854124979804,-1.1298238164562042,-0.05008705904164354,-0.7155798011822433,0.30609046139939017,-0.7788103699700092,0.1619018187974075,0.3473661976152726,1.0077779770693887,0.9528151682032011,-0.23049410940707854,0.5119553641006315,-1.2022588915749552,0.4921077085244654,0.005428618131753325,0.4106204006370923,-2.3878495826372643,0.17735712246137975,-0.10666690075943197,-0.10666690075943197,0.12034964842792027,1.4049926484312454,-0.6409199389621482,0.17735712246137975,0.17735712246137975,0.6815651054573418,1.5764007856441222,-0.7390141021908782,0.450831972308583,0.22353898896762592,3.2559018451778425,0.27070011502625885,-0.3044158376409686,0.748661274225134,-0.6693979346759972,-0.7112878099570399,0.08602470766967475,0.30609046139939017,-0.10666690075943197,1.254918615986512,-0.3620569211632156,0.09971178031997925,-0.3130455818388431,0.3473661976152726,0.5757233455006215,0.17735712246137975,0.6362963511264481,-2.016367956694325,1.5159217558898679,-0.3955970542706075,1.5828057427406532,-1.6085167248258665,-1.1767148931766505,-0.19935666433011062,0.26481472518350824,-0.06539116454354969,0.9252265046376238,1.1881850274348236,-1.6085167248258665,1.6526470657265386,-0.3130455818388431,-0.46347580968426233,-1.3363092430380241,-0.7155798011822433,1.5047038445115761,-2.791977200598213,0.4315347028986383,0.6451954995318233,0.9937283242029796,-0.024115428327667412,-0.024115428327667412,-0.7997246722315551,-0.5022206010102215,-0.1983618957672409,-0.1868868405874438,-0.7155798011822433,-0.3955970542706075,1.5575674609234025,-1.6085167248258665,-0.024115428327667412,0.5537448786946838,0.9840311334567561,-0.263140101425086,-1.6036105945355024,0.3618813316558979,0.3473661976152726,0.4031570678717802,0.9707074408855241,-2.308323734949166,0.058436044104097,0.22353898896762592,1.4361088489376173,-0.7997246722315551,0.5537448786946838,0.7137904951057825,0.017160307888214696,0.5537448786946838,0.38864193383115475,-0.028440207746341397,0.20290112085968484,0.933669096955323,-0.5933459911521439,-0.8960376890227538,0.7188478235582126,0.47326779506516586,2.02625950289925,0.058436044104097,0.5124691424788017,0.4661360778104893,0.14306190533810806,-0.7155798011822433,0.17735712246137975,-2.13430977549922,-0.7155798011822433,1.7727196957612057,-2.1932025913143147,-0.3554528033686744,-1.6085167248258665,-0.10666690075943197,-0.3130455818388431,-0.6743549024414366,-0.18921837319119633,0.17735712246137975,0.26481472518350824,-0.978256746080914,-0.23049410940707854,-0.3955970542706075,-2.090289684928215,-1.4178697815640326,-0.35432131805472533,0.6775720873423303,2.0442465513161148,-1.397231913456091,0.615934917172112,-0.9487126996214933,0.37568741021460655,1.9983956462505619,-2.2907829761648744,0.1381549751847754,0.7896676062335157,-0.2835015353794223,0.9810173748941314,1.4272097005322422,-1.5215729004819079,-1.6085167248258665,1.3025935204233143,0.3270047636609364,0.9427553972408739,1.5575674609234025,-0.06539116454354969,0.1908929969496183,-1.6978937567237287,1.1059029592105594,0.17735712246137975,-0.22460871956432762,0.017160307888214696,1.5677768303218576,1.0624024358933333,0.8839507684217417,-1.6566180205078465,-2.7094257281664476,-0.23049410940707854,-0.2717698456229608,0.17735712246137975,0.12936257228180886,0.005428618131753224,0.3060904613993902,-0.6346217273680261,0.0997117803199793,-0.024115428327667405,0.2906481312894156,0.05843604410409708,-0.0021369615217297056,0.5070492338102676,-1.1384535606540789,-0.6281221984601149],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC4<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC4\",\"marker\":{\"color\":\"#ab63fa\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC4\",\"offsetgroup\":\"PC4\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.6438428420233844,0.003332021758036449,-1.7107934359632113,-0.9603390523592518,0.022348236174656512,0.5478903273299239,0.06142476964658775,1.2257069877798157,-1.031813003209138,-0.11242108938297925,-0.8250897150434575,-1.647866991279021,0.12139823578120805,1.2812486418265576,-1.6315534362779651,-1.9022901018692084,1.8673800180039009,0.05614979031062444,-1.2081588296423376,-0.7529408075525704,0.022348236174655475,0.24833805789095753,-1.1464162325657687,0.4524979240404773,-0.6064846839645993,-0.5047196967681322,1.0396308643492234,1.53761592527534,-1.24468134457187,0.05614979031062444,0.9728126436777366,0.11179019791761412,-1.24468134457187,-0.18235509634555314,1.5877039162193658,0.5117761758813176,1.0396308643492234,0.1147949024741045,-0.9723830034452061,-0.11242108938297925,-1.2675888294062694,-1.1817454964139236,1.0396308643492234,0.2600805634047313,-1.172829565794183,0.05614979031062444,1.0835416001863103,-1.24468134457187,1.725214630410396,-1.1223154966499922,1.342622814449084,0.1147949024741045,-0.1241512667224032,-1.1949521630281306,1.672460316470334,0.3303829008221225,-1.677776769427689,1.048750976709427,-0.7366071772480747,1.616074467630242,1.0916726432055999,-1.460953703034651,0.7661992864715053,1.3624328143703943,1.0396308643492234,1.725214630410396,-1.6209101916799182,0.12800156908831145,-0.3660496973189591,0.7673620019997597,0.042158236095965994,-0.20951387080706937,0.1147949024741045,1.600910582833573,0.042158236095965994,0.19807481345028966,0.05614979031062444,0.05614979031062444,0.9335679013395546,-1.737206769191621,0.10819156916700097,0.06196823601727653,-1.24468134457187,0.06857156932438001,-1.6513634361992753,-0.9215005098469727,1.1332603214803663,0.05614979031062444,-0.2813690798548678,0.09498490255279403,0.06196823601727653,0.12139823578120805,0.6499027089598025,0.9172944952045458,-0.13613176319582865,0.05614979031062444,1.1520356658736255,1.8401070711640817,-1.2279688295636482,0.5646028423381458,-1.7240001025774137,0.05614979031062444,0.8698326637396898,0.035554902788862516,0.6947253356216212,0.06857156932438001,-1.677776769427689,0.05614979031062444,0.002538236253344861,-0.709030071715483,0.21734134700091154,-0.11572275603653072,0.10819156916700097,-1.1355221632641992,-0.667882362160676,0.1147949024741045,0.27967044079178044,0.5976195088736632,1.9431969820615773,-0.2669996977124064,0.8003786685352773,0.05614979031062444,1.5579889163374,-1.5891752361524807,0.6519226646052741,1.6933572491330213,0.5478903273299238,0.09498490255279403,0.0423362027132014,-0.043685096896379595,1.0190359768274613,0.12139823578120805,-1.3138121625559935,-1.1949521630281306,0.0883815692456904,1.0850693098984965,-0.7595998483431113,0.8190259529283332,0.14781156900962208,1.4075457092051906,-0.06735704149139782,-1.6843801027347927,-1.1619354964926132,0.6197421061076108,0.13460490239541506,0.8135853351494841,0.07517490263148349,-0.6130880172717028,0.8077202464797719,-0.023875096975069027,-0.08330509673900062,-0.874495719366908,-0.11302009662096638,0.6716136690467587,0.05614979031062444,1.4358272501559852,-1.1530195658728724,0.05536490271017299,0.05614979031062444,1.9411935020100846,0.4985695092671107,-1.8032401022626559,0.08177823593858702,0.1412082357025186,1.3822428142917047,0.8796186682205193,-1.0362307424278836,-0.7008755231226432,0.05614979031062444,0.06857156932438001,0.17974130280376213,1.8541733513896939,-0.8601263372244466,0.1147949024741045,1.2510856654801779,0.8201886684565874,1.0415985427813692,-0.6115592507835937,0.05536490271017299,0.015744902867551817,0.1486218301082907,1.0396308643492234,1.4793486410396626,1.1920710720867322,-0.8799363371457571,0.44007614502672177,-0.709030071715483,-0.043685096896379595,1.1666558727196101,0.015744902867551817,-1.7504134358058283,0.12800156908831145,-1.1289188299570956,1.0289319122677394,-0.5170926288386731,-0.6095392951381222,0.5478903273299238,0.5117761758813176,-1.24468134457187,-1.6975867693489999,0.06857156932438001,1.9411935020100846,0.028951569481759063,0.9364943104886674,0.13460490239541506,-0.9618155416340365,0.5778095089523528,1.0652593099771859,-1.1530195658728724,1.356738998393834,0.09498490255279403,-1.7702234357271385,0.10819156916700097,0.05536490271017299,1.0835416001863103,-0.005291267194540012,-1.7173967692703105,0.5117761758813176,-0.5475458733580305,0.05536490271017299,0.14781156900962208,0.07517490263148349,-0.08330509673900062,0.05614979031062444,0.8124226196212297,0.10819156916700097,0.12800156908831145,0.11809656912765623,0.13460490239541506,-0.7509731291204249,-0.9603390523592537,0.06196823601727653,-0.13613176319582865,-0.2868096976337169,0.09498490255279403,-1.7364218815911694,0.4985695092671107,-0.9063496703741711,0.12800156908831145,0.035554902788862516,-0.21728953469618362,-0.709030071715483,0.06196823601727653,0.10819156916700097,1.0388459767487717,1.414475650002694,-1.7041901026561033,-1.0120030032878273,0.9141118240308197,0.4325361761960757,0.05614979031062444,-0.9901730477210452,0.11829134739435893,0.5910161755665597,-1.1242596695085867,-0.06153859578474574,-0.7529408075525704,-1.4081270365778231,-0.7867423616885394,-1.3336221624773041,0.5478903273299238,1.5189686408822838,0.7602152023219675,0.3184113022529357,-1.24468134457187,0.015744902867551817,1.2831928146851523,0.6240328421020773,-1.112215718422634,-1.4959903252156403,0.05614979031062444,0.0883815692456904,-1.2741921627133728,1.802507026966932,-1.24468134457187,-1.2000790070604512,-1.8362567687981732,0.05614979031062444,1.8343633514683835,-1.0846396696659657,0.31598877398084974,0.06857156932438001,0.14781156900962208,0.12800156908831145,0.44007614502672177,1.0190359768274613,0.05536490271017299,0.10819156916700097,-0.023875096975069027,-1.1926395657154931,-1.7107934359632069,0.183641976695301,1.2186124653153496,-1.6975867693489999,0.09498490255279403,1.0396308643492234,1.0817676432449448,-0.4425640668152662,0.3303829008221225,-0.021061355824907504,-1.24468134457187,1.2334740933910966,0.12800156908831145,-1.080141478264971,0.05614979031062444,1.3571392050581994,-0.7529408075525704,0.14200202120720826,1.5744972496051586,-0.589185828846123,-0.4398725847989027,0.6400427896167624,-1.025209669902034,0.06857156932438001,0.6551053357789999,-1.7107934359632069,-1.1619354964926132,-0.1031150966603111,-0.7839932259260535,0.03036460414401458,0.10819156916700097,0.07517490263148349,-1.2454662321723216,-0.9987963366736201,1.9411935020100846,-0.5191125844841447,-0.1493384298100356,-1.5574402806250434,-1.0582263364375515,0.20345197661661144,-0.5590975785106973,0.22724634696156673,0.8124226196212297,0.8333953350707944,-1.2007706087347825,0.05614979031062444,0.8718526193851612,-0.6618224952242615,-0.043685096896379595,-0.0985317189986792,1.035535245574843,-0.28797241316197125,0.06857156932438001,0.0883815692456904,0.015744902867551817,-1.5878935251444004,-1.8032401022626559,-1.2007706087347825,0.91923866806314,-0.023875096975069027,0.10158823585989751,0.3303829008221225,1.8234797424164972,0.6240328421020773,1.0396308643492234,0.06857156932438001,-0.9841889635715073,-1.7900334356484489,-1.24468134457187,-1.24468134457187,1.1247128153146682,1.581100582912262,-0.31712442190318774,0.022348236174655475,1.0835416001863103,0.05536490271017299,-0.19678793310054188,-0.7529408075525704,-1.24468134457187,-0.38502596269660305,1.7720537824475748,0.6702561752518017,0.12800156908831145,1.0916726432055999,-0.5734680174290818,-0.21728953469618362,-1.6843801027347927,2.018472853242753,1.1048793098198069,0.12800156908831145,-0.8329656948382639,0.12335473681415232,0.042158236095965994,-1.2345721628707518,0.05614979031062444,0.13460490239541506,1.6821078007012769,-1.7768267690342416,0.5478903273299238,-0.667882362160676,1.1803408947473082,0.1147949024741045,0.7541553353855527,0.04753539926228792,-0.9571563811855276,0.10819156916700097,-1.7438101024987243,-0.05028843020348309,0.10158823585989751,-1.7240001025774137,-0.00406509705375858,0.08177823593858702,-1.1421254965713028,0.6042228421807667,-1.6711734361205859,0.5646028423381458,-0.08330509673900062,0.91923866806314,0.1147949024741045,-0.7509731291204249,0.05614979031062444,0.5478903273299238,-0.45539184872574706,0.05614979031062444,-0.03708176358927599,-1.7364218815911694,-1.0780363363588623,-0.9723830034452061,0.05536490271017299,-0.9195563369883782,1.0396308643492234,0.6065354394934039,0.06196823601727653,-1.0384163365162413,0.8201886684565874,0.05614979031062444,-1.1883488297210272,-1.6645701028134825,0.5478903273299238,0.20669810240286488,0.34280467983587803,-1.2007706087347825,-1.2807954960204764,0.1412082357025186,0.6234893757313885,-0.46695744439820874,-0.6923280169569448,-0.5622055236734693,1.2404659264556823,0.048761569403069506,-1.150673002737001,0.12139823578120805,0.6240328421020773,-1.7240001025774137,0.05614979031062444,1.2965616894721341,-1.0892988301144746,0.028951569481759063,0.2468738967905242,0.184324680465394,0.8512611621335106,0.5918010631670111,1.3130790872602698,1.7232670272816901,0.05614979031062444,1.0454493100558755,-0.011211896731550848,-0.9813841203255841,-1.8692734353336906,0.5478903273299238,0.10104476948920882,0.028951569481759063,0.10764810279631236,-0.06349509681769003,0.05614979031062444,0.002538236253344861,0.05614979031062444,-0.11632176327451813,0.5478903273299238,0.2749380633457142,0.05614979031062444,0.002538236253344861,-0.9215005098469727,-0.48811587359409897,-1.6843801027347927,0.44007614502672177,0.5646028423381458,0.5976195088736632,0.10819156916700097,-1.0166621637363362,1.6292811342444489,0.05614979031062444,-0.07670176343189714,-1.9551167683260366,1.936593648754474,-0.7509731291204249,-0.9603390523592537,1.1830323767636715,0.05536490271017299,0.8796186682205193,0.5918010631670111,0.1147949024741045,0.1645146805440835,0.7681093111575282,0.1147949024741045,1.0396308643492234,-0.15716793325792078,0.05614979031062444,-0.5944407328786466,0.09498490255279403,0.1412082357025186,-1.1860362324083897,-1.24468134457187,-1.7834301023413452,-1.315680370278374,1.927970359801899,-1.071433003051759,0.05614979031062444,0.06857156932438001,0.08177823593858702,0.553708773036576,0.05614979031062444,0.18028476917445066,-0.37655442166711917,0.09498490255279403,0.16249472489861197,-1.6539268582154358,0.5478903273299238,-1.2411754961778552,0.042158236095965994,-1.4081270365778231,0.10819156916700097,1.0396308643492234,0.018558644017713614,1.0396308643492234,0.4777704400048855,-1.8692734353336906,0.3303829008221225,-0.00406509705375858,0.9371044951258563,-0.8667296705315504,1.0396308643492234,1.8102730758022898,-0.06735704149139782,-1.737206769191621,-0.8997463370670677,0.2853946357174181,-0.7537256951530218,0.05614979031062444,0.3137644699787764,-0.7621632703592714,-0.3132230308621308,-0.32642969747633804,0.5778095089523528,1.7166636939745867,-0.1691484297313462,-1.1289188299570956,1.0396308643492234,0.7211386688500351,0.8862220015276229,2.0845061863137877,0.07517490263148349,0.5478903273299238,1.0916726432055999,-1.6843801027347927,-0.15594176311713911,0.046991932891599045,1.0396308643492234,-0.9465131365874813,-1.2411754961778552,0.5478903273299238,-0.010668430360862033,0.06857156932438001,0.05614979031062444,-1.7364218815911694,0.7805686686139666,0.12800156908831145,-0.745154683413773,1.0396308643492234,0.042158236095965994,-0.15594176311713911,-0.9292665586823309,0.18028476917445066,-1.24468134457187,0.14781156900962208,0.12800156908831145,-1.7636201024200349,-1.096445629792267,-0.21728953469618362,0.042158236095965994,-1.0186063365949307,0.1466611816557171,-0.1031150966603111,1.3831523316222483,1.0396308643492234,-0.8078431371383074,-0.0568917635105865,1.855409476210637,0.10819156916700097,0.05614979031062444,0.022348236174655475,-0.14396126664371398,-0.0568917635105865,-0.5590975785106973,0.5447928424168352,0.7013286689287245,-1.7364218815911694,-0.07009843012479361,1.0396308643492234,1.8329602714862896,-0.8620705100830411,0.05614979031062444,0.05614979031062444,-0.03708176358927599,1.0058293102132543,0.5513961757239388,0.05536490271017299,0.07517490263148349,0.13461723056976468,-1.529006991751158,-0.5113230300752362,0.05614979031062444,-0.709030071715483,0.5478903273299238,0.022348236174655475,-0.8620705100830411,0.7145353355429317,-1.1751421631068202,-0.620310599736372,0.08177823593858702,1.5943072495264692,0.7311626642905161,1.7904630758809799,0.1147949024741045,0.1147949024741045,0.07004805859916285,0.3688154404376777,-1.4583902810184908,0.08177823593858702,0.5478903273299238,0.10912459207109511,-0.08330509673900062,1.3547190427483624,0.05614979031062444,-0.4631555240669169,-1.7240001025774137,0.042158236095965994,0.7343453354642422,-0.674462189894229,0.5918010631670111,0.12139823578120805,-0.38502596269660305,-0.41693219091719225,0.05614979031062444,0.2749380633457142,1.6750237384864939,0.12800156908831145,1.2510856654801779,0.05614979031062444,-1.6909834360418967,0.05614979031062444,-1.1223154966499922,0.1147949024741045,-1.24468134457187,-1.1662262324870791,0.7805686686139666,0.05614979031062444,-0.5730891327253558,0.10158823585989751,1.758922898620245,0.6088820026292754,0.9728126436777366,0.10764810279631236,0.015744902867551817,0.6570495086375946,0.7277420021571386,0.0883815692456904,0.05614979031062444,-0.03047843028217253,-0.9265374982232846,-1.117656336201483,0.913492574873254,-0.20876842957396727,0.048761569403069506,0.05614979031062444,0.13460490239541506,0.09168323589924231,-1.6579667695063787,-0.3878038700988642,1.8639569823763356,-1.24468134457187,1.2780424650792808,0.12139823578120805,1.5962644677089317,0.5428486695582404,1.907378902550248,1.2963994812993593,0.12800156908831145,0.13460490239541506,-0.7734257641148836,0.913492574873254,-0.04638775631194397,0.05614979031062444,1.0718626432842893,-0.14273509650293215,-0.08990843004610408,-0.03708176358927599,-1.24468134457187,1.873199520486476,0.0858181472295302,0.13539868790010495,0.18688810248155435,-0.13883442261139312,0.58012210626499,0.6174295087949738,-0.00406509705375858,-1.8362567687981732,0.1406647693318298,-1.6843801027347927,1.725214630410396,-0.4398725847989027,0.3303829008221225,0.746389286550195,0.06196823601727653,-0.08990843004610408,0.2376948132929107,-0.5323192510983517,-1.5528569029634116,0.5478903273299238,0.035554902788862516,-1.0430754969647502,0.6768595085589052,0.028951569481759063,-0.07670176343189714,0.7753660417947691,0.12139823578120805,-0.9016905099256622,-1.24468134457187,0.6240328421020773,-1.1685388297997166,-1.4015237032707197,1.1643093095837382,0.05614979031062444,0.10158823585989751,0.10158823585989751,0.06526990267082822,-0.8706180162487395,1.3349090428270518,0.05614979031062444,0.05614979031062444,0.27553627871982295,0.8256292862354369,0.6202327896954519,0.6306361754091808,0.048761569403069506,0.8058950691010031,0.8333953350707944,-1.737206769191621,0.8830393303538966,0.540502106422369,-0.8799363371457571,0.9140360412439428,0.035554902788862516,0.10158823585989751,-1.0205505094535254,0.9346244346686915,0.06857156932438001,0.13460490239541506,0.028951569481759063,-1.427937036499134,0.05614979031062444,-0.017271763667965526,1.1048793098198069,-0.6122307771544857,0.14781156900962208,-1.120839007375209,1.0396308643492234,-1.248767898825873,1.0835416001863103,0.042158236095965994,0.09498490255279403,-0.06349509681769003,-1.7509569021765168,1.0396308643492234,-0.9102380160913605,0.13460490239541506,0.6575835715345231,-1.5721234365140333,0.5478903273299238,-0.9583190967137819,-0.6414690289322622,-0.7866324307290911,0.2813547244264749,0.891666049576583,0.0883815692456904,0.0883815692456904,-1.6579667695063787,1.8277600181612796,1.082377827882133,1.2622723764489134,0.5478903273299238,0.14781156900962208,0.1486218301082907,1.0396308643492234,0.0883815692456904,-0.00406509705375858,-1.643283613617389,-1.7438101024987243,1.0388459767487717,-1.0516230031304483,0.028951569481759063,-1.0582263364375515,1.3454242274248958,1.7698238488292801,0.07517490263148349,0.048761569403069506,0.37986125766233864,-1.6579667695063787,-0.00406509705375858,-1.056825629949646,0.08177823593858702,-0.00406509705375858,0.022348236174655475,-0.29341303094082033,0.052063236056621214,0.3852295229244222,-1.6909834360418967,1.717826409502841,-0.03047843028217253,1.3228128145277733,-0.8678166032729279,0.07517490263148349,0.002538236253344861,-1.017205630107025,1.3756394809846013,0.5478903273299238,0.05614979031062444,1.915926408715946,0.5478903273299238,-1.6194337024051355,-0.11902442269008245,0.9335679013395546,1.0396308643492234,0.10158823585989751,0.13460490239541506,0.036967937451117885,0.1147949024741045,0.05614979031062444,0.042158236095965994,1.3138639748607215,0.12139823578120805,0.14781156900962208,-0.7537256951530218,1.0091309768668062,0.1412082357025186,-0.023875096975069027,1.9411935020100846,1.0058293102132543,0.6042228421807667,0.05694357581531446,1.5123653075751804,-0.2351817628023813,0.07052807035732424,-0.8897223416265865,-1.294002162634683,-1.1223154966499922,-1.150673002737001,0.08123476956789823,0.12141056395555763,1.0396308643492234,0.6683120023932071,0.6504461753304914,-1.6366802803102856,0.1486218301082907,0.09498490255279403,-1.8164467688768626,-0.19826442237532474,0.43268792411916684,0.05614979031062444,0.9126353347560369,0.08177823593858702,-0.9444931809420093,0.3646346354026602,-0.0568917635105865,-0.20486775568242813,-0.6546756955464693,0.12139823578120805,0.12800156908831145,0.05614979031062444,-0.1155279777698282,-1.1685388297997166,0.03555490278886247,-1.6843801027347927,0.06857156932437997,0.0883815692456904,-0.16951498626072273,0.07517490263148344,-1.335490370199685,-0.900905622325211,1.3394924204886838,0.5338987731152653],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC4<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC4\",\"marker\":{\"color\":\"#ab63fa\"},\"name\":\"PC4\",\"notched\":true,\"offsetgroup\":\"PC4\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.6438428420233844,0.003332021758036449,-1.7107934359632113,-0.9603390523592518,0.022348236174656512,0.5478903273299239,0.06142476964658775,1.2257069877798157,-1.031813003209138,-0.11242108938297925,-0.8250897150434575,-1.647866991279021,0.12139823578120805,1.2812486418265576,-1.6315534362779651,-1.9022901018692084,1.8673800180039009,0.05614979031062444,-1.2081588296423376,-0.7529408075525704,0.022348236174655475,0.24833805789095753,-1.1464162325657687,0.4524979240404773,-0.6064846839645993,-0.5047196967681322,1.0396308643492234,1.53761592527534,-1.24468134457187,0.05614979031062444,0.9728126436777366,0.11179019791761412,-1.24468134457187,-0.18235509634555314,1.5877039162193658,0.5117761758813176,1.0396308643492234,0.1147949024741045,-0.9723830034452061,-0.11242108938297925,-1.2675888294062694,-1.1817454964139236,1.0396308643492234,0.2600805634047313,-1.172829565794183,0.05614979031062444,1.0835416001863103,-1.24468134457187,1.725214630410396,-1.1223154966499922,1.342622814449084,0.1147949024741045,-0.1241512667224032,-1.1949521630281306,1.672460316470334,0.3303829008221225,-1.677776769427689,1.048750976709427,-0.7366071772480747,1.616074467630242,1.0916726432055999,-1.460953703034651,0.7661992864715053,1.3624328143703943,1.0396308643492234,1.725214630410396,-1.6209101916799182,0.12800156908831145,-0.3660496973189591,0.7673620019997597,0.042158236095965994,-0.20951387080706937,0.1147949024741045,1.600910582833573,0.042158236095965994,0.19807481345028966,0.05614979031062444,0.05614979031062444,0.9335679013395546,-1.737206769191621,0.10819156916700097,0.06196823601727653,-1.24468134457187,0.06857156932438001,-1.6513634361992753,-0.9215005098469727,1.1332603214803663,0.05614979031062444,-0.2813690798548678,0.09498490255279403,0.06196823601727653,0.12139823578120805,0.6499027089598025,0.9172944952045458,-0.13613176319582865,0.05614979031062444,1.1520356658736255,1.8401070711640817,-1.2279688295636482,0.5646028423381458,-1.7240001025774137,0.05614979031062444,0.8698326637396898,0.035554902788862516,0.6947253356216212,0.06857156932438001,-1.677776769427689,0.05614979031062444,0.002538236253344861,-0.709030071715483,0.21734134700091154,-0.11572275603653072,0.10819156916700097,-1.1355221632641992,-0.667882362160676,0.1147949024741045,0.27967044079178044,0.5976195088736632,1.9431969820615773,-0.2669996977124064,0.8003786685352773,0.05614979031062444,1.5579889163374,-1.5891752361524807,0.6519226646052741,1.6933572491330213,0.5478903273299238,0.09498490255279403,0.0423362027132014,-0.043685096896379595,1.0190359768274613,0.12139823578120805,-1.3138121625559935,-1.1949521630281306,0.0883815692456904,1.0850693098984965,-0.7595998483431113,0.8190259529283332,0.14781156900962208,1.4075457092051906,-0.06735704149139782,-1.6843801027347927,-1.1619354964926132,0.6197421061076108,0.13460490239541506,0.8135853351494841,0.07517490263148349,-0.6130880172717028,0.8077202464797719,-0.023875096975069027,-0.08330509673900062,-0.874495719366908,-0.11302009662096638,0.6716136690467587,0.05614979031062444,1.4358272501559852,-1.1530195658728724,0.05536490271017299,0.05614979031062444,1.9411935020100846,0.4985695092671107,-1.8032401022626559,0.08177823593858702,0.1412082357025186,1.3822428142917047,0.8796186682205193,-1.0362307424278836,-0.7008755231226432,0.05614979031062444,0.06857156932438001,0.17974130280376213,1.8541733513896939,-0.8601263372244466,0.1147949024741045,1.2510856654801779,0.8201886684565874,1.0415985427813692,-0.6115592507835937,0.05536490271017299,0.015744902867551817,0.1486218301082907,1.0396308643492234,1.4793486410396626,1.1920710720867322,-0.8799363371457571,0.44007614502672177,-0.709030071715483,-0.043685096896379595,1.1666558727196101,0.015744902867551817,-1.7504134358058283,0.12800156908831145,-1.1289188299570956,1.0289319122677394,-0.5170926288386731,-0.6095392951381222,0.5478903273299238,0.5117761758813176,-1.24468134457187,-1.6975867693489999,0.06857156932438001,1.9411935020100846,0.028951569481759063,0.9364943104886674,0.13460490239541506,-0.9618155416340365,0.5778095089523528,1.0652593099771859,-1.1530195658728724,1.356738998393834,0.09498490255279403,-1.7702234357271385,0.10819156916700097,0.05536490271017299,1.0835416001863103,-0.005291267194540012,-1.7173967692703105,0.5117761758813176,-0.5475458733580305,0.05536490271017299,0.14781156900962208,0.07517490263148349,-0.08330509673900062,0.05614979031062444,0.8124226196212297,0.10819156916700097,0.12800156908831145,0.11809656912765623,0.13460490239541506,-0.7509731291204249,-0.9603390523592537,0.06196823601727653,-0.13613176319582865,-0.2868096976337169,0.09498490255279403,-1.7364218815911694,0.4985695092671107,-0.9063496703741711,0.12800156908831145,0.035554902788862516,-0.21728953469618362,-0.709030071715483,0.06196823601727653,0.10819156916700097,1.0388459767487717,1.414475650002694,-1.7041901026561033,-1.0120030032878273,0.9141118240308197,0.4325361761960757,0.05614979031062444,-0.9901730477210452,0.11829134739435893,0.5910161755665597,-1.1242596695085867,-0.06153859578474574,-0.7529408075525704,-1.4081270365778231,-0.7867423616885394,-1.3336221624773041,0.5478903273299238,1.5189686408822838,0.7602152023219675,0.3184113022529357,-1.24468134457187,0.015744902867551817,1.2831928146851523,0.6240328421020773,-1.112215718422634,-1.4959903252156403,0.05614979031062444,0.0883815692456904,-1.2741921627133728,1.802507026966932,-1.24468134457187,-1.2000790070604512,-1.8362567687981732,0.05614979031062444,1.8343633514683835,-1.0846396696659657,0.31598877398084974,0.06857156932438001,0.14781156900962208,0.12800156908831145,0.44007614502672177,1.0190359768274613,0.05536490271017299,0.10819156916700097,-0.023875096975069027,-1.1926395657154931,-1.7107934359632069,0.183641976695301,1.2186124653153496,-1.6975867693489999,0.09498490255279403,1.0396308643492234,1.0817676432449448,-0.4425640668152662,0.3303829008221225,-0.021061355824907504,-1.24468134457187,1.2334740933910966,0.12800156908831145,-1.080141478264971,0.05614979031062444,1.3571392050581994,-0.7529408075525704,0.14200202120720826,1.5744972496051586,-0.589185828846123,-0.4398725847989027,0.6400427896167624,-1.025209669902034,0.06857156932438001,0.6551053357789999,-1.7107934359632069,-1.1619354964926132,-0.1031150966603111,-0.7839932259260535,0.03036460414401458,0.10819156916700097,0.07517490263148349,-1.2454662321723216,-0.9987963366736201,1.9411935020100846,-0.5191125844841447,-0.1493384298100356,-1.5574402806250434,-1.0582263364375515,0.20345197661661144,-0.5590975785106973,0.22724634696156673,0.8124226196212297,0.8333953350707944,-1.2007706087347825,0.05614979031062444,0.8718526193851612,-0.6618224952242615,-0.043685096896379595,-0.0985317189986792,1.035535245574843,-0.28797241316197125,0.06857156932438001,0.0883815692456904,0.015744902867551817,-1.5878935251444004,-1.8032401022626559,-1.2007706087347825,0.91923866806314,-0.023875096975069027,0.10158823585989751,0.3303829008221225,1.8234797424164972,0.6240328421020773,1.0396308643492234,0.06857156932438001,-0.9841889635715073,-1.7900334356484489,-1.24468134457187,-1.24468134457187,1.1247128153146682,1.581100582912262,-0.31712442190318774,0.022348236174655475,1.0835416001863103,0.05536490271017299,-0.19678793310054188,-0.7529408075525704,-1.24468134457187,-0.38502596269660305,1.7720537824475748,0.6702561752518017,0.12800156908831145,1.0916726432055999,-0.5734680174290818,-0.21728953469618362,-1.6843801027347927,2.018472853242753,1.1048793098198069,0.12800156908831145,-0.8329656948382639,0.12335473681415232,0.042158236095965994,-1.2345721628707518,0.05614979031062444,0.13460490239541506,1.6821078007012769,-1.7768267690342416,0.5478903273299238,-0.667882362160676,1.1803408947473082,0.1147949024741045,0.7541553353855527,0.04753539926228792,-0.9571563811855276,0.10819156916700097,-1.7438101024987243,-0.05028843020348309,0.10158823585989751,-1.7240001025774137,-0.00406509705375858,0.08177823593858702,-1.1421254965713028,0.6042228421807667,-1.6711734361205859,0.5646028423381458,-0.08330509673900062,0.91923866806314,0.1147949024741045,-0.7509731291204249,0.05614979031062444,0.5478903273299238,-0.45539184872574706,0.05614979031062444,-0.03708176358927599,-1.7364218815911694,-1.0780363363588623,-0.9723830034452061,0.05536490271017299,-0.9195563369883782,1.0396308643492234,0.6065354394934039,0.06196823601727653,-1.0384163365162413,0.8201886684565874,0.05614979031062444,-1.1883488297210272,-1.6645701028134825,0.5478903273299238,0.20669810240286488,0.34280467983587803,-1.2007706087347825,-1.2807954960204764,0.1412082357025186,0.6234893757313885,-0.46695744439820874,-0.6923280169569448,-0.5622055236734693,1.2404659264556823,0.048761569403069506,-1.150673002737001,0.12139823578120805,0.6240328421020773,-1.7240001025774137,0.05614979031062444,1.2965616894721341,-1.0892988301144746,0.028951569481759063,0.2468738967905242,0.184324680465394,0.8512611621335106,0.5918010631670111,1.3130790872602698,1.7232670272816901,0.05614979031062444,1.0454493100558755,-0.011211896731550848,-0.9813841203255841,-1.8692734353336906,0.5478903273299238,0.10104476948920882,0.028951569481759063,0.10764810279631236,-0.06349509681769003,0.05614979031062444,0.002538236253344861,0.05614979031062444,-0.11632176327451813,0.5478903273299238,0.2749380633457142,0.05614979031062444,0.002538236253344861,-0.9215005098469727,-0.48811587359409897,-1.6843801027347927,0.44007614502672177,0.5646028423381458,0.5976195088736632,0.10819156916700097,-1.0166621637363362,1.6292811342444489,0.05614979031062444,-0.07670176343189714,-1.9551167683260366,1.936593648754474,-0.7509731291204249,-0.9603390523592537,1.1830323767636715,0.05536490271017299,0.8796186682205193,0.5918010631670111,0.1147949024741045,0.1645146805440835,0.7681093111575282,0.1147949024741045,1.0396308643492234,-0.15716793325792078,0.05614979031062444,-0.5944407328786466,0.09498490255279403,0.1412082357025186,-1.1860362324083897,-1.24468134457187,-1.7834301023413452,-1.315680370278374,1.927970359801899,-1.071433003051759,0.05614979031062444,0.06857156932438001,0.08177823593858702,0.553708773036576,0.05614979031062444,0.18028476917445066,-0.37655442166711917,0.09498490255279403,0.16249472489861197,-1.6539268582154358,0.5478903273299238,-1.2411754961778552,0.042158236095965994,-1.4081270365778231,0.10819156916700097,1.0396308643492234,0.018558644017713614,1.0396308643492234,0.4777704400048855,-1.8692734353336906,0.3303829008221225,-0.00406509705375858,0.9371044951258563,-0.8667296705315504,1.0396308643492234,1.8102730758022898,-0.06735704149139782,-1.737206769191621,-0.8997463370670677,0.2853946357174181,-0.7537256951530218,0.05614979031062444,0.3137644699787764,-0.7621632703592714,-0.3132230308621308,-0.32642969747633804,0.5778095089523528,1.7166636939745867,-0.1691484297313462,-1.1289188299570956,1.0396308643492234,0.7211386688500351,0.8862220015276229,2.0845061863137877,0.07517490263148349,0.5478903273299238,1.0916726432055999,-1.6843801027347927,-0.15594176311713911,0.046991932891599045,1.0396308643492234,-0.9465131365874813,-1.2411754961778552,0.5478903273299238,-0.010668430360862033,0.06857156932438001,0.05614979031062444,-1.7364218815911694,0.7805686686139666,0.12800156908831145,-0.745154683413773,1.0396308643492234,0.042158236095965994,-0.15594176311713911,-0.9292665586823309,0.18028476917445066,-1.24468134457187,0.14781156900962208,0.12800156908831145,-1.7636201024200349,-1.096445629792267,-0.21728953469618362,0.042158236095965994,-1.0186063365949307,0.1466611816557171,-0.1031150966603111,1.3831523316222483,1.0396308643492234,-0.8078431371383074,-0.0568917635105865,1.855409476210637,0.10819156916700097,0.05614979031062444,0.022348236174655475,-0.14396126664371398,-0.0568917635105865,-0.5590975785106973,0.5447928424168352,0.7013286689287245,-1.7364218815911694,-0.07009843012479361,1.0396308643492234,1.8329602714862896,-0.8620705100830411,0.05614979031062444,0.05614979031062444,-0.03708176358927599,1.0058293102132543,0.5513961757239388,0.05536490271017299,0.07517490263148349,0.13461723056976468,-1.529006991751158,-0.5113230300752362,0.05614979031062444,-0.709030071715483,0.5478903273299238,0.022348236174655475,-0.8620705100830411,0.7145353355429317,-1.1751421631068202,-0.620310599736372,0.08177823593858702,1.5943072495264692,0.7311626642905161,1.7904630758809799,0.1147949024741045,0.1147949024741045,0.07004805859916285,0.3688154404376777,-1.4583902810184908,0.08177823593858702,0.5478903273299238,0.10912459207109511,-0.08330509673900062,1.3547190427483624,0.05614979031062444,-0.4631555240669169,-1.7240001025774137,0.042158236095965994,0.7343453354642422,-0.674462189894229,0.5918010631670111,0.12139823578120805,-0.38502596269660305,-0.41693219091719225,0.05614979031062444,0.2749380633457142,1.6750237384864939,0.12800156908831145,1.2510856654801779,0.05614979031062444,-1.6909834360418967,0.05614979031062444,-1.1223154966499922,0.1147949024741045,-1.24468134457187,-1.1662262324870791,0.7805686686139666,0.05614979031062444,-0.5730891327253558,0.10158823585989751,1.758922898620245,0.6088820026292754,0.9728126436777366,0.10764810279631236,0.015744902867551817,0.6570495086375946,0.7277420021571386,0.0883815692456904,0.05614979031062444,-0.03047843028217253,-0.9265374982232846,-1.117656336201483,0.913492574873254,-0.20876842957396727,0.048761569403069506,0.05614979031062444,0.13460490239541506,0.09168323589924231,-1.6579667695063787,-0.3878038700988642,1.8639569823763356,-1.24468134457187,1.2780424650792808,0.12139823578120805,1.5962644677089317,0.5428486695582404,1.907378902550248,1.2963994812993593,0.12800156908831145,0.13460490239541506,-0.7734257641148836,0.913492574873254,-0.04638775631194397,0.05614979031062444,1.0718626432842893,-0.14273509650293215,-0.08990843004610408,-0.03708176358927599,-1.24468134457187,1.873199520486476,0.0858181472295302,0.13539868790010495,0.18688810248155435,-0.13883442261139312,0.58012210626499,0.6174295087949738,-0.00406509705375858,-1.8362567687981732,0.1406647693318298,-1.6843801027347927,1.725214630410396,-0.4398725847989027,0.3303829008221225,0.746389286550195,0.06196823601727653,-0.08990843004610408,0.2376948132929107,-0.5323192510983517,-1.5528569029634116,0.5478903273299238,0.035554902788862516,-1.0430754969647502,0.6768595085589052,0.028951569481759063,-0.07670176343189714,0.7753660417947691,0.12139823578120805,-0.9016905099256622,-1.24468134457187,0.6240328421020773,-1.1685388297997166,-1.4015237032707197,1.1643093095837382,0.05614979031062444,0.10158823585989751,0.10158823585989751,0.06526990267082822,-0.8706180162487395,1.3349090428270518,0.05614979031062444,0.05614979031062444,0.27553627871982295,0.8256292862354369,0.6202327896954519,0.6306361754091808,0.048761569403069506,0.8058950691010031,0.8333953350707944,-1.737206769191621,0.8830393303538966,0.540502106422369,-0.8799363371457571,0.9140360412439428,0.035554902788862516,0.10158823585989751,-1.0205505094535254,0.9346244346686915,0.06857156932438001,0.13460490239541506,0.028951569481759063,-1.427937036499134,0.05614979031062444,-0.017271763667965526,1.1048793098198069,-0.6122307771544857,0.14781156900962208,-1.120839007375209,1.0396308643492234,-1.248767898825873,1.0835416001863103,0.042158236095965994,0.09498490255279403,-0.06349509681769003,-1.7509569021765168,1.0396308643492234,-0.9102380160913605,0.13460490239541506,0.6575835715345231,-1.5721234365140333,0.5478903273299238,-0.9583190967137819,-0.6414690289322622,-0.7866324307290911,0.2813547244264749,0.891666049576583,0.0883815692456904,0.0883815692456904,-1.6579667695063787,1.8277600181612796,1.082377827882133,1.2622723764489134,0.5478903273299238,0.14781156900962208,0.1486218301082907,1.0396308643492234,0.0883815692456904,-0.00406509705375858,-1.643283613617389,-1.7438101024987243,1.0388459767487717,-1.0516230031304483,0.028951569481759063,-1.0582263364375515,1.3454242274248958,1.7698238488292801,0.07517490263148349,0.048761569403069506,0.37986125766233864,-1.6579667695063787,-0.00406509705375858,-1.056825629949646,0.08177823593858702,-0.00406509705375858,0.022348236174655475,-0.29341303094082033,0.052063236056621214,0.3852295229244222,-1.6909834360418967,1.717826409502841,-0.03047843028217253,1.3228128145277733,-0.8678166032729279,0.07517490263148349,0.002538236253344861,-1.017205630107025,1.3756394809846013,0.5478903273299238,0.05614979031062444,1.915926408715946,0.5478903273299238,-1.6194337024051355,-0.11902442269008245,0.9335679013395546,1.0396308643492234,0.10158823585989751,0.13460490239541506,0.036967937451117885,0.1147949024741045,0.05614979031062444,0.042158236095965994,1.3138639748607215,0.12139823578120805,0.14781156900962208,-0.7537256951530218,1.0091309768668062,0.1412082357025186,-0.023875096975069027,1.9411935020100846,1.0058293102132543,0.6042228421807667,0.05694357581531446,1.5123653075751804,-0.2351817628023813,0.07052807035732424,-0.8897223416265865,-1.294002162634683,-1.1223154966499922,-1.150673002737001,0.08123476956789823,0.12141056395555763,1.0396308643492234,0.6683120023932071,0.6504461753304914,-1.6366802803102856,0.1486218301082907,0.09498490255279403,-1.8164467688768626,-0.19826442237532474,0.43268792411916684,0.05614979031062444,0.9126353347560369,0.08177823593858702,-0.9444931809420093,0.3646346354026602,-0.0568917635105865,-0.20486775568242813,-0.6546756955464693,0.12139823578120805,0.12800156908831145,0.05614979031062444,-0.1155279777698282,-1.1685388297997166,0.03555490278886247,-1.6843801027347927,0.06857156932437997,0.0883815692456904,-0.16951498626072273,0.07517490263148344,-1.335490370199685,-0.900905622325211,1.3394924204886838,0.5338987731152653],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC5<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC5\",\"marker\":{\"color\":\"#FFA15A\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC5\",\"offsetgroup\":\"PC5\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[0.08420908214213454,0.014288412238867586,0.13774138955614146,0.9373123787055897,-0.16425719080725296,-0.3023994269378847,-0.11695794215627245,0.7446091527311998,-0.4033453039809695,-0.4391047242822147,1.04552428086114,0.20028820736127764,0.5685796567851344,-1.2741988887972107,0.7240108676300501,-1.279076515789146,0.2508089455234868,0.08582887153623564,-0.4931965546053475,-0.8283312536040456,-0.16425719080725432,1.1853442731673598,0.28692677931643684,2.454038267805656,0.3137708855022045,-1.363046627149758,-0.6906277254120057,1.4344209093951346,-0.44010295512992503,0.08582887153623564,-1.1849927369529583,0.7361282626346125,-0.44010295512992503,-1.6787866758315244,-0.9853822538430711,-0.8929067146477259,-0.6906277254120057,0.5197238669456421,0.03635680457446358,-0.4391047242822147,-0.9328986631607807,-0.2977733952473771,-0.6906277254120057,-0.11283485351498164,0.09150361995846665,0.08582887153623564,-0.6890584219019087,-0.44010295512992503,-1.1828586291096217,0.14192871330805606,0.3947582948001444,0.5197238669456421,-0.8483116945293342,-0.3954849749263623,-0.841927966701615,1.7117609642051372,0.38202033875360203,-0.6231511537987935,0.5659101637542747,-0.011808682025010857,-0.30558851984209173,1.5025904226849094,0.5864580085026975,0.5413256643186221,-0.6906277254120057,-1.1828586291096217,0.641546857105222,0.6174354466246272,-0.33707504052041387,-0.21678598594943704,-0.01768982128877647,-0.393791159414514,0.5197238669456421,-0.8876706741640858,-0.01768982128877647,0.9746735446552321,0.08582887153623564,0.08582887153623564,1.012914244310591,-0.0576817698018313,0.47086807710614936,0.12887754822970127,-0.44010295512992503,0.17773333806919378,0.5774434981115723,-0.8020519517515178,0.06062809497830368,0.08582887153623564,1.1012942218451243,0.3731564974271642,0.12887754822970127,0.5685796567851344,-0.11277061840435547,-0.32235789468302967,-1.3367961469550766,0.08582887153623564,-0.42321729224076626,0.5596423694895131,-0.6397639241238254,-0.5020603959317853,0.040029809877154,0.08582887153623564,1.4338105461167394,-0.06654561112826916,-0.7541996741838557,0.17773333806919378,0.38202033875360203,0.08582887153623564,-0.31082456032573197,-0.8267619500939486,0.875405423787736,-0.4635326192019611,0.47086807710614936,0.04421713362907076,-0.19901309883666912,0.5197238669456421,-2.2868660285833617,-0.2577814467343224,1.161159416717581,0.395761807071975,0.027492963248025755,0.08582887153623564,-1.2052333081207875,0.7957380112007781,-0.17843051858651574,-0.20368961641118968,-0.30239942693788496,0.3731564974271642,-0.6701893202341013,-0.6528150892021803,-0.8430022080765102,0.5685796567851344,-1.274889192037229,-0.3954849749263623,0.3243007075876716,-0.35444430968158436,1.2882466888700923,0.9773043272186382,0.7640028161431047,1.547818411681605,-1.3205621573016617,0.33316454891410935,-0.15120602572889938,0.22920714815050666,0.6662912364641197,0.125204542927011,0.2265891279086864,0.264915095662712,-0.07939894219654875,-0.5062477196837023,-0.9459498282391355,1.572437646618987,-1.1658008825168522,-0.9251949386220795,0.08582887153623564,-2.1090654201514005,0.23807098947694427,0.08002175839020867,0.08582887153623564,-1.2509773020301207,-0.9906182943267109,-0.5462396681967571,0.275444917748179,0.7151470263036123,0.6878930338370999,0.6137624413219369,0.5370256039815129,-1.5994652472926139,0.08582887153623564,0.17773333806919378,0.5166107845686204,0.15309736584450145,0.8669052318458373,0.5197238669456421,0.3096195553516222,0.17406033276650357,-0.6175458496285657,-0.18532207087102281,0.08002175839020867,-0.2131129806467468,-1.3886808302221607,-0.6906277254120057,0.19147480638756703,1.5494096883718453,0.7203378623273596,2.3621338012726985,-0.8267619500939486,-0.6528150892021803,-1.288995342176454,-0.2131129806467468,-0.15539334948081635,0.6174354466246272,0.09307292346856355,1.5572700174264527,0.43299908669971326,-0.25098197105318326,-0.30239942693788496,-0.8929067146477259,-0.44010295512992503,0.2354529692351244,0.17773333806919378,-1.2509773020301207,-0.11540140096776164,-1.4536995810701676,0.6662912364641197,1.2488077692737176,-0.4043488162528002,-0.5010116792000622,0.23807098947694427,1.0913121927835039,0.3731564974271642,-0.3019607189992943,0.47086807710614936,0.08002175839020867,-0.6890584219019087,0.031092522581532393,0.08888559971664647,-0.8929067146477259,0.3688957277060633,0.08002175839020867,0.7640028161431047,0.2265891279086864,-0.9459498282391355,0.08582887153623564,0.9284485373791453,0.47086807710614936,0.6174354466246272,0.5441517618653883,0.6662912364641197,-0.7552493778206055,0.9373123787055834,0.12887754822970127,-1.3367961469550766,0.24919443755349716,0.3731564974271642,-0.051874656655804284,-0.9906182943267109,0.5249147029693895,0.6174354466246272,-0.06654561112826916,-1.2149902485680695,-0.8267619500939486,0.12887754822970127,0.47086807710614936,-0.6964348385580325,0.14151359113447715,0.18659717939563175,-0.2567779344624918,0.5465459999512655,-1.479176192721637,0.08582887153623564,-0.1758704651261745,0.14256857619534735,-0.306637236573815,-1.0873263617338658,-1.277513480608196,-0.8283312536040456,1.8934367414008506,-1.0784173159475354,-1.4214565615557067,-0.30239942693788496,0.4846095454245221,-0.5114772661749034,1.5425823711979647,-0.44010295512992503,-0.2131129806467468,-0.044943813755288775,-0.06235828737635203,-0.18637078760274617,1.3239713736696068,0.08582887153623564,0.3243007075876716,-0.9817544530002733,0.20084773027039707,-0.44010295512992503,-0.7558361553339891,-0.7905186173942201,0.08582887153623564,0.006529996326023879,-0.7941916226969103,-2.0181591844661524,0.17773333806919378,0.7640028161431047,0.6174354466246272,2.3621338012726985,-0.8430022080765102,0.08002175839020867,0.47086807710614936,-0.5062477196837023,-0.05506374956001126,0.13774138955613913,1.2677348377230044,0.3111760965401331,0.2354529692351244,0.3731564974271642,-0.6906277254120057,-0.37887220460133086,2.3384096259416536,1.7117609642051372,-0.24679464730126616,-0.44010295512992503,-0.7946303306355011,0.6174354466246272,0.535456300471416,0.08582887153623564,2.5288774071603455,-0.8283312536040456,1.0402599988682086,-1.0830938335220561,0.1414208888512683,1.0849284649557842,0.999874901361719,-0.35448951414147706,0.17773333806919378,-1.0473344132208111,0.13774138955613913,-0.15120602572889938,-1.0925171977576134,1.0271636293299613,-0.8393679132412737,0.47086807710614936,0.2265891279086864,-0.4459100682759518,-0.15906635478350672,-1.2509773020301207,0.4986589868818731,-1.4345077266340618,0.9499291652963342,-0.5987684633389401,1.4143022072414815,-0.932333858827541,0.9486891085469749,0.9284485373791453,0.27177191244548876,-0.438533651619828,0.08582887153623564,1.368150645934579,-0.3959927993831502,-0.6528150892021803,-0.9780015077359606,1.6061258072659452,1.052438432005632,0.17773333806919378,0.3243007075876716,-0.2131129806467468,0.8858258063026848,-0.5462396681967571,-0.438533651619828,0.9068971803588921,-0.5062477196837023,0.42201228726665674,1.7117609642051372,-0.45582889466326004,-0.06235828737635203,-0.6906277254120057,0.17773333806919378,0.9220648095514267,-0.4485280885177722,-0.44010295512992503,-0.44010295512992503,-1.2174827699031108,-1.0342380436825636,-1.9536342093064851,-0.16425719080725432,-0.6890584219019087,0.08002175839020867,-1.385725382763753,-0.8283312536040456,-0.44010295512992503,1.410114883489565,0.1367443712767476,0.279632241500096,0.6174354466246272,-0.30558851984209173,0.558049834699667,-1.2149902485680695,0.33316454891410935,0.5838337199317307,-0.20787694016310673,0.6174354466246272,-1.4204078448239836,0.0904486348975961,-0.01768982128877647,-0.6886197139633178,0.08582887153623564,0.6662912364641197,0.4767492163699148,-0.3508165088387867,-0.30239942693788496,-0.19901309883666912,1.1402027181247258,0.5197238669456421,-0.31449756562842235,0.4219388412974729,0.06840848407128836,0.47086807710614936,-0.1065375596413238,-0.7016708790416727,0.42201228726665674,0.040029809877154,-0.3596803501652246,0.275444917748179,-0.004638656210421594,-0.20892565689482978,0.4308761285930943,-0.5020603959317853,-0.9459498282391355,0.9068971803588921,0.5197238669456421,-0.7552493778206055,0.08582887153623564,-0.30239942693788496,0.6467956599104482,0.08582887153623564,-0.6039592993626873,-0.051874656655804284,-0.7453358328574178,0.03635680457446358,0.08002175839020867,0.42720312329040433,-0.6906277254120057,0.13149556847152138,0.12887754822970127,-0.4522010938204622,0.17406033276650357,0.08582887153623564,-0.3466291850868697,0.4797319184325872,-0.30239942693788496,0.9578694343125645,1.8036654307380953,-0.438533651619828,-1.0306102428397659,0.7151470263036123,-0.30819377776232587,2.077326566401523,-0.3213543824111992,-0.5734936606632693,-0.7640896333820316,0.03116596855071608,-1.2827495210918365,0.5685796567851344,-0.06235828737635203,0.040029809877154,0.08582887153623564,3.1343463202558612,0.3862076625055191,-0.11540140096776164,-0.2105464331939664,0.6311264745902732,-0.8109157930779554,-0.30083012342778803,0.929497254110869,-0.3854217478035137,0.08582887153623564,-0.6475790487185401,-0.6543716303906911,0.862212022515293,-1.034797566591683,-0.30239942693788496,0.1761767968806832,-0.11540140096776164,0.22503258672017568,-0.7993824587206577,0.08582887153623564,-0.31082456032573197,0.08582887153623564,-1.1902287774365985,-0.30239942693788496,-0.0029093263761232244,0.08582887153623564,-0.31082456032573197,-0.8020519517515178,0.8085978362614965,0.33316454891410935,2.3621338012726985,-0.5020603959317853,-0.2577814467343224,0.47086807710614936,0.9236213507399375,0.08590289765397452,0.08582887153623564,-0.897094038399643,-1.6699228345050865,1.1123036268780886,-0.7552493778206055,0.9373123787055834,-0.11327844286114334,0.08002175839020867,0.6137624413219369,-0.30083012342778803,0.5197238669456421,0.4845591050717954,-2.6995222219772286,0.5197238669456421,-0.6906277254120057,-1.092590643726797,0.08582887153623564,1.214726459633324,0.3731564974271642,0.7151470263036123,-0.006207959720518585,-0.44010295512992503,-0.39967229867827925,2.5774177991537464,1.1291077372207563,-0.6964800430179251,0.08582887153623564,0.17773333806919378,0.275444917748179,-0.25935075024441934,0.08582887153623564,0.762446274954594,-2.393336317861918,0.3731564974271642,0.550219005253956,0.39726790790775895,-0.30239942693788496,-0.7374755038028105,-0.01768982128877647,1.8934367414008506,0.47086807710614936,-0.6906277254120057,0.046340091735689655,-0.6906277254120057,-0.821192333398584,-1.034797566591683,1.7117609642051372,-0.3596803501652246,-0.17579052516455182,0.8180494420063451,-0.6906277254120057,-0.553540474342245,-1.3205621573016617,-0.0576817698018313,0.5737704928088818,1.2983034220005014,-0.8341383667500726,0.08582887153623564,1.0155955594709336,1.1080710986662792,0.05377127819552688,-0.04394030148345821,-0.4043488162528002,-0.4342775376430065,-1.5810750961525393,0.09307292346856355,-0.6906277254120057,-0.5587765148258853,0.6626182311614295,1.0723916183266569,0.2265891279086864,-0.30239942693788496,-0.30558851984209173,0.33316454891410935,-1.483363516473554,0.1761033509114991,-0.6906277254120057,-0.014055526453539838,-0.7374755038028105,-0.30239942693788496,-0.4085361400047172,0.17773333806919378,0.08582887153623564,-0.051874656655804284,-0.11907440627045197,0.6174354466246272,-0.7122007011271398,-0.6906277254120057,-0.01768982128877647,-1.483363516473554,-0.04766374713887538,0.762446274954594,-0.44010295512992503,0.7640028161431047,0.6174354466246272,-0.25310492915980165,0.0915163822800527,-1.2149902485680695,-0.01768982128877647,-0.3056337243019845,-0.1401392863342205,-1.0925171977576134,1.2867353521414742,-0.6906277254120057,1.0119160601758044,-0.7505266688811651,-0.703220926237745,0.47086807710614936,0.08582887153623564,-0.16425719080725432,-0.994879064047812,-0.7505266688811651,-0.932333858827541,-0.6486277654502631,-0.7053438843443631,-0.051874656655804284,-0.8482382485601503,-0.6906277254120057,0.2649510892640468,-0.3623498431960843,0.08582887153623564,0.08582887153623564,-0.6039592993626873,-0.9407137877554955,-0.5997719756107706,0.08002175839020867,0.2265891279086864,-1.0410948604653405,1.0796924244721442,-1.4119024169892502,0.08582887153623564,-0.8267619500939486,-0.30239942693788496,-0.16425719080725432,-0.3623498431960843,-0.6076323046653778,-0.24891760540788452,1.2651387906613276,0.275444917748179,-0.9365264640035782,0.40783895948739524,-0.700107843860723,0.5197238669456421,0.5197238669456421,-0.1337620524989406,-1.627312865750212,1.682766012888723,0.275444917748179,-0.30239942693788496,-0.08646280384795904,-0.9459498282391355,1.1569720929656642,0.08582887153623564,0.15934318692911945,0.040029809877154,-0.01768982128877647,-0.46106493514690006,-1.4040420879346436,-0.30083012342778803,0.5685796567851344,1.410114883489565,0.5013337158055675,0.08582887153623564,-0.0029093263761232244,-0.6617523764978014,0.6174354466246272,0.3096195553516222,0.08582887153623564,0.28430875907461683,0.08582887153623564,0.14192871330805606,0.5197238669456421,-0.44010295512992503,0.1403594097979592,-0.11907440627045197,0.08582887153623564,-1.035852551652553,0.42201228726665674,-1.2558821836263203,-1.3893249420972593,-1.1849927369529583,0.22503258672017568,-0.2131129806467468,0.1819206618211107,-0.5099207249863926,0.3243007075876716,0.08582887153623564,-0.555103509523195,1.1873984410490732,-1.0384705718943734,1.5956254847893736,-1.874209835189495,0.03116596855071608,0.08582887153623564,0.6662912364641197,0.34872860250741794,0.5285877082720798,-1.7128974850808139,0.57488993864367,-0.44010295512992503,0.7508782050955664,0.5685796567851344,-0.1583760515434887,-1.8778828404921855,-1.0499587017917782,0.052767765923696516,0.6174354466246272,0.6662912364641197,2.239614594029216,1.5956254847893736,0.04945317411271075,0.08582887153623564,-0.4521558893605697,-1.3856519367945692,-0.9948056180786281,-0.6039592993626873,-0.44010295512992503,-0.49099365653710625,0.14412511738385825,0.9914042090287161,0.8113020647940866,-0.6345278836401853,-0.06392759088644905,-0.11121407721584457,-0.3596803501652246,-0.7905186173942201,0.4693115359176385,0.33316454891410935,-1.1828586291096217,1.0849284649557842,1.7117609642051372,0.4398906389842199,0.12887754822970127,-0.9948056180786281,1.2678082836921878,0.40094740720288796,1.0644448553179875,-0.30239942693788496,-0.06654561112826916,0.728198191381967,0.3284880313395887,-0.11540140096776164,-0.897094038399643,0.8154893885460037,0.5685796567851344,-0.65548458223304,-0.44010295512992503,-0.06235828737635203,-0.20006181556839203,1.9422925312403427,0.23182516839232686,0.08582887153623564,0.42201228726665674,0.42201228726665674,0.15330544314944752,-1.640460708077499,1.0104047234471862,0.08582887153623564,0.08582887153623564,1.3865745456713572,1.026160117058131,0.8533075318432417,-0.0135024975368595,0.03116596855071608,-0.41532222768442895,0.27177191244548876,-0.0576817698018313,1.5315221257957248,-0.35706232992340453,0.7203378623273596,1.841460975175348,-0.06654561112826916,0.42201228726665674,-1.5348887993439062,1.0207311706849096,0.17773333806919378,0.6662912364641197,-0.11540140096776164,1.746869371882373,0.08582887153623564,-0.4573919298442098,-0.20787694016310673,1.0024991899326863,0.7640028161431047,-0.16956667726007815,-0.6906277254120057,-0.4703379631956982,-0.6890584219019087,-0.01768982128877647,0.3731564974271642,-0.7993824587206577,-0.4012288398667904,-0.6906277254120057,-1.9335954471144547,0.6662912364641197,0.3479734101296756,1.1637129761854834,-0.30239942693788496,0.8716524785234229,-0.003589939478698508,2.14190301435023,1.4296232223648222,-0.5119739408949731,0.3243007075876716,0.3243007075876716,0.5285877082720798,-0.04232579351346872,0.8990368513042848,0.4729910352127676,-0.30239942693788496,0.7640028161431047,-1.3886808302221607,-0.6906277254120057,0.3243007075876716,-0.3596803501652246,0.3148038973829309,-0.1065375596413238,-0.6964348385580325,-0.5499126734994475,-0.11540140096776164,-0.5987684633389401,2.3615974641120405,0.36206042993013454,0.2265891279086864,0.03116596855071608,1.916624579571237,0.5285877082720798,-0.3596803501652246,0.3846511213170081,0.275444917748179,-0.3596803501652246,-0.16425719080725432,0.20033864771400456,0.05559386347046243,2.036947382738918,0.28430875907461683,-1.2375215320951412,-0.555103509523195,0.24819092528166695,0.3263784612343974,0.2265891279086864,-0.31082456032573197,0.6777858603539637,0.6390372439976074,-0.30239942693788496,0.08582887153623564,0.22815216308963598,-0.30239942693788496,0.33005146653708717,-0.48796051412170743,1.012914244310591,-0.6906277254120057,0.42201228726665674,0.6662912364641197,-0.7905121234017811,0.5197238669456421,0.08582887153623564,-0.01768982128877647,0.9353043672568959,0.5685796567851344,0.7640028161431047,-0.8341383667500726,-0.916285892835749,0.7151470263036123,-0.5062477196837023,-1.2509773020301207,-0.9407137877554955,-0.20892565689482978,0.41094184410083207,0.43575375558502955,-2.0696329945474656,-0.30039768381834414,1.5403859671221625,-1.128321822518751,0.14192871330805606,-1.2827495210918365,0.029609427362205436,-1.1388064401443256,-0.6906277254120057,-0.949622833541826,0.13306487198161812,0.3636596872224232,-1.3886808302221607,0.3731564974271642,-0.6439512478757423,-1.0742299921956184,2.3074708982871783,0.08582887153623564,0.8580413905193995,0.275444917748179,-0.07971542663570026,1.8845729000744127,-0.7505266688811651,-1.123085782035111,-0.10130151915768382,0.5685796567851344,0.6174354466246272,0.08582887153623564,-0.8651158048720028,-0.200061815568392,-0.06654561112826914,0.33316454891410935,0.17773333806919386,0.3243007075876716,-1.6945588067297788,0.22658912790868646,2.4308504296352687,-0.649677469087013,1.1249204134688393,-0.4059181197628971],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC5<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC5\",\"marker\":{\"color\":\"#FFA15A\"},\"name\":\"PC5\",\"notched\":true,\"offsetgroup\":\"PC5\",\"showlegend\":false,\"type\":\"box\",\"x\":[0.08420908214213454,0.014288412238867586,0.13774138955614146,0.9373123787055897,-0.16425719080725296,-0.3023994269378847,-0.11695794215627245,0.7446091527311998,-0.4033453039809695,-0.4391047242822147,1.04552428086114,0.20028820736127764,0.5685796567851344,-1.2741988887972107,0.7240108676300501,-1.279076515789146,0.2508089455234868,0.08582887153623564,-0.4931965546053475,-0.8283312536040456,-0.16425719080725432,1.1853442731673598,0.28692677931643684,2.454038267805656,0.3137708855022045,-1.363046627149758,-0.6906277254120057,1.4344209093951346,-0.44010295512992503,0.08582887153623564,-1.1849927369529583,0.7361282626346125,-0.44010295512992503,-1.6787866758315244,-0.9853822538430711,-0.8929067146477259,-0.6906277254120057,0.5197238669456421,0.03635680457446358,-0.4391047242822147,-0.9328986631607807,-0.2977733952473771,-0.6906277254120057,-0.11283485351498164,0.09150361995846665,0.08582887153623564,-0.6890584219019087,-0.44010295512992503,-1.1828586291096217,0.14192871330805606,0.3947582948001444,0.5197238669456421,-0.8483116945293342,-0.3954849749263623,-0.841927966701615,1.7117609642051372,0.38202033875360203,-0.6231511537987935,0.5659101637542747,-0.011808682025010857,-0.30558851984209173,1.5025904226849094,0.5864580085026975,0.5413256643186221,-0.6906277254120057,-1.1828586291096217,0.641546857105222,0.6174354466246272,-0.33707504052041387,-0.21678598594943704,-0.01768982128877647,-0.393791159414514,0.5197238669456421,-0.8876706741640858,-0.01768982128877647,0.9746735446552321,0.08582887153623564,0.08582887153623564,1.012914244310591,-0.0576817698018313,0.47086807710614936,0.12887754822970127,-0.44010295512992503,0.17773333806919378,0.5774434981115723,-0.8020519517515178,0.06062809497830368,0.08582887153623564,1.1012942218451243,0.3731564974271642,0.12887754822970127,0.5685796567851344,-0.11277061840435547,-0.32235789468302967,-1.3367961469550766,0.08582887153623564,-0.42321729224076626,0.5596423694895131,-0.6397639241238254,-0.5020603959317853,0.040029809877154,0.08582887153623564,1.4338105461167394,-0.06654561112826916,-0.7541996741838557,0.17773333806919378,0.38202033875360203,0.08582887153623564,-0.31082456032573197,-0.8267619500939486,0.875405423787736,-0.4635326192019611,0.47086807710614936,0.04421713362907076,-0.19901309883666912,0.5197238669456421,-2.2868660285833617,-0.2577814467343224,1.161159416717581,0.395761807071975,0.027492963248025755,0.08582887153623564,-1.2052333081207875,0.7957380112007781,-0.17843051858651574,-0.20368961641118968,-0.30239942693788496,0.3731564974271642,-0.6701893202341013,-0.6528150892021803,-0.8430022080765102,0.5685796567851344,-1.274889192037229,-0.3954849749263623,0.3243007075876716,-0.35444430968158436,1.2882466888700923,0.9773043272186382,0.7640028161431047,1.547818411681605,-1.3205621573016617,0.33316454891410935,-0.15120602572889938,0.22920714815050666,0.6662912364641197,0.125204542927011,0.2265891279086864,0.264915095662712,-0.07939894219654875,-0.5062477196837023,-0.9459498282391355,1.572437646618987,-1.1658008825168522,-0.9251949386220795,0.08582887153623564,-2.1090654201514005,0.23807098947694427,0.08002175839020867,0.08582887153623564,-1.2509773020301207,-0.9906182943267109,-0.5462396681967571,0.275444917748179,0.7151470263036123,0.6878930338370999,0.6137624413219369,0.5370256039815129,-1.5994652472926139,0.08582887153623564,0.17773333806919378,0.5166107845686204,0.15309736584450145,0.8669052318458373,0.5197238669456421,0.3096195553516222,0.17406033276650357,-0.6175458496285657,-0.18532207087102281,0.08002175839020867,-0.2131129806467468,-1.3886808302221607,-0.6906277254120057,0.19147480638756703,1.5494096883718453,0.7203378623273596,2.3621338012726985,-0.8267619500939486,-0.6528150892021803,-1.288995342176454,-0.2131129806467468,-0.15539334948081635,0.6174354466246272,0.09307292346856355,1.5572700174264527,0.43299908669971326,-0.25098197105318326,-0.30239942693788496,-0.8929067146477259,-0.44010295512992503,0.2354529692351244,0.17773333806919378,-1.2509773020301207,-0.11540140096776164,-1.4536995810701676,0.6662912364641197,1.2488077692737176,-0.4043488162528002,-0.5010116792000622,0.23807098947694427,1.0913121927835039,0.3731564974271642,-0.3019607189992943,0.47086807710614936,0.08002175839020867,-0.6890584219019087,0.031092522581532393,0.08888559971664647,-0.8929067146477259,0.3688957277060633,0.08002175839020867,0.7640028161431047,0.2265891279086864,-0.9459498282391355,0.08582887153623564,0.9284485373791453,0.47086807710614936,0.6174354466246272,0.5441517618653883,0.6662912364641197,-0.7552493778206055,0.9373123787055834,0.12887754822970127,-1.3367961469550766,0.24919443755349716,0.3731564974271642,-0.051874656655804284,-0.9906182943267109,0.5249147029693895,0.6174354466246272,-0.06654561112826916,-1.2149902485680695,-0.8267619500939486,0.12887754822970127,0.47086807710614936,-0.6964348385580325,0.14151359113447715,0.18659717939563175,-0.2567779344624918,0.5465459999512655,-1.479176192721637,0.08582887153623564,-0.1758704651261745,0.14256857619534735,-0.306637236573815,-1.0873263617338658,-1.277513480608196,-0.8283312536040456,1.8934367414008506,-1.0784173159475354,-1.4214565615557067,-0.30239942693788496,0.4846095454245221,-0.5114772661749034,1.5425823711979647,-0.44010295512992503,-0.2131129806467468,-0.044943813755288775,-0.06235828737635203,-0.18637078760274617,1.3239713736696068,0.08582887153623564,0.3243007075876716,-0.9817544530002733,0.20084773027039707,-0.44010295512992503,-0.7558361553339891,-0.7905186173942201,0.08582887153623564,0.006529996326023879,-0.7941916226969103,-2.0181591844661524,0.17773333806919378,0.7640028161431047,0.6174354466246272,2.3621338012726985,-0.8430022080765102,0.08002175839020867,0.47086807710614936,-0.5062477196837023,-0.05506374956001126,0.13774138955613913,1.2677348377230044,0.3111760965401331,0.2354529692351244,0.3731564974271642,-0.6906277254120057,-0.37887220460133086,2.3384096259416536,1.7117609642051372,-0.24679464730126616,-0.44010295512992503,-0.7946303306355011,0.6174354466246272,0.535456300471416,0.08582887153623564,2.5288774071603455,-0.8283312536040456,1.0402599988682086,-1.0830938335220561,0.1414208888512683,1.0849284649557842,0.999874901361719,-0.35448951414147706,0.17773333806919378,-1.0473344132208111,0.13774138955613913,-0.15120602572889938,-1.0925171977576134,1.0271636293299613,-0.8393679132412737,0.47086807710614936,0.2265891279086864,-0.4459100682759518,-0.15906635478350672,-1.2509773020301207,0.4986589868818731,-1.4345077266340618,0.9499291652963342,-0.5987684633389401,1.4143022072414815,-0.932333858827541,0.9486891085469749,0.9284485373791453,0.27177191244548876,-0.438533651619828,0.08582887153623564,1.368150645934579,-0.3959927993831502,-0.6528150892021803,-0.9780015077359606,1.6061258072659452,1.052438432005632,0.17773333806919378,0.3243007075876716,-0.2131129806467468,0.8858258063026848,-0.5462396681967571,-0.438533651619828,0.9068971803588921,-0.5062477196837023,0.42201228726665674,1.7117609642051372,-0.45582889466326004,-0.06235828737635203,-0.6906277254120057,0.17773333806919378,0.9220648095514267,-0.4485280885177722,-0.44010295512992503,-0.44010295512992503,-1.2174827699031108,-1.0342380436825636,-1.9536342093064851,-0.16425719080725432,-0.6890584219019087,0.08002175839020867,-1.385725382763753,-0.8283312536040456,-0.44010295512992503,1.410114883489565,0.1367443712767476,0.279632241500096,0.6174354466246272,-0.30558851984209173,0.558049834699667,-1.2149902485680695,0.33316454891410935,0.5838337199317307,-0.20787694016310673,0.6174354466246272,-1.4204078448239836,0.0904486348975961,-0.01768982128877647,-0.6886197139633178,0.08582887153623564,0.6662912364641197,0.4767492163699148,-0.3508165088387867,-0.30239942693788496,-0.19901309883666912,1.1402027181247258,0.5197238669456421,-0.31449756562842235,0.4219388412974729,0.06840848407128836,0.47086807710614936,-0.1065375596413238,-0.7016708790416727,0.42201228726665674,0.040029809877154,-0.3596803501652246,0.275444917748179,-0.004638656210421594,-0.20892565689482978,0.4308761285930943,-0.5020603959317853,-0.9459498282391355,0.9068971803588921,0.5197238669456421,-0.7552493778206055,0.08582887153623564,-0.30239942693788496,0.6467956599104482,0.08582887153623564,-0.6039592993626873,-0.051874656655804284,-0.7453358328574178,0.03635680457446358,0.08002175839020867,0.42720312329040433,-0.6906277254120057,0.13149556847152138,0.12887754822970127,-0.4522010938204622,0.17406033276650357,0.08582887153623564,-0.3466291850868697,0.4797319184325872,-0.30239942693788496,0.9578694343125645,1.8036654307380953,-0.438533651619828,-1.0306102428397659,0.7151470263036123,-0.30819377776232587,2.077326566401523,-0.3213543824111992,-0.5734936606632693,-0.7640896333820316,0.03116596855071608,-1.2827495210918365,0.5685796567851344,-0.06235828737635203,0.040029809877154,0.08582887153623564,3.1343463202558612,0.3862076625055191,-0.11540140096776164,-0.2105464331939664,0.6311264745902732,-0.8109157930779554,-0.30083012342778803,0.929497254110869,-0.3854217478035137,0.08582887153623564,-0.6475790487185401,-0.6543716303906911,0.862212022515293,-1.034797566591683,-0.30239942693788496,0.1761767968806832,-0.11540140096776164,0.22503258672017568,-0.7993824587206577,0.08582887153623564,-0.31082456032573197,0.08582887153623564,-1.1902287774365985,-0.30239942693788496,-0.0029093263761232244,0.08582887153623564,-0.31082456032573197,-0.8020519517515178,0.8085978362614965,0.33316454891410935,2.3621338012726985,-0.5020603959317853,-0.2577814467343224,0.47086807710614936,0.9236213507399375,0.08590289765397452,0.08582887153623564,-0.897094038399643,-1.6699228345050865,1.1123036268780886,-0.7552493778206055,0.9373123787055834,-0.11327844286114334,0.08002175839020867,0.6137624413219369,-0.30083012342778803,0.5197238669456421,0.4845591050717954,-2.6995222219772286,0.5197238669456421,-0.6906277254120057,-1.092590643726797,0.08582887153623564,1.214726459633324,0.3731564974271642,0.7151470263036123,-0.006207959720518585,-0.44010295512992503,-0.39967229867827925,2.5774177991537464,1.1291077372207563,-0.6964800430179251,0.08582887153623564,0.17773333806919378,0.275444917748179,-0.25935075024441934,0.08582887153623564,0.762446274954594,-2.393336317861918,0.3731564974271642,0.550219005253956,0.39726790790775895,-0.30239942693788496,-0.7374755038028105,-0.01768982128877647,1.8934367414008506,0.47086807710614936,-0.6906277254120057,0.046340091735689655,-0.6906277254120057,-0.821192333398584,-1.034797566591683,1.7117609642051372,-0.3596803501652246,-0.17579052516455182,0.8180494420063451,-0.6906277254120057,-0.553540474342245,-1.3205621573016617,-0.0576817698018313,0.5737704928088818,1.2983034220005014,-0.8341383667500726,0.08582887153623564,1.0155955594709336,1.1080710986662792,0.05377127819552688,-0.04394030148345821,-0.4043488162528002,-0.4342775376430065,-1.5810750961525393,0.09307292346856355,-0.6906277254120057,-0.5587765148258853,0.6626182311614295,1.0723916183266569,0.2265891279086864,-0.30239942693788496,-0.30558851984209173,0.33316454891410935,-1.483363516473554,0.1761033509114991,-0.6906277254120057,-0.014055526453539838,-0.7374755038028105,-0.30239942693788496,-0.4085361400047172,0.17773333806919378,0.08582887153623564,-0.051874656655804284,-0.11907440627045197,0.6174354466246272,-0.7122007011271398,-0.6906277254120057,-0.01768982128877647,-1.483363516473554,-0.04766374713887538,0.762446274954594,-0.44010295512992503,0.7640028161431047,0.6174354466246272,-0.25310492915980165,0.0915163822800527,-1.2149902485680695,-0.01768982128877647,-0.3056337243019845,-0.1401392863342205,-1.0925171977576134,1.2867353521414742,-0.6906277254120057,1.0119160601758044,-0.7505266688811651,-0.703220926237745,0.47086807710614936,0.08582887153623564,-0.16425719080725432,-0.994879064047812,-0.7505266688811651,-0.932333858827541,-0.6486277654502631,-0.7053438843443631,-0.051874656655804284,-0.8482382485601503,-0.6906277254120057,0.2649510892640468,-0.3623498431960843,0.08582887153623564,0.08582887153623564,-0.6039592993626873,-0.9407137877554955,-0.5997719756107706,0.08002175839020867,0.2265891279086864,-1.0410948604653405,1.0796924244721442,-1.4119024169892502,0.08582887153623564,-0.8267619500939486,-0.30239942693788496,-0.16425719080725432,-0.3623498431960843,-0.6076323046653778,-0.24891760540788452,1.2651387906613276,0.275444917748179,-0.9365264640035782,0.40783895948739524,-0.700107843860723,0.5197238669456421,0.5197238669456421,-0.1337620524989406,-1.627312865750212,1.682766012888723,0.275444917748179,-0.30239942693788496,-0.08646280384795904,-0.9459498282391355,1.1569720929656642,0.08582887153623564,0.15934318692911945,0.040029809877154,-0.01768982128877647,-0.46106493514690006,-1.4040420879346436,-0.30083012342778803,0.5685796567851344,1.410114883489565,0.5013337158055675,0.08582887153623564,-0.0029093263761232244,-0.6617523764978014,0.6174354466246272,0.3096195553516222,0.08582887153623564,0.28430875907461683,0.08582887153623564,0.14192871330805606,0.5197238669456421,-0.44010295512992503,0.1403594097979592,-0.11907440627045197,0.08582887153623564,-1.035852551652553,0.42201228726665674,-1.2558821836263203,-1.3893249420972593,-1.1849927369529583,0.22503258672017568,-0.2131129806467468,0.1819206618211107,-0.5099207249863926,0.3243007075876716,0.08582887153623564,-0.555103509523195,1.1873984410490732,-1.0384705718943734,1.5956254847893736,-1.874209835189495,0.03116596855071608,0.08582887153623564,0.6662912364641197,0.34872860250741794,0.5285877082720798,-1.7128974850808139,0.57488993864367,-0.44010295512992503,0.7508782050955664,0.5685796567851344,-0.1583760515434887,-1.8778828404921855,-1.0499587017917782,0.052767765923696516,0.6174354466246272,0.6662912364641197,2.239614594029216,1.5956254847893736,0.04945317411271075,0.08582887153623564,-0.4521558893605697,-1.3856519367945692,-0.9948056180786281,-0.6039592993626873,-0.44010295512992503,-0.49099365653710625,0.14412511738385825,0.9914042090287161,0.8113020647940866,-0.6345278836401853,-0.06392759088644905,-0.11121407721584457,-0.3596803501652246,-0.7905186173942201,0.4693115359176385,0.33316454891410935,-1.1828586291096217,1.0849284649557842,1.7117609642051372,0.4398906389842199,0.12887754822970127,-0.9948056180786281,1.2678082836921878,0.40094740720288796,1.0644448553179875,-0.30239942693788496,-0.06654561112826916,0.728198191381967,0.3284880313395887,-0.11540140096776164,-0.897094038399643,0.8154893885460037,0.5685796567851344,-0.65548458223304,-0.44010295512992503,-0.06235828737635203,-0.20006181556839203,1.9422925312403427,0.23182516839232686,0.08582887153623564,0.42201228726665674,0.42201228726665674,0.15330544314944752,-1.640460708077499,1.0104047234471862,0.08582887153623564,0.08582887153623564,1.3865745456713572,1.026160117058131,0.8533075318432417,-0.0135024975368595,0.03116596855071608,-0.41532222768442895,0.27177191244548876,-0.0576817698018313,1.5315221257957248,-0.35706232992340453,0.7203378623273596,1.841460975175348,-0.06654561112826916,0.42201228726665674,-1.5348887993439062,1.0207311706849096,0.17773333806919378,0.6662912364641197,-0.11540140096776164,1.746869371882373,0.08582887153623564,-0.4573919298442098,-0.20787694016310673,1.0024991899326863,0.7640028161431047,-0.16956667726007815,-0.6906277254120057,-0.4703379631956982,-0.6890584219019087,-0.01768982128877647,0.3731564974271642,-0.7993824587206577,-0.4012288398667904,-0.6906277254120057,-1.9335954471144547,0.6662912364641197,0.3479734101296756,1.1637129761854834,-0.30239942693788496,0.8716524785234229,-0.003589939478698508,2.14190301435023,1.4296232223648222,-0.5119739408949731,0.3243007075876716,0.3243007075876716,0.5285877082720798,-0.04232579351346872,0.8990368513042848,0.4729910352127676,-0.30239942693788496,0.7640028161431047,-1.3886808302221607,-0.6906277254120057,0.3243007075876716,-0.3596803501652246,0.3148038973829309,-0.1065375596413238,-0.6964348385580325,-0.5499126734994475,-0.11540140096776164,-0.5987684633389401,2.3615974641120405,0.36206042993013454,0.2265891279086864,0.03116596855071608,1.916624579571237,0.5285877082720798,-0.3596803501652246,0.3846511213170081,0.275444917748179,-0.3596803501652246,-0.16425719080725432,0.20033864771400456,0.05559386347046243,2.036947382738918,0.28430875907461683,-1.2375215320951412,-0.555103509523195,0.24819092528166695,0.3263784612343974,0.2265891279086864,-0.31082456032573197,0.6777858603539637,0.6390372439976074,-0.30239942693788496,0.08582887153623564,0.22815216308963598,-0.30239942693788496,0.33005146653708717,-0.48796051412170743,1.012914244310591,-0.6906277254120057,0.42201228726665674,0.6662912364641197,-0.7905121234017811,0.5197238669456421,0.08582887153623564,-0.01768982128877647,0.9353043672568959,0.5685796567851344,0.7640028161431047,-0.8341383667500726,-0.916285892835749,0.7151470263036123,-0.5062477196837023,-1.2509773020301207,-0.9407137877554955,-0.20892565689482978,0.41094184410083207,0.43575375558502955,-2.0696329945474656,-0.30039768381834414,1.5403859671221625,-1.128321822518751,0.14192871330805606,-1.2827495210918365,0.029609427362205436,-1.1388064401443256,-0.6906277254120057,-0.949622833541826,0.13306487198161812,0.3636596872224232,-1.3886808302221607,0.3731564974271642,-0.6439512478757423,-1.0742299921956184,2.3074708982871783,0.08582887153623564,0.8580413905193995,0.275444917748179,-0.07971542663570026,1.8845729000744127,-0.7505266688811651,-1.123085782035111,-0.10130151915768382,0.5685796567851344,0.6174354466246272,0.08582887153623564,-0.8651158048720028,-0.200061815568392,-0.06654561112826914,0.33316454891410935,0.17773333806919386,0.3243007075876716,-1.6945588067297788,0.22658912790868646,2.4308504296352687,-0.649677469087013,1.1249204134688393,-0.4059181197628971],\"xaxis\":\"x2\",\"yaxis\":\"y2\"},{\"alignmentgroup\":\"True\",\"bingroup\":\"x\",\"histnorm\":\"density\",\"hovertemplate\":\"variable=PC6<br>_value=%{x}<br>density=%{y}<extra></extra>\",\"legendgroup\":\"PC6\",\"marker\":{\"color\":\"#19d3f3\",\"opacity\":0.5,\"pattern\":{\"shape\":\"\"}},\"name\":\"PC6\",\"offsetgroup\":\"PC6\",\"orientation\":\"v\",\"showlegend\":true,\"type\":\"histogram\",\"x\":[-1.0180534287361318,-0.34681701570629314,0.20071545094380872,-0.5668123467042091,0.04402763091626962,0.1393445006969723,0.2336241275043729,0.20707055646820222,-0.40715178364635696,-0.645806325774661,-0.4090149897215899,0.5174489532679581,0.010757270436643889,1.135460422880513,0.1740991625600937,0.26503814787106966,0.7369026745338139,0.032673871245977794,-0.8214411761330743,0.4226651664632664,0.044027630916269184,0.23841499352506507,0.28298781604306295,0.372560889313793,0.39702873697535246,1.3098924351638381,0.24601513014796672,0.9136951869273587,0.315994537012272,0.032673871245977794,0.26845900997813316,-0.3156735008123205,0.315994537012272,0.11278637590749506,-0.7914040256423104,-0.9736929480966489,0.24601513014796672,0.012975294468618857,-0.42711399993413224,-0.645806325774661,-0.801478959845299,-0.8303132722609745,0.24601513014796672,0.17611838710284863,0.291859912170963,0.032673871245977794,-0.8939022465397709,0.315994537012272,-0.36407012847415904,-0.8502754885487496,0.6413221652426948,0.012975294468618857,-0.371570098014764,-0.8258772241970244,-0.41442905649807793,0.27843060454694135,0.18962533078391877,0.2429517336104204,-0.032786823735190325,1.4965172385998302,0.22853457740258273,0.5222398192886504,-0.7212821426997603,0.6346680931467699,0.24601513014796672,-0.36407012847415904,0.30567221636010433,0.008539246404668795,1.2633139304923624,-0.5860198439936319,0.037373558820344197,1.684257395075005,0.012975294468618857,-0.7958400737062604,0.037373558820344197,0.12015008391690436,0.032673871245977794,0.032673871245977794,-0.6418475088784432,0.2095875470716941,0.015193318500593835,0.030719486724419005,0.315994537012272,0.028501462692444003,0.18075323465601856,0.02931784916011069,0.2381228929158528,0.032673871245977794,1.0992173193705586,0.019629366564543897,0.030719486724419005,0.010757270436643889,-0.8173668119881706,-0.16285835537901452,0.09726020768366987,0.032673871245977794,0.6812771815907082,-0.6058887591614147,-0.8147871040371493,-0.9914371403524493,0.2051514990077439,0.032673871245977794,-0.8236660661273537,0.039591582852319174,-0.5616215796419066,0.028501462692444003,0.18962533078391877,0.032673871245977794,0.05068170301219434,-0.7172522102244713,0.31640065260093314,-0.6446973137586735,0.015193318500593835,-0.8458394404847996,0.39409449355800746,0.012975294468618857,0.22943811350237717,-1.002527260512324,-0.5053680418090543,1.2300435700127366,-0.5971099641535071,0.032673871245977794,-0.7814229174984226,0.36258664713220956,-0.7504712730721776,-0.8268924101539108,0.13934450069697227,0.019629366564543897,-0.0891173988384739,0.06620787123601946,0.252932841754308,0.010757270436643889,-0.7859527916214738,-0.8258772241970244,0.021847390596518926,0.23075260143455784,-0.22829058926138643,-0.7390263349555605,0.0018851743087436835,0.527878705427689,-0.1874200921588593,0.19184335481589368,-0.8369673443568996,0.11520987585566324,0.0063212223726937435,-0.6015460122174571,0.02628343866046896,0.39924676100732726,-0.4644278983375087,0.05955379914009452,0.07951601542786974,-0.595646659119886,0.08949712357175728,-0.5538584955299938,0.032673871245977794,-0.740389472906885,0.28520584007503796,0.03293751075639407,0.032673871245977794,2.807880521540792,-0.9692569000326989,0.23176778739144432,0.024065414628493972,0.004103198340718751,0.6280140210508445,-0.6237262525372074,-0.6764687996948875,0.9022571147730455,0.032673871245977794,0.028501462692444003,0.39660433570877635,0.7413387225977643,-0.46482040847770767,0.012975294468618857,0.6480068211110827,-0.6037640362494322,0.268911589853087,0.7130460199141468,0.03293751075639407,0.0462456549482443,2.9845305578560923,0.24601513014796672,1.0689197019212622,-0.12000626285800485,-0.4581663363817826,0.3767332978673269,-0.7172522102244713,0.06620787123601946,-0.44829687809498703,0.0462456549482443,0.21402359513564395,0.008539246404668795,-0.8480574645167747,-0.5387317034086722,0.7488892223824896,0.7799415588301399,0.13934450069697227,-0.9736929480966489,0.315994537012272,0.19627940287984377,0.028501462692444003,2.807880521540792,0.041809606884294206,0.280658142153996,0.0063212223726937435,-0.8366125264001573,-0.9958731884163994,0.23740667353048284,0.28520584007503796,0.6125184365994822,0.019629366564543897,0.22067766723156912,0.015193318500593835,0.03293751075639407,-0.8939022465397709,-0.41149453059031466,0.20293347497576883,-0.9736929480966489,0.6239702406784037,0.03293751075639407,0.0018851743087436835,0.02628343866046896,0.07951601542786974,0.032673871245977794,-0.7368083109235856,0.015193318500593835,0.008539246404668795,0.011866282452631324,0.0063212223726937435,0.4455616261683867,-0.5668123467042109,0.030719486724419005,0.09726020768366987,1.2366976421086624,0.019629366564543897,0.2093239075612775,-0.9692569000326989,-0.44929424025388237,0.008539246404668795,0.039591582852319174,-0.6105815807734768,-0.7172522102244713,0.030719486724419005,0.015193318500593835,0.24627876965838294,-0.1936680486661235,0.19849742691181876,-0.4138058557422821,-0.3650161930011358,-0.9470766597129486,0.032673871245977794,-0.35356438892221415,0.34967101308055853,-1.000309236480349,-0.3760994471987067,-0.18937447668041796,0.4226651664632664,0.5044956270328504,0.4340189261335581,-0.7792987195255487,0.13934450069697227,1.0556115577294123,-0.3808971791817032,0.3500258310373006,0.315994537012272,0.0462456549482443,0.6612843815304701,-1.0113993566402244,-0.5157977939687851,0.4664344005325326,0.032673871245977794,0.021847390596518926,-0.7992609358133239,-0.5256850760535715,0.315994537012272,-0.5538590204691027,0.2428579075513193,0.032673871245977794,0.7479927946936893,-0.38940759139055675,0.21723898132651454,0.028501462692444003,0.0018851743087436835,0.008539246404668795,0.3767332978673269,0.252932841754308,0.03293751075639407,0.015193318500593835,0.05955379914009452,0.2985139842668882,0.20071545094379384,-0.33980812565362933,0.4561923004910042,0.19627940287984377,0.019629366564543897,0.24601513014796672,0.23186161345054535,0.20631583746984813,0.27843060454694135,-0.2710493806624036,0.315994537012272,-0.4707407579251535,0.008539246404668795,0.4634485769928501,0.032673871245977794,0.02727033520001529,0.4226651664632664,-0.3933955203777725,-0.7869679775783602,0.5703828459542613,0.6553773950827962,0.9274583161582478,-0.40936980767833214,0.028501462692444003,-0.5483134354500565,0.20071545094379384,-0.8369673443568996,0.08617008752379476,-0.1525229542174933,-0.017522172348114533,0.015193318500593835,0.02628343866046896,0.3162581765226885,-0.41824190380623216,2.807880521540792,0.6819936834664966,0.10169625574761998,0.41950107790431496,-0.3982796875184568,-0.3464621977495549,-0.2940907216098538,0.3130736165529706,-0.7368083109235856,-0.6082000843133821,-0.8239228396754656,0.032673871245977794,-0.7567705272113606,0.5947811103059863,0.06620787123601946,0.017056524575826754,-0.5409497274406473,1.1014353434025337,0.028501462692444003,0.021847390596518926,0.0462456549482443,0.2945820962002292,0.23176778739144432,-0.8239228396754656,-0.6370343967290576,0.05955379914009452,0.017411342532568926,0.27843060454694135,-0.3970768494433684,-1.0113993566402244,0.24601513014796672,0.028501462692444003,-0.6939493524402714,0.22733173932749412,0.315994537012272,0.315994537012272,0.7145169582978707,-0.7891860016103354,-0.577047580783435,0.044027630916269184,-0.8939022465397709,0.03293751075639407,-0.34717183366303866,0.4226651664632664,0.315994537012272,0.704528741742989,-0.6506040577576574,-1.0269255248640496,0.008539246404668795,0.22853457740258273,0.3859386168154773,-0.6105815807734768,0.19184335481589368,-0.12470382775870431,0.22409852933863278,0.008539246404668795,0.44954509435738305,-0.2514791495757187,0.037373558820344197,-0.8125690800051744,0.032673871245977794,0.0063212223726937435,1.4743369982800796,0.22289569126354417,0.13934450069697227,0.39409449355800746,0.1542299649018919,0.012975294468618857,-0.5815837959296819,-0.42923872284611503,-0.3646545090820894,0.015193318500593835,0.21180557110366896,0.06842589526799464,0.017411342532568926,0.2051514990077439,0.052899727044169294,0.024065414628493972,-0.8436214164528245,-1.0047452845442992,0.18740730675194361,-0.9914371403524493,0.07951601542786974,-0.6370343967290576,0.012975294468618857,0.4455616261683867,0.032673871245977794,0.13934450069697227,-0.46457776531716627,0.032673871245977794,0.06398984720404449,0.2093239075612775,-0.3916256154225318,-0.42711399993413224,0.03293751075639407,-0.44485819218993244,0.24601513014796672,0.11964592391961333,0.030719486724419005,-0.40493375961438194,-0.6037640362494322,0.032673871245977794,-0.8280952482289995,0.1851892827199686,0.13934450069697227,0.18482759880092237,0.27425819599340756,-0.8239228396754656,-0.797042911781349,0.004103198340718751,-0.8084947158602708,0.2820834725137412,0.4258630493910279,0.8556786101015703,1.0135062683662348,0.035155534788369094,-0.36722735107080656,0.010757270436643889,-1.0113993566402244,0.2051514990077439,0.032673871245977794,-0.2907569460757335,-0.8613656087086247,0.041809606884294206,0.18055443516679856,0.32749077276080824,-0.14067811505926434,-1.0005728759907653,0.4920355029593465,-0.4990687876698711,0.032673871245977794,0.2440607456264079,0.25802239185609827,-0.6273174530346948,0.2539480277111944,0.13934450069697227,0.22031598331252278,0.041809606884294206,0.21809795928054776,0.07286194333194462,0.032673871245977794,0.05068170301219434,0.032673871245977794,0.09060613558774484,0.13934450069697227,0.1711278330309049,0.032673871245977794,0.05068170301219434,0.02931784916011069,0.6040080243906284,0.19184335481589368,0.3767332978673269,-0.9914371403524493,-1.002527260512324,0.015193318500593835,-0.88576387306035,1.49208119053588,0.032673871245977794,0.07729799139589463,0.28278234012686976,-0.5031500177770792,0.4455616261683867,-0.5668123467042109,0.6032915225148402,0.03293751075639407,-0.6237262525372074,-1.0005728759907653,0.012975294468618857,0.33414484485673346,0.3372177549693592,0.012975294468618857,0.24601513014796672,-0.3604799778548889,0.032673871245977794,0.25733039020527393,0.019629366564543897,0.004103198340718751,0.2962959602349132,0.315994537012272,0.22511371529551916,0.47344329058519985,-0.5678275326610971,-0.39384363945450684,0.032673871245977794,0.028501462692444003,0.024065414628493972,0.1373901161754134,0.032673871245977794,0.19369969492882244,-0.5570853644956597,0.019629366564543897,0.2672493059407404,0.3167623365199795,0.13934450069697227,-0.8103510559731993,0.037373558820344197,0.5044956270328504,0.015193318500593835,0.24601513014796672,-0.28435752485425386,0.24601513014796672,0.1628973925431262,0.2539480277111944,0.27843060454694135,0.052899727044169294,-0.16951242747493964,-0.4626023844457327,0.24601513014796672,-0.3926408013794183,-0.1874200921588593,0.2095875470716941,-0.45151226428585756,0.3611159511971757,0.42292880597368304,0.032673871245977794,0.09000743505691303,-0.09228148739742548,1.2455697382365623,1.250005786300512,-0.9958731884163994,-0.49685076363789643,0.10835032784354502,-0.8480574645167747,0.24601513014796672,-0.5704936757698067,-0.6259442765691824,-0.14688406807845475,0.02628343866046896,0.13934450069697227,0.22853457740258273,0.19184335481589368,0.10391427977959498,-0.22633408206616104,0.24601513014796672,-0.23308145528207855,-0.8103510559731993,0.13934450069697227,0.055117751076144354,0.028501462692444003,0.032673871245977794,0.2093239075612775,-0.5904558920575819,0.008539246404668795,0.44360724164682797,0.24601513014796672,0.037373558820344197,0.10391427977959498,-0.10372642551404275,0.19369969492882244,0.315994537012272,0.0018851743087436835,0.008539246404668795,0.21845964319959402,-0.6562429438966958,-0.6105815807734768,0.037373558820344197,-0.411587831710307,0.07856249694029577,0.08617008752379476,0.6036463404715823,0.24601513014796672,-0.27965995995355414,0.0706439192999696,-0.002357688043335518,0.015193318500593835,0.032673871245977794,0.044027630916269184,-0.36491602591883887,0.0706439192999696,-0.2940907216098538,-0.9847830682565241,-0.5638396036738818,0.2093239075612775,0.07507996736391957,0.24601513014796672,-0.40076609434948574,0.009355632872335352,0.032673871245977794,0.032673871245977794,0.06398984720404449,0.257368889818258,-0.9870010922884992,0.03293751075639407,0.02628343866046896,0.21826084371037408,0.47752452069240786,1.3121104591958124,0.032673871245977794,-0.7172522102244713,0.13934450069697227,0.044027630916269184,0.009355632872335352,-0.5682756517378316,-0.8325312962929498,0.06329784555322021,0.024065414628493972,-0.7936220496742854,-0.7770875614558781,-0.3859867292834929,0.012975294468618857,0.012975294468618857,0.2983016423883908,0.19949478907071425,0.38623071742468956,0.024065414628493972,0.13934450069697227,0.4878981389764945,0.07951601542786974,0.5456228976834894,0.032673871245977794,0.8224082496219446,0.2051514990077439,0.037373558820344197,-0.5749297238337567,0.8933850186451457,-1.0005728759907653,0.010757270436643889,0.704528741742989,0.8068820813981197,0.032673871245977794,0.1711278330309049,-0.5504381583620391,0.008539246404668795,0.6480068211110827,0.032673871245977794,0.19406137884786862,0.032673871245977794,-0.8502754885487496,0.012975294468618857,0.315994537012272,0.2896418881389881,-0.5904558920575819,0.032673871245977794,-0.2893910340354873,0.017411342532568926,-0.1050964294276712,-0.5327872672262312,0.26845900997813316,0.21809795928054776,0.0462456549482443,-1.0224894768000992,-0.5727116998017819,0.021847390596518926,0.032673871245977794,0.06177182317206953,-0.5781661063745022,-0.37831747123068155,-0.7031831324872181,0.12165847203539523,0.035155534788369094,0.032673871245977794,0.0063212223726937435,0.02073837858053153,0.18297125868799366,1.7441440439383307,-0.4787517534253541,0.315994537012272,0.4362300842032287,0.010757270436643889,1.5031713106957554,-0.5106070269064806,0.048264879490999155,0.65684833346652,0.008539246404668795,0.0063212223726937435,-0.5620214806835184,-0.7031831324872181,-0.6679865660944111,0.032673871245977794,0.23518864949850785,0.09947823171564496,0.08173403945984468,0.06398984720404449,0.315994537012272,-0.07590729905525379,0.15785649246047992,-0.3911774963457971,0.19148167089684734,-0.6369342296467606,0.1285180200475134,-1.0091813326082495,0.052899727044169294,0.2428579075513193,0.20700783912067267,0.19184335481589368,-0.36407012847415904,0.6553773950827962,0.27843060454694135,-0.7146280706038353,0.030719486724419005,0.08173403945984468,0.10684193972505424,0.6864297315304466,0.35038751495634696,0.13934450069697227,0.039591582852319174,-0.87689177693245,-1.0291435488960246,0.041809606884294206,0.07729799139589463,-0.8595092685956961,0.010757270436643889,0.022663777064185445,0.315994537012272,-1.0113993566402244,-0.8347493203249244,0.5022776030008752,0.20413631305085744,0.032673871245977794,0.017411342532568926,0.017411342532568926,0.029610474708431585,0.48574969825435327,0.5522769697794143,0.032673871245977794,0.032673871245977794,0.2292792578867487,-0.7412443589875356,0.9341123882541732,-1.0136173806721993,0.035155534788369094,-0.19351870662557438,-0.6082000843133821,0.2095875470716941,-0.8281021141913038,0.14182616423936356,-0.4581663363817826,-0.9060877732671719,0.039591582852319174,0.017411342532568926,0.06258820963973595,-0.6422023927235594,0.028501462692444003,0.0063212223726937435,0.041809606884294206,0.5111496991287754,0.032673871245977794,0.05733577510811937,0.22409852933863278,0.3308800012171919,0.0018851743087436835,-0.580475308852803,0.24601513014796672,0.3173671885386758,-0.8939022465397709,0.037373558820344197,0.019629366564543897,0.07286194333194462,0.41692823591559786,0.24601513014796672,0.4990578424462036,0.0063212223726937435,0.23764719401735765,0.1541369462723182,0.13934450069697227,-0.4999168077882176,0.3852223974301074,-0.5575854326195686,0.22732487336518983,-0.1542498987615307,0.021847390596518926,0.021847390596518926,0.18297125868799366,0.7502108187256645,-0.2183089561783903,0.5766752341311397,0.13934450069697227,0.0018851743087436835,2.9845305578560923,0.24601513014796672,0.021847390596518926,0.052899727044169294,0.4483353903199902,0.21180557110366896,0.24627876965838294,-0.4004977115504319,0.041809606884294206,-0.3982796875184568,0.09877936410251618,-0.8525771284441815,0.02628343866046896,0.035155534788369094,0.3969591536655182,0.18297125868799366,0.052899727044169294,-0.669551088088546,0.024065414628493972,0.052899727044169294,0.044027630916269184,1.2389156661406369,0.034046522772381606,0.3275819512071342,0.19406137884786862,-0.36158846493176783,0.06177182317206953,0.6479762373386198,-0.05679310288582496,0.02628343866046896,0.05068170301219434,-0.6828592322803964,0.6302320450828195,0.13934450069697227,0.032673871245977794,-0.4281291858910189,0.13934450069697227,0.575472396056051,-0.6435883017426858,-0.6418475088784432,0.24601513014796672,0.017411342532568926,0.0063212223726937435,-0.01974019638008966,0.012975294468618857,0.032673871245977794,0.037373558820344197,0.49177186344893026,0.010757270436643889,0.0018851743087436835,0.42292880597368304,0.2562598778022707,0.004103198340718751,0.05955379914009452,2.807880521540792,0.257368889818258,-1.0047452845442992,-0.3648248474725132,1.057829581761387,0.1305305681632953,-0.23373495731991858,-0.6581061499719291,-0.792606863717399,-0.8502754885487496,-0.36722735107080656,0.22697005540844786,0.22269689177432422,0.24601513014796672,-0.5527494835140064,-1.0202714527681245,0.44611736628801524,2.9845305578560923,0.019629366564543897,0.23620383545539422,-0.6169720133589857,0.3792149614097181,0.032673871245977794,-0.6348163726970825,0.024065414628493972,-0.16618591636608546,0.33449966281347543,0.0706439192999696,-0.6147539893270105,0.38965844549405737,0.010757270436643889,0.008539246404668795,0.032673871245977794,-0.3068925831307461,-0.8347493203249245,0.039591582852319174,0.19184335481589368,0.028501462692443993,0.02184739059651893,0.9956196000321897,0.02628343866046895,0.4800973626811248,0.022400137553769125,0.4831634068314464,0.1440441882713386],\"xaxis\":\"x\",\"yaxis\":\"y\"},{\"alignmentgroup\":\"True\",\"hovertemplate\":\"variable=PC6<br>_value=%{x}<extra></extra>\",\"legendgroup\":\"PC6\",\"marker\":{\"color\":\"#19d3f3\"},\"name\":\"PC6\",\"notched\":true,\"offsetgroup\":\"PC6\",\"showlegend\":false,\"type\":\"box\",\"x\":[-1.0180534287361318,-0.34681701570629314,0.20071545094380872,-0.5668123467042091,0.04402763091626962,0.1393445006969723,0.2336241275043729,0.20707055646820222,-0.40715178364635696,-0.645806325774661,-0.4090149897215899,0.5174489532679581,0.010757270436643889,1.135460422880513,0.1740991625600937,0.26503814787106966,0.7369026745338139,0.032673871245977794,-0.8214411761330743,0.4226651664632664,0.044027630916269184,0.23841499352506507,0.28298781604306295,0.372560889313793,0.39702873697535246,1.3098924351638381,0.24601513014796672,0.9136951869273587,0.315994537012272,0.032673871245977794,0.26845900997813316,-0.3156735008123205,0.315994537012272,0.11278637590749506,-0.7914040256423104,-0.9736929480966489,0.24601513014796672,0.012975294468618857,-0.42711399993413224,-0.645806325774661,-0.801478959845299,-0.8303132722609745,0.24601513014796672,0.17611838710284863,0.291859912170963,0.032673871245977794,-0.8939022465397709,0.315994537012272,-0.36407012847415904,-0.8502754885487496,0.6413221652426948,0.012975294468618857,-0.371570098014764,-0.8258772241970244,-0.41442905649807793,0.27843060454694135,0.18962533078391877,0.2429517336104204,-0.032786823735190325,1.4965172385998302,0.22853457740258273,0.5222398192886504,-0.7212821426997603,0.6346680931467699,0.24601513014796672,-0.36407012847415904,0.30567221636010433,0.008539246404668795,1.2633139304923624,-0.5860198439936319,0.037373558820344197,1.684257395075005,0.012975294468618857,-0.7958400737062604,0.037373558820344197,0.12015008391690436,0.032673871245977794,0.032673871245977794,-0.6418475088784432,0.2095875470716941,0.015193318500593835,0.030719486724419005,0.315994537012272,0.028501462692444003,0.18075323465601856,0.02931784916011069,0.2381228929158528,0.032673871245977794,1.0992173193705586,0.019629366564543897,0.030719486724419005,0.010757270436643889,-0.8173668119881706,-0.16285835537901452,0.09726020768366987,0.032673871245977794,0.6812771815907082,-0.6058887591614147,-0.8147871040371493,-0.9914371403524493,0.2051514990077439,0.032673871245977794,-0.8236660661273537,0.039591582852319174,-0.5616215796419066,0.028501462692444003,0.18962533078391877,0.032673871245977794,0.05068170301219434,-0.7172522102244713,0.31640065260093314,-0.6446973137586735,0.015193318500593835,-0.8458394404847996,0.39409449355800746,0.012975294468618857,0.22943811350237717,-1.002527260512324,-0.5053680418090543,1.2300435700127366,-0.5971099641535071,0.032673871245977794,-0.7814229174984226,0.36258664713220956,-0.7504712730721776,-0.8268924101539108,0.13934450069697227,0.019629366564543897,-0.0891173988384739,0.06620787123601946,0.252932841754308,0.010757270436643889,-0.7859527916214738,-0.8258772241970244,0.021847390596518926,0.23075260143455784,-0.22829058926138643,-0.7390263349555605,0.0018851743087436835,0.527878705427689,-0.1874200921588593,0.19184335481589368,-0.8369673443568996,0.11520987585566324,0.0063212223726937435,-0.6015460122174571,0.02628343866046896,0.39924676100732726,-0.4644278983375087,0.05955379914009452,0.07951601542786974,-0.595646659119886,0.08949712357175728,-0.5538584955299938,0.032673871245977794,-0.740389472906885,0.28520584007503796,0.03293751075639407,0.032673871245977794,2.807880521540792,-0.9692569000326989,0.23176778739144432,0.024065414628493972,0.004103198340718751,0.6280140210508445,-0.6237262525372074,-0.6764687996948875,0.9022571147730455,0.032673871245977794,0.028501462692444003,0.39660433570877635,0.7413387225977643,-0.46482040847770767,0.012975294468618857,0.6480068211110827,-0.6037640362494322,0.268911589853087,0.7130460199141468,0.03293751075639407,0.0462456549482443,2.9845305578560923,0.24601513014796672,1.0689197019212622,-0.12000626285800485,-0.4581663363817826,0.3767332978673269,-0.7172522102244713,0.06620787123601946,-0.44829687809498703,0.0462456549482443,0.21402359513564395,0.008539246404668795,-0.8480574645167747,-0.5387317034086722,0.7488892223824896,0.7799415588301399,0.13934450069697227,-0.9736929480966489,0.315994537012272,0.19627940287984377,0.028501462692444003,2.807880521540792,0.041809606884294206,0.280658142153996,0.0063212223726937435,-0.8366125264001573,-0.9958731884163994,0.23740667353048284,0.28520584007503796,0.6125184365994822,0.019629366564543897,0.22067766723156912,0.015193318500593835,0.03293751075639407,-0.8939022465397709,-0.41149453059031466,0.20293347497576883,-0.9736929480966489,0.6239702406784037,0.03293751075639407,0.0018851743087436835,0.02628343866046896,0.07951601542786974,0.032673871245977794,-0.7368083109235856,0.015193318500593835,0.008539246404668795,0.011866282452631324,0.0063212223726937435,0.4455616261683867,-0.5668123467042109,0.030719486724419005,0.09726020768366987,1.2366976421086624,0.019629366564543897,0.2093239075612775,-0.9692569000326989,-0.44929424025388237,0.008539246404668795,0.039591582852319174,-0.6105815807734768,-0.7172522102244713,0.030719486724419005,0.015193318500593835,0.24627876965838294,-0.1936680486661235,0.19849742691181876,-0.4138058557422821,-0.3650161930011358,-0.9470766597129486,0.032673871245977794,-0.35356438892221415,0.34967101308055853,-1.000309236480349,-0.3760994471987067,-0.18937447668041796,0.4226651664632664,0.5044956270328504,0.4340189261335581,-0.7792987195255487,0.13934450069697227,1.0556115577294123,-0.3808971791817032,0.3500258310373006,0.315994537012272,0.0462456549482443,0.6612843815304701,-1.0113993566402244,-0.5157977939687851,0.4664344005325326,0.032673871245977794,0.021847390596518926,-0.7992609358133239,-0.5256850760535715,0.315994537012272,-0.5538590204691027,0.2428579075513193,0.032673871245977794,0.7479927946936893,-0.38940759139055675,0.21723898132651454,0.028501462692444003,0.0018851743087436835,0.008539246404668795,0.3767332978673269,0.252932841754308,0.03293751075639407,0.015193318500593835,0.05955379914009452,0.2985139842668882,0.20071545094379384,-0.33980812565362933,0.4561923004910042,0.19627940287984377,0.019629366564543897,0.24601513014796672,0.23186161345054535,0.20631583746984813,0.27843060454694135,-0.2710493806624036,0.315994537012272,-0.4707407579251535,0.008539246404668795,0.4634485769928501,0.032673871245977794,0.02727033520001529,0.4226651664632664,-0.3933955203777725,-0.7869679775783602,0.5703828459542613,0.6553773950827962,0.9274583161582478,-0.40936980767833214,0.028501462692444003,-0.5483134354500565,0.20071545094379384,-0.8369673443568996,0.08617008752379476,-0.1525229542174933,-0.017522172348114533,0.015193318500593835,0.02628343866046896,0.3162581765226885,-0.41824190380623216,2.807880521540792,0.6819936834664966,0.10169625574761998,0.41950107790431496,-0.3982796875184568,-0.3464621977495549,-0.2940907216098538,0.3130736165529706,-0.7368083109235856,-0.6082000843133821,-0.8239228396754656,0.032673871245977794,-0.7567705272113606,0.5947811103059863,0.06620787123601946,0.017056524575826754,-0.5409497274406473,1.1014353434025337,0.028501462692444003,0.021847390596518926,0.0462456549482443,0.2945820962002292,0.23176778739144432,-0.8239228396754656,-0.6370343967290576,0.05955379914009452,0.017411342532568926,0.27843060454694135,-0.3970768494433684,-1.0113993566402244,0.24601513014796672,0.028501462692444003,-0.6939493524402714,0.22733173932749412,0.315994537012272,0.315994537012272,0.7145169582978707,-0.7891860016103354,-0.577047580783435,0.044027630916269184,-0.8939022465397709,0.03293751075639407,-0.34717183366303866,0.4226651664632664,0.315994537012272,0.704528741742989,-0.6506040577576574,-1.0269255248640496,0.008539246404668795,0.22853457740258273,0.3859386168154773,-0.6105815807734768,0.19184335481589368,-0.12470382775870431,0.22409852933863278,0.008539246404668795,0.44954509435738305,-0.2514791495757187,0.037373558820344197,-0.8125690800051744,0.032673871245977794,0.0063212223726937435,1.4743369982800796,0.22289569126354417,0.13934450069697227,0.39409449355800746,0.1542299649018919,0.012975294468618857,-0.5815837959296819,-0.42923872284611503,-0.3646545090820894,0.015193318500593835,0.21180557110366896,0.06842589526799464,0.017411342532568926,0.2051514990077439,0.052899727044169294,0.024065414628493972,-0.8436214164528245,-1.0047452845442992,0.18740730675194361,-0.9914371403524493,0.07951601542786974,-0.6370343967290576,0.012975294468618857,0.4455616261683867,0.032673871245977794,0.13934450069697227,-0.46457776531716627,0.032673871245977794,0.06398984720404449,0.2093239075612775,-0.3916256154225318,-0.42711399993413224,0.03293751075639407,-0.44485819218993244,0.24601513014796672,0.11964592391961333,0.030719486724419005,-0.40493375961438194,-0.6037640362494322,0.032673871245977794,-0.8280952482289995,0.1851892827199686,0.13934450069697227,0.18482759880092237,0.27425819599340756,-0.8239228396754656,-0.797042911781349,0.004103198340718751,-0.8084947158602708,0.2820834725137412,0.4258630493910279,0.8556786101015703,1.0135062683662348,0.035155534788369094,-0.36722735107080656,0.010757270436643889,-1.0113993566402244,0.2051514990077439,0.032673871245977794,-0.2907569460757335,-0.8613656087086247,0.041809606884294206,0.18055443516679856,0.32749077276080824,-0.14067811505926434,-1.0005728759907653,0.4920355029593465,-0.4990687876698711,0.032673871245977794,0.2440607456264079,0.25802239185609827,-0.6273174530346948,0.2539480277111944,0.13934450069697227,0.22031598331252278,0.041809606884294206,0.21809795928054776,0.07286194333194462,0.032673871245977794,0.05068170301219434,0.032673871245977794,0.09060613558774484,0.13934450069697227,0.1711278330309049,0.032673871245977794,0.05068170301219434,0.02931784916011069,0.6040080243906284,0.19184335481589368,0.3767332978673269,-0.9914371403524493,-1.002527260512324,0.015193318500593835,-0.88576387306035,1.49208119053588,0.032673871245977794,0.07729799139589463,0.28278234012686976,-0.5031500177770792,0.4455616261683867,-0.5668123467042109,0.6032915225148402,0.03293751075639407,-0.6237262525372074,-1.0005728759907653,0.012975294468618857,0.33414484485673346,0.3372177549693592,0.012975294468618857,0.24601513014796672,-0.3604799778548889,0.032673871245977794,0.25733039020527393,0.019629366564543897,0.004103198340718751,0.2962959602349132,0.315994537012272,0.22511371529551916,0.47344329058519985,-0.5678275326610971,-0.39384363945450684,0.032673871245977794,0.028501462692444003,0.024065414628493972,0.1373901161754134,0.032673871245977794,0.19369969492882244,-0.5570853644956597,0.019629366564543897,0.2672493059407404,0.3167623365199795,0.13934450069697227,-0.8103510559731993,0.037373558820344197,0.5044956270328504,0.015193318500593835,0.24601513014796672,-0.28435752485425386,0.24601513014796672,0.1628973925431262,0.2539480277111944,0.27843060454694135,0.052899727044169294,-0.16951242747493964,-0.4626023844457327,0.24601513014796672,-0.3926408013794183,-0.1874200921588593,0.2095875470716941,-0.45151226428585756,0.3611159511971757,0.42292880597368304,0.032673871245977794,0.09000743505691303,-0.09228148739742548,1.2455697382365623,1.250005786300512,-0.9958731884163994,-0.49685076363789643,0.10835032784354502,-0.8480574645167747,0.24601513014796672,-0.5704936757698067,-0.6259442765691824,-0.14688406807845475,0.02628343866046896,0.13934450069697227,0.22853457740258273,0.19184335481589368,0.10391427977959498,-0.22633408206616104,0.24601513014796672,-0.23308145528207855,-0.8103510559731993,0.13934450069697227,0.055117751076144354,0.028501462692444003,0.032673871245977794,0.2093239075612775,-0.5904558920575819,0.008539246404668795,0.44360724164682797,0.24601513014796672,0.037373558820344197,0.10391427977959498,-0.10372642551404275,0.19369969492882244,0.315994537012272,0.0018851743087436835,0.008539246404668795,0.21845964319959402,-0.6562429438966958,-0.6105815807734768,0.037373558820344197,-0.411587831710307,0.07856249694029577,0.08617008752379476,0.6036463404715823,0.24601513014796672,-0.27965995995355414,0.0706439192999696,-0.002357688043335518,0.015193318500593835,0.032673871245977794,0.044027630916269184,-0.36491602591883887,0.0706439192999696,-0.2940907216098538,-0.9847830682565241,-0.5638396036738818,0.2093239075612775,0.07507996736391957,0.24601513014796672,-0.40076609434948574,0.009355632872335352,0.032673871245977794,0.032673871245977794,0.06398984720404449,0.257368889818258,-0.9870010922884992,0.03293751075639407,0.02628343866046896,0.21826084371037408,0.47752452069240786,1.3121104591958124,0.032673871245977794,-0.7172522102244713,0.13934450069697227,0.044027630916269184,0.009355632872335352,-0.5682756517378316,-0.8325312962929498,0.06329784555322021,0.024065414628493972,-0.7936220496742854,-0.7770875614558781,-0.3859867292834929,0.012975294468618857,0.012975294468618857,0.2983016423883908,0.19949478907071425,0.38623071742468956,0.024065414628493972,0.13934450069697227,0.4878981389764945,0.07951601542786974,0.5456228976834894,0.032673871245977794,0.8224082496219446,0.2051514990077439,0.037373558820344197,-0.5749297238337567,0.8933850186451457,-1.0005728759907653,0.010757270436643889,0.704528741742989,0.8068820813981197,0.032673871245977794,0.1711278330309049,-0.5504381583620391,0.008539246404668795,0.6480068211110827,0.032673871245977794,0.19406137884786862,0.032673871245977794,-0.8502754885487496,0.012975294468618857,0.315994537012272,0.2896418881389881,-0.5904558920575819,0.032673871245977794,-0.2893910340354873,0.017411342532568926,-0.1050964294276712,-0.5327872672262312,0.26845900997813316,0.21809795928054776,0.0462456549482443,-1.0224894768000992,-0.5727116998017819,0.021847390596518926,0.032673871245977794,0.06177182317206953,-0.5781661063745022,-0.37831747123068155,-0.7031831324872181,0.12165847203539523,0.035155534788369094,0.032673871245977794,0.0063212223726937435,0.02073837858053153,0.18297125868799366,1.7441440439383307,-0.4787517534253541,0.315994537012272,0.4362300842032287,0.010757270436643889,1.5031713106957554,-0.5106070269064806,0.048264879490999155,0.65684833346652,0.008539246404668795,0.0063212223726937435,-0.5620214806835184,-0.7031831324872181,-0.6679865660944111,0.032673871245977794,0.23518864949850785,0.09947823171564496,0.08173403945984468,0.06398984720404449,0.315994537012272,-0.07590729905525379,0.15785649246047992,-0.3911774963457971,0.19148167089684734,-0.6369342296467606,0.1285180200475134,-1.0091813326082495,0.052899727044169294,0.2428579075513193,0.20700783912067267,0.19184335481589368,-0.36407012847415904,0.6553773950827962,0.27843060454694135,-0.7146280706038353,0.030719486724419005,0.08173403945984468,0.10684193972505424,0.6864297315304466,0.35038751495634696,0.13934450069697227,0.039591582852319174,-0.87689177693245,-1.0291435488960246,0.041809606884294206,0.07729799139589463,-0.8595092685956961,0.010757270436643889,0.022663777064185445,0.315994537012272,-1.0113993566402244,-0.8347493203249244,0.5022776030008752,0.20413631305085744,0.032673871245977794,0.017411342532568926,0.017411342532568926,0.029610474708431585,0.48574969825435327,0.5522769697794143,0.032673871245977794,0.032673871245977794,0.2292792578867487,-0.7412443589875356,0.9341123882541732,-1.0136173806721993,0.035155534788369094,-0.19351870662557438,-0.6082000843133821,0.2095875470716941,-0.8281021141913038,0.14182616423936356,-0.4581663363817826,-0.9060877732671719,0.039591582852319174,0.017411342532568926,0.06258820963973595,-0.6422023927235594,0.028501462692444003,0.0063212223726937435,0.041809606884294206,0.5111496991287754,0.032673871245977794,0.05733577510811937,0.22409852933863278,0.3308800012171919,0.0018851743087436835,-0.580475308852803,0.24601513014796672,0.3173671885386758,-0.8939022465397709,0.037373558820344197,0.019629366564543897,0.07286194333194462,0.41692823591559786,0.24601513014796672,0.4990578424462036,0.0063212223726937435,0.23764719401735765,0.1541369462723182,0.13934450069697227,-0.4999168077882176,0.3852223974301074,-0.5575854326195686,0.22732487336518983,-0.1542498987615307,0.021847390596518926,0.021847390596518926,0.18297125868799366,0.7502108187256645,-0.2183089561783903,0.5766752341311397,0.13934450069697227,0.0018851743087436835,2.9845305578560923,0.24601513014796672,0.021847390596518926,0.052899727044169294,0.4483353903199902,0.21180557110366896,0.24627876965838294,-0.4004977115504319,0.041809606884294206,-0.3982796875184568,0.09877936410251618,-0.8525771284441815,0.02628343866046896,0.035155534788369094,0.3969591536655182,0.18297125868799366,0.052899727044169294,-0.669551088088546,0.024065414628493972,0.052899727044169294,0.044027630916269184,1.2389156661406369,0.034046522772381606,0.3275819512071342,0.19406137884786862,-0.36158846493176783,0.06177182317206953,0.6479762373386198,-0.05679310288582496,0.02628343866046896,0.05068170301219434,-0.6828592322803964,0.6302320450828195,0.13934450069697227,0.032673871245977794,-0.4281291858910189,0.13934450069697227,0.575472396056051,-0.6435883017426858,-0.6418475088784432,0.24601513014796672,0.017411342532568926,0.0063212223726937435,-0.01974019638008966,0.012975294468618857,0.032673871245977794,0.037373558820344197,0.49177186344893026,0.010757270436643889,0.0018851743087436835,0.42292880597368304,0.2562598778022707,0.004103198340718751,0.05955379914009452,2.807880521540792,0.257368889818258,-1.0047452845442992,-0.3648248474725132,1.057829581761387,0.1305305681632953,-0.23373495731991858,-0.6581061499719291,-0.792606863717399,-0.8502754885487496,-0.36722735107080656,0.22697005540844786,0.22269689177432422,0.24601513014796672,-0.5527494835140064,-1.0202714527681245,0.44611736628801524,2.9845305578560923,0.019629366564543897,0.23620383545539422,-0.6169720133589857,0.3792149614097181,0.032673871245977794,-0.6348163726970825,0.024065414628493972,-0.16618591636608546,0.33449966281347543,0.0706439192999696,-0.6147539893270105,0.38965844549405737,0.010757270436643889,0.008539246404668795,0.032673871245977794,-0.3068925831307461,-0.8347493203249245,0.039591582852319174,0.19184335481589368,0.028501462692443993,0.02184739059651893,0.9956196000321897,0.02628343866046895,0.4800973626811248,0.022400137553769125,0.4831634068314464,0.1440441882713386],\"xaxis\":\"x2\",\"yaxis\":\"y2\"}],                        {\"barmode\":\"overlay\",\"legend\":{\"title\":{\"font\":{\"color\":\"green\"},\"text\":\"variable\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"font\":{\"color\":\"black\"},\"text\":\"PCA Histogram\",\"x\":0.5,\"xanchor\":\"center\",\"yanchor\":\"top\"},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"_value\"}},\"xaxis2\":{\"anchor\":\"y2\",\"domain\":[0.0,1.0],\"matches\":\"x\",\"showgrid\":true,\"showticklabels\":false},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,0.7326],\"title\":{\"text\":\"density\"}},\"yaxis2\":{\"anchor\":\"x2\",\"domain\":[0.7426,1.0],\"matches\":\"y2\",\"showgrid\":false,\"showline\":false,\"showticklabels\":false,\"ticks\":\"\"}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('61e14da3-481f-4d8c-ad26-17abc7020ec9');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>"
                    ]
                },
                "mc_idx": 125,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 71,
                "o_idx": 1
            }
        },
        {
            "source": "pc1_outlier_idx = list(outlier_iqr(X_pca['PC1'])[0])",
            "mc_idx": 127,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "pca": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    72,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 127,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 72,
                "o_idx": 0
            }
        },
        {
            "source": "component = \"PC1\"\n\ndef highlight_min(s, props=''):\n    return np.where(s == np.nanmin(s.values), props, '')\n\ntrain_data.iloc[pc1_outlier_idx,:].style.set_properties(**{'background-color': 'Grey',\n                            'color': 'white',\n                            'border-color': 'darkblack'})",
            "mc_idx": 128,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".nanmin": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    73,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7cab22af50>"
                    ]
                },
                "mc_idx": 128,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 73,
                "o_idx": 0
            }
        },
        {
            "source": "titanic_df = pd.get_dummies(titanic_df, columns = ['Title','Sex', 'Embarked','Cabin_label'],drop_first=True)\ntitanic_df.head().T.style.set_properties(**{'background-color': 'lightyellow',\n                           'color': 'darkblack',\n                           'border-color': 'darkblack'})",
            "mc_idx": 131,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "columns": 1,
                    ".head": 1
                },
                "Data_Transform": {
                    ".get_dummies": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    74,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7caa4a2910>"
                    ]
                },
                "mc_idx": 131,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 74,
                "o_idx": 0
            }
        },
        {
            "source": "corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot')",
            "mc_idx": 133,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.1111111111111111,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".corr": 2,
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {
                    ".round": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c075_o001_image_24.png",
                    75,
                    1,
                    24
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Text(0.5, 1.0, 'Correlation Plot')",
                        "<Figure size 1008x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 133,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 75,
                "o_idx": 1
            }
        },
        {
            "source": "abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF')",
            "mc_idx": 135,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".sort_values": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c076_o000_image_25.png",
                    76,
                    0,
                    25
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 135,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 76,
                "o_idx": 0
            }
        },
        {
            "source": "def drop_features(df):\n    df.drop(['Name','Ticket','SibSp','Parch','Fare_class',\n             'Cabin','Cabin_label_G','Cabin_label_T',\n             'Cabin_label_F','FamilySize','Embarked_Q','Title_Rare'],\n            axis=1,\n            inplace=True)\n    return df\n\ntitanic_df = drop_features(titanic_df)",
            "mc_idx": 137,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    ".drop": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    77,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 137,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 77,
                "o_idx": 0
            }
        },
        {
            "source": "corr=titanic_df.corr().round(1)\n\nsns.set(font_scale=1.15)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr,annot=True,cmap='Blues',mask=mask,cbar=True)\nplt.title('Correlation Plot')",
            "mc_idx": 139,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.1111111111111111,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".corr": 2,
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {
                    ".round": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.heatmap": 1,
                    ".heatmap(": 1,
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c078_o001_image_26.png",
                    78,
                    1,
                    26
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Text(0.5, 1.0, 'Correlation Plot')",
                        "<Figure size 1008x720 with 2 Axes>"
                    ]
                },
                "mc_idx": 139,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 78,
                "o_idx": 1
            }
        },
        {
            "source": "abs(corr['Survived']).sort_values()[:-1].plot.barh()\nplt.gca().set_facecolor('#FFFFFF')",
            "mc_idx": 141,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".sort_values": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c079_o000_image_27.png",
                    79,
                    0,
                    27
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 141,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 79,
                "o_idx": 0
            }
        },
        {
            "source": "sns.set(font_scale=2)\nplt.figure(figsize=(14, 10))\nsns.set_style(\"white\")\nsns.set_palette(\"bright\")\nsns.pairplot(titanic_df,kind = 'reg',corner = True,palette ='Blues',hue='Survived' )",
            "mc_idx": 142,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6666666666666666,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.pairplot": 1,
                    "sns.": 4,
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c080_o002_image_28.png",
                    80,
                    2,
                    28
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<seaborn.axisgrid.PairGrid at 0x7f7cab6939d0>",
                        "<Figure size 1008x720 with 0 Axes>",
                        "<Figure size 3003.1x2880 with 152 Axes>"
                    ]
                },
                "mc_idx": 142,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 80,
                "o_idx": 2
            }
        },
        {
            "source": "tr_idx = titanic_df['Survived'].notnull()\ny_titanic_df = titanic_df[tr_idx]['Survived']\nX_titanic_df= titanic_df[tr_idx].drop('Survived',axis=1)\nX_test_df = titanic_df[~tr_idx].drop('Survived',axis=1)",
            "mc_idx": 145,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".notnull": 1
                },
                "Data_Transform": {
                    ".drop": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    81,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 145,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 81,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val=train_test_split(X_titanic_df, y_titanic_df, \\\n                                                  test_size=0.2, random_state=11)",
            "mc_idx": 146,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.2,
                "Data_Transform": 0.1,
                "Model_Train": 0.4,
                "Model_Evaluation": 0.1,
                "Model_Interpretation": 0.1,
                "Hyperparameter_Tuning": 0.2,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1,
                    ".mode": 1
                },
                "Data_Transform": {
                    ".mod": 1
                },
                "Model_Train": {
                    "train_test_split": 2,
                    "model": 1,
                    "model_selection": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "train_test_split": 2
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    82,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 146,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 82,
                "o_idx": 0
            }
        },
        {
            "source": "y_train.names='Survived'\ntrain_data = pd.concat([X_train,y_train],axis=1)\ny_val.names='Survived'\nval_data = pd.concat([X_val,y_val],axis=1)",
            "mc_idx": 147,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".concat(": 2,
                    ".concat": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    83,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 147,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 83,
                "o_idx": 0
            }
        },
        {
            "source": "tr_idx = titanic_df['Survived'].notnull()\ntrain_final = titanic_df[tr_idx]",
            "mc_idx": 148,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".notnull": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    84,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 148,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 84,
                "o_idx": 0
            }
        },
        {
            "source": "X_train.shape",
            "mc_idx": 150,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "shape": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    85,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "(712, 16)"
                    ]
                },
                "mc_idx": 150,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 85,
                "o_idx": 0
            }
        },
        {
            "source": "mapper = umap.UMAP().fit(X_train)\numap.plot.points(mapper, labels=y_train, theme='fire')",
            "mc_idx": 152,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    ".fit(": 1
                },
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c086_o001_image_29.png",
                    86,
                    1,
                    29
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<AxesSubplot:>",
                        "<Figure size 800x800 with 1 Axes>"
                    ]
                },
                "mc_idx": 152,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 86,
                "o_idx": 1
            }
        },
        {
            "source": "all_cols = [cname for cname in X_titanic_df.columns]",
            "mc_idx": 156,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "columns": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    87,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 156,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 87,
                "o_idx": 0
            }
        },
        {
            "source": "from pycaret.classification import *\nclf1 = setup(data = train_final, \n             target = 'Survived',\n             preprocess = False,\n             numeric_features = all_cols,\n             silent=True)",
            "mc_idx": 157,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    88,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9509f490>"
                    ]
                },
                "mc_idx": 157,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 88,
                "o_idx": 0
            }
        },
        {
            "source": "top5 = compare_models(sort='Accuracy',n_select = 5,\n                      exclude = ['knn', 'svm','ridge','nb','dummy','qda','xgboost']\n                     )",
            "mc_idx": 159,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1,
                    "ridge": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    89,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9d26dbd0>"
                    ]
                },
                "mc_idx": 159,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 89,
                "o_idx": 0
            }
        },
        {
            "source": "top5",
            "mc_idx": 160,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    90,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "[LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,\n                importance_type='split', learning_rate=0.1, max_depth=-1,\n                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,\n                random_state=8055, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                subsample=1.0, subsample_for_bin=200000, subsample_freq=0),\n GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n                            learning_rate=0.1, loss='deviance', max_depth=3,\n                            max_features=None, max_leaf_nodes=None,\n                            min_impurity_decrease=0.0, min_impurity_split=None,\n                            min_samples_leaf=1, min_samples_split=2,\n                            min_weight_fraction_leaf=0.0, n_estimators=100,\n                            n_iter_no_change=None, presort='deprecated',\n                            random_state=8055, subsample=1.0, tol=0.0001,\n                            validation_fraction=0.1, verbose=0,\n                            warm_start=False),\n <catboost.core.CatBoostClassifier at 0x7f7c9d371110>,\n LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n                    intercept_scaling=1, l1_ratio=None, max_iter=1000,\n                    multi_class='auto', n_jobs=None, penalty='l2',\n                    random_state=8055, solver='lbfgs', tol=0.0001, verbose=0,\n                    warm_start=False),\n LinearDiscriminantAnalysis(n_components=None, priors=None, shrinkage=None,\n                            solver='svd', store_covariance=False, tol=0.0001)]"
                    ]
                },
                "mc_idx": 160,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 90,
                "o_idx": 0
            }
        },
        {
            "source": "catboost = create_model('catboost')\nrf = create_model('rf')\nlightgbm = create_model('lightgbm')\n#mlp = create_model('mlp')\ngbc = create_model('gbc')\nlda = create_model('lda')\nlr = create_model('lr')",
            "mc_idx": 162,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 7
                },
                "Model_Evaluation": {
                    "model": 7
                },
                "Model_Interpretation": {
                    "model": 7
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    91,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9d4c7950>"
                    ]
                },
                "mc_idx": 162,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 91,
                "o_idx": 0
            }
        },
        {
            "source": "interpret_model(catboost)",
            "mc_idx": 164,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "interpret_model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c092_o001_image_30.png",
                    92,
                    1,
                    30
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "\nUser settings:\n\n   KMP_AFFINITY=granularity=fine,verbose,compact,1,0\n   KMP_BLOCKTIME=0\n   KMP_DUPLICATE_LIB_OK=True\n   KMP_INIT_AT_FORK=FALSE\n   KMP_SETTINGS=1\n   KMP_WARNINGS=0\n\nEffective settings:\n\n   KMP_ABORT_DELAY=0\n   KMP_ADAPTIVE_LOCK_PROPS='1,1024'\n   KMP_ALIGN_ALLOC=64\n   KMP_ALL_THREADPRIVATE=128\n   KMP_ATOMIC_MODE=2\n   KMP_BLOCKTIME=0\n   KMP_CPUINFO_FILE: value is not defined\n   KMP_DETERMINISTIC_REDUCTION=false\n   KMP_DEVICE_THREAD_LIMIT=2147483647\n   KMP_DISP_NUM_BUFFERS=7\n   KMP_DUPLICATE_LIB_OK=true\n   KMP_ENABLE_TASK_THROTTLING=true\n   KMP_FORCE_REDUCTION: value is not defined\n   KMP_FOREIGN_THREADS_THREADPRIVATE=true\n   KMP_FORKJOIN_BARRIER='2,2'\n   KMP_FORKJOIN_BARRIER_PATTERN='hyper,hyper'\n   KMP_GTID_MODE=3\n   KMP_HANDLE_SIGNALS=false\n   KMP_HOT_TEAMS_MAX_LEVEL=1\n   KMP_HOT_TEAMS_MODE=0\n   KMP_INIT_AT_FORK=true\n   KMP_LIBRARY=throughput\n   KMP_LOCK_KIND=queuing\n   KMP_MALLOC_POOL_INCR=1M\n   KMP_NUM_LOCKS_IN_BLOCK=1\n   KMP_PLAIN_BARRIER='2,2'\n   KMP_PLAIN_BARRIER_PATTERN='hyper,hyper'\n   KMP_REDUCTION_BARRIER='1,1'\n   KMP_REDUCTION_BARRIER_PATTERN='hyper,hyper'\n   KMP_SCHEDULE='static,balanced;guided,iterative'\n   KMP_SETTINGS=true\n   KMP_SPIN_BACKOFF_PARAMS='4096,100'\n   KMP_STACKOFFSET=64\n   KMP_STACKPAD=0\n   KMP_STACKSIZE=8M\n   KMP_STORAGE_MAP=false\n   KMP_TASKING=2\n   KMP_TASKLOOP_MIN_TASKS=0\n   KMP_TASK_STEALING_CONSTRAINT=1\n   KMP_TEAMS_THREAD_LIMIT=4\n   KMP_TOPOLOGY_METHOD=all\n   KMP_USE_YIELD=1\n   KMP_VERSION=false\n   KMP_WARNINGS=false\n   OMP_AFFINITY_FORMAT='OMP: pid %P tid %i thread %n bound to OS proc set {%A}'\n   OMP_ALLOCATOR=omp_default_mem_alloc\n   OMP_CANCELLATION=false\n   OMP_DEFAULT_DEVICE=0\n   OMP_DISPLAY_AFFINITY=false\n   OMP_DISPLAY_ENV=false\n   OMP_DYNAMIC=false\n   OMP_MAX_ACTIVE_LEVELS=1\n   OMP_MAX_TASK_PRIORITY=0\n   OMP_NESTED: deprecated; max-active-levels-var=1\n   OMP_NUM_THREADS: value is not defined\n   OMP_PLACES: value is not defined\n   OMP_PROC_BIND='intel'\n   OMP_SCHEDULE='static'\n   OMP_STACKSIZE=8M\n   OMP_TARGET_OFFLOAD=DEFAULT\n   OMP_THREAD_LIMIT=2147483647\n   OMP_WAIT_POLICY=PASSIVE\n   KMP_AFFINITY='verbose,warnings,respect,granularity=fine,compact,1,0'\n\n",
                        "<Figure size 576x568.8 with 2 Axes>"
                    ]
                },
                "mc_idx": 164,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 92,
                "o_idx": 1
            }
        },
        {
            "source": "interpret_model(rf)",
            "mc_idx": 165,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "interpret_model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c093_o000_image_31.png",
                    93,
                    0,
                    31
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x568.8 with 2 Axes>"
                    ]
                },
                "mc_idx": 165,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 93,
                "o_idx": 0
            }
        },
        {
            "source": "interpret_model(lightgbm)",
            "mc_idx": 166,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Interpretation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1,
                    "interpret_model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c094_o000_image_32.png",
                    94,
                    0,
                    32
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x568.8 with 2 Axes>"
                    ]
                },
                "mc_idx": 166,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 94,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_rf = tune_model(rf, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 169,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    95,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca965e510>"
                    ]
                },
                "mc_idx": 169,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 95,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_lightgbm = tune_model(lightgbm, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 170,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    96,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca8b54190>"
                    ]
                },
                "mc_idx": 170,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 96,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_catboost = tune_model(catboost, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 171,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    97,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c9d266950>"
                    ]
                },
                "mc_idx": 171,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 97,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_gbc = tune_model(gbc, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 172,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    98,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca95a1c50>"
                    ]
                },
                "mc_idx": 172,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 98,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_lda = tune_model(lda, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 173,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    99,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca7877450>"
                    ]
                },
                "mc_idx": 173,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 99,
                "o_idx": 0
            }
        },
        {
            "source": "tuned_lr = tune_model(lr, optimize = 'Accuracy',early_stopping = True)",
            "mc_idx": 174,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Hyperparameter_Tuning",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 0.5,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 1.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {
                    "early_stopping": 1,
                    "tune_model": 1
                },
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    100,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca6670410>"
                    ]
                },
                "mc_idx": 174,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 100,
                "o_idx": 0
            }
        },
        {
            "source": "# stack top5 models\nstack_model = stack_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], meta_model = top5[0] ,optimize = 'Accuracy')",
            "mc_idx": 176,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.75,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "stack": 3
                },
                "Model_Train": {
                    "model": 4
                },
                "Model_Evaluation": {
                    "model": 4
                },
                "Model_Interpretation": {
                    "model": 4
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    101,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca2950610>"
                    ]
                },
                "mc_idx": 176,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 101,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot='boundary')",
            "mc_idx": 177,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.5,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "stack": 1
                },
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c102_o000_image_33.png",
                    102,
                    0,
                    33
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 177,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 102,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(stack_model, plot = 'auc')",
            "mc_idx": 179,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.5,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "stack": 1
                },
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c103_o000_image_34.png",
                    103,
                    0,
                    34
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 179,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 103,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(stack_model, plot='confusion_matrix')",
            "mc_idx": 180,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 0.25,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {
                    "stack": 1
                },
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c104_o000_image_35.png",
                    104,
                    0,
                    35
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 180,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 104,
                "o_idx": 0
            }
        },
        {
            "source": "blend_soft = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'soft')",
            "mc_idx": 182,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    105,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7c95154c50>"
                    ]
                },
                "mc_idx": 182,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 105,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot='boundary')",
            "mc_idx": 183,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c106_o000_image_36.png",
                    106,
                    0,
                    36
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 183,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 106,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(blend_soft, plot = 'auc')",
            "mc_idx": 185,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c107_o000_image_37.png",
                    107,
                    0,
                    37
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 185,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 107,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(blend_soft, plot='confusion_matrix')",
            "mc_idx": 186,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 0.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.3333333333333333,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c108_o000_image_38.png",
                    108,
                    0,
                    38
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 186,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 108,
                "o_idx": 0
            }
        },
        {
            "source": "blend_hard = blend_models(estimator_list = [lr,rf,lightgbm,catboost,gbc,lda], optimize = 'Accuracy',method = 'hard')",
            "mc_idx": 188,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    109,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7ca829b910>"
                    ]
                },
                "mc_idx": 188,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 109,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(10, 10))\nplot_model(blend_hard, plot='boundary')",
            "mc_idx": 189,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c110_o000_image_39.png",
                    110,
                    0,
                    39
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x720 with 1 Axes>"
                    ]
                },
                "mc_idx": 189,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 110,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(blend_hard, plot='confusion_matrix')",
            "mc_idx": 191,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.3333333333333333,
                "Data_Transform": 0.0,
                "Model_Train": 0.3333333333333333,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.3333333333333333,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c111_o000_image_40.png",
                    111,
                    0,
                    40
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 191,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 111,
                "o_idx": 0
            }
        },
        {
            "source": "cali_model = calibrate_model(blend_soft)",
            "mc_idx": 193,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    112,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<pandas.io.formats.style.Styler at 0x7f7caae86790>"
                    ]
                },
                "mc_idx": 193,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 112,
                "o_idx": 0
            }
        },
        {
            "source": "final_model = finalize_model(cali_model)",
            "mc_idx": 195,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {
                    "model": 3
                },
                "Model_Evaluation": {
                    "model": 3
                },
                "Model_Interpretation": {
                    "model": 3
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    113,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 195,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 113,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='boundary')",
            "mc_idx": 197,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Train",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.0,
                "Model_Train": 1.0,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 1.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c114_o000_image_41.png",
                    114,
                    0,
                    41
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 197,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 114,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(8, 8))\nplot_model(final_model, plot='confusion_matrix')",
            "mc_idx": 198,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 0.0,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {
                    "model": 2
                },
                "Model_Evaluation": {
                    "confusion_matrix": 2,
                    "model": 2
                },
                "Model_Interpretation": {
                    "model": 2
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0073_c115_o000_image_42.png",
                    115,
                    0,
                    42
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 576x576 with 1 Axes>"
                    ]
                },
                "mc_idx": 198,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 115,
                "o_idx": 0
            }
        },
        {
            "source": "last_prediction = final_model.predict(X_test_df)\nsubmission_data['Survived'] = last_prediction.astype(int)\nsubmission_data.to_csv('submission.csv', index = False)",
            "mc_idx": 201,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Model_Evaluation",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.5,
                "Model_Evaluation": 1.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 1.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".astype(": 1
                },
                "Model_Train": {
                    "model": 1
                },
                "Model_Evaluation": {
                    "model": 1,
                    ".predict(": 1
                },
                "Model_Interpretation": {
                    "model": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {
                    ".to_csv(": 1,
                    "to_csv": 1
                },
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    116,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 201,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 116,
                "o_idx": 0
            }
        }
    ],
    "markdown_cells": [
        {
            "source": "--------------------------\n# Introduction\n\n![](https://c.tenor.com/csSu8i3jaRQAAAAC/titanic-sinking.gif)\n\nPicture Credit: https://c.tenor.com\n\n",
            "mc_idx": 1,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Missing Values\n\n> For various reasons, many real world datasets contain missing values, often encoded as blanks, NaNs or other placeholders. Such datasets however are incompatible with scikit-learn estimators which assume that all values in an array are numerical, and that all have and hold meaning. A basic strategy to use incomplete datasets is to discard entire rows and/or columns containing missing values. However, this comes at the price of losing data which may be valuable (even though incomplete). A better strategy is to impute the missing values, i.e., to infer them from the known part of the data. \n\nReference: https://scikit-learn.org/stable/",
            "mc_idx": 2,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The first projects most people start with are probably titanic. However, As I think, titatic datasets are not easy.\nThe reason for thinking like this is as follows.\n* Missing Values: There are many missing values of features that are considered important for survivor judgment, such as Age and Cabin.\n* Small Dataset: Because the dataset is small, it seems difficult to train the model sufficiently.\n\nIn this notebook, we will focus on imputation of missing values and ensemble methods to improve performance.\nIn addition, we will create new derivative variables if necessary for each feature.",
            "mc_idx": 3,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------------------------------\n# Setting up",
            "mc_idx": 4,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Utility Function",
            "mc_idx": 7,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Loading Dataset",
            "mc_idx": 12,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "PassengerId has nothing to do with survior. It can be removed immediately.",
            "mc_idx": 16,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "--------------------------------------------\n# EDA",
            "mc_idx": 18,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Checking Data Type",
            "mc_idx": 19,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Checking Target Value Imbalace",
            "mc_idx": 21,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Although the survivor is small, the imbalance is not large enough for over/under sampling.\nIf you want to know more about over/under sampling, please refer to the notebook below.\n\n[Over/Under sampling](https://www.kaggle.com/ohseokkim/preprocessing-resolving-imbalance-by-sampling)",
            "mc_idx": 24,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Checking and Handling Missing Values",
            "mc_idx": 25,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \nThere are missing values for Age, Cabin, Fare, and Embarked features. In particular, there are many missing values for Age and Cabin features. Let's think about how to handle these missing values.",
            "mc_idx": 28,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------\n# Checking features",
            "mc_idx": 29,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Cabin\n\n![](https://www.retrograph.com/wp-content/uploads/thumbnails/s5RGL181.jpg)\n\nPicture Credit: https://www.retrograph.com\n\nLooking at the picture above, it can be hypothesized that the survival rate will be different depending on the location of the cabin.\n\nIf you are the captain or sailor of titanic, you will be able to explain the relationship between cabin and survival rate well. If you have some kind of domain knowledge, you will be able to process that feature well. However, in the absence of such domain knowledge, we must examine the corresponding features in detail and process them to be suitable for machine learning.",
            "mc_idx": 30,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The first letter is an uppercase letter of the alphabet. Let's analyze it a bit more using this.",
            "mc_idx": 32,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \nMissing values are 1014. This is used to determine whether the cabin is owned or not. To do this, create a new derived variable.",
            "mc_idx": 34,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "------------------------------------------------------------------------\n## Has_Cabin ( Derived variable )\n\n**Question: Is there a difference in the survival rate between passengers with and without cabin?**",
            "mc_idx": 35,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\n* Cases with cabins have more survivors compared to cases without cabins. It is likely that the new derived variable will be helpful in the classification of survivors.",
            "mc_idx": 38,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------------\n## Cabin_Label ( Derived variable )",
            "mc_idx": 39,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "------------------------------------------------\n## Parch ( Number of parents/children )",
            "mc_idx": 42,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "----------------------------------------------------------------------\n## SibSp ( Number of siblings/spouses )",
            "mc_idx": 44,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------------------\n## FamilySize ( Derived variable )",
            "mc_idx": 46,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**Question: Does the number of accompanying family members affect the survival rate??**",
            "mc_idx": 47,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\nWhen FamilySize is 1, the survival rate is significantly lower than in other cases. I think it will be helpful when the model is learning.",
            "mc_idx": 50,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "______________________________________________\n## Alone ( Derived variable )",
            "mc_idx": 51,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\nThose who were alone died more than those who were not alone. The derived feature seems to be helpful for model training.",
            "mc_idx": 54,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "________________________________________________________\n## Name\n\nIt seems difficult to find the feature directly related to the survivor.",
            "mc_idx": 55,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "English honistic looks. Let's check some more.",
            "mc_idx": 57,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n\nThe mortality rate is higher in the case of Mr. I think it will help with learning.",
            "mc_idx": 62,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n* In the case of Mr, the number of survivors is small.\n* In the case of Mrs and Miss, there are many survivors.\n\nI think it will be helpful in judging survivors using this.\nHowever, it seems difficult to find the relationship between age and title from the above distributions. Therefore, it seems difficult to use this to fill in the missing values of age.",
            "mc_idx": 64,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Has_Age ( Derived variable )\n\n**Question: Does the survival rate make a difference with and without age records?|**",
            "mc_idx": 65,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Let's check the distribution first to fill in the appropriate values.",
            "mc_idx": 67,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### An Extension To Imputation\n\n> Imputation is the standard approach, and it usually works well. However, imputed values may be systematically above or below their actual values (which weren't collected in the dataset). Or rows with missing values may be unique in some other way. In that case, your model would make better predictions by considering which values were originally missing.\n\n![](https://i.imgur.com/UWOyg4a.png)\n\n> In this approach, we impute the missing values, as before. And, additionally, for each column with missing entries in the original dataset, we add a new column that shows the location of the imputed entries.\n> \n> In some cases, this will meaningfully improve results. In other cases, it doesn't help at all.\n\nRef: https://www.kaggle.com/alexisbcook/missing-values",
            "mc_idx": 68,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \n* More than the case where Age is not missing.\n* Cases in which age is not missed have a higher survival rate than cases in which age is omitted.",
            "mc_idx": 71,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------------------------------------------\n## Age",
            "mc_idx": 72,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Looking at the skewness, it is skewed to one side.",
            "mc_idx": 75,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Imputting Missing Values",
            "mc_idx": 76,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Univariate feature imputation\n\n> The SimpleImputer class provides basic strategies for imputing missing values. Missing values can be imputed with a provided constant value, or using the statistics (mean, median or most frequent) of each column in which the missing values are located. This class also allows for different missing values encodings.\n\nRef: https://scikit-learn.org/stable/",
            "mc_idx": 77,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Multivariate feature imputation\n\n> A more sophisticated approach is to use the IterativeImputer class, which models each feature with missing values as a function of other features, and uses that estimate for imputation. It does so in an iterated round-robin fashion: at each step, a feature column is designated as output y and the other feature columns are treated as inputs X. A regressor is fit on (X, y) for known y. Then, the regressor is used to predict the missing values of y. This is done for each feature in an iterative fashion, and then is repeated for max_iter imputation rounds. The results of the final imputation round are returned.\n\nRef: https://scikit-learn.org/stable/",
            "mc_idx": 81,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Nearest neighbors imputation\n\n> The KNNImputer class provides imputation for filling in missing values using the k-Nearest Neighbors approach. By default, a euclidean distance metric that supports missing values, nan_euclidean_distances, is used to find the nearest neighbors. Each missing feature is imputed using values from n_neighbors nearest neighbors that have a value for the feature. The feature of the neighbors are averaged uniformly or weighted by distance to each neighbor. If a sample has more than one feature missing, then the neighbors for that sample can be different depending on the particular feature being imputed. When the number of available neighbors is less than n_neighbors and there are no defined distances to the training set, the training set average for that feature is used during imputation. If there is at least one neighbor with a defined distance, the weighted or unweighted average of the remaining neighbors will be used during imputation. If a feature is always missing in training, it is removed during transform. \n\nRef: https://scikit-learn.org/stable/",
            "mc_idx": 85,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Filling using other features\n\nAnother conceivable strategy is to use other features to fill in the missing values \u200b\u200bof the Age feature. Consider how to fill the Age feature using the Title feature above.",
            "mc_idx": 89,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Scaling \nLooking at the above result, the skewness was 0.4559, not skewed to one side. Let's try linear scaling.\n\nSelect RobustScaler during linear scaling. In this way, the influence of outliers can be minimized.\n\n> This is a technique that minimizes the influence of outliers.  \n> Since the median and IQR (interquartile range) are used, it can be confirmed that the same values are more widely distributed after standardization when compared with the StandardScaler.\n> \n> $\ud835\udc3c\ud835\udc44\ud835\udc45=\ud835\udc443\u2212\ud835\udc441$: That is, it deals with values in the 25th and 75th percentiles.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling)",
            "mc_idx": 95,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**Let imputation be done with KNN. The remaining Age-related features are removed.**",
            "mc_idx": 99,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n## Fare\n\nFirst, let's check the distribution for that value.",
            "mc_idx": 101,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**It is skewed to one side. Consider nonlinear scaling. In this case, we will use QuantileTransformer.**\n\n> The quantile function ranks or smooths out the relationship between observations and can be mapped onto other distributions, such as the uniform or normal distribution.\n\nIf you want to know more about Scaling, please refer to the notebook below.\n\n[NotebooK](https://www.kaggle.com/ohseokkim/preprocessing-linear-nonlinear-scaling)",
            "mc_idx": 104,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Let's try Bining.",
            "mc_idx": 108,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------\n## Embarked",
            "mc_idx": 112,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \n* Many passengers on board at S port died.\n* For passengers boarding at port C, the survival rate is higher than the mortality rate.",
            "mc_idx": 114,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n    \n* Among the passengers who boarded at S port, the proportion of males is higher than that of other ports.",
            "mc_idx": 116,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Let's impute missing value for Embarked feature. The strategy for Embarked's missing values is to choose 'most_frequent'.",
            "mc_idx": 117,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "------------------------------------------------------------------------------------------\n# Checking Missing Value Again\nFinally, let's check the missing values.",
            "mc_idx": 119,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**OK! There is no missing values at the train dataset.**",
            "mc_idx": 121,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "--------------------------------------------------------------------------------------------------\n# Detecting Outliers by PCA\n\n![](https://miro.medium.com/max/602/0*PnqMbZEdnuL9yHuo.png)\n\nPicture Credit: https://miro.medium.com\n\nThe more features, the higher the dimension. When projecting to a lower dimension through PCA, new insights can be gained. PCA can effectively detect outliers.\n\nPC 1 has the largest variance in the dataset distribution. That is, the outlier in PC 1 is very likely to be real outlier",
            "mc_idx": 122,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**Let's check out outliers in PC 1**",
            "mc_idx": 126,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n* The Sage family started from S port, there was no Cabin, and the ages were not recorded, and they appear to be a poor and pitiful family with a pclass 3 rating.\n* All three females in this family using the Miss title have died.\n\n**The last sad news is that the training dataset is small, so it seems difficult to remove even if the above data are outliers.    \nNevertheless, fortunately, this problem is not a regression problem, but a classification problem. If it is a regression problem, outliers should be removed.**",
            "mc_idx": 129,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "------------------------------------------------------\n# Encoding\n\nLet's perform encoding on categorical features.\n\nWhen only tree-based models are used, label encoding is sufficient. However, we will use one-hot encoding for model extension in the future.\n\nIf you want to know more about the encoding of categorical features, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/preprocessing-encoding-categorical-data)",
            "mc_idx": 130,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------\n# Checking Correlation",
            "mc_idx": 132,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation and Decision:\n    \n* There is a large correlation between FamilySize and SibSp and Parch. Since the derived variable FamilySize is made of SibSp and Parch, SibSp and Parch are removed.\n* The relationship between Cabin and Has_Cabin is high. Therefore, the derived variable Has_Cabin is left and Cabin is removed.\n* The relationship between Fare and Fare_class is high. Fare is selected because skewness is removed by nonlinear transform of the Fare feature.\n* There are many features that are not related to the survived value.",
            "mc_idx": 134,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------------------------------\n# Selecting Features\n\nFeatures that are not helpful in judging the above heatmap and survivors, or that have other derived variables, will be removed.",
            "mc_idx": 136,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**Let's check the correlation of each feature.**",
            "mc_idx": 138,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Let's check the correlation between the target value (Suvived) and other features.",
            "mc_idx": 140,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "**OK! Looking at the heatmap and pairplot above, it seems that the features are properly selected.**",
            "mc_idx": 143,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Spliting Train/Validation/Test Data",
            "mc_idx": 144,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "----------------------------------------------------------------------------\n# Visualizing Training Dataset after Dimension Reduction",
            "mc_idx": 149,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The training dataset has 16 dimensions. To show the approximate distribution of the training dataset preprocessed above, let's reduce the dimension to two dimensions and draw it.",
            "mc_idx": 151,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "As shown in the figure above, when viewed in two dimensions, there are quite a few areas where the survivors and the dead overlap. First, let's feel for a moment that the task of classification is a difficult task before learning the model. Our model does this difficult job!\n\n**Thanks models!**",
            "mc_idx": 153,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------------------\n# Ensemble\n\n![](https://media3.giphy.com/media/26xBvMWzk7FQr54Sk/giphy.gif)\n\nPicture Credit: https://media3.giphy.com\n\n\n> Empirically, ensembles tend to yield better results when there is a significant diversity among the models.Many ensemble methods, therefore, seek to promote diversity among the models they combine.Although perhaps non-intuitive, more random algorithms (like random decision trees) can be used to produce a stronger ensemble than very deliberate algorithms (like entropy-reducing decision trees).Using a variety of strong learning algorithms, however, has been shown to be more effective than using techniques that attempt to dumb-down the models in order to promote diversity. It is possible to increase diversity in the training stage of the model using correlation for regression tasks or using information measures such as cross entropy for classification tasks\n\nRef: https://en.wikipedia.org/",
            "mc_idx": 154,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Setting up models\n\n> This function trains and evaluates performance of all estimators available in the model library using cross validation. The output of this function is a score grid with average cross validated scores.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 155,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Choosing top models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 158,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Creating Models\n\n> This function trains and evaluates the performance of a given estimator using cross validation. The output of this function is a score grid with CV scores by fold. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 161,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Interpreting Models\n\nThis function analyzes the predictions generated from a trained model. Most plots in this function are implemented based on the SHAP (SHapley Additive exPlanations).\n\n> SHAP (SHapley Additive exPlanations) is a game theoretic approach to explain the output of any machine learning model. It connects optimal credit allocation with local explanations using the classic Shapley values from game theory and their related extensions\n\nRef: https://shap.readthedocs.io/en/latest/\n\n**If you want to know more about feature importance and SHAP, please refer to the notebook below.**\n\n[Notebook](https://www.kaggle.com/ohseokkim/explaning-machine-by-feature-importnace)",
            "mc_idx": 163,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<span style=\"color:Blue\"> Observation:\n* Among the features, if you look at Fare and Age_knn, the features are spread in a wide distribution of importance, and the colors are also spread from blue to red. \n* Each model is learning with the importance of different features. The diversity of these models seems to increase the performance of the ensemble model.\n* Title_Mr and Sex_male play an important role in how the model learns.",
            "mc_idx": 167,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# Tuning Hyperparameters\n\n> This function tunes the hyperparameters of a given estimator. The output of this function is a score grid with CV scores by fold of the best selected model based on optimize parameter. \n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html",
            "mc_idx": 168,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Stacking",
            "mc_idx": 175,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "In machine learning, it is important to determine the boundary. In particular, in tree-based models, it is more important to determine the boundary, because the process of creating a new leaf in the tree is also the process of determining the boundary.\nLooking at the above picture again, there are many overlapping points with the green dot indicating the survior and the blue dot indicating the non-survior. Determining the boundary in this situation would be a very difficult task.\nIf the feature engineer work was done well, the distribution of the two points to determine the boundary would have been well divided. However, the titanic dataset is difficult to do with some missing values \u200b\u200band a small dataset.\n\nLet's look again at the picture above.\nBoundary is not very clean. It can be judged that overfitting has occurred, and therefore it can be judged that it does not have generality.\n\nIf you want to know more about overfitting, please refer to the notebook below.\n\n[Notebook](https://www.kaggle.com/ohseokkim/overfitting-and-underfitting-eda)",
            "mc_idx": 178,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Soft Blending",
            "mc_idx": 181,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "It seems that the Boundary is set properly.",
            "mc_idx": 184,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Hard Blending",
            "mc_idx": 187,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Compared to the soft blending model, the boundary does not look clean.",
            "mc_idx": 190,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "-------------------------------------------------------------------------------------------------\n## Calibrating the final model\n\n> This function calibrates the probability of a given estimator using isotonic or logistic regression. \n",
            "mc_idx": 192,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "--------------------------------------------------\n# Finalizing the last model\n> This function trains a given estimator on the entire dataset including the holdout set.\n\nRef: https://pycaret.readthedocs.io/en/latest/api/classification.html\n\nThe blend_soft model is selected based on the above result. Finally, the model is tuned with the entire dataset.\n",
            "mc_idx": 194,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Checking the final model",
            "mc_idx": 196,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "---------------------------------------\n# Checking Last Results",
            "mc_idx": 199,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Considering above results, the soft blending model seems appropriate among ensemble models. Therefore, we use this model to make the final prediction with the test dataset.",
            "mc_idx": 200,
            "nb_idx": 73,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "sim_matrix": [],
    "cell_sim_matrix": [],
    "nb_order": [],
    "summary_data_VA": null
}