{
    "nb_idx": 61,
    "nb_name": "d0061",
    "filename": "titanic-eda-tutorial.ipynb",
    "filepath": "data/data_Kaggle/raw/titanic-eda-tutorial.ipynb",
    "source": "![MA_00079563_yvu84f.jpg](attachment:MA_00079563_yvu84f.jpg) \n <h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#1.-Introduction\" data-toc-modified-id=\"1.-Introduction-1\">1. Introduction</a></span></li><li><span><a href=\"#2.-Domain-information\" data-toc-modified-id=\"2.-Domain-information-2\">2. Domain information</a></span></li><li><span><a href=\"#3.-Loading-libraries:\" data-toc-modified-id=\"3.-Loading-libraries:-3\">3. Loading libraries:</a></span></li><li><span><a href=\"#4.-Loading-data\" data-toc-modified-id=\"4.-Loading-data-4\">4. Loading data</a></span></li><li><span><a href=\"#5.-First-look:-variables,-NAs\" data-toc-modified-id=\"5.-First-look:-variables,-NAs-5\">5. First look: variables, NAs</a></span><ul class=\"toc-item\"><li><span><a href=\"#5.1-Variables\" data-toc-modified-id=\"5.1-Variables-5.1\">5.1 Variables</a></span></li><li><span><a href=\"#5.2-Types-of-the-variables\" data-toc-modified-id=\"5.2-Types-of-the-variables-5.2\">5.2 Types of the variables</a></span></li><li><span><a href=\"#5.3-Check-data-for-NA\" data-toc-modified-id=\"5.3-Check-data-for-NA-5.3\">5.3 Check data for NA</a></span></li></ul></li><li><span><a href=\"#6.-Exploring-the-data\" data-toc-modified-id=\"6.-Exploring-the-data-6\">6. Exploring the data</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.1-Survivals---target-value\" data-toc-modified-id=\"6.1-Survivals---target-value-6.1\">6.1 Survivals - target value</a></span></li><li><span><a href=\"#6.2-AGE\" data-toc-modified-id=\"6.2-AGE-6.2\">6.2 AGE</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.2.1-Age-distribution\" data-toc-modified-id=\"6.2.1-Age-distribution-6.2.1\">6.2.1 Age distribution</a></span></li><li><span><a href=\"#6.2.2-Age-by-surviving-status\" data-toc-modified-id=\"6.2.2-Age-by-surviving-status-6.2.2\">6.2.2 Age by surviving status</a></span></li><li><span><a href=\"#6.2.3-Age-by-class\" data-toc-modified-id=\"6.2.3-Age-by-class-6.2.3\">6.2.3 Age by class</a></span></li><li><span><a href=\"#6.2.4-Age-vs-class-vs-gender\" data-toc-modified-id=\"6.2.4-Age-vs-class-vs-gender-6.2.4\">6.2.4 Age vs class vs gender</a></span></li></ul></li><li><span><a href=\"#6.3-What-is-in-the-name?\" data-toc-modified-id=\"6.3-What-is-in-the-name?-6.3\">6.3 What is in the name?</a></span></li><li><span><a href=\"#6.4-Cabin\" data-toc-modified-id=\"6.4-Cabin-6.4\">6.4 Cabin</a></span></li><li><span><a href=\"#6.5-Family\" data-toc-modified-id=\"6.5-Family-6.5\">6.5 Family</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.5.1-Calculate-family-size\" data-toc-modified-id=\"6.5.1-Calculate-family-size-6.5.1\">6.5.1 Calculate family size</a></span><li><span><a href=\"#6.5.2-Family-size-and-chanses-for-surviving\" data-toc-modified-id=\"6.5.2-Family-size-and-chanses-for-surviving-6.5.2\">6.5.2 Family size and chanses for surviving</a></span></li></ul></li><li><span><a href=\"#6.6-Class\" data-toc-modified-id=\"6.6-Class-6.6\">6.6 Class</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.6.1-Passengers-by-class\" data-toc-modified-id=\"6.6.1-Passengers-by-class-6.6.1\">6.6.1 Passengers by class</a></span></li><li><span><a href=\"#6.6.2-Class-vs-surviving-status\" data-toc-modified-id=\"6.6.2-Class-vs-surviving-status-6.6.2\">6.6.2 Class vs surviving status</a></span></li><li><span><a href=\"#6.6.3-Class-vs-surviving-status-vs-gender\" data-toc-modified-id=\"6.6.3-Class-vs-surviving-status-vs-gender-6.6.3\">6.6.3 Class vs surviving status vs gender</a></span></li><li><span><a href=\"#6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status\" data-toc-modified-id=\"6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status-6.6.4\">6.6.4 Class vs. Gender vs. Age -&gt; Surviving status</a></span></li></ul></li><li><span><a href=\"#6.7-Gender\" data-toc-modified-id=\"6.7-Gender-6.7\">6.7 Gender</a></span></li><li><span><a href=\"#6.8-Embarked\" data-toc-modified-id=\"6.8-Embarked-6.8\">6.8 Embarked</a></span></li><li><span><a href=\"#6.9-Fare\" data-toc-modified-id=\"6.9-Fare-6.9\">6.9 Fare</a></span></li></ul></li><li><span><a href=\"#7.-Conclusion\" data-toc-modified-id=\"7.-Conclusion-7\">7. Conclusion</a></span></li></ul></div> \n # 1. Introduction\nSince I am currently located in Belfast (the city in which the Titanic was built) for a year for my Master's degree, I could not get past this legendary Titanic competition! \n  \nThis notebook is the **first part** of my work and contains **EDA** (exploratory data analysis) and missing data research.\n\n\ud83c\udf89 \u2728 [** !!!!!! Second part with ML *solution* you can check here !!!!!**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial)\n\n*I collapsed all the cells with the code for easy viewing. If you are interested in viewing the code, you can click \"code\" button near the graph or fork my notebook to view the entire code.* \n # 2. Domain information\n[Titanic](https://en.wikipedia.org/wiki/Sinking_of_the_RMS_Titanic) was a British passenger liner operated by the White Star Line. Titanic was on its way from Southampton to New York City when it sank in the North Atlantic Ocean in the early morning hours of **15 April 1912** after Titanic collided with an iceberg. The ship carried **2224** people, considering passengers and crew aboard,**1514** of them died.  \n\nTitanic carried 16 wooden lifeboats and four collapsibles, which could accommodate 1,178 people, only one-third of Titanic's total capacity (and 53% of real number of passengers). At the time, lifeboats were intended to ferry survivors from a sinking ship to a rescuing ship\u2014not keep afloat the whole population or power them to shore. If the SS Californian would responded to Titanic's distress calls, the lifeboats may have been adequate to ferry the passengers to safety as planned, but it didn't happen and the only way to survive were to get on the lifeboat.\n\nThe main question of the competition is **\u201cwhat sorts of people were more likely to survive?\u201d** \n # 3. Loading libraries: \n\nList of libraries I am using in this kernel:\n* pandas - offers data structures and operations for manipulating numerical tables and time series. (imported as pd) [Documentation](https://pandas.pydata.org/)\n* seaborn - data visualization library based on matplotlib. [Documentation](https://seaborn.pydata.org/)\n* matplotlib.pyplot - to create some visualizations (imported as plt) [Documentation](https://matplotlib.org/tutorials/introductory/pyplot.html)\n* numpy - The fundamental package for scientific computing with Python. [Documentation](https://numpy.org/) \n import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np \n # 4. Loading data\nAs input information I have two CSV files:\n\n* **train.csv** - training part of the dataset, contains labels and information about passengers.\n* **test.csv** - testing part of the dataset, doesn't contain labels.\n\nIn this notebook I will use all available information (train + test datasets) to perform exploratory data analysis.  \n\n1. First, load both csv files into two DataFrames, using pandas read_csv method and check the shape of the loaded data: \n # path to train dataset\ntrain_path = '../input/titanic/train.csv'\n# path to test dataset\ntest_path = '../input/titanic/test.csv'\n\n# Read a comma-separated values (csv) file into pandas DataFrame\ntrain_data = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)\n\n# shape of tha data\nprint('Train shape: ', train_data.shape)\nprint('Test shape: ', test_data.shape) \n The training part contains information about 891 passengers, described by 12 variables, including 1 target variable.  \nThe testing part contains 418 observations, i.e information about passengers, described by 11 variables (the test dataset doesn't contain target value.)\n\n2. Combine test and train data into one \"all_data\" DataFrame.   \nTo do so, I create a sequence of DataFrame objects and use pandas concat method. Terget values of testing data in resulting dataset will be NaN.  \nCheck the shape of the result DataFrame and take a look at the first 4 rows: \n # create a sequence of DataFrame objects\nframes = [train_data, test_data]\n# Concatenate pandas objects along a particular axis \nall_data = pd.concat(frames, sort = False)\n# shape of the data\nprint('All data shape: ', all_data.shape)\n# Show first 4 rows of the concatenated DataFrame\nall_data.head(4) \n Overall, we have information about 1309 passengers. I am guessing, this dataset contains data only about passengers, not crew members (we know, that Titanic carried 2224 people). \n ## 5.2 Types of the variables \n Data types, non-null values count: \n all_data.info() \n Age and Fare are continuous numeric variables.  \nPclass is integer, but in fact it is categorical variable, represented by 3 numbers.  \nAfter previous manipulations, Survived variable has type 'float', it's not correct, since it's categorical variable too, but it will not influence my EDA process, so I will let it be float for now.\n \n # 5. First look: variables, NAs \n## 5.1 Variables\nFrom the data overview of the competition, we have a description of each variable:\n* PassengerId - unique identifier\n* Survived:\n        0 = No\n        1 = Yes\n* Pclass: Ticket class\n        1 = 1st, Upper\n        2 = 2nd, Middle\n        3 = 3rd, Lower\n* Name: full name with a title\n* Sex: gender\n* Age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n* Sibsp: Number of siblings / spouses aboard the Titanic. The dataset defines family relations in this way:\n        Sibling = brother, sister, stepbrother, stepsister\n        Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n* Parch: Number of parents / children aboard the Titanic. The dataset defines family relations in this way:\n        Parent = mother, father\n        Child = daughter, son, stepdaughter, stepson\n        Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket: Ticket number.\n* Fare: Passenger fare.\n* Cabin: Cabin number.\n* Embarked: Port of Embarkation:\n        C = Cherbourg\n        Q = Queenstown\n        S = Southampton \n ## 5.3 Check data for NA\nTo check the dataset for NAs I am using **isna()** dataframe function, which returns a boolean same-sized object indicating if the values are NA and then I am calculating the number of True values for each variable.   \nNA values for each dataframe (train, test, all) presented in the table below: \n #### check data for NA values\nall_data_NA = all_data.isna().sum()\ntrain_NA = train_data.isna().sum()\ntest_NA = test_data.isna().sum()\n\npd.concat([train_NA, test_NA, all_data_NA], axis=1, sort = False, keys = ['Train NA', 'Test NA', 'All NA']) \n There are overall 263 missing Age values, 1 missing Fare, 1014 NAs in Cabin variable, and 2 in Embarked variable.  \n418 NA in Survived variable due to the absence of this information in the test dataset. I will not impute these missings in the current notebook :) So, when I will use this variable for visualization, there will be information only for the training part of the data.\n\nIn this notebook I will do some missing data handling for the combined dataset. But in the second part of my work (ML solution) this should be done based on what we know only about training data, to avoid any data leakage. \n # 6. Exploring the data \n ## 6.1 Survivals - target value\nLet's calculate and visualise distribution of our target variable - 'Survived'.  \nA countplot of seaborn module is a very useful way to show the counts of observations in each category.  \nSince we have target only for the training part, these numbers don't include all passengers. \n # set size of the plot\nplt.figure(figsize=(6, 4.5)) \n\n# countplot shows the counts of observations in each categorical bin using bars.\n# x - name of the categorical variable\nax = sns.countplot(x = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\n# set the current tick locations and labels of the x-axis.\nplt.xticks( np.arange(2), ['drowned', 'survived'] )\n# set title\nplt.title('Overall survival (training dataset)',fontsize= 14)\n# set x label\nplt.xlabel('Passenger status after the tragedy')\n# set y label\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Survived'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v-40, str(v), horizontalalignment = 'center', size = 14, color = 'w', fontweight = 'bold')\n    \nplt.show() \n all_data['Survived'].value_counts(normalize = True) \n We have 891 passengers in train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived.  \nBut we know, that lifeboats could carry 53% of total passengers. \n ## 6.2 AGE\nWhat is the age of passengers, how it relates to the chances of survival, and how it changes depending on class and gender.\n### 6.2.1 Age distribution\nWe have 263 missing values:  \n* 177 missing in the training dataset \n* 86 in the test dataset\n\nOverall age distribution (seaborn distplot) and descriptive statistics: \n # set plot size\nplt.figure(figsize=(15, 3))\n\n# plot a univariate distribution of Age observations \nsns.distplot(all_data[(all_data[\"Age\"] > 0)].Age, kde_kws={\"lw\": 3}, bins = 50)\n\n# set titles and labels\nplt.title('Distrubution of passengers age (all data)',fontsize= 14)\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n# clean layout\nplt.tight_layout() \n # Descriptive statistics include those that summarize the central tendency, \n# dispersion and shape of a dataset\u2019s distribution, excluding NaN values.\nage_distr = pd.DataFrame(all_data['Age'].describe())\n# Transpose index and columns.\nage_distr.transpose() \n The distribution of Age is slightly right skewed. The Age vary from about **0.17** year to **80** years with mean = 29.88, and there don't seem to be any obvious outliers, but we will check it. \n ### 6.2.2 Age by surviving status\nDid age had a big influence on chances to survive?  \nTo visualize two age distributions, grouped by surviving status I am using boxlot and stripplot showed together: \n plt.figure(figsize=(15, 3))\n\n# Draw a box plot to show Age distributions with respect to survival status.\nsns.boxplot(y = 'Survived', x = 'Age', data = train_data,\n     palette=[\"#3f3e6fd1\", \"#85c6a9\"], fliersize = 0, orient = 'h')\n\n# Add a scatterplot for each category.\nsns.stripplot(y = 'Survived', x = 'Age', data = train_data,\n     linewidth = 0.6, palette=[\"#3f3e6fd1\", \"#85c6a9\"], orient = 'h')\n\nplt.yticks( np.arange(2), ['drowned', 'survived'])\nplt.title('Age distribution grouped by surviving status (train data)',fontsize= 14)\nplt.ylabel('Passenger status after the tragedy')\nplt.tight_layout() \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe()) \n The mean age of survived passenger is 28.34 which on 2.28 smaller than the mean age of drowned passengers (only passengers we know survived status for).   \nThe minimum age of drowned passengers is 1 y.o which is very sad.  \nThe maximum age of survived passenger is 80 y.o, let's check if there is no mistake. \n all_data[all_data['Age'] == max(all_data['Age'] )] \n Actually, Mr Algernon Henry Barkworth was born on 4 June 1864.He was 48 in 1912 and died in 1945 at 80 y.o.\n \n train_data.loc[train_data['PassengerId'] == 631, 'Age'] = 48\nall_data.loc[all_data['PassengerId'] == 631, 'Age'] = 48 \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe()) \n Let's update our description:  \nThe mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for).=\nThe maximum age of survived passenger is 63 y.o.  \nIt looks like there is a slightly bigger chance to survive for younger people. \n ### 6.2.3 Age by class\nThere I will compare three age distributions, grouped by class of the passenger.  \nAs visualisations I will use 2 gaphs:\n1. boxplot+stripplot as before\n2. kdeplot, to plot age density curves for each class. This method can't handle missing values, so I filter the data before using it. \n # set size\nplt.figure(figsize=(20, 6))\n\n# set palette\npalette = sns.cubehelix_palette(5, start = 3)\n\nplt.subplot(1, 2, 1)\nsns.boxplot(x = 'Pclass', y = 'Age', data = all_data,\n     palette = palette, fliersize = 0)\n\nsns.stripplot(x = 'Pclass', y = 'Age', data = all_data,\n     linewidth = 0.6, palette = palette)\nplt.xticks( np.arange(3), ['1st class', '2nd class', '3rd class'])\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Ticket class')\n\n\nplt.subplot(1, 2, 2)\n\n# To use kdeplot I need to create variables with filtered data for each category\nage_1_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 1)]\nage_2_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 2)]\nage_3_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 3)]\n\n# Ploting the 3 variables that we create\nsns.kdeplot(age_1_class[\"Age\"], shade=True, color='#eed4d0', label = '1st class')\nsns.kdeplot(age_2_class[\"Age\"], shade=True,  color='#cda0aa', label = '2nd class')\nsns.kdeplot(age_3_class[\"Age\"], shade=True,color='#a2708e', label = '3rd class')\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Age')\nplt.xlim(0, 90)\nplt.tight_layout()\nplt.show() \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Pclass')['Age'].describe()) \n 1st class has wider distribution compare to 2nd and 3rd and almost symmetric.  \nBoth 2nd and 3rd classes age distributions are right skewed.  \nThe youngest passenger has 3rd class ticket, age = 0.17.  \nThe oldest passenger has 1st class ticket, age = 76.  \n3rd class mean age = 24.8, 2nd classe average age is 29.5 and 1st class average age is 39.1.   \n \n \nSince survived passengers on average younger than drowned, does it mean, that 3rd class passengers had more chances to survive? We will discover it later.  \n\nFrom graphs we can see difference in age distribution between classes. So when I will do missing data imputation I will take class into account.   \n ### 6.2.4 Age vs class vs gender\nComparison of age distribution by gender I will do separately for each class since we have such a noticeable age difference between classes. \n plt.figure(figsize=(20, 5))\npalette = \"Set3\"\n\nplt.subplot(1, 3, 1)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_1_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_1_class,\n     linewidth = 0.6, palette = palette)\nplt.title('1st class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 2)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_2_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_2_class,\n     linewidth = 0.6, palette = palette)\nplt.title('2nd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 3)\nsns.boxplot(x = 'Sex', y = 'Age',  data = age_3_class,\n     order = ['female', 'male'], palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_3_class,\n     order = ['female', 'male'], linewidth = 0.6, palette = palette)\nplt.title('3rd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.show() \n # Descriptive statistics:\nage_1_class_stat = pd.DataFrame(age_1_class.groupby('Sex')['Age'].describe())\nage_2_class_stat = pd.DataFrame(age_2_class.groupby('Sex')['Age'].describe())\nage_3_class_stat = pd.DataFrame(age_3_class.groupby('Sex')['Age'].describe())\n\npd.concat([age_1_class_stat, age_2_class_stat, age_3_class_stat], axis=0, sort = False, keys = ['1st', '2nd', '3rd']) \n The oldest and the youngest passengers are female.  \nIn each class the average Age of female are slightly less than the average Age of male passengers. \n ## 6.3 What is in the name? \nEach passenger Name value contains the title of the passenger which we can extract and discover.  \nTo create new variable \"Title\":  \n1. I am using method 'split' by comma to divide Name in two parts and save the second part\n2. I am splitting saved part by dot and save first part of the result\n3. To remove spaces around the title I am using 'split' method\n\nTo visualize, how many passengers hold each title, I chose countplot. \n all_data['Title'] = all_data['Name'].str.split(',', expand = True)[1].str.split('.', expand = True)[0].str.strip(' ')\n\nplt.figure(figsize=(6, 5))\nax = sns.countplot( x = 'Title', data = all_data, palette = \"hls\", order = all_data['Title'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\nplt.title('Passengers distribution by titles',fontsize= 14)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\nplt.show()\n \n The most frequent title among passangers is Mister (Mr.) - general title or respect of an adult male. The second title by its frequency is Miss (unmarried woman), the third - Mrs. (married woman).  \nOther titles are less frequent, I will discover if I can combine them into particular groups. I am going to use titles as a fiture, but if they split the data too much, leaving just a few observations in each group, it can lead to overfitting. And for a general understanding of the data, it will be more convenient to put titles in clearer groups.\n\n* Master -  By the late 19th century, etiquette dictated that men be addressed as Mister, and boys as Master.\n* Mme -  Madame. a French title of respect equivalent to \u201cMrs.\u201d, used alone or prefixed to a woman's married name or title. I will add to \"Mrs\".\n* Mlle - Mademoiselle is a French courtesy title, abbreviated Mlle, traditionally given to an unmarried woman. The equivalent in English is \"Miss\". I will add to \"Miss\" group.\n* Dr. - Doctor is an academic title\n* Rev. - Reverend, is usually a courtesy title for Protestant Christian ministers or pastors.\n\n\"Military\" group of titles:\n* Capt. -Captain is a title for the commander of a military unit\n* Major is a military rank of commissioned officer status\n* Col. - The honorary title of Colonel is conferred by several states in the US and certain military units of the Commonwealth of Nations\n\n\"Honor\"  group of titles:\n* Sir -  is a formal English honorific address for men. Sir is used for men titled knights i.e. of orders of chivalry, and later also to baronets, and other offices. \n* the Countess - is a historical title of nobility\n* Lady - a formal title in the United Kingdom. A woman with a title of nobility or honorary \n* Jonkheer - is an honorific in the Low Countries denoting the lowest rank within the nobility. \n* Don - is an honorific prefix primarily used in Spain and the former Spanish Empire, Italy, Portugal, the Philippines, Latin America, Croatia, and Goa. (male)\n* Dona - Feminine form for don (honorific) a Spanish, Portuguese, southern Italian, and Filipino title, given as a mark of respect\n\n\nNot sure about the title Ms,we have only 2 passengers with this title, I will convert it to Miss.\n\nI created a dictionary of titles and I am using method \"map\" to create variable \"Title_category\". \n all_data[all_data['Title']=='Ms'] \n title_dict = {  'Mr':     'Mr',\n                'Mrs':    'Mrs',\n                'Miss':   'Miss',\n                'Master': 'Master',\n              \n                'Ms':     'Miss',\n                'Mme':    'Mrs',\n                'Mlle':   'Miss',\n\n                'Capt':   'military',\n                'Col':    'military',\n                'Major':  'military',\n\n                'Dr':     'Dr',\n                'Rev':    'Rev',\n                  \n                'Sir':    'honor',\n                'the Countess': 'honor',\n                'Lady':   'honor',\n                'Jonkheer': 'honor',\n                'Don':    'honor',\n                'Dona':   'honor' }\n\n# map titles to category\nall_data['Title_category'] = all_data['Title'].map(title_dict) \n fig = plt.figure(figsize=(12, 5))\n\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(x = 'Title_category', \n                   data = all_data, palette = \"hls\", \n                   order = all_data['Title_category'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\nplt.title('Passengers distribution by titles',fontsize= 12)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title_category'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\n\nax2 = fig.add_subplot(122)\nsurv_by_title_cat = all_data.groupby('Title_category')['Survived'].value_counts(normalize = True).unstack()\nsurv_by_title_cat = surv_by_title_cat.sort_values(by=1, ascending = False)\nsurv_by_title_cat.plot(kind='bar', \n                       stacked='True', \n                       color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\n\nplt.legend( ( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\n\nplt.title('Proportion of survived/drowned by titles (train data)',fontsize= 12)\n\nplt.tight_layout()\nplt.show() \n * The smallest group is \"honor\", passengers with royal-kind titles.  \n\nTraining data:\n* The biggiest proportion of survivals is in \"Mrs\" group - married woman.   \n* More than 80% drowned in \"Mr.\" group.  \n* Nobody survived among Reverend group. \n category_survived = sns.catplot(x=\"Title_category\",  col=\"Survived\",\n                data = all_data, kind=\"count\",\n                height=4, aspect=.7)\n\ncategory_survived.set_xticklabels(rotation=45, \n    horizontalalignment='right',\n    fontweight='light')\n\nplt.tight_layout() \n If we consider the survivors not by percentage within each group but by comparing the number of survivors between groups, then \"Miss\" title category is the luckiest one. The \"Mr\" category lost the biggest number of passengers.\n\nLet's also visualize, how Title categories and ticket classes are related: \n class_by_title_cat = all_data.groupby('Title_category')['Pclass'].value_counts(normalize = True)\nclass_by_title_cat = class_by_title_cat.unstack().sort_values(by = 1, ascending = False)\nclass_by_title_cat.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'])\nplt.legend(loc=(1.04,0))\n_ = plt.xticks(\n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light'  \n)\n\n\nplt.title('Proportion of 1st/2nd/3rd ticket class in each title category',fontsize= 14)\nplt.xlabel('Category of the Title')\nplt.tight_layout() \n * All honor and military titles occupied the 1st class.  \n* All Reverends occupied 2nd class.\n* The biggest percent of the 3rd class is in the Master category.\n\nFor sure, there is a relationship between variables, and survival was influenced not only by the title itself but by a combination of factors that are to some extent interrelated. How class could relate on surviving? Let's go further and discover. \n ## 6.4 Cabin\n![Titanic_cutaway_diagram-small.png](attachment:Titanic_cutaway_diagram-small.png)\n\nFrom the number of the cabin we can extract first letter, which will tell us about placement of the cabin on the ship! And it seems to me as a very important knowlege:   \n* How close cabin located to the lifeboats\n* How far from the most damaged parts of the ship\n* How close to people who have information about what is happening and how to act\n* How many obstacles passenger had in the way to the lifeboat\n\nI found some description of each Titanic deck:\n\nThere were 8 decks: the upperdeck - for lifeboats, other 7 were under it and had letter symbols:\n* **A**: it did not run the entire length of the vessel (i.e. it did not reach from the stern to the bow of the vessel), and was intended for passengers of the **1st class**.\n* **B**: it did not run the entire length of the ship (it was interrupted by 37 meters above the C deck, and served as a place for anchors in the front).\n* **C**: in the front part of the galley, dining room for the crew, as well as a walking area for passengers of the 3rd class.\n* **D**: a walking area for passengers .\n* **E**: cabins of the **1st and 2nd class**.\n* **F**: part of the passenger cabins of the **2nd class**, most of the cabins of the **3rd class**.\n* **G**: did not run the entire length of the ship, the boiler rooms were located in the center.\n* **T** - boat deck ?\n\nTo the passengers without deck information I will imput U letter (as unknown). \n all_data['deck'] = all_data['Cabin'].str.split('', expand = True)[1]\nall_data.loc[all_data['deck'].isna(), 'deck'] = 'U'\nprint('Unique deck letters from the cabin numbers:', all_data['deck'].unique()) \n fig = plt.figure(figsize=(20, 5))\n\nax1 = fig.add_subplot(131)\nsns.countplot(x = 'deck', data = all_data, palette = \"hls\", order = all_data['deck'].value_counts().index, ax = ax1)\nplt.title('Passengers distribution by deck',fontsize= 16)\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(132)\ndeck_by_class = all_data.groupby('deck')['Pclass'].value_counts(normalize = True).unstack()\ndeck_by_class.plot(kind='bar', stacked='True',color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of classes on each deck',fontsize= 16)\nplt.xticks(rotation = False)\n\nax3 = fig.add_subplot(133)\ndeck_by_survived = all_data.groupby('deck')['Survived'].value_counts(normalize = True).unstack()\ndeck_by_survived = deck_by_survived.sort_values(by = 1, ascending = False)\ndeck_by_survived.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax3)\nplt.title('Proportion of survived/drowned passengers by deck',fontsize= 16)\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\nplt.tight_layout()\n\nplt.show()\n \n Most passengers don't have cabin numbers ('U').  \nThe largest part of passengers with known cabin numbers were located on the  'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'.  \nDeck A was the closest to the deck with lifeboats, but it is the last in surviving rate (except unknown and T deck). How did it happen? \n all_data[(all_data['deck']=='A') & (all_data['Survived']==0)] \n I was curious, so I read a bit about some of these passengers:  \n[John Hugo Ross](https://www.encyclopedia-titanica.org/titanic-victim/john-hugo-ross.html) When he boarded on 10 April 1912, he was so ill from dysentery he had to be carried to his cabin on a stretcher. When Ross was told the ship had struck an iceberg and that he should get dressed, Ross refused to believe the trouble serious. \"Is that all,?\" he told Peuchen. \"It will take more than an iceberg to get me off this ship.\" Presumably, Ross drowned in his bed.  \n\n[Andrews, Mr. Thomas Jr](https://en.wikipedia.org/wiki/Thomas_Andrews) was a managing director of H&W (built the Titanic) in charge of designing and was familiar with every detail of the construction of the firm's ships. He helped to evacuate people.\n\n[Roebling, Mr. Washington Augustus II ](https://www.encyclopedia-titanica.org/titanic-victim/washington-roebling.html) helped to evacuate people as well.\n\nIt is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergensy were involved in the rescue process.\n\nFor training process it will be better to include passenger from T deck to the A deck group. \n ## 6.5 Family\nDoes the size of the family on Board together affect the chances of surviving a disaster? Does having children increase the chance of getting into a boat, or is it easier to survive being single?  \nI calculate the family size, by summarizing the number of siblings with the parch number  plus 1 (passenger himself).  \nFamily size = sib + parch + 1\n\n### 6.5.1 Calculate family size \n all_data['Family_size'] = all_data['SibSp'] + all_data['Parch'] + 1\nfamily_size = all_data['Family_size'].value_counts()\nprint('Family size and number of passengers:')\nprint(family_size) \n Looks strange that there are 16 passengers with family size of 7, for example. Let's check!  \nAlso, I will add a surname variable, by extraxting first word ow the name. \n all_data['Surname'] = all_data['Name'].str.split(',', expand = True)[0] \n #### size 7\n1. Group people with family size = 7 by Surname  \nWe have 9 Andersons, who have family size of 7 \n all_data[all_data['Family_size'] == 7]['Surname'].value_counts() \n all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')] \n 2. Let's group Andersons with 7-size family by ticket number.  \nThere are  7 of them used the same ticket and travelled together. 5 children (each of them has 4 siblings) and 2 parents.\nTo passengers used separated tickets. \n all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')].Ticket.value_counts() \n all_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')] \n Looks like they actually traveled alone, I will correct that data. \n all_data.loc[all_data['PassengerId'] == 69, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data.loc[all_data['PassengerId'] == 1106, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')] \n #### size 5\nThere are some inconsistencies in other categories, with fewer relatives.  \nLet's check people with 5-size family and group them by Surname: \n all_data[all_data['Family_size'] == 5]['Surname'].value_counts() \n all_data[(all_data['Surname'] == 'Kink-Heilmann')&(all_data['Family_size'] == 5)] \n Kink-Heilmann, Mr. Anton\t had 2 other siblings on the ship unlike his wife, for whom these relatives do not fit the description of relatives in the data set. We will assume that all other \"mismatches\" in the groups are similar to this. Since I plan to group the size of families into groups, this will eliminate possible inconsistencies. \n ### 6.5.2 Family size and chanses for surviving \n fig = plt.figure(figsize = (12,4))\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(all_data['Family_size'], ax = ax1)\n\n# calculate passengers for each category\nlabels = (all_data['Family_size'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+6, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Family_size')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', color=[\"#3f3e6fd1\", \"#85c6a9\"], stacked='True', ax = ax2)\nplt.title('Proportion of survived/drowned passengers by family size (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\n\nplt.tight_layout() \n * There were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  \n* Most of the passengers were traveling alone, percent of survivals not very large.  \n* The biggest proportion of survived passengers in group of people who had 4 family members on board. \n\nWe can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \nI will create 'Family_size_group' variable with four categories: \n* single\n* usual (sizes 2, 3, 4)\n* big (5, 6, 7)\n* and large (all bigger then 7) \n all_data['Family_size_group'] = all_data['Family_size'].map(lambda x: 'f_single' if x == 1 \n                                                            else ('f_usual' if 5 > x >= 2 \n                                                                  else ('f_big' if 8 > x >= 5 \n                                                                       else 'f_large' )\n                                                                 ))                                                        \n fig = plt.figure(figsize = (14,5))\n\nax1 = fig.add_subplot(121)\nd = all_data.groupby('Family_size_group')['Survived'].value_counts(normalize = True).unstack()\nd = d.sort_values(by = 1, ascending = False)\nd.plot(kind='bar', stacked='True', color = [\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Proportion of survived/drowned passengers by family size (training data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax2 = fig.add_subplot(122)\nd2 = all_data.groupby('Family_size_group')['Pclass'].value_counts(normalize = True).unstack()\nd2 = d2.sort_values(by = 1, ascending = False)\nd2.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of 1st/2nd/3rd ticket class in family group size')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout() \n Large families are all from 3rd class and no one from the training part of the dataset is survived.  \nThe biggest proportion of the 1st class in the usual size of the family and the proportion of survivors in the usual family is the biggest. \n ## 6.6 Class\nWe have made a lot of assumptions about the survival rate depending on the classes. Let's now look closely at this variable.\n\n### 6.6.1 Passengers by class \n ax = sns.countplot(all_data['Pclass'], palette = ['#eed4d0', '#cda0aa', '#a2708e'])\n# calculate passengers for each category\nlabels = (all_data['Pclass'].value_counts(sort = False))\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+2, str(v), horizontalalignment = 'center', size = 12, color = 'black', fontweight = 'bold')\n    \n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\nplt.tight_layout() \n Most of the Titanic's passengers were traveling third class (709).  \nThe second class is the smallest in terms of the number of passengers. \n ### 6.6.2 Class vs surviving status \n fig = plt.figure(figsize=(14, 5))\n\nax1 = fig.add_subplot(121)\nsns.countplot(x = 'Pclass', hue = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Number of survived/drowned passengers by class (train data)')\nplt.ylabel('Number of passengers')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Pclass')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', stacked='True', ax = ax2, color =[\"#3f3e6fd1\", \"#85c6a9\"])\nplt.title('Proportion of survived/drowned passengers by class (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout() \n Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned. \n ### 6.6.3 Class vs surviving status vs gender \n sns.catplot(x = 'Pclass', hue = 'Survived', col = 'Sex', kind = 'count', data = all_data , palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\nplt.tight_layout() \n However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the female survived. \n ### 6.6.4 Class vs. Gender vs. Age -> Surviving status \nFor better understanding how the combination of some factors influence on chances to survive, lets break passengers into 18 imaginary groups separated by:\n* **Class** (1 / 2 / 3)\n* **Gender** (male / female)\n* **Age** ( <16 / 16-40 / 40<)  \n\nTo do so I will create 6 stripplots (3 for male, 3 for female), with values grouped by Surviving status and add background color to separate age groups: \n plt.figure(figsize=(20, 10))\npalette=[\"#3f3e6fd1\", \"#85c6a9\"]\n\nplt.subplot(2, 3, 1)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 2)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 3)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='male'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.subplot(2, 3, 4)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 5)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 6)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='female'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.show() \n From these graphs (training data only) we can see, that \n* only one kid (<16) from 1st and 2nd classes are drowned (female from the 1st class).\n* but children from the 3rd class were not so lucky, looks like chances to survive for passengers <16 were 50/50 for male and female.\n* most females from 1st and 2nd class are survived, without much difference in Age.\n* females from 3rd class in Age group 40+ drowned except one.\n* similar picture for males in 2nd and 3rd classes in the Age group 40+: only 2 from each class are survived.\n* for 40+ males from 1st class situation were slightly different, there are more survived passengers.\n* the largest \"accumulation\" of drowned passengers is observed in the Age group 16-40 males, 3rd class. \n ## 6.7 Gender\nLet's discover gender a little bit more: \n plt.figure(figsize = (15,4))\n\nplt.subplot (1,3,1)\nax = sns.countplot(all_data['Sex'], palette=\"Set3\")\nplt.title('Number of passengers by Sex')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Sex'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.subplot (1,3,2)\nsns.countplot( x = 'Pclass', data = all_data, hue = 'Sex', palette=\"Set3\")\nplt.title('Number of male/female passengers by class')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\n\nplt.subplot (1,3,3)\nsns.countplot( x = 'Family_size_group', data = all_data, hue = 'Sex', \n              order = all_data['Family_size_group'].value_counts().index , palette=\"Set3\")\nplt.title('Number of male/female passengers by family size')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\nplt.tight_layout() \n There were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers. \n ## 6.8 Embarked\nTitanic had 3 embarkation points before the ship started its route to New York:\n* Southampton\n* Cherbourg\n* Queenstown  \n\nSome passengers could leave Titanic in Cherbourg or Queenstown and avoid catastrophe. Also, the point of embarkation could have an influence on ticket fare and location on the ship.  \n\n![09269a9f7d50a3f019182a11f7aa7981.jpg](attachment:09269a9f7d50a3f019182a11f7aa7981.jpg)\n\nPort of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n \n fig = plt.figure(figsize = (15,4))\n\nax1 = fig.add_subplot(131)\npalette = sns.cubehelix_palette(5, start = 2)\nax = sns.countplot(all_data['Embarked'], palette = palette, order = ['C', 'Q', 'S'], ax = ax1)\nplt.title('Number of passengers by Embarked')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Embarked'].value_counts())\nlabels = labels.sort_index()\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nax2 = fig.add_subplot(132)\nsurv_by_emb = all_data.groupby('Embarked')['Survived'].value_counts(normalize = True)\nsurv_by_emb = surv_by_emb.unstack().sort_index()\nsurv_by_emb.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\nplt.title('Proportion of survived/drowned passengers by Embarked (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax3 = fig.add_subplot(133)\nclass_by_emb = all_data.groupby('Embarked')['Pclass'].value_counts(normalize = True)\nclass_by_emb = class_by_emb.unstack().sort_index()\nclass_by_emb.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax3)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of clases by Embarked')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout() \n * Most number of passengers (914) were embarked in Southampton. Also Southampton has the biggiest proportion of drowned passengers.\n* 270 passengers emarked in Cherbourg and more than 50% of them survived (in the training dataset). \n* 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers\n \n \nsns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"violin\", inner=None,\n            data=all_data, height = 6, palette = palette, order = ['C', 'Q', 'S'])\nplt.title('Distribution of Fare by Embarked')\nplt.tight_layout() \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Embarked')['Fare'].describe()) \n * The wider fare distribution among passengers who embarked in Cherbourg. It makes scence - many first-class passengers boarded the ship here, but the share of third-class passengers is quite significant.\n* The smallest variation in the price of passengers who boarded in q. Also, the average price of these passengers is the smallest, I think this is due to the fact that the path was supposed to be the shortest + almost all third-class passengers.\n\nLet's check NA values of Embarked variable: \n train_data[train_data['Embarked'].isna()] \n These two passengers traveled together (same ticket number). To impute missing values, we can use mode value for passengers with the closest fare value and Pclass. \n ## 6.9 Fare\n \n sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"swarm\", data=all_data, palette=sns.cubehelix_palette(5, start = 3), height = 6)\n\nplt.tight_layout() \n We can observe that the distribution of prices for the second and third class is very similar. The distribution of first-class prices is very different, has a larger spread, and on average prices are higher. \n\nLet's add colours to our points to indicate surviving status of passenger (there will be only data from training part of the dataset): \n sns.catplot(x=\"Pclass\", y=\"Fare\",  hue = \"Survived\", kind=\"swarm\", data=all_data, \n                                    palette=[\"#3f3e6fd1\", \"#85c6a9\"], height = 6)\nplt.tight_layout() \n Looks like the bigger passenger paid, the more chances to survive he had.  \nWhat about zero fare in the first class? Is it a mistake? \n all_data[all_data['Fare'] == min(all_data['Fare'])] \n Some of the passengers have \"Line\" tickets, perhaps they were somehow involved in the Titanic, but were not the ship's crew. I don't think we should change these prices, but add an additional feature for these passengers. \n # 7. Conclusion\nWe know that there were not enough boats on Board the Titanic for all passengers to be able to evacuate. After studying the information about the passengers, we can make some assumptions about who had a better chance of survival in a shipwreck situation as well as General observations about passengers.\n\n* There are 891 passengers in the train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived. But we know, that lifeboats (16 wooden lifeboats and four collapsible) could carry 53% of total passengers.\n* The Age of all passengers vary from about 0.17 year to 80 years with average 29.88. The mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for). It looks like there is a slightly bigger chance to survive for younger people.\n* Exploring the title of passengers, we can see that the biggest proportion of survivors is in the \"Mrs\" group - a married woman. More than 80% drowned in the \"Mr.\" group and nobody survived among the Reverend group.\n* Most passengers don't have cabin numbers. The largest part of passengers with known cabin numbers was located on the 'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'. Deck A was the closest to the deck with lifeboats, but it is the last in the surviving rate.\n* The family size on board also seems to have an influence on chances for survival: there were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  We can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \n* Most of the Titanic's passengers were traveling third class (709). The second class is the smallest in terms of the number of passengers. Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first-class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.\n* However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the females survived.  \nThere were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.  \n* Most numbers of passengers (914) were embarked in Southampton. Also, Southampton has the biggest proportion of drowned passengers. 270 passengers embarked in Cherbourg and more than 50% of them survived (in the training dataset). 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers.  \n\n \nIf we use a naive approach and consider all the parameters separately, then young female first-class passengers with the title Mrs have a moderate number of relatives on Board, who paid a large amount for a ticket and went on Board in  Cherbourg have a better chance of survival. \nFor sure, there is a relationship between variables, and survival was influenced not only by the title, or ticket, or age itself but by a combination of factors that are to some extent interrelated.   \nAnd It is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergency were involved in the rescue process.\n\n[**Second part of my work**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial) with Titanic dataset and contains:\n\n* Missing data imputation\n* Feature generation\n* Models implementation and tuning: Logistic Regression, Random Forest, XGBoost\n* Comparing models and submission\n",
    "code_source": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np \n # path to train dataset\ntrain_path = '../input/titanic/train.csv'\n# path to test dataset\ntest_path = '../input/titanic/test.csv'\n\n# Read a comma-separated values (csv) file into pandas DataFrame\ntrain_data = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)\n\n# shape of tha data\nprint('Train shape: ', train_data.shape)\nprint('Test shape: ', test_data.shape) \n # create a sequence of DataFrame objects\nframes = [train_data, test_data]\n# Concatenate pandas objects along a particular axis \nall_data = pd.concat(frames, sort = False)\n# shape of the data\nprint('All data shape: ', all_data.shape)\n# Show first 4 rows of the concatenated DataFrame\nall_data.head(4) \n all_data.info() \n #### check data for NA values\nall_data_NA = all_data.isna().sum()\ntrain_NA = train_data.isna().sum()\ntest_NA = test_data.isna().sum()\n\npd.concat([train_NA, test_NA, all_data_NA], axis=1, sort = False, keys = ['Train NA', 'Test NA', 'All NA']) \n # set size of the plot\nplt.figure(figsize=(6, 4.5)) \n\n# countplot shows the counts of observations in each categorical bin using bars.\n# x - name of the categorical variable\nax = sns.countplot(x = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\n# set the current tick locations and labels of the x-axis.\nplt.xticks( np.arange(2), ['drowned', 'survived'] )\n# set title\nplt.title('Overall survival (training dataset)',fontsize= 14)\n# set x label\nplt.xlabel('Passenger status after the tragedy')\n# set y label\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Survived'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v-40, str(v), horizontalalignment = 'center', size = 14, color = 'w', fontweight = 'bold')\n    \nplt.show() \n all_data['Survived'].value_counts(normalize = True) \n # set plot size\nplt.figure(figsize=(15, 3))\n\n# plot a univariate distribution of Age observations \nsns.distplot(all_data[(all_data[\"Age\"] > 0)].Age, kde_kws={\"lw\": 3}, bins = 50)\n\n# set titles and labels\nplt.title('Distrubution of passengers age (all data)',fontsize= 14)\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n# clean layout\nplt.tight_layout() \n # Descriptive statistics include those that summarize the central tendency, \n# dispersion and shape of a dataset\u2019s distribution, excluding NaN values.\nage_distr = pd.DataFrame(all_data['Age'].describe())\n# Transpose index and columns.\nage_distr.transpose() \n plt.figure(figsize=(15, 3))\n\n# Draw a box plot to show Age distributions with respect to survival status.\nsns.boxplot(y = 'Survived', x = 'Age', data = train_data,\n     palette=[\"#3f3e6fd1\", \"#85c6a9\"], fliersize = 0, orient = 'h')\n\n# Add a scatterplot for each category.\nsns.stripplot(y = 'Survived', x = 'Age', data = train_data,\n     linewidth = 0.6, palette=[\"#3f3e6fd1\", \"#85c6a9\"], orient = 'h')\n\nplt.yticks( np.arange(2), ['drowned', 'survived'])\nplt.title('Age distribution grouped by surviving status (train data)',fontsize= 14)\nplt.ylabel('Passenger status after the tragedy')\nplt.tight_layout() \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe()) \n all_data[all_data['Age'] == max(all_data['Age'] )] \n train_data.loc[train_data['PassengerId'] == 631, 'Age'] = 48\nall_data.loc[all_data['PassengerId'] == 631, 'Age'] = 48 \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe()) \n # set size\nplt.figure(figsize=(20, 6))\n\n# set palette\npalette = sns.cubehelix_palette(5, start = 3)\n\nplt.subplot(1, 2, 1)\nsns.boxplot(x = 'Pclass', y = 'Age', data = all_data,\n     palette = palette, fliersize = 0)\n\nsns.stripplot(x = 'Pclass', y = 'Age', data = all_data,\n     linewidth = 0.6, palette = palette)\nplt.xticks( np.arange(3), ['1st class', '2nd class', '3rd class'])\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Ticket class')\n\n\nplt.subplot(1, 2, 2)\n\n# To use kdeplot I need to create variables with filtered data for each category\nage_1_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 1)]\nage_2_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 2)]\nage_3_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 3)]\n\n# Ploting the 3 variables that we create\nsns.kdeplot(age_1_class[\"Age\"], shade=True, color='#eed4d0', label = '1st class')\nsns.kdeplot(age_2_class[\"Age\"], shade=True,  color='#cda0aa', label = '2nd class')\nsns.kdeplot(age_3_class[\"Age\"], shade=True,color='#a2708e', label = '3rd class')\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Age')\nplt.xlim(0, 90)\nplt.tight_layout()\nplt.show() \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Pclass')['Age'].describe()) \n plt.figure(figsize=(20, 5))\npalette = \"Set3\"\n\nplt.subplot(1, 3, 1)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_1_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_1_class,\n     linewidth = 0.6, palette = palette)\nplt.title('1st class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 2)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_2_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_2_class,\n     linewidth = 0.6, palette = palette)\nplt.title('2nd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 3)\nsns.boxplot(x = 'Sex', y = 'Age',  data = age_3_class,\n     order = ['female', 'male'], palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_3_class,\n     order = ['female', 'male'], linewidth = 0.6, palette = palette)\nplt.title('3rd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.show() \n # Descriptive statistics:\nage_1_class_stat = pd.DataFrame(age_1_class.groupby('Sex')['Age'].describe())\nage_2_class_stat = pd.DataFrame(age_2_class.groupby('Sex')['Age'].describe())\nage_3_class_stat = pd.DataFrame(age_3_class.groupby('Sex')['Age'].describe())\n\npd.concat([age_1_class_stat, age_2_class_stat, age_3_class_stat], axis=0, sort = False, keys = ['1st', '2nd', '3rd']) \n all_data['Title'] = all_data['Name'].str.split(',', expand = True)[1].str.split('.', expand = True)[0].str.strip(' ')\n\nplt.figure(figsize=(6, 5))\nax = sns.countplot( x = 'Title', data = all_data, palette = \"hls\", order = all_data['Title'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\nplt.title('Passengers distribution by titles',fontsize= 14)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\nplt.show()\n \n all_data[all_data['Title']=='Ms'] \n title_dict = {  'Mr':     'Mr',\n                'Mrs':    'Mrs',\n                'Miss':   'Miss',\n                'Master': 'Master',\n              \n                'Ms':     'Miss',\n                'Mme':    'Mrs',\n                'Mlle':   'Miss',\n\n                'Capt':   'military',\n                'Col':    'military',\n                'Major':  'military',\n\n                'Dr':     'Dr',\n                'Rev':    'Rev',\n                  \n                'Sir':    'honor',\n                'the Countess': 'honor',\n                'Lady':   'honor',\n                'Jonkheer': 'honor',\n                'Don':    'honor',\n                'Dona':   'honor' }\n\n# map titles to category\nall_data['Title_category'] = all_data['Title'].map(title_dict) \n fig = plt.figure(figsize=(12, 5))\n\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(x = 'Title_category', \n                   data = all_data, palette = \"hls\", \n                   order = all_data['Title_category'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\nplt.title('Passengers distribution by titles',fontsize= 12)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title_category'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\n\nax2 = fig.add_subplot(122)\nsurv_by_title_cat = all_data.groupby('Title_category')['Survived'].value_counts(normalize = True).unstack()\nsurv_by_title_cat = surv_by_title_cat.sort_values(by=1, ascending = False)\nsurv_by_title_cat.plot(kind='bar', \n                       stacked='True', \n                       color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\n\nplt.legend( ( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\n\nplt.title('Proportion of survived/drowned by titles (train data)',fontsize= 12)\n\nplt.tight_layout()\nplt.show() \n category_survived = sns.catplot(x=\"Title_category\",  col=\"Survived\",\n                data = all_data, kind=\"count\",\n                height=4, aspect=.7)\n\ncategory_survived.set_xticklabels(rotation=45, \n    horizontalalignment='right',\n    fontweight='light')\n\nplt.tight_layout() \n class_by_title_cat = all_data.groupby('Title_category')['Pclass'].value_counts(normalize = True)\nclass_by_title_cat = class_by_title_cat.unstack().sort_values(by = 1, ascending = False)\nclass_by_title_cat.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'])\nplt.legend(loc=(1.04,0))\n_ = plt.xticks(\n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light'  \n)\n\n\nplt.title('Proportion of 1st/2nd/3rd ticket class in each title category',fontsize= 14)\nplt.xlabel('Category of the Title')\nplt.tight_layout() \n all_data['deck'] = all_data['Cabin'].str.split('', expand = True)[1]\nall_data.loc[all_data['deck'].isna(), 'deck'] = 'U'\nprint('Unique deck letters from the cabin numbers:', all_data['deck'].unique()) \n fig = plt.figure(figsize=(20, 5))\n\nax1 = fig.add_subplot(131)\nsns.countplot(x = 'deck', data = all_data, palette = \"hls\", order = all_data['deck'].value_counts().index, ax = ax1)\nplt.title('Passengers distribution by deck',fontsize= 16)\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(132)\ndeck_by_class = all_data.groupby('deck')['Pclass'].value_counts(normalize = True).unstack()\ndeck_by_class.plot(kind='bar', stacked='True',color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of classes on each deck',fontsize= 16)\nplt.xticks(rotation = False)\n\nax3 = fig.add_subplot(133)\ndeck_by_survived = all_data.groupby('deck')['Survived'].value_counts(normalize = True).unstack()\ndeck_by_survived = deck_by_survived.sort_values(by = 1, ascending = False)\ndeck_by_survived.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax3)\nplt.title('Proportion of survived/drowned passengers by deck',fontsize= 16)\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\nplt.tight_layout()\n\nplt.show()\n \n all_data[(all_data['deck']=='A') & (all_data['Survived']==0)] \n all_data['Family_size'] = all_data['SibSp'] + all_data['Parch'] + 1\nfamily_size = all_data['Family_size'].value_counts()\nprint('Family size and number of passengers:')\nprint(family_size) \n all_data['Surname'] = all_data['Name'].str.split(',', expand = True)[0] \n all_data[all_data['Family_size'] == 7]['Surname'].value_counts() \n all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')] \n all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')].Ticket.value_counts() \n all_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')] \n all_data.loc[all_data['PassengerId'] == 69, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data.loc[all_data['PassengerId'] == 1106, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')] \n all_data[all_data['Family_size'] == 5]['Surname'].value_counts() \n all_data[(all_data['Surname'] == 'Kink-Heilmann')&(all_data['Family_size'] == 5)] \n fig = plt.figure(figsize = (12,4))\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(all_data['Family_size'], ax = ax1)\n\n# calculate passengers for each category\nlabels = (all_data['Family_size'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+6, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Family_size')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', color=[\"#3f3e6fd1\", \"#85c6a9\"], stacked='True', ax = ax2)\nplt.title('Proportion of survived/drowned passengers by family size (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\n\nplt.tight_layout() \n all_data['Family_size_group'] = all_data['Family_size'].map(lambda x: 'f_single' if x == 1 \n                                                            else ('f_usual' if 5 > x >= 2 \n                                                                  else ('f_big' if 8 > x >= 5 \n                                                                       else 'f_large' )\n                                                                 ))                                                        \n fig = plt.figure(figsize = (14,5))\n\nax1 = fig.add_subplot(121)\nd = all_data.groupby('Family_size_group')['Survived'].value_counts(normalize = True).unstack()\nd = d.sort_values(by = 1, ascending = False)\nd.plot(kind='bar', stacked='True', color = [\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Proportion of survived/drowned passengers by family size (training data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax2 = fig.add_subplot(122)\nd2 = all_data.groupby('Family_size_group')['Pclass'].value_counts(normalize = True).unstack()\nd2 = d2.sort_values(by = 1, ascending = False)\nd2.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of 1st/2nd/3rd ticket class in family group size')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout() \n ax = sns.countplot(all_data['Pclass'], palette = ['#eed4d0', '#cda0aa', '#a2708e'])\n# calculate passengers for each category\nlabels = (all_data['Pclass'].value_counts(sort = False))\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+2, str(v), horizontalalignment = 'center', size = 12, color = 'black', fontweight = 'bold')\n    \n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\nplt.tight_layout() \n fig = plt.figure(figsize=(14, 5))\n\nax1 = fig.add_subplot(121)\nsns.countplot(x = 'Pclass', hue = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Number of survived/drowned passengers by class (train data)')\nplt.ylabel('Number of passengers')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Pclass')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', stacked='True', ax = ax2, color =[\"#3f3e6fd1\", \"#85c6a9\"])\nplt.title('Proportion of survived/drowned passengers by class (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout() \n sns.catplot(x = 'Pclass', hue = 'Survived', col = 'Sex', kind = 'count', data = all_data , palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\nplt.tight_layout() \n plt.figure(figsize=(20, 10))\npalette=[\"#3f3e6fd1\", \"#85c6a9\"]\n\nplt.subplot(2, 3, 1)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 2)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 3)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='male'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.subplot(2, 3, 4)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 5)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 6)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='female'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.show() \n plt.figure(figsize = (15,4))\n\nplt.subplot (1,3,1)\nax = sns.countplot(all_data['Sex'], palette=\"Set3\")\nplt.title('Number of passengers by Sex')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Sex'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.subplot (1,3,2)\nsns.countplot( x = 'Pclass', data = all_data, hue = 'Sex', palette=\"Set3\")\nplt.title('Number of male/female passengers by class')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\n\nplt.subplot (1,3,3)\nsns.countplot( x = 'Family_size_group', data = all_data, hue = 'Sex', \n              order = all_data['Family_size_group'].value_counts().index , palette=\"Set3\")\nplt.title('Number of male/female passengers by family size')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\nplt.tight_layout() \n fig = plt.figure(figsize = (15,4))\n\nax1 = fig.add_subplot(131)\npalette = sns.cubehelix_palette(5, start = 2)\nax = sns.countplot(all_data['Embarked'], palette = palette, order = ['C', 'Q', 'S'], ax = ax1)\nplt.title('Number of passengers by Embarked')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Embarked'].value_counts())\nlabels = labels.sort_index()\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nax2 = fig.add_subplot(132)\nsurv_by_emb = all_data.groupby('Embarked')['Survived'].value_counts(normalize = True)\nsurv_by_emb = surv_by_emb.unstack().sort_index()\nsurv_by_emb.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\nplt.title('Proportion of survived/drowned passengers by Embarked (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax3 = fig.add_subplot(133)\nclass_by_emb = all_data.groupby('Embarked')['Pclass'].value_counts(normalize = True)\nclass_by_emb = class_by_emb.unstack().sort_index()\nclass_by_emb.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax3)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of clases by Embarked')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout() \n \nsns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"violin\", inner=None,\n            data=all_data, height = 6, palette = palette, order = ['C', 'Q', 'S'])\nplt.title('Distribution of Fare by Embarked')\nplt.tight_layout() \n # Descriptive statistics:\npd.DataFrame(all_data.groupby('Embarked')['Fare'].describe()) \n train_data[train_data['Embarked'].isna()] \n sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"swarm\", data=all_data, palette=sns.cubehelix_palette(5, start = 3), height = 6)\n\nplt.tight_layout() \n sns.catplot(x=\"Pclass\", y=\"Fare\",  hue = \"Survived\", kind=\"swarm\", data=all_data, \n                                    palette=[\"#3f3e6fd1\", \"#85c6a9\"], height = 6)\nplt.tight_layout() \n all_data[all_data['Fare'] == min(all_data['Fare'])]",
    "markdown_source": "![MA_00079563_yvu84f.jpg](attachment:MA_00079563_yvu84f.jpg) \n <h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#1.-Introduction\" data-toc-modified-id=\"1.-Introduction-1\">1. Introduction</a></span></li><li><span><a href=\"#2.-Domain-information\" data-toc-modified-id=\"2.-Domain-information-2\">2. Domain information</a></span></li><li><span><a href=\"#3.-Loading-libraries:\" data-toc-modified-id=\"3.-Loading-libraries:-3\">3. Loading libraries:</a></span></li><li><span><a href=\"#4.-Loading-data\" data-toc-modified-id=\"4.-Loading-data-4\">4. Loading data</a></span></li><li><span><a href=\"#5.-First-look:-variables,-NAs\" data-toc-modified-id=\"5.-First-look:-variables,-NAs-5\">5. First look: variables, NAs</a></span><ul class=\"toc-item\"><li><span><a href=\"#5.1-Variables\" data-toc-modified-id=\"5.1-Variables-5.1\">5.1 Variables</a></span></li><li><span><a href=\"#5.2-Types-of-the-variables\" data-toc-modified-id=\"5.2-Types-of-the-variables-5.2\">5.2 Types of the variables</a></span></li><li><span><a href=\"#5.3-Check-data-for-NA\" data-toc-modified-id=\"5.3-Check-data-for-NA-5.3\">5.3 Check data for NA</a></span></li></ul></li><li><span><a href=\"#6.-Exploring-the-data\" data-toc-modified-id=\"6.-Exploring-the-data-6\">6. Exploring the data</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.1-Survivals---target-value\" data-toc-modified-id=\"6.1-Survivals---target-value-6.1\">6.1 Survivals - target value</a></span></li><li><span><a href=\"#6.2-AGE\" data-toc-modified-id=\"6.2-AGE-6.2\">6.2 AGE</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.2.1-Age-distribution\" data-toc-modified-id=\"6.2.1-Age-distribution-6.2.1\">6.2.1 Age distribution</a></span></li><li><span><a href=\"#6.2.2-Age-by-surviving-status\" data-toc-modified-id=\"6.2.2-Age-by-surviving-status-6.2.2\">6.2.2 Age by surviving status</a></span></li><li><span><a href=\"#6.2.3-Age-by-class\" data-toc-modified-id=\"6.2.3-Age-by-class-6.2.3\">6.2.3 Age by class</a></span></li><li><span><a href=\"#6.2.4-Age-vs-class-vs-gender\" data-toc-modified-id=\"6.2.4-Age-vs-class-vs-gender-6.2.4\">6.2.4 Age vs class vs gender</a></span></li></ul></li><li><span><a href=\"#6.3-What-is-in-the-name?\" data-toc-modified-id=\"6.3-What-is-in-the-name?-6.3\">6.3 What is in the name?</a></span></li><li><span><a href=\"#6.4-Cabin\" data-toc-modified-id=\"6.4-Cabin-6.4\">6.4 Cabin</a></span></li><li><span><a href=\"#6.5-Family\" data-toc-modified-id=\"6.5-Family-6.5\">6.5 Family</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.5.1-Calculate-family-size\" data-toc-modified-id=\"6.5.1-Calculate-family-size-6.5.1\">6.5.1 Calculate family size</a></span><li><span><a href=\"#6.5.2-Family-size-and-chanses-for-surviving\" data-toc-modified-id=\"6.5.2-Family-size-and-chanses-for-surviving-6.5.2\">6.5.2 Family size and chanses for surviving</a></span></li></ul></li><li><span><a href=\"#6.6-Class\" data-toc-modified-id=\"6.6-Class-6.6\">6.6 Class</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.6.1-Passengers-by-class\" data-toc-modified-id=\"6.6.1-Passengers-by-class-6.6.1\">6.6.1 Passengers by class</a></span></li><li><span><a href=\"#6.6.2-Class-vs-surviving-status\" data-toc-modified-id=\"6.6.2-Class-vs-surviving-status-6.6.2\">6.6.2 Class vs surviving status</a></span></li><li><span><a href=\"#6.6.3-Class-vs-surviving-status-vs-gender\" data-toc-modified-id=\"6.6.3-Class-vs-surviving-status-vs-gender-6.6.3\">6.6.3 Class vs surviving status vs gender</a></span></li><li><span><a href=\"#6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status\" data-toc-modified-id=\"6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status-6.6.4\">6.6.4 Class vs. Gender vs. Age -&gt; Surviving status</a></span></li></ul></li><li><span><a href=\"#6.7-Gender\" data-toc-modified-id=\"6.7-Gender-6.7\">6.7 Gender</a></span></li><li><span><a href=\"#6.8-Embarked\" data-toc-modified-id=\"6.8-Embarked-6.8\">6.8 Embarked</a></span></li><li><span><a href=\"#6.9-Fare\" data-toc-modified-id=\"6.9-Fare-6.9\">6.9 Fare</a></span></li></ul></li><li><span><a href=\"#7.-Conclusion\" data-toc-modified-id=\"7.-Conclusion-7\">7. Conclusion</a></span></li></ul></div> \n # 1. Introduction\nSince I am currently located in Belfast (the city in which the Titanic was built) for a year for my Master's degree, I could not get past this legendary Titanic competition! \n  \nThis notebook is the **first part** of my work and contains **EDA** (exploratory data analysis) and missing data research.\n\n\ud83c\udf89 \u2728 [** !!!!!! Second part with ML *solution* you can check here !!!!!**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial)\n\n*I collapsed all the cells with the code for easy viewing. If you are interested in viewing the code, you can click \"code\" button near the graph or fork my notebook to view the entire code.* \n # 2. Domain information\n[Titanic](https://en.wikipedia.org/wiki/Sinking_of_the_RMS_Titanic) was a British passenger liner operated by the White Star Line. Titanic was on its way from Southampton to New York City when it sank in the North Atlantic Ocean in the early morning hours of **15 April 1912** after Titanic collided with an iceberg. The ship carried **2224** people, considering passengers and crew aboard,**1514** of them died.  \n\nTitanic carried 16 wooden lifeboats and four collapsibles, which could accommodate 1,178 people, only one-third of Titanic's total capacity (and 53% of real number of passengers). At the time, lifeboats were intended to ferry survivors from a sinking ship to a rescuing ship\u2014not keep afloat the whole population or power them to shore. If the SS Californian would responded to Titanic's distress calls, the lifeboats may have been adequate to ferry the passengers to safety as planned, but it didn't happen and the only way to survive were to get on the lifeboat.\n\nThe main question of the competition is **\u201cwhat sorts of people were more likely to survive?\u201d** \n # 3. Loading libraries: \n\nList of libraries I am using in this kernel:\n* pandas - offers data structures and operations for manipulating numerical tables and time series. (imported as pd) [Documentation](https://pandas.pydata.org/)\n* seaborn - data visualization library based on matplotlib. [Documentation](https://seaborn.pydata.org/)\n* matplotlib.pyplot - to create some visualizations (imported as plt) [Documentation](https://matplotlib.org/tutorials/introductory/pyplot.html)\n* numpy - The fundamental package for scientific computing with Python. [Documentation](https://numpy.org/) \n # 4. Loading data\nAs input information I have two CSV files:\n\n* **train.csv** - training part of the dataset, contains labels and information about passengers.\n* **test.csv** - testing part of the dataset, doesn't contain labels.\n\nIn this notebook I will use all available information (train + test datasets) to perform exploratory data analysis.  \n\n1. First, load both csv files into two DataFrames, using pandas read_csv method and check the shape of the loaded data: \n The training part contains information about 891 passengers, described by 12 variables, including 1 target variable.  \nThe testing part contains 418 observations, i.e information about passengers, described by 11 variables (the test dataset doesn't contain target value.)\n\n2. Combine test and train data into one \"all_data\" DataFrame.   \nTo do so, I create a sequence of DataFrame objects and use pandas concat method. Terget values of testing data in resulting dataset will be NaN.  \nCheck the shape of the result DataFrame and take a look at the first 4 rows: \n Overall, we have information about 1309 passengers. I am guessing, this dataset contains data only about passengers, not crew members (we know, that Titanic carried 2224 people). \n ## 5.2 Types of the variables \n Data types, non-null values count: \n Age and Fare are continuous numeric variables.  \nPclass is integer, but in fact it is categorical variable, represented by 3 numbers.  \nAfter previous manipulations, Survived variable has type 'float', it's not correct, since it's categorical variable too, but it will not influence my EDA process, so I will let it be float for now.\n \n # 5. First look: variables, NAs \n## 5.1 Variables\nFrom the data overview of the competition, we have a description of each variable:\n* PassengerId - unique identifier\n* Survived:\n        0 = No\n        1 = Yes\n* Pclass: Ticket class\n        1 = 1st, Upper\n        2 = 2nd, Middle\n        3 = 3rd, Lower\n* Name: full name with a title\n* Sex: gender\n* Age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n* Sibsp: Number of siblings / spouses aboard the Titanic. The dataset defines family relations in this way:\n        Sibling = brother, sister, stepbrother, stepsister\n        Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n* Parch: Number of parents / children aboard the Titanic. The dataset defines family relations in this way:\n        Parent = mother, father\n        Child = daughter, son, stepdaughter, stepson\n        Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket: Ticket number.\n* Fare: Passenger fare.\n* Cabin: Cabin number.\n* Embarked: Port of Embarkation:\n        C = Cherbourg\n        Q = Queenstown\n        S = Southampton \n ## 5.3 Check data for NA\nTo check the dataset for NAs I am using **isna()** dataframe function, which returns a boolean same-sized object indicating if the values are NA and then I am calculating the number of True values for each variable.   \nNA values for each dataframe (train, test, all) presented in the table below: \n There are overall 263 missing Age values, 1 missing Fare, 1014 NAs in Cabin variable, and 2 in Embarked variable.  \n418 NA in Survived variable due to the absence of this information in the test dataset. I will not impute these missings in the current notebook :) So, when I will use this variable for visualization, there will be information only for the training part of the data.\n\nIn this notebook I will do some missing data handling for the combined dataset. But in the second part of my work (ML solution) this should be done based on what we know only about training data, to avoid any data leakage. \n # 6. Exploring the data \n ## 6.1 Survivals - target value\nLet's calculate and visualise distribution of our target variable - 'Survived'.  \nA countplot of seaborn module is a very useful way to show the counts of observations in each category.  \nSince we have target only for the training part, these numbers don't include all passengers. \n We have 891 passengers in train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived.  \nBut we know, that lifeboats could carry 53% of total passengers. \n ## 6.2 AGE\nWhat is the age of passengers, how it relates to the chances of survival, and how it changes depending on class and gender.\n### 6.2.1 Age distribution\nWe have 263 missing values:  \n* 177 missing in the training dataset \n* 86 in the test dataset\n\nOverall age distribution (seaborn distplot) and descriptive statistics: \n The distribution of Age is slightly right skewed. The Age vary from about **0.17** year to **80** years with mean = 29.88, and there don't seem to be any obvious outliers, but we will check it. \n ### 6.2.2 Age by surviving status\nDid age had a big influence on chances to survive?  \nTo visualize two age distributions, grouped by surviving status I am using boxlot and stripplot showed together: \n The mean age of survived passenger is 28.34 which on 2.28 smaller than the mean age of drowned passengers (only passengers we know survived status for).   \nThe minimum age of drowned passengers is 1 y.o which is very sad.  \nThe maximum age of survived passenger is 80 y.o, let's check if there is no mistake. \n Actually, Mr Algernon Henry Barkworth was born on 4 June 1864.He was 48 in 1912 and died in 1945 at 80 y.o.\n \n Let's update our description:  \nThe mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for).=\nThe maximum age of survived passenger is 63 y.o.  \nIt looks like there is a slightly bigger chance to survive for younger people. \n ### 6.2.3 Age by class\nThere I will compare three age distributions, grouped by class of the passenger.  \nAs visualisations I will use 2 gaphs:\n1. boxplot+stripplot as before\n2. kdeplot, to plot age density curves for each class. This method can't handle missing values, so I filter the data before using it. \n 1st class has wider distribution compare to 2nd and 3rd and almost symmetric.  \nBoth 2nd and 3rd classes age distributions are right skewed.  \nThe youngest passenger has 3rd class ticket, age = 0.17.  \nThe oldest passenger has 1st class ticket, age = 76.  \n3rd class mean age = 24.8, 2nd classe average age is 29.5 and 1st class average age is 39.1.   \n \n \nSince survived passengers on average younger than drowned, does it mean, that 3rd class passengers had more chances to survive? We will discover it later.  \n\nFrom graphs we can see difference in age distribution between classes. So when I will do missing data imputation I will take class into account.   \n ### 6.2.4 Age vs class vs gender\nComparison of age distribution by gender I will do separately for each class since we have such a noticeable age difference between classes. \n The oldest and the youngest passengers are female.  \nIn each class the average Age of female are slightly less than the average Age of male passengers. \n ## 6.3 What is in the name? \nEach passenger Name value contains the title of the passenger which we can extract and discover.  \nTo create new variable \"Title\":  \n1. I am using method 'split' by comma to divide Name in two parts and save the second part\n2. I am splitting saved part by dot and save first part of the result\n3. To remove spaces around the title I am using 'split' method\n\nTo visualize, how many passengers hold each title, I chose countplot. \n The most frequent title among passangers is Mister (Mr.) - general title or respect of an adult male. The second title by its frequency is Miss (unmarried woman), the third - Mrs. (married woman).  \nOther titles are less frequent, I will discover if I can combine them into particular groups. I am going to use titles as a fiture, but if they split the data too much, leaving just a few observations in each group, it can lead to overfitting. And for a general understanding of the data, it will be more convenient to put titles in clearer groups.\n\n* Master -  By the late 19th century, etiquette dictated that men be addressed as Mister, and boys as Master.\n* Mme -  Madame. a French title of respect equivalent to \u201cMrs.\u201d, used alone or prefixed to a woman's married name or title. I will add to \"Mrs\".\n* Mlle - Mademoiselle is a French courtesy title, abbreviated Mlle, traditionally given to an unmarried woman. The equivalent in English is \"Miss\". I will add to \"Miss\" group.\n* Dr. - Doctor is an academic title\n* Rev. - Reverend, is usually a courtesy title for Protestant Christian ministers or pastors.\n\n\"Military\" group of titles:\n* Capt. -Captain is a title for the commander of a military unit\n* Major is a military rank of commissioned officer status\n* Col. - The honorary title of Colonel is conferred by several states in the US and certain military units of the Commonwealth of Nations\n\n\"Honor\"  group of titles:\n* Sir -  is a formal English honorific address for men. Sir is used for men titled knights i.e. of orders of chivalry, and later also to baronets, and other offices. \n* the Countess - is a historical title of nobility\n* Lady - a formal title in the United Kingdom. A woman with a title of nobility or honorary \n* Jonkheer - is an honorific in the Low Countries denoting the lowest rank within the nobility. \n* Don - is an honorific prefix primarily used in Spain and the former Spanish Empire, Italy, Portugal, the Philippines, Latin America, Croatia, and Goa. (male)\n* Dona - Feminine form for don (honorific) a Spanish, Portuguese, southern Italian, and Filipino title, given as a mark of respect\n\n\nNot sure about the title Ms,we have only 2 passengers with this title, I will convert it to Miss.\n\nI created a dictionary of titles and I am using method \"map\" to create variable \"Title_category\". \n * The smallest group is \"honor\", passengers with royal-kind titles.  \n\nTraining data:\n* The biggiest proportion of survivals is in \"Mrs\" group - married woman.   \n* More than 80% drowned in \"Mr.\" group.  \n* Nobody survived among Reverend group. \n If we consider the survivors not by percentage within each group but by comparing the number of survivors between groups, then \"Miss\" title category is the luckiest one. The \"Mr\" category lost the biggest number of passengers.\n\nLet's also visualize, how Title categories and ticket classes are related: \n * All honor and military titles occupied the 1st class.  \n* All Reverends occupied 2nd class.\n* The biggest percent of the 3rd class is in the Master category.\n\nFor sure, there is a relationship between variables, and survival was influenced not only by the title itself but by a combination of factors that are to some extent interrelated. How class could relate on surviving? Let's go further and discover. \n ## 6.4 Cabin\n![Titanic_cutaway_diagram-small.png](attachment:Titanic_cutaway_diagram-small.png)\n\nFrom the number of the cabin we can extract first letter, which will tell us about placement of the cabin on the ship! And it seems to me as a very important knowlege:   \n* How close cabin located to the lifeboats\n* How far from the most damaged parts of the ship\n* How close to people who have information about what is happening and how to act\n* How many obstacles passenger had in the way to the lifeboat\n\nI found some description of each Titanic deck:\n\nThere were 8 decks: the upperdeck - for lifeboats, other 7 were under it and had letter symbols:\n* **A**: it did not run the entire length of the vessel (i.e. it did not reach from the stern to the bow of the vessel), and was intended for passengers of the **1st class**.\n* **B**: it did not run the entire length of the ship (it was interrupted by 37 meters above the C deck, and served as a place for anchors in the front).\n* **C**: in the front part of the galley, dining room for the crew, as well as a walking area for passengers of the 3rd class.\n* **D**: a walking area for passengers .\n* **E**: cabins of the **1st and 2nd class**.\n* **F**: part of the passenger cabins of the **2nd class**, most of the cabins of the **3rd class**.\n* **G**: did not run the entire length of the ship, the boiler rooms were located in the center.\n* **T** - boat deck ?\n\nTo the passengers without deck information I will imput U letter (as unknown). \n Most passengers don't have cabin numbers ('U').  \nThe largest part of passengers with known cabin numbers were located on the  'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'.  \nDeck A was the closest to the deck with lifeboats, but it is the last in surviving rate (except unknown and T deck). How did it happen? \n I was curious, so I read a bit about some of these passengers:  \n[John Hugo Ross](https://www.encyclopedia-titanica.org/titanic-victim/john-hugo-ross.html) When he boarded on 10 April 1912, he was so ill from dysentery he had to be carried to his cabin on a stretcher. When Ross was told the ship had struck an iceberg and that he should get dressed, Ross refused to believe the trouble serious. \"Is that all,?\" he told Peuchen. \"It will take more than an iceberg to get me off this ship.\" Presumably, Ross drowned in his bed.  \n\n[Andrews, Mr. Thomas Jr](https://en.wikipedia.org/wiki/Thomas_Andrews) was a managing director of H&W (built the Titanic) in charge of designing and was familiar with every detail of the construction of the firm's ships. He helped to evacuate people.\n\n[Roebling, Mr. Washington Augustus II ](https://www.encyclopedia-titanica.org/titanic-victim/washington-roebling.html) helped to evacuate people as well.\n\nIt is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergensy were involved in the rescue process.\n\nFor training process it will be better to include passenger from T deck to the A deck group. \n ## 6.5 Family\nDoes the size of the family on Board together affect the chances of surviving a disaster? Does having children increase the chance of getting into a boat, or is it easier to survive being single?  \nI calculate the family size, by summarizing the number of siblings with the parch number  plus 1 (passenger himself).  \nFamily size = sib + parch + 1\n\n### 6.5.1 Calculate family size \n Looks strange that there are 16 passengers with family size of 7, for example. Let's check!  \nAlso, I will add a surname variable, by extraxting first word ow the name. \n #### size 7\n1. Group people with family size = 7 by Surname  \nWe have 9 Andersons, who have family size of 7 \n 2. Let's group Andersons with 7-size family by ticket number.  \nThere are  7 of them used the same ticket and travelled together. 5 children (each of them has 4 siblings) and 2 parents.\nTo passengers used separated tickets. \n Looks like they actually traveled alone, I will correct that data. \n #### size 5\nThere are some inconsistencies in other categories, with fewer relatives.  \nLet's check people with 5-size family and group them by Surname: \n Kink-Heilmann, Mr. Anton\t had 2 other siblings on the ship unlike his wife, for whom these relatives do not fit the description of relatives in the data set. We will assume that all other \"mismatches\" in the groups are similar to this. Since I plan to group the size of families into groups, this will eliminate possible inconsistencies. \n ### 6.5.2 Family size and chanses for surviving \n * There were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  \n* Most of the passengers were traveling alone, percent of survivals not very large.  \n* The biggest proportion of survived passengers in group of people who had 4 family members on board. \n\nWe can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \nI will create 'Family_size_group' variable with four categories: \n* single\n* usual (sizes 2, 3, 4)\n* big (5, 6, 7)\n* and large (all bigger then 7) \n Large families are all from 3rd class and no one from the training part of the dataset is survived.  \nThe biggest proportion of the 1st class in the usual size of the family and the proportion of survivors in the usual family is the biggest. \n ## 6.6 Class\nWe have made a lot of assumptions about the survival rate depending on the classes. Let's now look closely at this variable.\n\n### 6.6.1 Passengers by class \n Most of the Titanic's passengers were traveling third class (709).  \nThe second class is the smallest in terms of the number of passengers. \n ### 6.6.2 Class vs surviving status \n Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned. \n ### 6.6.3 Class vs surviving status vs gender \n However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the female survived. \n ### 6.6.4 Class vs. Gender vs. Age -> Surviving status \nFor better understanding how the combination of some factors influence on chances to survive, lets break passengers into 18 imaginary groups separated by:\n* **Class** (1 / 2 / 3)\n* **Gender** (male / female)\n* **Age** ( <16 / 16-40 / 40<)  \n\nTo do so I will create 6 stripplots (3 for male, 3 for female), with values grouped by Surviving status and add background color to separate age groups: \n From these graphs (training data only) we can see, that \n* only one kid (<16) from 1st and 2nd classes are drowned (female from the 1st class).\n* but children from the 3rd class were not so lucky, looks like chances to survive for passengers <16 were 50/50 for male and female.\n* most females from 1st and 2nd class are survived, without much difference in Age.\n* females from 3rd class in Age group 40+ drowned except one.\n* similar picture for males in 2nd and 3rd classes in the Age group 40+: only 2 from each class are survived.\n* for 40+ males from 1st class situation were slightly different, there are more survived passengers.\n* the largest \"accumulation\" of drowned passengers is observed in the Age group 16-40 males, 3rd class. \n ## 6.7 Gender\nLet's discover gender a little bit more: \n There were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers. \n ## 6.8 Embarked\nTitanic had 3 embarkation points before the ship started its route to New York:\n* Southampton\n* Cherbourg\n* Queenstown  \n\nSome passengers could leave Titanic in Cherbourg or Queenstown and avoid catastrophe. Also, the point of embarkation could have an influence on ticket fare and location on the ship.  \n\n![09269a9f7d50a3f019182a11f7aa7981.jpg](attachment:09269a9f7d50a3f019182a11f7aa7981.jpg)\n\nPort of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n \n * Most number of passengers (914) were embarked in Southampton. Also Southampton has the biggiest proportion of drowned passengers.\n* 270 passengers emarked in Cherbourg and more than 50% of them survived (in the training dataset). \n* 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers\n \n * The wider fare distribution among passengers who embarked in Cherbourg. It makes scence - many first-class passengers boarded the ship here, but the share of third-class passengers is quite significant.\n* The smallest variation in the price of passengers who boarded in q. Also, the average price of these passengers is the smallest, I think this is due to the fact that the path was supposed to be the shortest + almost all third-class passengers.\n\nLet's check NA values of Embarked variable: \n These two passengers traveled together (same ticket number). To impute missing values, we can use mode value for passengers with the closest fare value and Pclass. \n ## 6.9 Fare\n \n We can observe that the distribution of prices for the second and third class is very similar. The distribution of first-class prices is very different, has a larger spread, and on average prices are higher. \n\nLet's add colours to our points to indicate surviving status of passenger (there will be only data from training part of the dataset): \n Looks like the bigger passenger paid, the more chances to survive he had.  \nWhat about zero fare in the first class? Is it a mistake? \n Some of the passengers have \"Line\" tickets, perhaps they were somehow involved in the Titanic, but were not the ship's crew. I don't think we should change these prices, but add an additional feature for these passengers. \n # 7. Conclusion\nWe know that there were not enough boats on Board the Titanic for all passengers to be able to evacuate. After studying the information about the passengers, we can make some assumptions about who had a better chance of survival in a shipwreck situation as well as General observations about passengers.\n\n* There are 891 passengers in the train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived. But we know, that lifeboats (16 wooden lifeboats and four collapsible) could carry 53% of total passengers.\n* The Age of all passengers vary from about 0.17 year to 80 years with average 29.88. The mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for). It looks like there is a slightly bigger chance to survive for younger people.\n* Exploring the title of passengers, we can see that the biggest proportion of survivors is in the \"Mrs\" group - a married woman. More than 80% drowned in the \"Mr.\" group and nobody survived among the Reverend group.\n* Most passengers don't have cabin numbers. The largest part of passengers with known cabin numbers was located on the 'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'. Deck A was the closest to the deck with lifeboats, but it is the last in the surviving rate.\n* The family size on board also seems to have an influence on chances for survival: there were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  We can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \n* Most of the Titanic's passengers were traveling third class (709). The second class is the smallest in terms of the number of passengers. Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first-class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.\n* However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the females survived.  \nThere were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.  \n* Most numbers of passengers (914) were embarked in Southampton. Also, Southampton has the biggest proportion of drowned passengers. 270 passengers embarked in Cherbourg and more than 50% of them survived (in the training dataset). 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers.  \n\n \nIf we use a naive approach and consider all the parameters separately, then young female first-class passengers with the title Mrs have a moderate number of relatives on Board, who paid a large amount for a ticket and went on Board in  Cherbourg have a better chance of survival. \nFor sure, there is a relationship between variables, and survival was influenced not only by the title, or ticket, or age itself but by a combination of factors that are to some extent interrelated.   \nAnd It is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergency were involved in the rescue process.\n\n[**Second part of my work**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial) with Titanic dataset and contains:\n\n* Missing data imputation\n* Feature generation\n* Models implementation and tuning: Logistic Regression, Random Forest, XGBoost\n* Comparing models and submission\n",
    "n_cells": 115,
    "n_code_cells": 51,
    "n_markdown_cells": 64,
    "n_raw_cells": 0,
    "n_outputs": 51,
    "r_code_cells": 0.4434782608695652,
    "r_markdown_cells": 0.5565217391304348,
    "r_raw_cells": 0.0,
    "r_outputs": 1.0,
    "n_exceptions": 0,
    "r_exceptions": 0.0,
    "n_lines": 874,
    "n_lines_code": 543,
    "n_lines_markdown": 331,
    "lines_per_cell": [
        1,
        2,
        8,
        6,
        7,
        4,
        9,
        12,
        6,
        8,
        1,
        1,
        1,
        1,
        4,
        28,
        3,
        6,
        4,
        1,
        4,
        23,
        1,
        2,
        8,
        12,
        5,
        1,
        3,
        14,
        2,
        3,
        1,
        2,
        2,
        2,
        4,
        5,
        36,
        2,
        10,
        2,
        28,
        6,
        2,
        8,
        23,
        26,
        1,
        25,
        43,
        6,
        9,
        3,
        14,
        5,
        22,
        3,
        25,
        4,
        1,
        10,
        6,
        4,
        2,
        1,
        3,
        1,
        1,
        3,
        1,
        1,
        1,
        3,
        3,
        1,
        1,
        1,
        1,
        22,
        10,
        5,
        20,
        2,
        4,
        11,
        2,
        1,
        17,
        2,
        1,
        3,
        1,
        7,
        66,
        8,
        2,
        27,
        2,
        12,
        34,
        4,
        5,
        2,
        4,
        1,
        1,
        2,
        3,
        3,
        3,
        2,
        1,
        1,
        28
    ],
    "lines_per_code_cell": [
        4,
        12,
        8,
        1,
        6,
        23,
        1,
        12,
        5,
        14,
        2,
        1,
        2,
        2,
        36,
        2,
        28,
        6,
        23,
        1,
        25,
        43,
        9,
        14,
        3,
        25,
        1,
        4,
        1,
        1,
        1,
        1,
        1,
        3,
        1,
        1,
        22,
        5,
        20,
        11,
        17,
        3,
        66,
        27,
        34,
        5,
        2,
        1,
        3,
        3,
        1
    ],
    "lines_per_markdown_cell": [
        1,
        2,
        8,
        6,
        7,
        9,
        6,
        1,
        1,
        1,
        4,
        28,
        3,
        4,
        1,
        4,
        2,
        8,
        1,
        3,
        3,
        2,
        4,
        5,
        10,
        2,
        2,
        8,
        26,
        6,
        3,
        5,
        22,
        4,
        10,
        6,
        2,
        3,
        3,
        1,
        3,
        1,
        1,
        10,
        2,
        4,
        2,
        1,
        2,
        1,
        1,
        7,
        8,
        2,
        2,
        12,
        4,
        4,
        1,
        2,
        3,
        2,
        1,
        28
    ],
    "ave_lines_per_cell": 7.6,
    "ave_lines_per_code_cell": 10.647058823529411,
    "ave_lines_per_markdown_cell": 5.171875,
    "max_lines_per_cell": 66,
    "max_lines_per_code_cell": 66,
    "max_lines_per_markdown_cell": 28,
    "min_lines_per_cell": 1,
    "min_lines_per_code_cell": 1,
    "min_lines_per_markdown_cell": 1,
    "n_chars": 53280,
    "n_chars_code": 21366,
    "n_chars_markdown": 31914,
    "chars_per_cell": [
        60,
        4031,
        668,
        1100,
        589,
        92,
        469,
        367,
        561,
        299,
        178,
        29,
        34,
        15,
        334,
        1121,
        321,
        242,
        606,
        23,
        312,
        832,
        51,
        166,
        328,
        347,
        256,
        193,
        199,
        605,
        86,
        308,
        50,
        108,
        117,
        86,
        315,
        308,
        1334,
        84,
        661,
        173,
        980,
        378,
        151,
        456,
        726,
        2324,
        33,
        758,
        1308,
        244,
        278,
        302,
        550,
        408,
        1493,
        200,
        1126,
        473,
        61,
        1284,
        394,
        186,
        168,
        71,
        108,
        64,
        77,
        223,
        99,
        78,
        66,
        258,
        152,
        64,
        81,
        337,
        47,
        829,
        648,
        488,
        898,
        241,
        168,
        470,
        139,
        35,
        727,
        515,
        45,
        144,
        149,
        450,
        2505,
        739,
        54,
        955,
        323,
        482,
        1399,
        328,
        211,
        87,
        495,
        41,
        163,
        12,
        139,
        344,
        183,
        133,
        51,
        221,
        4405
    ],
    "chars_per_code_cell": [
        92,
        367,
        299,
        15,
        242,
        832,
        51,
        347,
        256,
        605,
        86,
        50,
        117,
        86,
        1334,
        84,
        980,
        378,
        726,
        33,
        758,
        1308,
        278,
        550,
        200,
        1126,
        61,
        186,
        71,
        64,
        77,
        99,
        78,
        258,
        64,
        81,
        829,
        488,
        898,
        470,
        727,
        144,
        2505,
        955,
        1399,
        211,
        87,
        41,
        139,
        183,
        51
    ],
    "chars_per_markdown_cell": [
        60,
        4031,
        668,
        1100,
        589,
        469,
        561,
        178,
        29,
        34,
        334,
        1121,
        321,
        606,
        23,
        312,
        166,
        328,
        193,
        199,
        308,
        108,
        315,
        308,
        661,
        173,
        151,
        456,
        2324,
        244,
        302,
        408,
        1493,
        473,
        1284,
        394,
        168,
        108,
        223,
        66,
        152,
        337,
        47,
        648,
        241,
        168,
        139,
        35,
        515,
        45,
        149,
        450,
        739,
        54,
        323,
        482,
        328,
        495,
        163,
        12,
        344,
        133,
        221,
        4405
    ],
    "ave_chars_per_line": 60.961098398169334,
    "ave_chars_per_cell": 463.30434782608694,
    "ave_chars_per_code_cell": 418.94117647058823,
    "ave_chars_per_markdown_cell": 498.65625,
    "max_chars_per_cell": 4405,
    "max_chars_per_code_cell": 2505,
    "max_chars_per_markdownell": 4405,
    "min_chars_per_cell": 12,
    "min_chars_per_code_cell": 15,
    "min_chars_per_markdown_cell": 12,
    "r_lines_code": 0.6212814645308925,
    "r_lines_markdown": 0.37871853546910755,
    "r_chars_markdown": 0.5989864864864864,
    "r_chars_code": 0.4010135135135135,
    "all_cells": [
        {
            "source": "![MA_00079563_yvu84f.jpg](attachment:MA_00079563_yvu84f.jpg)",
            "mc_idx": 0,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#1.-Introduction\" data-toc-modified-id=\"1.-Introduction-1\">1. Introduction</a></span></li><li><span><a href=\"#2.-Domain-information\" data-toc-modified-id=\"2.-Domain-information-2\">2. Domain information</a></span></li><li><span><a href=\"#3.-Loading-libraries:\" data-toc-modified-id=\"3.-Loading-libraries:-3\">3. Loading libraries:</a></span></li><li><span><a href=\"#4.-Loading-data\" data-toc-modified-id=\"4.-Loading-data-4\">4. Loading data</a></span></li><li><span><a href=\"#5.-First-look:-variables,-NAs\" data-toc-modified-id=\"5.-First-look:-variables,-NAs-5\">5. First look: variables, NAs</a></span><ul class=\"toc-item\"><li><span><a href=\"#5.1-Variables\" data-toc-modified-id=\"5.1-Variables-5.1\">5.1 Variables</a></span></li><li><span><a href=\"#5.2-Types-of-the-variables\" data-toc-modified-id=\"5.2-Types-of-the-variables-5.2\">5.2 Types of the variables</a></span></li><li><span><a href=\"#5.3-Check-data-for-NA\" data-toc-modified-id=\"5.3-Check-data-for-NA-5.3\">5.3 Check data for NA</a></span></li></ul></li><li><span><a href=\"#6.-Exploring-the-data\" data-toc-modified-id=\"6.-Exploring-the-data-6\">6. Exploring the data</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.1-Survivals---target-value\" data-toc-modified-id=\"6.1-Survivals---target-value-6.1\">6.1 Survivals - target value</a></span></li><li><span><a href=\"#6.2-AGE\" data-toc-modified-id=\"6.2-AGE-6.2\">6.2 AGE</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.2.1-Age-distribution\" data-toc-modified-id=\"6.2.1-Age-distribution-6.2.1\">6.2.1 Age distribution</a></span></li><li><span><a href=\"#6.2.2-Age-by-surviving-status\" data-toc-modified-id=\"6.2.2-Age-by-surviving-status-6.2.2\">6.2.2 Age by surviving status</a></span></li><li><span><a href=\"#6.2.3-Age-by-class\" data-toc-modified-id=\"6.2.3-Age-by-class-6.2.3\">6.2.3 Age by class</a></span></li><li><span><a href=\"#6.2.4-Age-vs-class-vs-gender\" data-toc-modified-id=\"6.2.4-Age-vs-class-vs-gender-6.2.4\">6.2.4 Age vs class vs gender</a></span></li></ul></li><li><span><a href=\"#6.3-What-is-in-the-name?\" data-toc-modified-id=\"6.3-What-is-in-the-name?-6.3\">6.3 What is in the name?</a></span></li><li><span><a href=\"#6.4-Cabin\" data-toc-modified-id=\"6.4-Cabin-6.4\">6.4 Cabin</a></span></li><li><span><a href=\"#6.5-Family\" data-toc-modified-id=\"6.5-Family-6.5\">6.5 Family</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.5.1-Calculate-family-size\" data-toc-modified-id=\"6.5.1-Calculate-family-size-6.5.1\">6.5.1 Calculate family size</a></span><li><span><a href=\"#6.5.2-Family-size-and-chanses-for-surviving\" data-toc-modified-id=\"6.5.2-Family-size-and-chanses-for-surviving-6.5.2\">6.5.2 Family size and chanses for surviving</a></span></li></ul></li><li><span><a href=\"#6.6-Class\" data-toc-modified-id=\"6.6-Class-6.6\">6.6 Class</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.6.1-Passengers-by-class\" data-toc-modified-id=\"6.6.1-Passengers-by-class-6.6.1\">6.6.1 Passengers by class</a></span></li><li><span><a href=\"#6.6.2-Class-vs-surviving-status\" data-toc-modified-id=\"6.6.2-Class-vs-surviving-status-6.6.2\">6.6.2 Class vs surviving status</a></span></li><li><span><a href=\"#6.6.3-Class-vs-surviving-status-vs-gender\" data-toc-modified-id=\"6.6.3-Class-vs-surviving-status-vs-gender-6.6.3\">6.6.3 Class vs surviving status vs gender</a></span></li><li><span><a href=\"#6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status\" data-toc-modified-id=\"6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status-6.6.4\">6.6.4 Class vs. Gender vs. Age -&gt; Surviving status</a></span></li></ul></li><li><span><a href=\"#6.7-Gender\" data-toc-modified-id=\"6.7-Gender-6.7\">6.7 Gender</a></span></li><li><span><a href=\"#6.8-Embarked\" data-toc-modified-id=\"6.8-Embarked-6.8\">6.8 Embarked</a></span></li><li><span><a href=\"#6.9-Fare\" data-toc-modified-id=\"6.9-Fare-6.9\">6.9 Fare</a></span></li></ul></li><li><span><a href=\"#7.-Conclusion\" data-toc-modified-id=\"7.-Conclusion-7\">7. Conclusion</a></span></li></ul></div>",
            "mc_idx": 1,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 1. Introduction\nSince I am currently located in Belfast (the city in which the Titanic was built) for a year for my Master's degree, I could not get past this legendary Titanic competition! \n  \nThis notebook is the **first part** of my work and contains **EDA** (exploratory data analysis) and missing data research.\n\n\ud83c\udf89 \u2728 [** !!!!!! Second part with ML *solution* you can check here !!!!!**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial)\n\n*I collapsed all the cells with the code for easy viewing. If you are interested in viewing the code, you can click \"code\" button near the graph or fork my notebook to view the entire code.*",
            "mc_idx": 2,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 2. Domain information\n[Titanic](https://en.wikipedia.org/wiki/Sinking_of_the_RMS_Titanic) was a British passenger liner operated by the White Star Line. Titanic was on its way from Southampton to New York City when it sank in the North Atlantic Ocean in the early morning hours of **15 April 1912** after Titanic collided with an iceberg. The ship carried **2224** people, considering passengers and crew aboard,**1514** of them died.  \n\nTitanic carried 16 wooden lifeboats and four collapsibles, which could accommodate 1,178 people, only one-third of Titanic's total capacity (and 53% of real number of passengers). At the time, lifeboats were intended to ferry survivors from a sinking ship to a rescuing ship\u2014not keep afloat the whole population or power them to shore. If the SS Californian would responded to Titanic's distress calls, the lifeboats may have been adequate to ferry the passengers to safety as planned, but it didn't happen and the only way to survive were to get on the lifeboat.\n\nThe main question of the competition is **\u201cwhat sorts of people were more likely to survive?\u201d**",
            "mc_idx": 3,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 3. Loading libraries: \n\nList of libraries I am using in this kernel:\n* pandas - offers data structures and operations for manipulating numerical tables and time series. (imported as pd) [Documentation](https://pandas.pydata.org/)\n* seaborn - data visualization library based on matplotlib. [Documentation](https://seaborn.pydata.org/)\n* matplotlib.pyplot - to create some visualizations (imported as plt) [Documentation](https://matplotlib.org/tutorials/introductory/pyplot.html)\n* numpy - The fundamental package for scientific computing with Python. [Documentation](https://numpy.org/)",
            "mc_idx": 4,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np",
            "mc_idx": 5,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.025,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.05,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 4
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "matplotlib": 1,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "# 4. Loading data\nAs input information I have two CSV files:\n\n* **train.csv** - training part of the dataset, contains labels and information about passengers.\n* **test.csv** - testing part of the dataset, doesn't contain labels.\n\nIn this notebook I will use all available information (train + test datasets) to perform exploratory data analysis.  \n\n1. First, load both csv files into two DataFrames, using pandas read_csv method and check the shape of the loaded data:",
            "mc_idx": 6,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# path to train dataset\ntrain_path = '../input/titanic/train.csv'\n# path to test dataset\ntest_path = '../input/titanic/test.csv'\n\n# Read a comma-separated values (csv) file into pandas DataFrame\ntrain_data = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)\n\n# shape of tha data\nprint('Train shape: ', train_data.shape)\nprint('Test shape: ', test_data.shape)",
            "mc_idx": 7,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 4,
                    "pd.read_": 4,
                    "dataset": 2
                },
                "Exploratory_Data_Analysis": {
                    "shape": 5
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 5
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Train shape:  (891, 12)\nTest shape:  (418, 11)\n"
                    ]
                },
                "mc_idx": 7,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "The training part contains information about 891 passengers, described by 12 variables, including 1 target variable.  \nThe testing part contains 418 observations, i.e information about passengers, described by 11 variables (the test dataset doesn't contain target value.)\n\n2. Combine test and train data into one \"all_data\" DataFrame.   \nTo do so, I create a sequence of DataFrame objects and use pandas concat method. Terget values of testing data in resulting dataset will be NaN.  \nCheck the shape of the result DataFrame and take a look at the first 4 rows:",
            "mc_idx": 8,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# create a sequence of DataFrame objects\nframes = [train_data, test_data]\n# Concatenate pandas objects along a particular axis \nall_data = pd.concat(frames, sort = False)\n# shape of the data\nprint('All data shape: ', all_data.shape)\n# Show first 4 rows of the concatenated DataFrame\nall_data.head(4)",
            "mc_idx": 9,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "shape": 3,
                    ".head": 1
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 3
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "All data shape:  (1309, 12)\n",
                        "   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  "
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 1
            }
        },
        {
            "source": "Overall, we have information about 1309 passengers. I am guessing, this dataset contains data only about passengers, not crew members (we know, that Titanic carried 2224 people).",
            "mc_idx": 10,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 5.2 Types of the variables",
            "mc_idx": 11,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Data types, non-null values count:",
            "mc_idx": 12,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data.info()",
            "mc_idx": 13,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".info(": 1,
                    "info": 1,
                    ".info": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  1309 non-null   int64  \n 1   Survived     891 non-null    float64\n 2   Pclass       1309 non-null   int64  \n 3   Name         1309 non-null   object \n 4   Sex          1309 non-null   object \n 5   Age          1046 non-null   float64\n 6   SibSp        1309 non-null   int64  \n 7   Parch        1309 non-null   int64  \n 8   Ticket       1309 non-null   object \n 9   Fare         1308 non-null   float64\n 10  Cabin        295 non-null    object \n 11  Embarked     1307 non-null   object \ndtypes: float64(3), int64(4), object(5)\nmemory usage: 132.9+ KB\n"
                    ]
                },
                "mc_idx": 13,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "Age and Fare are continuous numeric variables.  \nPclass is integer, but in fact it is categorical variable, represented by 3 numbers.  \nAfter previous manipulations, Survived variable has type 'float', it's not correct, since it's categorical variable too, but it will not influence my EDA process, so I will let it be float for now.\n",
            "mc_idx": 14,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 5. First look: variables, NAs \n## 5.1 Variables\nFrom the data overview of the competition, we have a description of each variable:\n* PassengerId - unique identifier\n* Survived:\n        0 = No\n        1 = Yes\n* Pclass: Ticket class\n        1 = 1st, Upper\n        2 = 2nd, Middle\n        3 = 3rd, Lower\n* Name: full name with a title\n* Sex: gender\n* Age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n* Sibsp: Number of siblings / spouses aboard the Titanic. The dataset defines family relations in this way:\n        Sibling = brother, sister, stepbrother, stepsister\n        Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n* Parch: Number of parents / children aboard the Titanic. The dataset defines family relations in this way:\n        Parent = mother, father\n        Child = daughter, son, stepdaughter, stepson\n        Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket: Ticket number.\n* Fare: Passenger fare.\n* Cabin: Cabin number.\n* Embarked: Port of Embarkation:\n        C = Cherbourg\n        Q = Queenstown\n        S = Southampton",
            "mc_idx": 15,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 5.3 Check data for NA\nTo check the dataset for NAs I am using **isna()** dataframe function, which returns a boolean same-sized object indicating if the values are NA and then I am calculating the number of True values for each variable.   \nNA values for each dataframe (train, test, all) presented in the table below:",
            "mc_idx": 16,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "#### check data for NA values\nall_data_NA = all_data.isna().sum()\ntrain_NA = train_data.isna().sum()\ntest_NA = test_data.isna().sum()\n\npd.concat([train_NA, test_NA, all_data_NA], axis=1, sort = False, keys = ['Train NA', 'Test NA', 'All NA'])",
            "mc_idx": 17,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isna": 3,
                    ".sum": 3
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "             Train NA  Test NA  All NA\nPassengerId         0      0.0       0\nSurvived            0      NaN     418\nPclass              0      0.0       0\nName                0      0.0       0\nSex                 0      0.0       0\nAge               177     86.0     263\nSibSp               0      0.0       0\nParch               0      0.0       0\nTicket              0      0.0       0\nFare                0      1.0       1\nCabin             687    327.0    1014\nEmbarked            2      0.0       2"
                    ]
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "There are overall 263 missing Age values, 1 missing Fare, 1014 NAs in Cabin variable, and 2 in Embarked variable.  \n418 NA in Survived variable due to the absence of this information in the test dataset. I will not impute these missings in the current notebook :) So, when I will use this variable for visualization, there will be information only for the training part of the data.\n\nIn this notebook I will do some missing data handling for the combined dataset. But in the second part of my work (ML solution) this should be done based on what we know only about training data, to avoid any data leakage.",
            "mc_idx": 18,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 6. Exploring the data",
            "mc_idx": 19,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.1 Survivals - target value\nLet's calculate and visualise distribution of our target variable - 'Survived'.  \nA countplot of seaborn module is a very useful way to show the counts of observations in each category.  \nSince we have target only for the training part, these numbers don't include all passengers.",
            "mc_idx": 20,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# set size of the plot\nplt.figure(figsize=(6, 4.5)) \n\n# countplot shows the counts of observations in each categorical bin using bars.\n# x - name of the categorical variable\nax = sns.countplot(x = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\n# set the current tick locations and labels of the x-axis.\nplt.xticks( np.arange(2), ['drowned', 'survived'] )\n# set title\nplt.title('Overall survival (training dataset)',fontsize= 14)\n# set x label\nplt.xlabel('Passenger status after the tragedy')\n# set y label\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Survived'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v-40, str(v), horizontalalignment = 'center', size = 14, color = 'w', fontweight = 'bold')\n    \nplt.show()",
            "mc_idx": 21,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2857142857142857,
                "Data_Extraction": 0.14285714285714285,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2857142857142857,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1,
                    "variable": 1
                },
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "sns.": 1,
                    "size": 4,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c005_o000_image_0.png",
                    5,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x324 with 1 Axes>"
                    ]
                },
                "mc_idx": 21,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "all_data['Survived'].value_counts(normalize = True)",
            "mc_idx": 22,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "0.0    0.616162\n1.0    0.383838\nName: Survived, dtype: float64"
                    ]
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "We have 891 passengers in train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived.  \nBut we know, that lifeboats could carry 53% of total passengers.",
            "mc_idx": 23,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.2 AGE\nWhat is the age of passengers, how it relates to the chances of survival, and how it changes depending on class and gender.\n### 6.2.1 Age distribution\nWe have 263 missing values:  \n* 177 missing in the training dataset \n* 86 in the test dataset\n\nOverall age distribution (seaborn distplot) and descriptive statistics:",
            "mc_idx": 24,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# set plot size\nplt.figure(figsize=(15, 3))\n\n# plot a univariate distribution of Age observations \nsns.distplot(all_data[(all_data[\"Age\"] > 0)].Age, kde_kws={\"lw\": 3}, bins = 50)\n\n# set titles and labels\nplt.title('Distrubution of passengers age (all data)',fontsize= 14)\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n# clean layout\nplt.tight_layout()",
            "mc_idx": 25,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "distplot": 1,
                    "sns.": 1,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c007_o000_image_1.png",
                    7,
                    0,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x216 with 1 Axes>"
                    ]
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics include those that summarize the central tendency, \n# dispersion and shape of a dataset\u2019s distribution, excluding NaN values.\nage_distr = pd.DataFrame(all_data['Age'].describe())\n# Transpose index and columns.\nage_distr.transpose()",
            "mc_idx": 26,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.2,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.2,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    "columns": 1,
                    "shape": 1,
                    ".describe": 1
                },
                "Data_Transform": {
                    ".transpose": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    8,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "      count       mean        std   min   25%   50%   75%   max\nAge  1046.0  29.881138  14.413493  0.17  21.0  28.0  39.0  80.0"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "The distribution of Age is slightly right skewed. The Age vary from about **0.17** year to **80** years with mean = 29.88, and there don't seem to be any obvious outliers, but we will check it.",
            "mc_idx": 27,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.2.2 Age by surviving status\nDid age had a big influence on chances to survive?  \nTo visualize two age distributions, grouped by surviving status I am using boxlot and stripplot showed together:",
            "mc_idx": 28,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize=(15, 3))\n\n# Draw a box plot to show Age distributions with respect to survival status.\nsns.boxplot(y = 'Survived', x = 'Age', data = train_data,\n     palette=[\"#3f3e6fd1\", \"#85c6a9\"], fliersize = 0, orient = 'h')\n\n# Add a scatterplot for each category.\nsns.stripplot(y = 'Survived', x = 'Age', data = train_data,\n     linewidth = 0.6, palette=[\"#3f3e6fd1\", \"#85c6a9\"], orient = 'h')\n\nplt.yticks( np.arange(2), ['drowned', 'survived'])\nplt.title('Age distribution grouped by surviving status (train data)',fontsize= 14)\nplt.ylabel('Passenger status after the tragedy')\nplt.tight_layout()",
            "mc_idx": 29,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.42857142857142855,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".boxplot(": 2,
                    "sns.": 2,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".boxplot(": 1,
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c009_o000_image_2.png",
                    9,
                    0,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x216 with 1 Axes>"
                    ]
                },
                "mc_idx": 29,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe())",
            "mc_idx": 30,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          count       mean        std   min   25%   50%   75%   max\nSurvived                                                           \n0.0       424.0  30.626179  14.172110  1.00  21.0  28.0  39.0  74.0\n1.0       290.0  28.343690  14.950952  0.42  19.0  28.0  36.0  80.0"
                    ]
                },
                "mc_idx": 30,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "The mean age of survived passenger is 28.34 which on 2.28 smaller than the mean age of drowned passengers (only passengers we know survived status for).   \nThe minimum age of drowned passengers is 1 y.o which is very sad.  \nThe maximum age of survived passenger is 80 y.o, let's check if there is no mistake.",
            "mc_idx": 31,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data[all_data['Age'] == max(all_data['Age'] )]",
            "mc_idx": 32,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                  Name  \\\n630          631       1.0       1  Barkworth, Mr. Algernon Henry Wilson   \n\n      Sex   Age  SibSp  Parch Ticket  Fare Cabin Embarked  \n630  male  80.0      0      0  27042  30.0   A23        S  "
                    ]
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "Actually, Mr Algernon Henry Barkworth was born on 4 June 1864.He was 48 in 1912 and died in 1945 at 80 y.o.\n",
            "mc_idx": 33,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "train_data.loc[train_data['PassengerId'] == 631, 'Age'] = 48\nall_data.loc[all_data['PassengerId'] == 631, 'Age'] = 48",
            "mc_idx": 34,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 34,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe())",
            "mc_idx": 35,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    13,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          count       mean        std   min   25%   50%   75%   max\nSurvived                                                           \n0.0       424.0  30.626179  14.172110  1.00  21.0  28.0  39.0  74.0\n1.0       290.0  28.233345  14.684091  0.42  19.0  28.0  36.0  63.0"
                    ]
                },
                "mc_idx": 35,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "Let's update our description:  \nThe mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for).=\nThe maximum age of survived passenger is 63 y.o.  \nIt looks like there is a slightly bigger chance to survive for younger people.",
            "mc_idx": 36,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.2.3 Age by class\nThere I will compare three age distributions, grouped by class of the passenger.  \nAs visualisations I will use 2 gaphs:\n1. boxplot+stripplot as before\n2. kdeplot, to plot age density curves for each class. This method can't handle missing values, so I filter the data before using it.",
            "mc_idx": 37,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# set size\nplt.figure(figsize=(20, 6))\n\n# set palette\npalette = sns.cubehelix_palette(5, start = 3)\n\nplt.subplot(1, 2, 1)\nsns.boxplot(x = 'Pclass', y = 'Age', data = all_data,\n     palette = palette, fliersize = 0)\n\nsns.stripplot(x = 'Pclass', y = 'Age', data = all_data,\n     linewidth = 0.6, palette = palette)\nplt.xticks( np.arange(3), ['1st class', '2nd class', '3rd class'])\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Ticket class')\n\n\nplt.subplot(1, 2, 2)\n\n# To use kdeplot I need to create variables with filtered data for each category\nage_1_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 1)]\nage_2_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 2)]\nage_3_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 3)]\n\n# Ploting the 3 variables that we create\nsns.kdeplot(age_1_class[\"Age\"], shade=True, color='#eed4d0', label = '1st class')\nsns.kdeplot(age_2_class[\"Age\"], shade=True,  color='#cda0aa', label = '2nd class')\nsns.kdeplot(age_3_class[\"Age\"], shade=True,color='#a2708e', label = '3rd class')\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Age')\nplt.xlim(0, 90)\nplt.tight_layout()\nplt.show()",
            "mc_idx": 38,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.23076923076923078,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.7692307692307693,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1,
                    "variable": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".boxplot(": 2,
                    "sns.": 6,
                    "size": 5
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".boxplot(": 1,
                    "sns.": 6,
                    ".kde": 3
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c014_o000_image_3.png",
                    14,
                    0,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 38,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Pclass')['Age'].describe())",
            "mc_idx": 39,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "        count       mean        std   min   25%   50%    75%   max\nPclass                                                            \n1       284.0  39.047254  14.353217  0.92  28.0  39.0  49.25  76.0\n2       261.0  29.506705  13.638627  0.67  22.0  29.0  36.00  70.0\n3       501.0  24.816367  11.958202  0.17  18.0  24.0  32.00  74.0"
                    ]
                },
                "mc_idx": 39,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "1st class has wider distribution compare to 2nd and 3rd and almost symmetric.  \nBoth 2nd and 3rd classes age distributions are right skewed.  \nThe youngest passenger has 3rd class ticket, age = 0.17.  \nThe oldest passenger has 1st class ticket, age = 76.  \n3rd class mean age = 24.8, 2nd classe average age is 29.5 and 1st class average age is 39.1.   \n \n \nSince survived passengers on average younger than drowned, does it mean, that 3rd class passengers had more chances to survive? We will discover it later.  \n\nFrom graphs we can see difference in age distribution between classes. So when I will do missing data imputation I will take class into account.  ",
            "mc_idx": 40,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.2.4 Age vs class vs gender\nComparison of age distribution by gender I will do separately for each class since we have such a noticeable age difference between classes.",
            "mc_idx": 41,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize=(20, 5))\npalette = \"Set3\"\n\nplt.subplot(1, 3, 1)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_1_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_1_class,\n     linewidth = 0.6, palette = palette)\nplt.title('1st class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 2)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_2_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_2_class,\n     linewidth = 0.6, palette = palette)\nplt.title('2nd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 3)\nsns.boxplot(x = 'Sex', y = 'Age',  data = age_3_class,\n     order = ['female', 'male'], palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_3_class,\n     order = ['female', 'male'], linewidth = 0.6, palette = palette)\nplt.title('3rd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.show()",
            "mc_idx": 42,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.05263157894736842,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.47368421052631576,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".boxplot(": 6,
                    "sns.": 6,
                    "size": 7
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".boxplot(": 3,
                    "sns.": 6
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c016_o000_image_4.png",
                    16,
                    0,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x360 with 3 Axes>"
                    ]
                },
                "mc_idx": 42,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\nage_1_class_stat = pd.DataFrame(age_1_class.groupby('Sex')['Age'].describe())\nage_2_class_stat = pd.DataFrame(age_2_class.groupby('Sex')['Age'].describe())\nage_3_class_stat = pd.DataFrame(age_3_class.groupby('Sex')['Age'].describe())\n\npd.concat([age_1_class_stat, age_2_class_stat, age_3_class_stat], axis=0, sort = False, keys = ['1st', '2nd', '3rd'])",
            "mc_idx": 43,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.4166666666666667,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 3,
                    "describe": 3,
                    ".describe": 3,
                    ".groupby": 3
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".groupby(": 3,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "            count       mean        std   min   25%   50%    75%   max\n    Sex                                                               \n1st female  133.0  37.037594  14.272460  2.00  24.0  36.0  48.00  76.0\n    male    151.0  40.817351  14.236835  0.92  30.0  42.0  50.00  71.0\n2nd female  103.0  27.499223  12.911747  0.92  20.0  28.0  34.00  60.0\n    male    158.0  30.815380  13.977400  0.67  23.0  29.5  38.75  70.0\n3rd female  152.0  22.185329  12.205254  0.17  16.0  22.0  30.00  63.0\n    male    349.0  25.962264  11.682415  0.33  20.0  25.0  32.00  74.0"
                    ]
                },
                "mc_idx": 43,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "The oldest and the youngest passengers are female.  \nIn each class the average Age of female are slightly less than the average Age of male passengers.",
            "mc_idx": 44,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.3 What is in the name? \nEach passenger Name value contains the title of the passenger which we can extract and discover.  \nTo create new variable \"Title\":  \n1. I am using method 'split' by comma to divide Name in two parts and save the second part\n2. I am splitting saved part by dot and save first part of the result\n3. To remove spaces around the title I am using 'split' method\n\nTo visualize, how many passengers hold each title, I chose countplot.",
            "mc_idx": 45,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data['Title'] = all_data['Name'].str.split(',', expand = True)[1].str.split('.', expand = True)[0].str.strip(' ')\n\nplt.figure(figsize=(6, 5))\nax = sns.countplot( x = 'Title', data = all_data, palette = \"hls\", order = all_data['Title'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\nplt.title('Passengers distribution by titles',fontsize= 14)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\nplt.show()\n",
            "mc_idx": 46,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.125,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 2,
                    "sns.": 1,
                    "size": 3,
                    ".value_counts": 2
                },
                "Data_Transform": {
                    ".split": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c018_o000_image_5.png",
                    18,
                    0,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x360 with 1 Axes>"
                    ]
                },
                "mc_idx": 46,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "The most frequent title among passangers is Mister (Mr.) - general title or respect of an adult male. The second title by its frequency is Miss (unmarried woman), the third - Mrs. (married woman).  \nOther titles are less frequent, I will discover if I can combine them into particular groups. I am going to use titles as a fiture, but if they split the data too much, leaving just a few observations in each group, it can lead to overfitting. And for a general understanding of the data, it will be more convenient to put titles in clearer groups.\n\n* Master -  By the late 19th century, etiquette dictated that men be addressed as Mister, and boys as Master.\n* Mme -  Madame. a French title of respect equivalent to \u201cMrs.\u201d, used alone or prefixed to a woman's married name or title. I will add to \"Mrs\".\n* Mlle - Mademoiselle is a French courtesy title, abbreviated Mlle, traditionally given to an unmarried woman. The equivalent in English is \"Miss\". I will add to \"Miss\" group.\n* Dr. - Doctor is an academic title\n* Rev. - Reverend, is usually a courtesy title for Protestant Christian ministers or pastors.\n\n\"Military\" group of titles:\n* Capt. -Captain is a title for the commander of a military unit\n* Major is a military rank of commissioned officer status\n* Col. - The honorary title of Colonel is conferred by several states in the US and certain military units of the Commonwealth of Nations\n\n\"Honor\"  group of titles:\n* Sir -  is a formal English honorific address for men. Sir is used for men titled knights i.e. of orders of chivalry, and later also to baronets, and other offices. \n* the Countess - is a historical title of nobility\n* Lady - a formal title in the United Kingdom. A woman with a title of nobility or honorary \n* Jonkheer - is an honorific in the Low Countries denoting the lowest rank within the nobility. \n* Don - is an honorific prefix primarily used in Spain and the former Spanish Empire, Italy, Portugal, the Philippines, Latin America, Croatia, and Goa. (male)\n* Dona - Feminine form for don (honorific) a Spanish, Portuguese, southern Italian, and Filipino title, given as a mark of respect\n\n\nNot sure about the title Ms,we have only 2 passengers with this title, I will convert it to Miss.\n\nI created a dictionary of titles and I am using method \"map\" to create variable \"Title_category\".",
            "mc_idx": 47,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data[all_data['Title']=='Ms']",
            "mc_idx": 48,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    19,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                       Name     Sex   Age  \\\n443          444       1.0       2  Reynaldo, Ms. Encarnacion  female  28.0   \n88           980       NaN       3    O'Donoghue, Ms. Bridget  female   NaN   \n\n     SibSp  Parch  Ticket   Fare Cabin Embarked Title  \n443      0      0  230434  13.00   NaN        S    Ms  \n88       0      0  364856   7.75   NaN        Q    Ms  "
                    ]
                },
                "mc_idx": 48,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "title_dict = {  'Mr':     'Mr',\n                'Mrs':    'Mrs',\n                'Miss':   'Miss',\n                'Master': 'Master',\n              \n                'Ms':     'Miss',\n                'Mme':    'Mrs',\n                'Mlle':   'Miss',\n\n                'Capt':   'military',\n                'Col':    'military',\n                'Major':  'military',\n\n                'Dr':     'Dr',\n                'Rev':    'Rev',\n                  \n                'Sir':    'honor',\n                'the Countess': 'honor',\n                'Lady':   'honor',\n                'Jonkheer': 'honor',\n                'Don':    'honor',\n                'Dona':   'honor' }\n\n# map titles to category\nall_data['Title_category'] = all_data['Title'].map(title_dict)",
            "mc_idx": 49,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".map(": 1,
                    ".map": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    20,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 49,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(12, 5))\n\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(x = 'Title_category', \n                   data = all_data, palette = \"hls\", \n                   order = all_data['Title_category'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\nplt.title('Passengers distribution by titles',fontsize= 12)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title_category'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\n\nax2 = fig.add_subplot(122)\nsurv_by_title_cat = all_data.groupby('Title_category')['Survived'].value_counts(normalize = True).unstack()\nsurv_by_title_cat = surv_by_title_cat.sort_values(by=1, ascending = False)\nsurv_by_title_cat.plot(kind='bar', \n                       stacked='True', \n                       color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\n\nplt.legend( ( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\n\nplt.title('Proportion of survived/drowned by titles (train data)',fontsize= 12)\n\nplt.tight_layout()\nplt.show()",
            "mc_idx": 50,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.07692307692307693,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5384615384615384,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.23076923076923078,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 2,
                    ".plot(": 2,
                    "sns.": 1,
                    "size": 4,
                    ".value_counts": 3,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".sort_values": 1,
                    ".unstack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1,
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c021_o000_image_6.png",
                    21,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 50,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "* The smallest group is \"honor\", passengers with royal-kind titles.  \n\nTraining data:\n* The biggiest proportion of survivals is in \"Mrs\" group - married woman.   \n* More than 80% drowned in \"Mr.\" group.  \n* Nobody survived among Reverend group.",
            "mc_idx": 51,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "category_survived = sns.catplot(x=\"Title_category\",  col=\"Survived\",\n                data = all_data, kind=\"count\",\n                height=4, aspect=.7)\n\ncategory_survived.set_xticklabels(rotation=45, \n    horizontalalignment='right',\n    fontweight='light')\n\nplt.tight_layout()",
            "mc_idx": 52,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c022_o000_image_7.png",
                    22,
                    0,
                    7
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 403.2x288 with 2 Axes>"
                    ]
                },
                "mc_idx": 52,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 0
            }
        },
        {
            "source": "If we consider the survivors not by percentage within each group but by comparing the number of survivors between groups, then \"Miss\" title category is the luckiest one. The \"Mr\" category lost the biggest number of passengers.\n\nLet's also visualize, how Title categories and ticket classes are related:",
            "mc_idx": 53,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "class_by_title_cat = all_data.groupby('Title_category')['Pclass'].value_counts(normalize = True)\nclass_by_title_cat = class_by_title_cat.unstack().sort_values(by = 1, ascending = False)\nclass_by_title_cat.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'])\nplt.legend(loc=(1.04,0))\n_ = plt.xticks(\n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light'  \n)\n\n\nplt.title('Proportion of 1st/2nd/3rd ticket class in each title category',fontsize= 14)\nplt.xlabel('Category of the Title')\nplt.tight_layout()",
            "mc_idx": 54,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 2,
                    "size": 1,
                    ".value_counts": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".sort_values": 1,
                    ".unstack": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c023_o000_image_8.png",
                    23,
                    0,
                    8
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x288 with 1 Axes>"
                    ]
                },
                "mc_idx": 54,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 23,
                "o_idx": 0
            }
        },
        {
            "source": "* All honor and military titles occupied the 1st class.  \n* All Reverends occupied 2nd class.\n* The biggest percent of the 3rd class is in the Master category.\n\nFor sure, there is a relationship between variables, and survival was influenced not only by the title itself but by a combination of factors that are to some extent interrelated. How class could relate on surviving? Let's go further and discover.",
            "mc_idx": 55,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.4 Cabin\n![Titanic_cutaway_diagram-small.png](attachment:Titanic_cutaway_diagram-small.png)\n\nFrom the number of the cabin we can extract first letter, which will tell us about placement of the cabin on the ship! And it seems to me as a very important knowlege:   \n* How close cabin located to the lifeboats\n* How far from the most damaged parts of the ship\n* How close to people who have information about what is happening and how to act\n* How many obstacles passenger had in the way to the lifeboat\n\nI found some description of each Titanic deck:\n\nThere were 8 decks: the upperdeck - for lifeboats, other 7 were under it and had letter symbols:\n* **A**: it did not run the entire length of the vessel (i.e. it did not reach from the stern to the bow of the vessel), and was intended for passengers of the **1st class**.\n* **B**: it did not run the entire length of the ship (it was interrupted by 37 meters above the C deck, and served as a place for anchors in the front).\n* **C**: in the front part of the galley, dining room for the crew, as well as a walking area for passengers of the 3rd class.\n* **D**: a walking area for passengers .\n* **E**: cabins of the **1st and 2nd class**.\n* **F**: part of the passenger cabins of the **2nd class**, most of the cabins of the **3rd class**.\n* **G**: did not run the entire length of the ship, the boiler rooms were located in the center.\n* **T** - boat deck ?\n\nTo the passengers without deck information I will imput U letter (as unknown).",
            "mc_idx": 56,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data['deck'] = all_data['Cabin'].str.split('', expand = True)[1]\nall_data.loc[all_data['deck'].isna(), 'deck'] = 'U'\nprint('Unique deck letters from the cabin numbers:', all_data['deck'].unique())",
            "mc_idx": 57,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isna": 1
                },
                "Data_Transform": {
                    ".split": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    24,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Unique deck letters from the cabin numbers: ['U' 'C' 'E' 'G' 'D' 'A' 'B' 'F' 'T']\n"
                    ]
                },
                "mc_idx": 57,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 24,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(20, 5))\n\nax1 = fig.add_subplot(131)\nsns.countplot(x = 'deck', data = all_data, palette = \"hls\", order = all_data['deck'].value_counts().index, ax = ax1)\nplt.title('Passengers distribution by deck',fontsize= 16)\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(132)\ndeck_by_class = all_data.groupby('deck')['Pclass'].value_counts(normalize = True).unstack()\ndeck_by_class.plot(kind='bar', stacked='True',color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of classes on each deck',fontsize= 16)\nplt.xticks(rotation = False)\n\nax3 = fig.add_subplot(133)\ndeck_by_survived = all_data.groupby('deck')['Survived'].value_counts(normalize = True).unstack()\ndeck_by_survived = deck_by_survived.sort_values(by = 1, ascending = False)\ndeck_by_survived.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax3)\nplt.title('Proportion of survived/drowned passengers by deck',fontsize= 16)\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\nplt.tight_layout()\n\nplt.show()\n",
            "mc_idx": 58,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.06666666666666667,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.8,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".plot(": 4,
                    "sns.": 1,
                    "size": 4,
                    ".value_counts": 3,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    "stack": 4,
                    ".sort_values": 1,
                    ".unstack": 2,
                    ".add": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 2,
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c025_o000_image_9.png",
                    25,
                    0,
                    9
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x360 with 3 Axes>"
                    ]
                },
                "mc_idx": 58,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 25,
                "o_idx": 0
            }
        },
        {
            "source": "Most passengers don't have cabin numbers ('U').  \nThe largest part of passengers with known cabin numbers were located on the  'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'.  \nDeck A was the closest to the deck with lifeboats, but it is the last in surviving rate (except unknown and T deck). How did it happen?",
            "mc_idx": 59,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data[(all_data['deck']=='A') & (all_data['Survived']==0)]",
            "mc_idx": 60,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    26,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                  Name  \\\n96            97       0.0       1             Goldschmidt, Mr. George B   \n174          175       0.0       1               Smith, Mr. James Clinch   \n185          186       0.0       1                 Rood, Mr. Hugh Roscoe   \n284          285       0.0       1            Smith, Mr. Richard William   \n475          476       0.0       1           Clifford, Mr. George Quincy   \n583          584       0.0       1                   Ross, Mr. John Hugo   \n806          807       0.0       1                Andrews, Mr. Thomas Jr   \n867          868       0.0       1  Roebling, Mr. Washington Augustus II   \n\n      Sex   Age  SibSp  Parch    Ticket     Fare Cabin Embarked Title  \\\n96   male  71.0      0      0  PC 17754  34.6542    A5        C    Mr   \n174  male  56.0      0      0     17764  30.6958    A7        C    Mr   \n185  male   NaN      0      0    113767  50.0000   A32        S    Mr   \n284  male   NaN      0      0    113056  26.0000   A19        S    Mr   \n475  male   NaN      0      0    110465  52.0000   A14        S    Mr   \n583  male  36.0      0      0     13049  40.1250   A10        C    Mr   \n806  male  39.0      0      0    112050   0.0000   A36        S    Mr   \n867  male  31.0      0      0  PC 17590  50.4958   A24        S    Mr   \n\n    Title_category deck  \n96              Mr    A  \n174             Mr    A  \n185             Mr    A  \n284             Mr    A  \n475             Mr    A  \n583             Mr    A  \n806             Mr    A  \n867             Mr    A  "
                    ]
                },
                "mc_idx": 60,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 26,
                "o_idx": 0
            }
        },
        {
            "source": "I was curious, so I read a bit about some of these passengers:  \n[John Hugo Ross](https://www.encyclopedia-titanica.org/titanic-victim/john-hugo-ross.html) When he boarded on 10 April 1912, he was so ill from dysentery he had to be carried to his cabin on a stretcher. When Ross was told the ship had struck an iceberg and that he should get dressed, Ross refused to believe the trouble serious. \"Is that all,?\" he told Peuchen. \"It will take more than an iceberg to get me off this ship.\" Presumably, Ross drowned in his bed.  \n\n[Andrews, Mr. Thomas Jr](https://en.wikipedia.org/wiki/Thomas_Andrews) was a managing director of H&W (built the Titanic) in charge of designing and was familiar with every detail of the construction of the firm's ships. He helped to evacuate people.\n\n[Roebling, Mr. Washington Augustus II ](https://www.encyclopedia-titanica.org/titanic-victim/washington-roebling.html) helped to evacuate people as well.\n\nIt is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergensy were involved in the rescue process.\n\nFor training process it will be better to include passenger from T deck to the A deck group.",
            "mc_idx": 61,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.5 Family\nDoes the size of the family on Board together affect the chances of surviving a disaster? Does having children increase the chance of getting into a boat, or is it easier to survive being single?  \nI calculate the family size, by summarizing the number of siblings with the parch number  plus 1 (passenger himself).  \nFamily size = sib + parch + 1\n\n### 6.5.1 Calculate family size",
            "mc_idx": 62,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data['Family_size'] = all_data['SibSp'] + all_data['Parch'] + 1\nfamily_size = all_data['Family_size'].value_counts()\nprint('Family size and number of passengers:')\nprint(family_size)",
            "mc_idx": 63,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 5,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    27,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Family size and number of passengers:\n1     790\n2     235\n3     159\n4      43\n6      25\n5      22\n7      16\n11     11\n8       8\nName: Family_size, dtype: int64\n"
                    ]
                },
                "mc_idx": 63,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 27,
                "o_idx": 0
            }
        },
        {
            "source": "Looks strange that there are 16 passengers with family size of 7, for example. Let's check!  \nAlso, I will add a surname variable, by extraxting first word ow the name.",
            "mc_idx": 64,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data['Surname'] = all_data['Name'].str.split(',', expand = True)[0]",
            "mc_idx": 65,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".split": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    28,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 65,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 28,
                "o_idx": 0
            }
        },
        {
            "source": "#### size 7\n1. Group people with family size = 7 by Surname  \nWe have 9 Andersons, who have family size of 7",
            "mc_idx": 66,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data[all_data['Family_size'] == 7]['Surname'].value_counts()",
            "mc_idx": 67,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    29,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Andersson    9\nAsplund      7\nName: Surname, dtype: int64"
                    ]
                },
                "mc_idx": 67,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 29,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')]",
            "mc_idx": 68,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    30,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass  \\\n13            14       0.0       3   \n68            69       1.0       3   \n119          120       0.0       3   \n541          542       0.0       3   \n542          543       0.0       3   \n610          611       0.0       3   \n813          814       0.0       3   \n850          851       0.0       3   \n214         1106       NaN       3   \n\n                                                  Name     Sex   Age  SibSp  \\\n13                         Andersson, Mr. Anders Johan    male  39.0      1   \n68                     Andersson, Miss. Erna Alexandra  female  17.0      4   \n119                  Andersson, Miss. Ellis Anna Maria  female   2.0      4   \n541               Andersson, Miss. Ingeborg Constanzia  female   9.0      4   \n542                  Andersson, Miss. Sigrid Elisabeth  female  11.0      4   \n610  Andersson, Mrs. Anders Johan (Alfrida Konstant...  female  39.0      1   \n813                 Andersson, Miss. Ebba Iris Alfrida  female   6.0      4   \n850            Andersson, Master. Sigvard Harald Elias    male   4.0      4   \n214             Andersson, Miss. Ida Augusta Margareta  female  38.0      4   \n\n     Parch   Ticket    Fare Cabin Embarked   Title Title_category deck  \\\n13       5   347082  31.275   NaN        S      Mr             Mr    U   \n68       2  3101281   7.925   NaN        S    Miss           Miss    U   \n119      2   347082  31.275   NaN        S    Miss           Miss    U   \n541      2   347082  31.275   NaN        S    Miss           Miss    U   \n542      2   347082  31.275   NaN        S    Miss           Miss    U   \n610      5   347082  31.275   NaN        S     Mrs            Mrs    U   \n813      2   347082  31.275   NaN        S    Miss           Miss    U   \n850      2   347082  31.275   NaN        S  Master         Master    U   \n214      2   347091   7.775   NaN        S    Miss           Miss    U   \n\n     Family_size    Surname  \n13             7  Andersson  \n68             7  Andersson  \n119            7  Andersson  \n541            7  Andersson  \n542            7  Andersson  \n610            7  Andersson  \n813            7  Andersson  \n850            7  Andersson  \n214            7  Andersson  "
                    ]
                },
                "mc_idx": 68,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 30,
                "o_idx": 0
            }
        },
        {
            "source": "2. Let's group Andersons with 7-size family by ticket number.  \nThere are  7 of them used the same ticket and travelled together. 5 children (each of them has 4 siblings) and 2 parents.\nTo passengers used separated tickets.",
            "mc_idx": 69,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')].Ticket.value_counts()",
            "mc_idx": 70,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    31,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "347082     7\n3101281    1\n347091     1\nName: Ticket, dtype: int64"
                    ]
                },
                "mc_idx": 70,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 31,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')]",
            "mc_idx": 71,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    32,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                    Name  \\\n68            69       1.0       3         Andersson, Miss. Erna Alexandra   \n214         1106       NaN       3  Andersson, Miss. Ida Augusta Margareta   \n\n        Sex   Age  SibSp  Parch   Ticket   Fare Cabin Embarked Title  \\\n68   female  17.0      4      2  3101281  7.925   NaN        S  Miss   \n214  female  38.0      4      2   347091  7.775   NaN        S  Miss   \n\n    Title_category deck  Family_size    Surname  \n68            Miss    U            7  Andersson  \n214           Miss    U            7  Andersson  "
                    ]
                },
                "mc_idx": 71,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 32,
                "o_idx": 0
            }
        },
        {
            "source": "Looks like they actually traveled alone, I will correct that data.",
            "mc_idx": 72,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data.loc[all_data['PassengerId'] == 69, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data.loc[all_data['PassengerId'] == 1106, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')]",
            "mc_idx": 73,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    33,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                    Name  \\\n68            69       1.0       3         Andersson, Miss. Erna Alexandra   \n214         1106       NaN       3  Andersson, Miss. Ida Augusta Margareta   \n\n        Sex   Age  SibSp  Parch   Ticket   Fare Cabin Embarked Title  \\\n68   female  17.0      0      0  3101281  7.925   NaN        S  Miss   \n214  female  38.0      0      0   347091  7.775   NaN        S  Miss   \n\n    Title_category deck  Family_size    Surname  \n68            Miss    U            1  Andersson  \n214           Miss    U            1  Andersson  "
                    ]
                },
                "mc_idx": 73,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 33,
                "o_idx": 0
            }
        },
        {
            "source": "#### size 5\nThere are some inconsistencies in other categories, with fewer relatives.  \nLet's check people with 5-size family and group them by Surname:",
            "mc_idx": 74,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data[all_data['Family_size'] == 5]['Surname'].value_counts()",
            "mc_idx": 75,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    34,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Palsson          5\nRyerson          5\nFord             5\nLefebre          5\nKink-Heilmann    1\nHocking          1\nName: Surname, dtype: int64"
                    ]
                },
                "mc_idx": 75,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 34,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['Surname'] == 'Kink-Heilmann')&(all_data['Family_size'] == 5)]",
            "mc_idx": 76,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    35,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                      Name   Sex   Age  \\\n394         1286       NaN       3  Kink-Heilmann, Mr. Anton  male  29.0   \n\n     SibSp  Parch  Ticket    Fare Cabin Embarked Title Title_category deck  \\\n394      3      1  315153  22.025   NaN        S    Mr             Mr    U   \n\n     Family_size        Surname  \n394            5  Kink-Heilmann  "
                    ]
                },
                "mc_idx": 76,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 35,
                "o_idx": 0
            }
        },
        {
            "source": "Kink-Heilmann, Mr. Anton\t had 2 other siblings on the ship unlike his wife, for whom these relatives do not fit the description of relatives in the data set. We will assume that all other \"mismatches\" in the groups are similar to this. Since I plan to group the size of families into groups, this will eliminate possible inconsistencies.",
            "mc_idx": 77,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.5.2 Family size and chanses for surviving",
            "mc_idx": 78,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "fig = plt.figure(figsize = (12,4))\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(all_data['Family_size'], ax = ax1)\n\n# calculate passengers for each category\nlabels = (all_data['Family_size'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+6, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Family_size')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', color=[\"#3f3e6fd1\", \"#85c6a9\"], stacked='True', ax = ax2)\nplt.title('Proportion of survived/drowned passengers by family size (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\n\nplt.tight_layout()",
            "mc_idx": 79,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.42857142857142855,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.21428571428571427,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".plot(": 2,
                    "sns.": 1,
                    "size": 7,
                    ".value_counts": 2,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".unstack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1,
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c036_o000_image_10.png",
                    36,
                    0,
                    10
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x288 with 2 Axes>"
                    ]
                },
                "mc_idx": 79,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 36,
                "o_idx": 0
            }
        },
        {
            "source": "* There were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  \n* Most of the passengers were traveling alone, percent of survivals not very large.  \n* The biggest proportion of survived passengers in group of people who had 4 family members on board. \n\nWe can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \nI will create 'Family_size_group' variable with four categories: \n* single\n* usual (sizes 2, 3, 4)\n* big (5, 6, 7)\n* and large (all bigger then 7)",
            "mc_idx": 80,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data['Family_size_group'] = all_data['Family_size'].map(lambda x: 'f_single' if x == 1 \n                                                            else ('f_usual' if 5 > x >= 2 \n                                                                  else ('f_big' if 8 > x >= 5 \n                                                                       else 'f_large' )\n                                                                 ))                                                       ",
            "mc_idx": 81,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {
                    ".map(": 1,
                    ".map": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    37,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 81,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 37,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize = (14,5))\n\nax1 = fig.add_subplot(121)\nd = all_data.groupby('Family_size_group')['Survived'].value_counts(normalize = True).unstack()\nd = d.sort_values(by = 1, ascending = False)\nd.plot(kind='bar', stacked='True', color = [\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Proportion of survived/drowned passengers by family size (training data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax2 = fig.add_subplot(122)\nd2 = all_data.groupby('Family_size_group')['Pclass'].value_counts(normalize = True).unstack()\nd2 = d2.sort_values(by = 1, ascending = False)\nd2.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of 1st/2nd/3rd ticket class in family group size')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()",
            "mc_idx": 82,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.9230769230769231,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.15384615384615385,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 4,
                    "size": 5,
                    ".value_counts": 2,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    "stack": 4,
                    ".sort_values": 2,
                    ".unstack": 2,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c038_o000_image_11.png",
                    38,
                    0,
                    11
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1008x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 82,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 38,
                "o_idx": 0
            }
        },
        {
            "source": "Large families are all from 3rd class and no one from the training part of the dataset is survived.  \nThe biggest proportion of the 1st class in the usual size of the family and the proportion of survivors in the usual family is the biggest.",
            "mc_idx": 83,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.6 Class\nWe have made a lot of assumptions about the survival rate depending on the classes. Let's now look closely at this variable.\n\n### 6.6.1 Passengers by class",
            "mc_idx": 84,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "ax = sns.countplot(all_data['Pclass'], palette = ['#eed4d0', '#cda0aa', '#a2708e'])\n# calculate passengers for each category\nlabels = (all_data['Pclass'].value_counts(sort = False))\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+2, str(v), horizontalalignment = 'center', size = 12, color = 'black', fontweight = 'bold')\n    \n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\nplt.tight_layout()",
            "mc_idx": 85,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1,
                    "size": 2,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c039_o000_image_12.png",
                    39,
                    0,
                    12
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x288 with 1 Axes>"
                    ]
                },
                "mc_idx": 85,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 39,
                "o_idx": 0
            }
        },
        {
            "source": "Most of the Titanic's passengers were traveling third class (709).  \nThe second class is the smallest in terms of the number of passengers.",
            "mc_idx": 86,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.6.2 Class vs surviving status",
            "mc_idx": 87,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "fig = plt.figure(figsize=(14, 5))\n\nax1 = fig.add_subplot(121)\nsns.countplot(x = 'Pclass', hue = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Number of survived/drowned passengers by class (train data)')\nplt.ylabel('Number of passengers')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Pclass')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', stacked='True', ax = ax2, color =[\"#3f3e6fd1\", \"#85c6a9\"])\nplt.title('Proportion of survived/drowned passengers by class (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()",
            "mc_idx": 88,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.3333333333333333,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 2,
                    "sns.": 1,
                    "size": 1,
                    ".value_counts": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".unstack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1,
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c040_o000_image_13.png",
                    40,
                    0,
                    13
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1008x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 88,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 40,
                "o_idx": 0
            }
        },
        {
            "source": "Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.",
            "mc_idx": 89,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.6.3 Class vs surviving status vs gender",
            "mc_idx": 90,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "sns.catplot(x = 'Pclass', hue = 'Survived', col = 'Sex', kind = 'count', data = all_data , palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\nplt.tight_layout()",
            "mc_idx": 91,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c041_o000_image_14.png",
                    41,
                    0,
                    14
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 772x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 91,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 41,
                "o_idx": 0
            }
        },
        {
            "source": "However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the female survived.",
            "mc_idx": 92,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.6.4 Class vs. Gender vs. Age -> Surviving status \nFor better understanding how the combination of some factors influence on chances to survive, lets break passengers into 18 imaginary groups separated by:\n* **Class** (1 / 2 / 3)\n* **Gender** (male / female)\n* **Age** ( <16 / 16-40 / 40<)  \n\nTo do so I will create 6 stripplots (3 for male, 3 for female), with values grouped by Surviving status and add background color to separate age groups:",
            "mc_idx": 93,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize=(20, 10))\npalette=[\"#3f3e6fd1\", \"#85c6a9\"]\n\nplt.subplot(2, 3, 1)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 2)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 3)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='male'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.subplot(2, 3, 4)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 5)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 6)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='female'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.show()",
            "mc_idx": 94,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.07692307692307693,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.46153846153846156,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 6,
                    "size": 7
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 6
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c042_o000_image_15.png",
                    42,
                    0,
                    15
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 6 Axes>"
                    ]
                },
                "mc_idx": 94,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 42,
                "o_idx": 0
            }
        },
        {
            "source": "From these graphs (training data only) we can see, that \n* only one kid (<16) from 1st and 2nd classes are drowned (female from the 1st class).\n* but children from the 3rd class were not so lucky, looks like chances to survive for passengers <16 were 50/50 for male and female.\n* most females from 1st and 2nd class are survived, without much difference in Age.\n* females from 3rd class in Age group 40+ drowned except one.\n* similar picture for males in 2nd and 3rd classes in the Age group 40+: only 2 from each class are survived.\n* for 40+ males from 1st class situation were slightly different, there are more survived passengers.\n* the largest \"accumulation\" of drowned passengers is observed in the Age group 16-40 males, 3rd class.",
            "mc_idx": 95,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.7 Gender\nLet's discover gender a little bit more:",
            "mc_idx": 96,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "plt.figure(figsize = (15,4))\n\nplt.subplot (1,3,1)\nax = sns.countplot(all_data['Sex'], palette=\"Set3\")\nplt.title('Number of passengers by Sex')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Sex'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.subplot (1,3,2)\nsns.countplot( x = 'Pclass', data = all_data, hue = 'Sex', palette=\"Set3\")\nplt.title('Number of male/female passengers by class')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\n\nplt.subplot (1,3,3)\nsns.countplot( x = 'Family_size_group', data = all_data, hue = 'Sex', \n              order = all_data['Family_size_group'].value_counts().index , palette=\"Set3\")\nplt.title('Number of male/female passengers by family size')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\nplt.tight_layout()",
            "mc_idx": 97,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.3333333333333333,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 2,
                    "sns.": 3,
                    "size": 5,
                    ".value_counts": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 3,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c043_o000_image_16.png",
                    43,
                    0,
                    16
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x288 with 3 Axes>"
                    ]
                },
                "mc_idx": 97,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 43,
                "o_idx": 0
            }
        },
        {
            "source": "There were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.",
            "mc_idx": 98,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.8 Embarked\nTitanic had 3 embarkation points before the ship started its route to New York:\n* Southampton\n* Cherbourg\n* Queenstown  \n\nSome passengers could leave Titanic in Cherbourg or Queenstown and avoid catastrophe. Also, the point of embarkation could have an influence on ticket fare and location on the ship.  \n\n![09269a9f7d50a3f019182a11f7aa7981.jpg](attachment:09269a9f7d50a3f019182a11f7aa7981.jpg)\n\nPort of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n",
            "mc_idx": 99,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "fig = plt.figure(figsize = (15,4))\n\nax1 = fig.add_subplot(131)\npalette = sns.cubehelix_palette(5, start = 2)\nax = sns.countplot(all_data['Embarked'], palette = palette, order = ['C', 'Q', 'S'], ax = ax1)\nplt.title('Number of passengers by Embarked')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Embarked'].value_counts())\nlabels = labels.sort_index()\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nax2 = fig.add_subplot(132)\nsurv_by_emb = all_data.groupby('Embarked')['Survived'].value_counts(normalize = True)\nsurv_by_emb = surv_by_emb.unstack().sort_index()\nsurv_by_emb.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\nplt.title('Proportion of survived/drowned passengers by Embarked (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax3 = fig.add_subplot(133)\nclass_by_emb = all_data.groupby('Embarked')['Pclass'].value_counts(normalize = True)\nclass_by_emb = class_by_emb.unstack().sort_index()\nclass_by_emb.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax3)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of clases by Embarked')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()",
            "mc_idx": 100,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.35714285714285715,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".plot(": 4,
                    "sns.": 2,
                    "size": 2,
                    ".value_counts": 3,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    "stack": 4,
                    ".sort_index": 3,
                    ".unstack": 2,
                    ".add": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 2,
                    "sns.": 2,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c044_o000_image_17.png",
                    44,
                    0,
                    17
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x288 with 3 Axes>"
                    ]
                },
                "mc_idx": 100,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 44,
                "o_idx": 0
            }
        },
        {
            "source": "* Most number of passengers (914) were embarked in Southampton. Also Southampton has the biggiest proportion of drowned passengers.\n* 270 passengers emarked in Cherbourg and more than 50% of them survived (in the training dataset). \n* 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers\n",
            "mc_idx": 101,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "\nsns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"violin\", inner=None,\n            data=all_data, height = 6, palette = palette, order = ['C', 'Q', 'S'])\nplt.title('Distribution of Fare by Embarked')\nplt.tight_layout()",
            "mc_idx": 102,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c045_o000_image_18.png",
                    45,
                    0,
                    18
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 102,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 45,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Embarked')['Fare'].describe())",
            "mc_idx": 103,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    46,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          count       mean        std     min      25%       50%        75%  \\\nEmbarked                                                                      \nC         270.0  62.336267  84.185996  4.0125  13.8583  28.51875  78.966675   \nQ         123.0  12.409012  13.616133  6.7500   7.7500   7.75000  10.197900   \nS         913.0  27.418824  37.096402  0.0000   8.0500  13.00000  27.750000   \n\n               max  \nEmbarked            \nC         512.3292  \nQ          90.0000  \nS         263.0000  "
                    ]
                },
                "mc_idx": 103,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 46,
                "o_idx": 0
            }
        },
        {
            "source": "* The wider fare distribution among passengers who embarked in Cherbourg. It makes scence - many first-class passengers boarded the ship here, but the share of third-class passengers is quite significant.\n* The smallest variation in the price of passengers who boarded in q. Also, the average price of these passengers is the smallest, I think this is due to the fact that the path was supposed to be the shortest + almost all third-class passengers.\n\nLet's check NA values of Embarked variable:",
            "mc_idx": 104,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "train_data[train_data['Embarked'].isna()]",
            "mc_idx": 105,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isna": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    47,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                       Name  \\\n61            62         1       1                        Icard, Miss. Amelie   \n829          830         1       1  Stone, Mrs. George Nelson (Martha Evelyn)   \n\n        Sex   Age  SibSp  Parch  Ticket  Fare Cabin Embarked  \n61   female  38.0      0      0  113572  80.0   B28      NaN  \n829  female  62.0      0      0  113572  80.0   B28      NaN  "
                    ]
                },
                "mc_idx": 105,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 47,
                "o_idx": 0
            }
        },
        {
            "source": "These two passengers traveled together (same ticket number). To impute missing values, we can use mode value for passengers with the closest fare value and Pclass.",
            "mc_idx": 106,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.9 Fare\n",
            "mc_idx": 107,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"swarm\", data=all_data, palette=sns.cubehelix_palette(5, start = 3), height = 6)\n\nplt.tight_layout()",
            "mc_idx": 108,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c048_o000_image_19.png",
                    48,
                    0,
                    19
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 108,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 48,
                "o_idx": 0
            }
        },
        {
            "source": "We can observe that the distribution of prices for the second and third class is very similar. The distribution of first-class prices is very different, has a larger spread, and on average prices are higher. \n\nLet's add colours to our points to indicate surviving status of passenger (there will be only data from training part of the dataset):",
            "mc_idx": 109,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "sns.catplot(x=\"Pclass\", y=\"Fare\",  hue = \"Survived\", kind=\"swarm\", data=all_data, \n                                    palette=[\"#3f3e6fd1\", \"#85c6a9\"], height = 6)\nplt.tight_layout()",
            "mc_idx": 110,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c049_o000_image_20.png",
                    49,
                    0,
                    20
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 484x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 110,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 49,
                "o_idx": 0
            }
        },
        {
            "source": "Looks like the bigger passenger paid, the more chances to survive he had.  \nWhat about zero fare in the first class? Is it a mistake?",
            "mc_idx": 111,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "all_data[all_data['Fare'] == min(all_data['Fare'])]",
            "mc_idx": 112,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    50,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                   Name  \\\n179          180       0.0       3                    Leonard, Mr. Lionel   \n263          264       0.0       1                  Harrison, Mr. William   \n271          272       1.0       3           Tornquist, Mr. William Henry   \n277          278       0.0       2            Parkes, Mr. Francis \"Frank\"   \n302          303       0.0       3        Johnson, Mr. William Cahoone Jr   \n413          414       0.0       2         Cunningham, Mr. Alfred Fleming   \n466          467       0.0       2                  Campbell, Mr. William   \n481          482       0.0       2       Frost, Mr. Anthony Wood \"Archie\"   \n597          598       0.0       3                    Johnson, Mr. Alfred   \n633          634       0.0       1          Parr, Mr. William Henry Marsh   \n674          675       0.0       2             Watson, Mr. Ennis Hastings   \n732          733       0.0       2                   Knight, Mr. Robert J   \n806          807       0.0       1                 Andrews, Mr. Thomas Jr   \n815          816       0.0       1                       Fry, Mr. Richard   \n822          823       0.0       1        Reuchlin, Jonkheer. John George   \n266         1158       NaN       1  Chisholm, Mr. Roderick Robert Crispin   \n372         1264       NaN       1                Ismay, Mr. Joseph Bruce   \n\n      Sex   Age  SibSp  Parch  Ticket  Fare        Cabin Embarked     Title  \\\n179  male  36.0      0      0    LINE   0.0          NaN        S        Mr   \n263  male  40.0      0      0  112059   0.0          B94        S        Mr   \n271  male  25.0      0      0    LINE   0.0          NaN        S        Mr   \n277  male   NaN      0      0  239853   0.0          NaN        S        Mr   \n302  male  19.0      0      0    LINE   0.0          NaN        S        Mr   \n413  male   NaN      0      0  239853   0.0          NaN        S        Mr   \n466  male   NaN      0      0  239853   0.0          NaN        S        Mr   \n481  male   NaN      0      0  239854   0.0          NaN        S        Mr   \n597  male  49.0      0      0    LINE   0.0          NaN        S        Mr   \n633  male   NaN      0      0  112052   0.0          NaN        S        Mr   \n674  male   NaN      0      0  239856   0.0          NaN        S        Mr   \n732  male   NaN      0      0  239855   0.0          NaN        S        Mr   \n806  male  39.0      0      0  112050   0.0          A36        S        Mr   \n815  male   NaN      0      0  112058   0.0         B102        S        Mr   \n822  male  38.0      0      0   19972   0.0          NaN        S  Jonkheer   \n266  male   NaN      0      0  112051   0.0          NaN        S        Mr   \n372  male  49.0      0      0  112058   0.0  B52 B54 B56        S        Mr   \n\n    Title_category deck  Family_size     Surname Family_size_group  \n179             Mr    U            1     Leonard          f_single  \n263             Mr    B            1    Harrison          f_single  \n271             Mr    U            1   Tornquist          f_single  \n277             Mr    U            1      Parkes          f_single  \n302             Mr    U            1     Johnson          f_single  \n413             Mr    U            1  Cunningham          f_single  \n466             Mr    U            1    Campbell          f_single  \n481             Mr    U            1       Frost          f_single  \n597             Mr    U            1     Johnson          f_single  \n633             Mr    U            1        Parr          f_single  \n674             Mr    U            1      Watson          f_single  \n732             Mr    U            1      Knight          f_single  \n806             Mr    A            1     Andrews          f_single  \n815             Mr    B            1         Fry          f_single  \n822          honor    U            1    Reuchlin          f_single  \n266             Mr    U            1    Chisholm          f_single  \n372             Mr    B            1       Ismay          f_single  "
                    ]
                },
                "mc_idx": 112,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 50,
                "o_idx": 0
            }
        },
        {
            "source": "Some of the passengers have \"Line\" tickets, perhaps they were somehow involved in the Titanic, but were not the ship's crew. I don't think we should change these prices, but add an additional feature for these passengers.",
            "mc_idx": 113,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 7. Conclusion\nWe know that there were not enough boats on Board the Titanic for all passengers to be able to evacuate. After studying the information about the passengers, we can make some assumptions about who had a better chance of survival in a shipwreck situation as well as General observations about passengers.\n\n* There are 891 passengers in the train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived. But we know, that lifeboats (16 wooden lifeboats and four collapsible) could carry 53% of total passengers.\n* The Age of all passengers vary from about 0.17 year to 80 years with average 29.88. The mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for). It looks like there is a slightly bigger chance to survive for younger people.\n* Exploring the title of passengers, we can see that the biggest proportion of survivors is in the \"Mrs\" group - a married woman. More than 80% drowned in the \"Mr.\" group and nobody survived among the Reverend group.\n* Most passengers don't have cabin numbers. The largest part of passengers with known cabin numbers was located on the 'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'. Deck A was the closest to the deck with lifeboats, but it is the last in the surviving rate.\n* The family size on board also seems to have an influence on chances for survival: there were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  We can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \n* Most of the Titanic's passengers were traveling third class (709). The second class is the smallest in terms of the number of passengers. Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first-class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.\n* However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the females survived.  \nThere were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.  \n* Most numbers of passengers (914) were embarked in Southampton. Also, Southampton has the biggest proportion of drowned passengers. 270 passengers embarked in Cherbourg and more than 50% of them survived (in the training dataset). 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers.  \n\n \nIf we use a naive approach and consider all the parameters separately, then young female first-class passengers with the title Mrs have a moderate number of relatives on Board, who paid a large amount for a ticket and went on Board in  Cherbourg have a better chance of survival. \nFor sure, there is a relationship between variables, and survival was influenced not only by the title, or ticket, or age itself but by a combination of factors that are to some extent interrelated.   \nAnd It is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergency were involved in the rescue process.\n\n[**Second part of my work**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial) with Titanic dataset and contains:\n\n* Missing data imputation\n* Feature generation\n* Models implementation and tuning: Logistic Regression, Random Forest, XGBoost\n* Comparing models and submission\n",
            "mc_idx": 114,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "code_cells": [
        {
            "source": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np",
            "mc_idx": 5,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.025,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.05,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 4
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "matplotlib": 1,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "# path to train dataset\ntrain_path = '../input/titanic/train.csv'\n# path to test dataset\ntest_path = '../input/titanic/test.csv'\n\n# Read a comma-separated values (csv) file into pandas DataFrame\ntrain_data = pd.read_csv(train_path)\ntest_data = pd.read_csv(test_path)\n\n# shape of tha data\nprint('Train shape: ', train_data.shape)\nprint('Test shape: ', test_data.shape)",
            "mc_idx": 7,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 4,
                    "pd.read_": 4,
                    "dataset": 2
                },
                "Exploratory_Data_Analysis": {
                    "shape": 5
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 5
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Train shape:  (891, 12)\nTest shape:  (418, 11)\n"
                    ]
                },
                "mc_idx": 7,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "# create a sequence of DataFrame objects\nframes = [train_data, test_data]\n# Concatenate pandas objects along a particular axis \nall_data = pd.concat(frames, sort = False)\n# shape of the data\nprint('All data shape: ', all_data.shape)\n# Show first 4 rows of the concatenated DataFrame\nall_data.head(4)",
            "mc_idx": 9,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.5,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".head(": 1,
                    "head": 1,
                    "shape": 3,
                    ".head": 1
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 3
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    1,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "All data shape:  (1309, 12)\n",
                        "   PassengerId  Survived  Pclass  \\\n0            1       0.0       3   \n1            2       1.0       1   \n2            3       1.0       3   \n3            4       1.0       1   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  "
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 1
            }
        },
        {
            "source": "all_data.info()",
            "mc_idx": 13,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".info(": 1,
                    "info": 1,
                    ".info": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    3,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1309 entries, 0 to 417\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  1309 non-null   int64  \n 1   Survived     891 non-null    float64\n 2   Pclass       1309 non-null   int64  \n 3   Name         1309 non-null   object \n 4   Sex          1309 non-null   object \n 5   Age          1046 non-null   float64\n 6   SibSp        1309 non-null   int64  \n 7   Parch        1309 non-null   int64  \n 8   Ticket       1309 non-null   object \n 9   Fare         1308 non-null   float64\n 10  Cabin        295 non-null    object \n 11  Embarked     1307 non-null   object \ndtypes: float64(3), int64(4), object(5)\nmemory usage: 132.9+ KB\n"
                    ]
                },
                "mc_idx": 13,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "#### check data for NA values\nall_data_NA = all_data.isna().sum()\ntrain_NA = train_data.isna().sum()\ntest_NA = test_data.isna().sum()\n\npd.concat([train_NA, test_NA, all_data_NA], axis=1, sort = False, keys = ['Train NA', 'Test NA', 'All NA'])",
            "mc_idx": 17,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isna": 3,
                    ".sum": 3
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    4,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "             Train NA  Test NA  All NA\nPassengerId         0      0.0       0\nSurvived            0      NaN     418\nPclass              0      0.0       0\nName                0      0.0       0\nSex                 0      0.0       0\nAge               177     86.0     263\nSibSp               0      0.0       0\nParch               0      0.0       0\nTicket              0      0.0       0\nFare                0      1.0       1\nCabin             687    327.0    1014\nEmbarked            2      0.0       2"
                    ]
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "# set size of the plot\nplt.figure(figsize=(6, 4.5)) \n\n# countplot shows the counts of observations in each categorical bin using bars.\n# x - name of the categorical variable\nax = sns.countplot(x = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\n# set the current tick locations and labels of the x-axis.\nplt.xticks( np.arange(2), ['drowned', 'survived'] )\n# set title\nplt.title('Overall survival (training dataset)',fontsize= 14)\n# set x label\nplt.xlabel('Passenger status after the tragedy')\n# set y label\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Survived'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v-40, str(v), horizontalalignment = 'center', size = 14, color = 'w', fontweight = 'bold')\n    \nplt.show()",
            "mc_idx": 21,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2857142857142857,
                "Data_Extraction": 0.14285714285714285,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2857142857142857,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1,
                    "variable": 1
                },
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "sns.": 1,
                    "size": 4,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c005_o000_image_0.png",
                    5,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x324 with 1 Axes>"
                    ]
                },
                "mc_idx": 21,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "all_data['Survived'].value_counts(normalize = True)",
            "mc_idx": 22,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    6,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "0.0    0.616162\n1.0    0.383838\nName: Survived, dtype: float64"
                    ]
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "# set plot size\nplt.figure(figsize=(15, 3))\n\n# plot a univariate distribution of Age observations \nsns.distplot(all_data[(all_data[\"Age\"] > 0)].Age, kde_kws={\"lw\": 3}, bins = 50)\n\n# set titles and labels\nplt.title('Distrubution of passengers age (all data)',fontsize= 14)\nplt.xlabel('Age')\nplt.ylabel('Frequency')\n# clean layout\nplt.tight_layout()",
            "mc_idx": 25,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "distplot": 1,
                    "sns.": 1,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c007_o000_image_1.png",
                    7,
                    0,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x216 with 1 Axes>"
                    ]
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics include those that summarize the central tendency, \n# dispersion and shape of a dataset\u2019s distribution, excluding NaN values.\nage_distr = pd.DataFrame(all_data['Age'].describe())\n# Transpose index and columns.\nage_distr.transpose()",
            "mc_idx": 26,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.2,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.2,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    "columns": 1,
                    "shape": 1,
                    ".describe": 1
                },
                "Data_Transform": {
                    ".transpose": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    8,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "      count       mean        std   min   25%   50%   75%   max\nAge  1046.0  29.881138  14.413493  0.17  21.0  28.0  39.0  80.0"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(15, 3))\n\n# Draw a box plot to show Age distributions with respect to survival status.\nsns.boxplot(y = 'Survived', x = 'Age', data = train_data,\n     palette=[\"#3f3e6fd1\", \"#85c6a9\"], fliersize = 0, orient = 'h')\n\n# Add a scatterplot for each category.\nsns.stripplot(y = 'Survived', x = 'Age', data = train_data,\n     linewidth = 0.6, palette=[\"#3f3e6fd1\", \"#85c6a9\"], orient = 'h')\n\nplt.yticks( np.arange(2), ['drowned', 'survived'])\nplt.title('Age distribution grouped by surviving status (train data)',fontsize= 14)\nplt.ylabel('Passenger status after the tragedy')\nplt.tight_layout()",
            "mc_idx": 29,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.42857142857142855,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".boxplot(": 2,
                    "sns.": 2,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".boxplot(": 1,
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c009_o000_image_2.png",
                    9,
                    0,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x216 with 1 Axes>"
                    ]
                },
                "mc_idx": 29,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe())",
            "mc_idx": 30,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    10,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          count       mean        std   min   25%   50%   75%   max\nSurvived                                                           \n0.0       424.0  30.626179  14.172110  1.00  21.0  28.0  39.0  74.0\n1.0       290.0  28.343690  14.950952  0.42  19.0  28.0  36.0  80.0"
                    ]
                },
                "mc_idx": 30,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[all_data['Age'] == max(all_data['Age'] )]",
            "mc_idx": 32,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                  Name  \\\n630          631       1.0       1  Barkworth, Mr. Algernon Henry Wilson   \n\n      Sex   Age  SibSp  Parch Ticket  Fare Cabin Embarked  \n630  male  80.0      0      0  27042  30.0   A23        S  "
                    ]
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "train_data.loc[train_data['PassengerId'] == 631, 'Age'] = 48\nall_data.loc[all_data['PassengerId'] == 631, 'Age'] = 48",
            "mc_idx": 34,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 34,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Survived')['Age'].describe())",
            "mc_idx": 35,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    13,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          count       mean        std   min   25%   50%   75%   max\nSurvived                                                           \n0.0       424.0  30.626179  14.172110  1.00  21.0  28.0  39.0  74.0\n1.0       290.0  28.233345  14.684091  0.42  19.0  28.0  36.0  63.0"
                    ]
                },
                "mc_idx": 35,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "# set size\nplt.figure(figsize=(20, 6))\n\n# set palette\npalette = sns.cubehelix_palette(5, start = 3)\n\nplt.subplot(1, 2, 1)\nsns.boxplot(x = 'Pclass', y = 'Age', data = all_data,\n     palette = palette, fliersize = 0)\n\nsns.stripplot(x = 'Pclass', y = 'Age', data = all_data,\n     linewidth = 0.6, palette = palette)\nplt.xticks( np.arange(3), ['1st class', '2nd class', '3rd class'])\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Ticket class')\n\n\nplt.subplot(1, 2, 2)\n\n# To use kdeplot I need to create variables with filtered data for each category\nage_1_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 1)]\nage_2_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 2)]\nage_3_class = all_data[(all_data[\"Age\"] > 0) & \n                              (all_data[\"Pclass\"] == 3)]\n\n# Ploting the 3 variables that we create\nsns.kdeplot(age_1_class[\"Age\"], shade=True, color='#eed4d0', label = '1st class')\nsns.kdeplot(age_2_class[\"Age\"], shade=True,  color='#cda0aa', label = '2nd class')\nsns.kdeplot(age_3_class[\"Age\"], shade=True,color='#a2708e', label = '3rd class')\nplt.title('Age distribution grouped by ticket class (all data)',fontsize= 16)\nplt.xlabel('Age')\nplt.xlim(0, 90)\nplt.tight_layout()\nplt.show()",
            "mc_idx": 38,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.23076923076923078,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.7692307692307693,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1,
                    "variable": 2
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".boxplot(": 2,
                    "sns.": 6,
                    "size": 5
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".boxplot(": 1,
                    "sns.": 6,
                    ".kde": 3
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c014_o000_image_3.png",
                    14,
                    0,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x432 with 2 Axes>"
                    ]
                },
                "mc_idx": 38,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Pclass')['Age'].describe())",
            "mc_idx": 39,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    15,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "        count       mean        std   min   25%   50%    75%   max\nPclass                                                            \n1       284.0  39.047254  14.353217  0.92  28.0  39.0  49.25  76.0\n2       261.0  29.506705  13.638627  0.67  22.0  29.0  36.00  70.0\n3       501.0  24.816367  11.958202  0.17  18.0  24.0  32.00  74.0"
                    ]
                },
                "mc_idx": 39,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(20, 5))\npalette = \"Set3\"\n\nplt.subplot(1, 3, 1)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_1_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_1_class,\n     linewidth = 0.6, palette = palette)\nplt.title('1st class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 2)\nsns.boxplot(x = 'Sex', y = 'Age', data = age_2_class,\n     palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_2_class,\n     linewidth = 0.6, palette = palette)\nplt.title('2nd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.subplot(1, 3, 3)\nsns.boxplot(x = 'Sex', y = 'Age',  data = age_3_class,\n     order = ['female', 'male'], palette = palette, fliersize = 0)\nsns.stripplot(x = 'Sex', y = 'Age', data = age_3_class,\n     order = ['female', 'male'], linewidth = 0.6, palette = palette)\nplt.title('3rd class Age distribution by Sex',fontsize= 14)\nplt.ylim(-5, 80)\n\nplt.show()",
            "mc_idx": 42,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.05263157894736842,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.47368421052631576,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".boxplot(": 6,
                    "sns.": 6,
                    "size": 7
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".boxplot(": 3,
                    "sns.": 6
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c016_o000_image_4.png",
                    16,
                    0,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x360 with 3 Axes>"
                    ]
                },
                "mc_idx": 42,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\nage_1_class_stat = pd.DataFrame(age_1_class.groupby('Sex')['Age'].describe())\nage_2_class_stat = pd.DataFrame(age_2_class.groupby('Sex')['Age'].describe())\nage_3_class_stat = pd.DataFrame(age_3_class.groupby('Sex')['Age'].describe())\n\npd.concat([age_1_class_stat, age_2_class_stat, age_3_class_stat], axis=0, sort = False, keys = ['1st', '2nd', '3rd'])",
            "mc_idx": 43,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.4166666666666667,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 3,
                    "describe": 3,
                    ".describe": 3,
                    ".groupby": 3
                },
                "Data_Transform": {
                    ".concat(": 1,
                    ".groupby(": 3,
                    ".concat": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "            count       mean        std   min   25%   50%    75%   max\n    Sex                                                               \n1st female  133.0  37.037594  14.272460  2.00  24.0  36.0  48.00  76.0\n    male    151.0  40.817351  14.236835  0.92  30.0  42.0  50.00  71.0\n2nd female  103.0  27.499223  12.911747  0.92  20.0  28.0  34.00  60.0\n    male    158.0  30.815380  13.977400  0.67  23.0  29.5  38.75  70.0\n3rd female  152.0  22.185329  12.205254  0.17  16.0  22.0  30.00  63.0\n    male    349.0  25.962264  11.682415  0.33  20.0  25.0  32.00  74.0"
                    ]
                },
                "mc_idx": 43,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "all_data['Title'] = all_data['Name'].str.split(',', expand = True)[1].str.split('.', expand = True)[0].str.strip(' ')\n\nplt.figure(figsize=(6, 5))\nax = sns.countplot( x = 'Title', data = all_data, palette = \"hls\", order = all_data['Title'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\nplt.title('Passengers distribution by titles',fontsize= 14)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\nplt.show()\n",
            "mc_idx": 46,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.125,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.25,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 2,
                    "sns.": 1,
                    "size": 3,
                    ".value_counts": 2
                },
                "Data_Transform": {
                    ".split": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c018_o000_image_5.png",
                    18,
                    0,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x360 with 1 Axes>"
                    ]
                },
                "mc_idx": 46,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[all_data['Title']=='Ms']",
            "mc_idx": 48,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    19,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                       Name     Sex   Age  \\\n443          444       1.0       2  Reynaldo, Ms. Encarnacion  female  28.0   \n88           980       NaN       3    O'Donoghue, Ms. Bridget  female   NaN   \n\n     SibSp  Parch  Ticket   Fare Cabin Embarked Title  \n443      0      0  230434  13.00   NaN        S    Ms  \n88       0      0  364856   7.75   NaN        Q    Ms  "
                    ]
                },
                "mc_idx": 48,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "title_dict = {  'Mr':     'Mr',\n                'Mrs':    'Mrs',\n                'Miss':   'Miss',\n                'Master': 'Master',\n              \n                'Ms':     'Miss',\n                'Mme':    'Mrs',\n                'Mlle':   'Miss',\n\n                'Capt':   'military',\n                'Col':    'military',\n                'Major':  'military',\n\n                'Dr':     'Dr',\n                'Rev':    'Rev',\n                  \n                'Sir':    'honor',\n                'the Countess': 'honor',\n                'Lady':   'honor',\n                'Jonkheer': 'honor',\n                'Don':    'honor',\n                'Dona':   'honor' }\n\n# map titles to category\nall_data['Title_category'] = all_data['Title'].map(title_dict)",
            "mc_idx": 49,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".map(": 1,
                    ".map": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    20,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 49,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(12, 5))\n\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(x = 'Title_category', \n                   data = all_data, palette = \"hls\", \n                   order = all_data['Title_category'].value_counts().index)\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\nplt.title('Passengers distribution by titles',fontsize= 12)\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Title_category'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.tight_layout()\n\nax2 = fig.add_subplot(122)\nsurv_by_title_cat = all_data.groupby('Title_category')['Survived'].value_counts(normalize = True).unstack()\nsurv_by_title_cat = surv_by_title_cat.sort_values(by=1, ascending = False)\nsurv_by_title_cat.plot(kind='bar', \n                       stacked='True', \n                       color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\n\nplt.legend( ( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(\n    rotation=45, \n    horizontalalignment='right',\n    fontweight='light'  \n)\n\n\nplt.title('Proportion of survived/drowned by titles (train data)',fontsize= 12)\n\nplt.tight_layout()\nplt.show()",
            "mc_idx": 50,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.07692307692307693,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.5384615384615384,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.23076923076923078,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 2,
                    ".plot(": 2,
                    "sns.": 1,
                    "size": 4,
                    ".value_counts": 3,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".sort_values": 1,
                    ".unstack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1,
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c021_o000_image_6.png",
                    21,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 50,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "category_survived = sns.catplot(x=\"Title_category\",  col=\"Survived\",\n                data = all_data, kind=\"count\",\n                height=4, aspect=.7)\n\ncategory_survived.set_xticklabels(rotation=45, \n    horizontalalignment='right',\n    fontweight='light')\n\nplt.tight_layout()",
            "mc_idx": 52,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c022_o000_image_7.png",
                    22,
                    0,
                    7
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 403.2x288 with 2 Axes>"
                    ]
                },
                "mc_idx": 52,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 0
            }
        },
        {
            "source": "class_by_title_cat = all_data.groupby('Title_category')['Pclass'].value_counts(normalize = True)\nclass_by_title_cat = class_by_title_cat.unstack().sort_values(by = 1, ascending = False)\nclass_by_title_cat.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'])\nplt.legend(loc=(1.04,0))\n_ = plt.xticks(\n    rotation = 45, \n    horizontalalignment = 'right',\n    fontweight = 'light'  \n)\n\n\nplt.title('Proportion of 1st/2nd/3rd ticket class in each title category',fontsize= 14)\nplt.xlabel('Category of the Title')\nplt.tight_layout()",
            "mc_idx": 54,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 2,
                    "size": 1,
                    ".value_counts": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".sort_values": 1,
                    ".unstack": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c023_o000_image_8.png",
                    23,
                    0,
                    8
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x288 with 1 Axes>"
                    ]
                },
                "mc_idx": 54,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 23,
                "o_idx": 0
            }
        },
        {
            "source": "all_data['deck'] = all_data['Cabin'].str.split('', expand = True)[1]\nall_data.loc[all_data['deck'].isna(), 'deck'] = 'U'\nprint('Unique deck letters from the cabin numbers:', all_data['deck'].unique())",
            "mc_idx": 57,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isna": 1
                },
                "Data_Transform": {
                    ".split": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    24,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Unique deck letters from the cabin numbers: ['U' 'C' 'E' 'G' 'D' 'A' 'B' 'F' 'T']\n"
                    ]
                },
                "mc_idx": 57,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 24,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(20, 5))\n\nax1 = fig.add_subplot(131)\nsns.countplot(x = 'deck', data = all_data, palette = \"hls\", order = all_data['deck'].value_counts().index, ax = ax1)\nplt.title('Passengers distribution by deck',fontsize= 16)\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(132)\ndeck_by_class = all_data.groupby('deck')['Pclass'].value_counts(normalize = True).unstack()\ndeck_by_class.plot(kind='bar', stacked='True',color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of classes on each deck',fontsize= 16)\nplt.xticks(rotation = False)\n\nax3 = fig.add_subplot(133)\ndeck_by_survived = all_data.groupby('deck')['Survived'].value_counts(normalize = True).unstack()\ndeck_by_survived = deck_by_survived.sort_values(by = 1, ascending = False)\ndeck_by_survived.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax3)\nplt.title('Proportion of survived/drowned passengers by deck',fontsize= 16)\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\nplt.tight_layout()\n\nplt.show()\n",
            "mc_idx": 58,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.06666666666666667,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.8,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".plot(": 4,
                    "sns.": 1,
                    "size": 4,
                    ".value_counts": 3,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    "stack": 4,
                    ".sort_values": 1,
                    ".unstack": 2,
                    ".add": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 2,
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c025_o000_image_9.png",
                    25,
                    0,
                    9
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x360 with 3 Axes>"
                    ]
                },
                "mc_idx": 58,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 25,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['deck']=='A') & (all_data['Survived']==0)]",
            "mc_idx": 60,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    26,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                  Name  \\\n96            97       0.0       1             Goldschmidt, Mr. George B   \n174          175       0.0       1               Smith, Mr. James Clinch   \n185          186       0.0       1                 Rood, Mr. Hugh Roscoe   \n284          285       0.0       1            Smith, Mr. Richard William   \n475          476       0.0       1           Clifford, Mr. George Quincy   \n583          584       0.0       1                   Ross, Mr. John Hugo   \n806          807       0.0       1                Andrews, Mr. Thomas Jr   \n867          868       0.0       1  Roebling, Mr. Washington Augustus II   \n\n      Sex   Age  SibSp  Parch    Ticket     Fare Cabin Embarked Title  \\\n96   male  71.0      0      0  PC 17754  34.6542    A5        C    Mr   \n174  male  56.0      0      0     17764  30.6958    A7        C    Mr   \n185  male   NaN      0      0    113767  50.0000   A32        S    Mr   \n284  male   NaN      0      0    113056  26.0000   A19        S    Mr   \n475  male   NaN      0      0    110465  52.0000   A14        S    Mr   \n583  male  36.0      0      0     13049  40.1250   A10        C    Mr   \n806  male  39.0      0      0    112050   0.0000   A36        S    Mr   \n867  male  31.0      0      0  PC 17590  50.4958   A24        S    Mr   \n\n    Title_category deck  \n96              Mr    A  \n174             Mr    A  \n185             Mr    A  \n284             Mr    A  \n475             Mr    A  \n583             Mr    A  \n806             Mr    A  \n867             Mr    A  "
                    ]
                },
                "mc_idx": 60,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 26,
                "o_idx": 0
            }
        },
        {
            "source": "all_data['Family_size'] = all_data['SibSp'] + all_data['Parch'] + 1\nfamily_size = all_data['Family_size'].value_counts()\nprint('Family size and number of passengers:')\nprint(family_size)",
            "mc_idx": 63,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 5,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    27,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Family size and number of passengers:\n1     790\n2     235\n3     159\n4      43\n6      25\n5      22\n7      16\n11     11\n8       8\nName: Family_size, dtype: int64\n"
                    ]
                },
                "mc_idx": 63,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 27,
                "o_idx": 0
            }
        },
        {
            "source": "all_data['Surname'] = all_data['Name'].str.split(',', expand = True)[0]",
            "mc_idx": 65,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".split": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    28,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 65,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 28,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[all_data['Family_size'] == 7]['Surname'].value_counts()",
            "mc_idx": 67,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    29,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Andersson    9\nAsplund      7\nName: Surname, dtype: int64"
                    ]
                },
                "mc_idx": 67,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 29,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')]",
            "mc_idx": 68,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    30,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass  \\\n13            14       0.0       3   \n68            69       1.0       3   \n119          120       0.0       3   \n541          542       0.0       3   \n542          543       0.0       3   \n610          611       0.0       3   \n813          814       0.0       3   \n850          851       0.0       3   \n214         1106       NaN       3   \n\n                                                  Name     Sex   Age  SibSp  \\\n13                         Andersson, Mr. Anders Johan    male  39.0      1   \n68                     Andersson, Miss. Erna Alexandra  female  17.0      4   \n119                  Andersson, Miss. Ellis Anna Maria  female   2.0      4   \n541               Andersson, Miss. Ingeborg Constanzia  female   9.0      4   \n542                  Andersson, Miss. Sigrid Elisabeth  female  11.0      4   \n610  Andersson, Mrs. Anders Johan (Alfrida Konstant...  female  39.0      1   \n813                 Andersson, Miss. Ebba Iris Alfrida  female   6.0      4   \n850            Andersson, Master. Sigvard Harald Elias    male   4.0      4   \n214             Andersson, Miss. Ida Augusta Margareta  female  38.0      4   \n\n     Parch   Ticket    Fare Cabin Embarked   Title Title_category deck  \\\n13       5   347082  31.275   NaN        S      Mr             Mr    U   \n68       2  3101281   7.925   NaN        S    Miss           Miss    U   \n119      2   347082  31.275   NaN        S    Miss           Miss    U   \n541      2   347082  31.275   NaN        S    Miss           Miss    U   \n542      2   347082  31.275   NaN        S    Miss           Miss    U   \n610      5   347082  31.275   NaN        S     Mrs            Mrs    U   \n813      2   347082  31.275   NaN        S    Miss           Miss    U   \n850      2   347082  31.275   NaN        S  Master         Master    U   \n214      2   347091   7.775   NaN        S    Miss           Miss    U   \n\n     Family_size    Surname  \n13             7  Andersson  \n68             7  Andersson  \n119            7  Andersson  \n541            7  Andersson  \n542            7  Andersson  \n610            7  Andersson  \n813            7  Andersson  \n850            7  Andersson  \n214            7  Andersson  "
                    ]
                },
                "mc_idx": 68,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 30,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['Family_size'] == 7) & (all_data['Surname']=='Andersson')].Ticket.value_counts()",
            "mc_idx": 70,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    31,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "347082     7\n3101281    1\n347091     1\nName: Ticket, dtype: int64"
                    ]
                },
                "mc_idx": 70,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 31,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')]",
            "mc_idx": 71,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    32,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                    Name  \\\n68            69       1.0       3         Andersson, Miss. Erna Alexandra   \n214         1106       NaN       3  Andersson, Miss. Ida Augusta Margareta   \n\n        Sex   Age  SibSp  Parch   Ticket   Fare Cabin Embarked Title  \\\n68   female  17.0      4      2  3101281  7.925   NaN        S  Miss   \n214  female  38.0      4      2   347091  7.775   NaN        S  Miss   \n\n    Title_category deck  Family_size    Surname  \n68            Miss    U            7  Andersson  \n214           Miss    U            7  Andersson  "
                    ]
                },
                "mc_idx": 71,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 32,
                "o_idx": 0
            }
        },
        {
            "source": "all_data.loc[all_data['PassengerId'] == 69, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data.loc[all_data['PassengerId'] == 1106, ['SibSp', 'Parch', 'Family_size']] = [0,0,1]\nall_data[(all_data['Ticket'] == '3101281') | (all_data['Ticket'] == '347091')]",
            "mc_idx": 73,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    33,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                    Name  \\\n68            69       1.0       3         Andersson, Miss. Erna Alexandra   \n214         1106       NaN       3  Andersson, Miss. Ida Augusta Margareta   \n\n        Sex   Age  SibSp  Parch   Ticket   Fare Cabin Embarked Title  \\\n68   female  17.0      0      0  3101281  7.925   NaN        S  Miss   \n214  female  38.0      0      0   347091  7.775   NaN        S  Miss   \n\n    Title_category deck  Family_size    Surname  \n68            Miss    U            1  Andersson  \n214           Miss    U            1  Andersson  "
                    ]
                },
                "mc_idx": 73,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 33,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[all_data['Family_size'] == 5]['Surname'].value_counts()",
            "mc_idx": 75,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "size": 1,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    34,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Palsson          5\nRyerson          5\nFord             5\nLefebre          5\nKink-Heilmann    1\nHocking          1\nName: Surname, dtype: int64"
                    ]
                },
                "mc_idx": 75,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 34,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[(all_data['Surname'] == 'Kink-Heilmann')&(all_data['Family_size'] == 5)]",
            "mc_idx": 76,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    35,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                      Name   Sex   Age  \\\n394         1286       NaN       3  Kink-Heilmann, Mr. Anton  male  29.0   \n\n     SibSp  Parch  Ticket    Fare Cabin Embarked Title Title_category deck  \\\n394      3      1  315153  22.025   NaN        S    Mr             Mr    U   \n\n     Family_size        Surname  \n394            5  Kink-Heilmann  "
                    ]
                },
                "mc_idx": 76,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 35,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize = (12,4))\n\nax1 = fig.add_subplot(121)\nax = sns.countplot(all_data['Family_size'], ax = ax1)\n\n# calculate passengers for each category\nlabels = (all_data['Family_size'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+6, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Family_size')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', color=[\"#3f3e6fd1\", \"#85c6a9\"], stacked='True', ax = ax2)\nplt.title('Proportion of survived/drowned passengers by family size (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\nplt.xticks(rotation = False)\n\nplt.tight_layout()",
            "mc_idx": 79,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.42857142857142855,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.21428571428571427,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".plot(": 2,
                    "sns.": 1,
                    "size": 7,
                    ".value_counts": 2,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".unstack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1,
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c036_o000_image_10.png",
                    36,
                    0,
                    10
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x288 with 2 Axes>"
                    ]
                },
                "mc_idx": 79,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 36,
                "o_idx": 0
            }
        },
        {
            "source": "all_data['Family_size_group'] = all_data['Family_size'].map(lambda x: 'f_single' if x == 1 \n                                                            else ('f_usual' if 5 > x >= 2 \n                                                                  else ('f_big' if 8 > x >= 5 \n                                                                       else 'f_large' )\n                                                                 ))                                                       ",
            "mc_idx": 81,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "size": 2
                },
                "Data_Transform": {
                    ".map(": 1,
                    ".map": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    37,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 81,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 37,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize = (14,5))\n\nax1 = fig.add_subplot(121)\nd = all_data.groupby('Family_size_group')['Survived'].value_counts(normalize = True).unstack()\nd = d.sort_values(by = 1, ascending = False)\nd.plot(kind='bar', stacked='True', color = [\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Proportion of survived/drowned passengers by family size (training data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax2 = fig.add_subplot(122)\nd2 = all_data.groupby('Family_size_group')['Pclass'].value_counts(normalize = True).unstack()\nd2 = d2.sort_values(by = 1, ascending = False)\nd2.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax2)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of 1st/2nd/3rd ticket class in family group size')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()",
            "mc_idx": 82,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.9230769230769231,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.15384615384615385,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 4,
                    "size": 5,
                    ".value_counts": 2,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    "stack": 4,
                    ".sort_values": 2,
                    ".unstack": 2,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c038_o000_image_11.png",
                    38,
                    0,
                    11
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1008x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 82,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 38,
                "o_idx": 0
            }
        },
        {
            "source": "ax = sns.countplot(all_data['Pclass'], palette = ['#eed4d0', '#cda0aa', '#a2708e'])\n# calculate passengers for each category\nlabels = (all_data['Pclass'].value_counts(sort = False))\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+2, str(v), horizontalalignment = 'center', size = 12, color = 'black', fontweight = 'bold')\n    \n    \nplt.title('Passengers distribution by family size')\nplt.ylabel('Number of passengers')\nplt.tight_layout()",
            "mc_idx": 85,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1,
                    "size": 2,
                    ".value_counts": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c039_o000_image_12.png",
                    39,
                    0,
                    12
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x288 with 1 Axes>"
                    ]
                },
                "mc_idx": 85,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 39,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(14, 5))\n\nax1 = fig.add_subplot(121)\nsns.countplot(x = 'Pclass', hue = 'Survived', data = all_data, palette=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax1)\nplt.title('Number of survived/drowned passengers by class (train data)')\nplt.ylabel('Number of passengers')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nax2 = fig.add_subplot(122)\nd = all_data.groupby('Pclass')['Survived'].value_counts(normalize = True).unstack()\nd.plot(kind='bar', stacked='True', ax = ax2, color =[\"#3f3e6fd1\", \"#85c6a9\"])\nplt.title('Proportion of survived/drowned passengers by class (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()",
            "mc_idx": 88,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.3333333333333333,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".plot(": 2,
                    "sns.": 1,
                    "size": 1,
                    ".value_counts": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    "stack": 2,
                    ".unstack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 1,
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c040_o000_image_13.png",
                    40,
                    0,
                    13
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1008x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 88,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 40,
                "o_idx": 0
            }
        },
        {
            "source": "sns.catplot(x = 'Pclass', hue = 'Survived', col = 'Sex', kind = 'count', data = all_data , palette=[\"#3f3e6fd1\", \"#85c6a9\"])\n\nplt.tight_layout()",
            "mc_idx": 91,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c041_o000_image_14.png",
                    41,
                    0,
                    14
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 772x360 with 2 Axes>"
                    ]
                },
                "mc_idx": 91,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 41,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize=(20, 10))\npalette=[\"#3f3e6fd1\", \"#85c6a9\"]\n\nplt.subplot(2, 3, 1)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 2)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='male'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 3)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='male'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#e1f3f6\")\nplt.axhspan(16, 40, color = \"#bde6dd\")\nplt.axhspan(40, 80, color = \"#83ceb9\")\nplt.title('Age distribution (males, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.subplot(2, 3, 4)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_1_class[age_1_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 1st class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 5)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_2_class[age_2_class['Sex']=='female'],\n     linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 2nd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\nplt.subplot(2, 3, 6)\nsns.stripplot(x = 'Survived', y = 'Age', data = age_3_class[age_3_class['Sex']=='female'],\n              linewidth = 0.9, palette = palette)\nplt.axhspan(0, 16, color = \"#ffff9978\")\nplt.axhspan(16, 40, color = \"#ffff97bf\")\nplt.axhspan(40, 80, color = \"#ffed97bf\")\nplt.title('Age distribution (females, 3rd class)',fontsize= 14)\nplt.xticks( np.arange(2), ['drowned', 'survived'])\nplt.ylim(0, 80)\n\n\nplt.show()",
            "mc_idx": 94,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.07692307692307693,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.46153846153846156,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 6,
                    "size": 7
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 6
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c042_o000_image_15.png",
                    42,
                    0,
                    15
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1440x720 with 6 Axes>"
                    ]
                },
                "mc_idx": 94,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 42,
                "o_idx": 0
            }
        },
        {
            "source": "plt.figure(figsize = (15,4))\n\nplt.subplot (1,3,1)\nax = sns.countplot(all_data['Sex'], palette=\"Set3\")\nplt.title('Number of passengers by Sex')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Sex'].value_counts())\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nplt.subplot (1,3,2)\nsns.countplot( x = 'Pclass', data = all_data, hue = 'Sex', palette=\"Set3\")\nplt.title('Number of male/female passengers by class')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\n\nplt.subplot (1,3,3)\nsns.countplot( x = 'Family_size_group', data = all_data, hue = 'Sex', \n              order = all_data['Family_size_group'].value_counts().index , palette=\"Set3\")\nplt.title('Number of male/female passengers by family size')\nplt.ylabel('Number of passengers')\nplt.legend( loc=(1.04,0))\nplt.tight_layout()",
            "mc_idx": 97,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.3333333333333333,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 2,
                    "sns.": 3,
                    "size": 5,
                    ".value_counts": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 3,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c043_o000_image_16.png",
                    43,
                    0,
                    16
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x288 with 3 Axes>"
                    ]
                },
                "mc_idx": 97,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 43,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize = (15,4))\n\nax1 = fig.add_subplot(131)\npalette = sns.cubehelix_palette(5, start = 2)\nax = sns.countplot(all_data['Embarked'], palette = palette, order = ['C', 'Q', 'S'], ax = ax1)\nplt.title('Number of passengers by Embarked')\nplt.ylabel('Number of passengers')\n\n# calculate passengers for each category\nlabels = (all_data['Embarked'].value_counts())\nlabels = labels.sort_index()\n# add result numbers on barchart\nfor i, v in enumerate(labels):\n    ax.text(i, v+10, str(v), horizontalalignment = 'center', size = 10, color = 'black')\n    \n\nax2 = fig.add_subplot(132)\nsurv_by_emb = all_data.groupby('Embarked')['Survived'].value_counts(normalize = True)\nsurv_by_emb = surv_by_emb.unstack().sort_index()\nsurv_by_emb.plot(kind='bar', stacked='True', color=[\"#3f3e6fd1\", \"#85c6a9\"], ax = ax2)\nplt.title('Proportion of survived/drowned passengers by Embarked (train data)')\nplt.legend(( 'Drowned', 'Survived'), loc=(1.04,0))\n_ = plt.xticks(rotation=False)\n\n\nax3 = fig.add_subplot(133)\nclass_by_emb = all_data.groupby('Embarked')['Pclass'].value_counts(normalize = True)\nclass_by_emb = class_by_emb.unstack().sort_index()\nclass_by_emb.plot(kind='bar', stacked='True', color = ['#eed4d0', '#cda0aa', '#a2708e'], ax = ax3)\nplt.legend(('1st class', '2nd class', '3rd class'), loc=(1.04,0))\nplt.title('Proportion of clases by Embarked')\n_ = plt.xticks(rotation=False)\n\nplt.tight_layout()",
            "mc_idx": 100,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.35714285714285715,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    ".plot(": 4,
                    "sns.": 2,
                    "size": 2,
                    ".value_counts": 3,
                    ".groupby": 2
                },
                "Data_Transform": {
                    ".groupby(": 2,
                    "stack": 4,
                    ".sort_index": 3,
                    ".unstack": 2,
                    ".add": 3
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".plot(": 2,
                    "sns.": 2,
                    "chart": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c044_o000_image_17.png",
                    44,
                    0,
                    17
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x288 with 3 Axes>"
                    ]
                },
                "mc_idx": 100,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 44,
                "o_idx": 0
            }
        },
        {
            "source": "\nsns.catplot(x=\"Embarked\", y=\"Fare\", kind=\"violin\", inner=None,\n            data=all_data, height = 6, palette = palette, order = ['C', 'Q', 'S'])\nplt.title('Distribution of Fare by Embarked')\nplt.tight_layout()",
            "mc_idx": 102,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c045_o000_image_18.png",
                    45,
                    0,
                    18
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 102,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 45,
                "o_idx": 0
            }
        },
        {
            "source": "# Descriptive statistics:\npd.DataFrame(all_data.groupby('Embarked')['Fare'].describe())",
            "mc_idx": 103,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.25,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".describe(": 1,
                    "describe": 1,
                    ".describe": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    46,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "          count       mean        std     min      25%       50%        75%  \\\nEmbarked                                                                      \nC         270.0  62.336267  84.185996  4.0125  13.8583  28.51875  78.966675   \nQ         123.0  12.409012  13.616133  6.7500   7.7500   7.75000  10.197900   \nS         913.0  27.418824  37.096402  0.0000   8.0500  13.00000  27.750000   \n\n               max  \nEmbarked            \nC         512.3292  \nQ          90.0000  \nS         263.0000  "
                    ]
                },
                "mc_idx": 103,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 46,
                "o_idx": 0
            }
        },
        {
            "source": "train_data[train_data['Embarked'].isna()]",
            "mc_idx": 105,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".isna": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    47,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                       Name  \\\n61            62         1       1                        Icard, Miss. Amelie   \n829          830         1       1  Stone, Mrs. George Nelson (Martha Evelyn)   \n\n        Sex   Age  SibSp  Parch  Ticket  Fare Cabin Embarked  \n61   female  38.0      0      0  113572  80.0   B28      NaN  \n829  female  62.0      0      0  113572  80.0   B28      NaN  "
                    ]
                },
                "mc_idx": 105,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 47,
                "o_idx": 0
            }
        },
        {
            "source": "sns.catplot(x=\"Pclass\", y=\"Fare\", kind=\"swarm\", data=all_data, palette=sns.cubehelix_palette(5, start = 3), height = 6)\n\nplt.tight_layout()",
            "mc_idx": 108,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c048_o000_image_19.png",
                    48,
                    0,
                    19
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 432x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 108,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 48,
                "o_idx": 0
            }
        },
        {
            "source": "sns.catplot(x=\"Pclass\", y=\"Fare\",  hue = \"Survived\", kind=\"swarm\", data=all_data, \n                                    palette=[\"#3f3e6fd1\", \"#85c6a9\"], height = 6)\nplt.tight_layout()",
            "mc_idx": 110,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0061_c049_o000_image_20.png",
                    49,
                    0,
                    20
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 484x432 with 1 Axes>"
                    ]
                },
                "mc_idx": 110,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 49,
                "o_idx": 0
            }
        },
        {
            "source": "all_data[all_data['Fare'] == min(all_data['Fare'])]",
            "mc_idx": 112,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    50,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "     PassengerId  Survived  Pclass                                   Name  \\\n179          180       0.0       3                    Leonard, Mr. Lionel   \n263          264       0.0       1                  Harrison, Mr. William   \n271          272       1.0       3           Tornquist, Mr. William Henry   \n277          278       0.0       2            Parkes, Mr. Francis \"Frank\"   \n302          303       0.0       3        Johnson, Mr. William Cahoone Jr   \n413          414       0.0       2         Cunningham, Mr. Alfred Fleming   \n466          467       0.0       2                  Campbell, Mr. William   \n481          482       0.0       2       Frost, Mr. Anthony Wood \"Archie\"   \n597          598       0.0       3                    Johnson, Mr. Alfred   \n633          634       0.0       1          Parr, Mr. William Henry Marsh   \n674          675       0.0       2             Watson, Mr. Ennis Hastings   \n732          733       0.0       2                   Knight, Mr. Robert J   \n806          807       0.0       1                 Andrews, Mr. Thomas Jr   \n815          816       0.0       1                       Fry, Mr. Richard   \n822          823       0.0       1        Reuchlin, Jonkheer. John George   \n266         1158       NaN       1  Chisholm, Mr. Roderick Robert Crispin   \n372         1264       NaN       1                Ismay, Mr. Joseph Bruce   \n\n      Sex   Age  SibSp  Parch  Ticket  Fare        Cabin Embarked     Title  \\\n179  male  36.0      0      0    LINE   0.0          NaN        S        Mr   \n263  male  40.0      0      0  112059   0.0          B94        S        Mr   \n271  male  25.0      0      0    LINE   0.0          NaN        S        Mr   \n277  male   NaN      0      0  239853   0.0          NaN        S        Mr   \n302  male  19.0      0      0    LINE   0.0          NaN        S        Mr   \n413  male   NaN      0      0  239853   0.0          NaN        S        Mr   \n466  male   NaN      0      0  239853   0.0          NaN        S        Mr   \n481  male   NaN      0      0  239854   0.0          NaN        S        Mr   \n597  male  49.0      0      0    LINE   0.0          NaN        S        Mr   \n633  male   NaN      0      0  112052   0.0          NaN        S        Mr   \n674  male   NaN      0      0  239856   0.0          NaN        S        Mr   \n732  male   NaN      0      0  239855   0.0          NaN        S        Mr   \n806  male  39.0      0      0  112050   0.0          A36        S        Mr   \n815  male   NaN      0      0  112058   0.0         B102        S        Mr   \n822  male  38.0      0      0   19972   0.0          NaN        S  Jonkheer   \n266  male   NaN      0      0  112051   0.0          NaN        S        Mr   \n372  male  49.0      0      0  112058   0.0  B52 B54 B56        S        Mr   \n\n    Title_category deck  Family_size     Surname Family_size_group  \n179             Mr    U            1     Leonard          f_single  \n263             Mr    B            1    Harrison          f_single  \n271             Mr    U            1   Tornquist          f_single  \n277             Mr    U            1      Parkes          f_single  \n302             Mr    U            1     Johnson          f_single  \n413             Mr    U            1  Cunningham          f_single  \n466             Mr    U            1    Campbell          f_single  \n481             Mr    U            1       Frost          f_single  \n597             Mr    U            1     Johnson          f_single  \n633             Mr    U            1        Parr          f_single  \n674             Mr    U            1      Watson          f_single  \n732             Mr    U            1      Knight          f_single  \n806             Mr    A            1     Andrews          f_single  \n815             Mr    B            1         Fry          f_single  \n822          honor    U            1    Reuchlin          f_single  \n266             Mr    U            1    Chisholm          f_single  \n372             Mr    B            1       Ismay          f_single  "
                    ]
                },
                "mc_idx": 112,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 50,
                "o_idx": 0
            }
        }
    ],
    "markdown_cells": [
        {
            "source": "![MA_00079563_yvu84f.jpg](attachment:MA_00079563_yvu84f.jpg)",
            "mc_idx": 0,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#1.-Introduction\" data-toc-modified-id=\"1.-Introduction-1\">1. Introduction</a></span></li><li><span><a href=\"#2.-Domain-information\" data-toc-modified-id=\"2.-Domain-information-2\">2. Domain information</a></span></li><li><span><a href=\"#3.-Loading-libraries:\" data-toc-modified-id=\"3.-Loading-libraries:-3\">3. Loading libraries:</a></span></li><li><span><a href=\"#4.-Loading-data\" data-toc-modified-id=\"4.-Loading-data-4\">4. Loading data</a></span></li><li><span><a href=\"#5.-First-look:-variables,-NAs\" data-toc-modified-id=\"5.-First-look:-variables,-NAs-5\">5. First look: variables, NAs</a></span><ul class=\"toc-item\"><li><span><a href=\"#5.1-Variables\" data-toc-modified-id=\"5.1-Variables-5.1\">5.1 Variables</a></span></li><li><span><a href=\"#5.2-Types-of-the-variables\" data-toc-modified-id=\"5.2-Types-of-the-variables-5.2\">5.2 Types of the variables</a></span></li><li><span><a href=\"#5.3-Check-data-for-NA\" data-toc-modified-id=\"5.3-Check-data-for-NA-5.3\">5.3 Check data for NA</a></span></li></ul></li><li><span><a href=\"#6.-Exploring-the-data\" data-toc-modified-id=\"6.-Exploring-the-data-6\">6. Exploring the data</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.1-Survivals---target-value\" data-toc-modified-id=\"6.1-Survivals---target-value-6.1\">6.1 Survivals - target value</a></span></li><li><span><a href=\"#6.2-AGE\" data-toc-modified-id=\"6.2-AGE-6.2\">6.2 AGE</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.2.1-Age-distribution\" data-toc-modified-id=\"6.2.1-Age-distribution-6.2.1\">6.2.1 Age distribution</a></span></li><li><span><a href=\"#6.2.2-Age-by-surviving-status\" data-toc-modified-id=\"6.2.2-Age-by-surviving-status-6.2.2\">6.2.2 Age by surviving status</a></span></li><li><span><a href=\"#6.2.3-Age-by-class\" data-toc-modified-id=\"6.2.3-Age-by-class-6.2.3\">6.2.3 Age by class</a></span></li><li><span><a href=\"#6.2.4-Age-vs-class-vs-gender\" data-toc-modified-id=\"6.2.4-Age-vs-class-vs-gender-6.2.4\">6.2.4 Age vs class vs gender</a></span></li></ul></li><li><span><a href=\"#6.3-What-is-in-the-name?\" data-toc-modified-id=\"6.3-What-is-in-the-name?-6.3\">6.3 What is in the name?</a></span></li><li><span><a href=\"#6.4-Cabin\" data-toc-modified-id=\"6.4-Cabin-6.4\">6.4 Cabin</a></span></li><li><span><a href=\"#6.5-Family\" data-toc-modified-id=\"6.5-Family-6.5\">6.5 Family</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.5.1-Calculate-family-size\" data-toc-modified-id=\"6.5.1-Calculate-family-size-6.5.1\">6.5.1 Calculate family size</a></span><li><span><a href=\"#6.5.2-Family-size-and-chanses-for-surviving\" data-toc-modified-id=\"6.5.2-Family-size-and-chanses-for-surviving-6.5.2\">6.5.2 Family size and chanses for surviving</a></span></li></ul></li><li><span><a href=\"#6.6-Class\" data-toc-modified-id=\"6.6-Class-6.6\">6.6 Class</a></span><ul class=\"toc-item\"><li><span><a href=\"#6.6.1-Passengers-by-class\" data-toc-modified-id=\"6.6.1-Passengers-by-class-6.6.1\">6.6.1 Passengers by class</a></span></li><li><span><a href=\"#6.6.2-Class-vs-surviving-status\" data-toc-modified-id=\"6.6.2-Class-vs-surviving-status-6.6.2\">6.6.2 Class vs surviving status</a></span></li><li><span><a href=\"#6.6.3-Class-vs-surviving-status-vs-gender\" data-toc-modified-id=\"6.6.3-Class-vs-surviving-status-vs-gender-6.6.3\">6.6.3 Class vs surviving status vs gender</a></span></li><li><span><a href=\"#6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status\" data-toc-modified-id=\"6.6.4-Class-vs.-Gender-vs.-Age-->-Surviving-status-6.6.4\">6.6.4 Class vs. Gender vs. Age -&gt; Surviving status</a></span></li></ul></li><li><span><a href=\"#6.7-Gender\" data-toc-modified-id=\"6.7-Gender-6.7\">6.7 Gender</a></span></li><li><span><a href=\"#6.8-Embarked\" data-toc-modified-id=\"6.8-Embarked-6.8\">6.8 Embarked</a></span></li><li><span><a href=\"#6.9-Fare\" data-toc-modified-id=\"6.9-Fare-6.9\">6.9 Fare</a></span></li></ul></li><li><span><a href=\"#7.-Conclusion\" data-toc-modified-id=\"7.-Conclusion-7\">7. Conclusion</a></span></li></ul></div>",
            "mc_idx": 1,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 1. Introduction\nSince I am currently located in Belfast (the city in which the Titanic was built) for a year for my Master's degree, I could not get past this legendary Titanic competition! \n  \nThis notebook is the **first part** of my work and contains **EDA** (exploratory data analysis) and missing data research.\n\n\ud83c\udf89 \u2728 [** !!!!!! Second part with ML *solution* you can check here !!!!!**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial)\n\n*I collapsed all the cells with the code for easy viewing. If you are interested in viewing the code, you can click \"code\" button near the graph or fork my notebook to view the entire code.*",
            "mc_idx": 2,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 2. Domain information\n[Titanic](https://en.wikipedia.org/wiki/Sinking_of_the_RMS_Titanic) was a British passenger liner operated by the White Star Line. Titanic was on its way from Southampton to New York City when it sank in the North Atlantic Ocean in the early morning hours of **15 April 1912** after Titanic collided with an iceberg. The ship carried **2224** people, considering passengers and crew aboard,**1514** of them died.  \n\nTitanic carried 16 wooden lifeboats and four collapsibles, which could accommodate 1,178 people, only one-third of Titanic's total capacity (and 53% of real number of passengers). At the time, lifeboats were intended to ferry survivors from a sinking ship to a rescuing ship\u2014not keep afloat the whole population or power them to shore. If the SS Californian would responded to Titanic's distress calls, the lifeboats may have been adequate to ferry the passengers to safety as planned, but it didn't happen and the only way to survive were to get on the lifeboat.\n\nThe main question of the competition is **\u201cwhat sorts of people were more likely to survive?\u201d**",
            "mc_idx": 3,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 3. Loading libraries: \n\nList of libraries I am using in this kernel:\n* pandas - offers data structures and operations for manipulating numerical tables and time series. (imported as pd) [Documentation](https://pandas.pydata.org/)\n* seaborn - data visualization library based on matplotlib. [Documentation](https://seaborn.pydata.org/)\n* matplotlib.pyplot - to create some visualizations (imported as plt) [Documentation](https://matplotlib.org/tutorials/introductory/pyplot.html)\n* numpy - The fundamental package for scientific computing with Python. [Documentation](https://numpy.org/)",
            "mc_idx": 4,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 4. Loading data\nAs input information I have two CSV files:\n\n* **train.csv** - training part of the dataset, contains labels and information about passengers.\n* **test.csv** - testing part of the dataset, doesn't contain labels.\n\nIn this notebook I will use all available information (train + test datasets) to perform exploratory data analysis.  \n\n1. First, load both csv files into two DataFrames, using pandas read_csv method and check the shape of the loaded data:",
            "mc_idx": 6,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The training part contains information about 891 passengers, described by 12 variables, including 1 target variable.  \nThe testing part contains 418 observations, i.e information about passengers, described by 11 variables (the test dataset doesn't contain target value.)\n\n2. Combine test and train data into one \"all_data\" DataFrame.   \nTo do so, I create a sequence of DataFrame objects and use pandas concat method. Terget values of testing data in resulting dataset will be NaN.  \nCheck the shape of the result DataFrame and take a look at the first 4 rows:",
            "mc_idx": 8,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Overall, we have information about 1309 passengers. I am guessing, this dataset contains data only about passengers, not crew members (we know, that Titanic carried 2224 people).",
            "mc_idx": 10,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 5.2 Types of the variables",
            "mc_idx": 11,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Data types, non-null values count:",
            "mc_idx": 12,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Age and Fare are continuous numeric variables.  \nPclass is integer, but in fact it is categorical variable, represented by 3 numbers.  \nAfter previous manipulations, Survived variable has type 'float', it's not correct, since it's categorical variable too, but it will not influence my EDA process, so I will let it be float for now.\n",
            "mc_idx": 14,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 5. First look: variables, NAs \n## 5.1 Variables\nFrom the data overview of the competition, we have a description of each variable:\n* PassengerId - unique identifier\n* Survived:\n        0 = No\n        1 = Yes\n* Pclass: Ticket class\n        1 = 1st, Upper\n        2 = 2nd, Middle\n        3 = 3rd, Lower\n* Name: full name with a title\n* Sex: gender\n* Age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n* Sibsp: Number of siblings / spouses aboard the Titanic. The dataset defines family relations in this way:\n        Sibling = brother, sister, stepbrother, stepsister\n        Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n* Parch: Number of parents / children aboard the Titanic. The dataset defines family relations in this way:\n        Parent = mother, father\n        Child = daughter, son, stepdaughter, stepson\n        Some children travelled only with a nanny, therefore parch=0 for them.\n* Ticket: Ticket number.\n* Fare: Passenger fare.\n* Cabin: Cabin number.\n* Embarked: Port of Embarkation:\n        C = Cherbourg\n        Q = Queenstown\n        S = Southampton",
            "mc_idx": 15,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 5.3 Check data for NA\nTo check the dataset for NAs I am using **isna()** dataframe function, which returns a boolean same-sized object indicating if the values are NA and then I am calculating the number of True values for each variable.   \nNA values for each dataframe (train, test, all) presented in the table below:",
            "mc_idx": 16,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "There are overall 263 missing Age values, 1 missing Fare, 1014 NAs in Cabin variable, and 2 in Embarked variable.  \n418 NA in Survived variable due to the absence of this information in the test dataset. I will not impute these missings in the current notebook :) So, when I will use this variable for visualization, there will be information only for the training part of the data.\n\nIn this notebook I will do some missing data handling for the combined dataset. But in the second part of my work (ML solution) this should be done based on what we know only about training data, to avoid any data leakage.",
            "mc_idx": 18,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 6. Exploring the data",
            "mc_idx": 19,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.1 Survivals - target value\nLet's calculate and visualise distribution of our target variable - 'Survived'.  \nA countplot of seaborn module is a very useful way to show the counts of observations in each category.  \nSince we have target only for the training part, these numbers don't include all passengers.",
            "mc_idx": 20,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "We have 891 passengers in train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived.  \nBut we know, that lifeboats could carry 53% of total passengers.",
            "mc_idx": 23,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.2 AGE\nWhat is the age of passengers, how it relates to the chances of survival, and how it changes depending on class and gender.\n### 6.2.1 Age distribution\nWe have 263 missing values:  \n* 177 missing in the training dataset \n* 86 in the test dataset\n\nOverall age distribution (seaborn distplot) and descriptive statistics:",
            "mc_idx": 24,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The distribution of Age is slightly right skewed. The Age vary from about **0.17** year to **80** years with mean = 29.88, and there don't seem to be any obvious outliers, but we will check it.",
            "mc_idx": 27,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.2.2 Age by surviving status\nDid age had a big influence on chances to survive?  \nTo visualize two age distributions, grouped by surviving status I am using boxlot and stripplot showed together:",
            "mc_idx": 28,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The mean age of survived passenger is 28.34 which on 2.28 smaller than the mean age of drowned passengers (only passengers we know survived status for).   \nThe minimum age of drowned passengers is 1 y.o which is very sad.  \nThe maximum age of survived passenger is 80 y.o, let's check if there is no mistake.",
            "mc_idx": 31,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Actually, Mr Algernon Henry Barkworth was born on 4 June 1864.He was 48 in 1912 and died in 1945 at 80 y.o.\n",
            "mc_idx": 33,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Let's update our description:  \nThe mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for).=\nThe maximum age of survived passenger is 63 y.o.  \nIt looks like there is a slightly bigger chance to survive for younger people.",
            "mc_idx": 36,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.2.3 Age by class\nThere I will compare three age distributions, grouped by class of the passenger.  \nAs visualisations I will use 2 gaphs:\n1. boxplot+stripplot as before\n2. kdeplot, to plot age density curves for each class. This method can't handle missing values, so I filter the data before using it.",
            "mc_idx": 37,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "1st class has wider distribution compare to 2nd and 3rd and almost symmetric.  \nBoth 2nd and 3rd classes age distributions are right skewed.  \nThe youngest passenger has 3rd class ticket, age = 0.17.  \nThe oldest passenger has 1st class ticket, age = 76.  \n3rd class mean age = 24.8, 2nd classe average age is 29.5 and 1st class average age is 39.1.   \n \n \nSince survived passengers on average younger than drowned, does it mean, that 3rd class passengers had more chances to survive? We will discover it later.  \n\nFrom graphs we can see difference in age distribution between classes. So when I will do missing data imputation I will take class into account.  ",
            "mc_idx": 40,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.2.4 Age vs class vs gender\nComparison of age distribution by gender I will do separately for each class since we have such a noticeable age difference between classes.",
            "mc_idx": 41,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The oldest and the youngest passengers are female.  \nIn each class the average Age of female are slightly less than the average Age of male passengers.",
            "mc_idx": 44,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.3 What is in the name? \nEach passenger Name value contains the title of the passenger which we can extract and discover.  \nTo create new variable \"Title\":  \n1. I am using method 'split' by comma to divide Name in two parts and save the second part\n2. I am splitting saved part by dot and save first part of the result\n3. To remove spaces around the title I am using 'split' method\n\nTo visualize, how many passengers hold each title, I chose countplot.",
            "mc_idx": 45,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The most frequent title among passangers is Mister (Mr.) - general title or respect of an adult male. The second title by its frequency is Miss (unmarried woman), the third - Mrs. (married woman).  \nOther titles are less frequent, I will discover if I can combine them into particular groups. I am going to use titles as a fiture, but if they split the data too much, leaving just a few observations in each group, it can lead to overfitting. And for a general understanding of the data, it will be more convenient to put titles in clearer groups.\n\n* Master -  By the late 19th century, etiquette dictated that men be addressed as Mister, and boys as Master.\n* Mme -  Madame. a French title of respect equivalent to \u201cMrs.\u201d, used alone or prefixed to a woman's married name or title. I will add to \"Mrs\".\n* Mlle - Mademoiselle is a French courtesy title, abbreviated Mlle, traditionally given to an unmarried woman. The equivalent in English is \"Miss\". I will add to \"Miss\" group.\n* Dr. - Doctor is an academic title\n* Rev. - Reverend, is usually a courtesy title for Protestant Christian ministers or pastors.\n\n\"Military\" group of titles:\n* Capt. -Captain is a title for the commander of a military unit\n* Major is a military rank of commissioned officer status\n* Col. - The honorary title of Colonel is conferred by several states in the US and certain military units of the Commonwealth of Nations\n\n\"Honor\"  group of titles:\n* Sir -  is a formal English honorific address for men. Sir is used for men titled knights i.e. of orders of chivalry, and later also to baronets, and other offices. \n* the Countess - is a historical title of nobility\n* Lady - a formal title in the United Kingdom. A woman with a title of nobility or honorary \n* Jonkheer - is an honorific in the Low Countries denoting the lowest rank within the nobility. \n* Don - is an honorific prefix primarily used in Spain and the former Spanish Empire, Italy, Portugal, the Philippines, Latin America, Croatia, and Goa. (male)\n* Dona - Feminine form for don (honorific) a Spanish, Portuguese, southern Italian, and Filipino title, given as a mark of respect\n\n\nNot sure about the title Ms,we have only 2 passengers with this title, I will convert it to Miss.\n\nI created a dictionary of titles and I am using method \"map\" to create variable \"Title_category\".",
            "mc_idx": 47,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "* The smallest group is \"honor\", passengers with royal-kind titles.  \n\nTraining data:\n* The biggiest proportion of survivals is in \"Mrs\" group - married woman.   \n* More than 80% drowned in \"Mr.\" group.  \n* Nobody survived among Reverend group.",
            "mc_idx": 51,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "If we consider the survivors not by percentage within each group but by comparing the number of survivors between groups, then \"Miss\" title category is the luckiest one. The \"Mr\" category lost the biggest number of passengers.\n\nLet's also visualize, how Title categories and ticket classes are related:",
            "mc_idx": 53,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "* All honor and military titles occupied the 1st class.  \n* All Reverends occupied 2nd class.\n* The biggest percent of the 3rd class is in the Master category.\n\nFor sure, there is a relationship between variables, and survival was influenced not only by the title itself but by a combination of factors that are to some extent interrelated. How class could relate on surviving? Let's go further and discover.",
            "mc_idx": 55,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.4 Cabin\n![Titanic_cutaway_diagram-small.png](attachment:Titanic_cutaway_diagram-small.png)\n\nFrom the number of the cabin we can extract first letter, which will tell us about placement of the cabin on the ship! And it seems to me as a very important knowlege:   \n* How close cabin located to the lifeboats\n* How far from the most damaged parts of the ship\n* How close to people who have information about what is happening and how to act\n* How many obstacles passenger had in the way to the lifeboat\n\nI found some description of each Titanic deck:\n\nThere were 8 decks: the upperdeck - for lifeboats, other 7 were under it and had letter symbols:\n* **A**: it did not run the entire length of the vessel (i.e. it did not reach from the stern to the bow of the vessel), and was intended for passengers of the **1st class**.\n* **B**: it did not run the entire length of the ship (it was interrupted by 37 meters above the C deck, and served as a place for anchors in the front).\n* **C**: in the front part of the galley, dining room for the crew, as well as a walking area for passengers of the 3rd class.\n* **D**: a walking area for passengers .\n* **E**: cabins of the **1st and 2nd class**.\n* **F**: part of the passenger cabins of the **2nd class**, most of the cabins of the **3rd class**.\n* **G**: did not run the entire length of the ship, the boiler rooms were located in the center.\n* **T** - boat deck ?\n\nTo the passengers without deck information I will imput U letter (as unknown).",
            "mc_idx": 56,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Most passengers don't have cabin numbers ('U').  \nThe largest part of passengers with known cabin numbers were located on the  'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'.  \nDeck A was the closest to the deck with lifeboats, but it is the last in surviving rate (except unknown and T deck). How did it happen?",
            "mc_idx": 59,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "I was curious, so I read a bit about some of these passengers:  \n[John Hugo Ross](https://www.encyclopedia-titanica.org/titanic-victim/john-hugo-ross.html) When he boarded on 10 April 1912, he was so ill from dysentery he had to be carried to his cabin on a stretcher. When Ross was told the ship had struck an iceberg and that he should get dressed, Ross refused to believe the trouble serious. \"Is that all,?\" he told Peuchen. \"It will take more than an iceberg to get me off this ship.\" Presumably, Ross drowned in his bed.  \n\n[Andrews, Mr. Thomas Jr](https://en.wikipedia.org/wiki/Thomas_Andrews) was a managing director of H&W (built the Titanic) in charge of designing and was familiar with every detail of the construction of the firm's ships. He helped to evacuate people.\n\n[Roebling, Mr. Washington Augustus II ](https://www.encyclopedia-titanica.org/titanic-victim/washington-roebling.html) helped to evacuate people as well.\n\nIt is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergensy were involved in the rescue process.\n\nFor training process it will be better to include passenger from T deck to the A deck group.",
            "mc_idx": 61,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.5 Family\nDoes the size of the family on Board together affect the chances of surviving a disaster? Does having children increase the chance of getting into a boat, or is it easier to survive being single?  \nI calculate the family size, by summarizing the number of siblings with the parch number  plus 1 (passenger himself).  \nFamily size = sib + parch + 1\n\n### 6.5.1 Calculate family size",
            "mc_idx": 62,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Looks strange that there are 16 passengers with family size of 7, for example. Let's check!  \nAlso, I will add a surname variable, by extraxting first word ow the name.",
            "mc_idx": 64,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "#### size 7\n1. Group people with family size = 7 by Surname  \nWe have 9 Andersons, who have family size of 7",
            "mc_idx": 66,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "2. Let's group Andersons with 7-size family by ticket number.  \nThere are  7 of them used the same ticket and travelled together. 5 children (each of them has 4 siblings) and 2 parents.\nTo passengers used separated tickets.",
            "mc_idx": 69,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Looks like they actually traveled alone, I will correct that data.",
            "mc_idx": 72,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "#### size 5\nThere are some inconsistencies in other categories, with fewer relatives.  \nLet's check people with 5-size family and group them by Surname:",
            "mc_idx": 74,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Kink-Heilmann, Mr. Anton\t had 2 other siblings on the ship unlike his wife, for whom these relatives do not fit the description of relatives in the data set. We will assume that all other \"mismatches\" in the groups are similar to this. Since I plan to group the size of families into groups, this will eliminate possible inconsistencies.",
            "mc_idx": 77,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.5.2 Family size and chanses for surviving",
            "mc_idx": 78,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "* There were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  \n* Most of the passengers were traveling alone, percent of survivals not very large.  \n* The biggest proportion of survived passengers in group of people who had 4 family members on board. \n\nWe can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \nI will create 'Family_size_group' variable with four categories: \n* single\n* usual (sizes 2, 3, 4)\n* big (5, 6, 7)\n* and large (all bigger then 7)",
            "mc_idx": 80,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Large families are all from 3rd class and no one from the training part of the dataset is survived.  \nThe biggest proportion of the 1st class in the usual size of the family and the proportion of survivors in the usual family is the biggest.",
            "mc_idx": 83,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.6 Class\nWe have made a lot of assumptions about the survival rate depending on the classes. Let's now look closely at this variable.\n\n### 6.6.1 Passengers by class",
            "mc_idx": 84,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Most of the Titanic's passengers were traveling third class (709).  \nThe second class is the smallest in terms of the number of passengers.",
            "mc_idx": 86,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.6.2 Class vs surviving status",
            "mc_idx": 87,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.",
            "mc_idx": 89,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.6.3 Class vs surviving status vs gender",
            "mc_idx": 90,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the female survived.",
            "mc_idx": 92,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### 6.6.4 Class vs. Gender vs. Age -> Surviving status \nFor better understanding how the combination of some factors influence on chances to survive, lets break passengers into 18 imaginary groups separated by:\n* **Class** (1 / 2 / 3)\n* **Gender** (male / female)\n* **Age** ( <16 / 16-40 / 40<)  \n\nTo do so I will create 6 stripplots (3 for male, 3 for female), with values grouped by Surviving status and add background color to separate age groups:",
            "mc_idx": 93,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "From these graphs (training data only) we can see, that \n* only one kid (<16) from 1st and 2nd classes are drowned (female from the 1st class).\n* but children from the 3rd class were not so lucky, looks like chances to survive for passengers <16 were 50/50 for male and female.\n* most females from 1st and 2nd class are survived, without much difference in Age.\n* females from 3rd class in Age group 40+ drowned except one.\n* similar picture for males in 2nd and 3rd classes in the Age group 40+: only 2 from each class are survived.\n* for 40+ males from 1st class situation were slightly different, there are more survived passengers.\n* the largest \"accumulation\" of drowned passengers is observed in the Age group 16-40 males, 3rd class.",
            "mc_idx": 95,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.7 Gender\nLet's discover gender a little bit more:",
            "mc_idx": 96,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "There were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.",
            "mc_idx": 98,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.8 Embarked\nTitanic had 3 embarkation points before the ship started its route to New York:\n* Southampton\n* Cherbourg\n* Queenstown  \n\nSome passengers could leave Titanic in Cherbourg or Queenstown and avoid catastrophe. Also, the point of embarkation could have an influence on ticket fare and location on the ship.  \n\n![09269a9f7d50a3f019182a11f7aa7981.jpg](attachment:09269a9f7d50a3f019182a11f7aa7981.jpg)\n\nPort of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n",
            "mc_idx": 99,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "* Most number of passengers (914) were embarked in Southampton. Also Southampton has the biggiest proportion of drowned passengers.\n* 270 passengers emarked in Cherbourg and more than 50% of them survived (in the training dataset). \n* 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers\n",
            "mc_idx": 101,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "* The wider fare distribution among passengers who embarked in Cherbourg. It makes scence - many first-class passengers boarded the ship here, but the share of third-class passengers is quite significant.\n* The smallest variation in the price of passengers who boarded in q. Also, the average price of these passengers is the smallest, I think this is due to the fact that the path was supposed to be the shortest + almost all third-class passengers.\n\nLet's check NA values of Embarked variable:",
            "mc_idx": 104,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "These two passengers traveled together (same ticket number). To impute missing values, we can use mode value for passengers with the closest fare value and Pclass.",
            "mc_idx": 106,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## 6.9 Fare\n",
            "mc_idx": 107,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "We can observe that the distribution of prices for the second and third class is very similar. The distribution of first-class prices is very different, has a larger spread, and on average prices are higher. \n\nLet's add colours to our points to indicate surviving status of passenger (there will be only data from training part of the dataset):",
            "mc_idx": 109,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Looks like the bigger passenger paid, the more chances to survive he had.  \nWhat about zero fare in the first class? Is it a mistake?",
            "mc_idx": 111,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Some of the passengers have \"Line\" tickets, perhaps they were somehow involved in the Titanic, but were not the ship's crew. I don't think we should change these prices, but add an additional feature for these passengers.",
            "mc_idx": 113,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "# 7. Conclusion\nWe know that there were not enough boats on Board the Titanic for all passengers to be able to evacuate. After studying the information about the passengers, we can make some assumptions about who had a better chance of survival in a shipwreck situation as well as General observations about passengers.\n\n* There are 891 passengers in the train dataset, 549 (61,6%) of them drowned and only 342 (38,4%) survived. But we know, that lifeboats (16 wooden lifeboats and four collapsible) could carry 53% of total passengers.\n* The Age of all passengers vary from about 0.17 year to 80 years with average 29.88. The mean age of survived passenger is 28.23 which on 2.39 smaller than the mean age of drowned passengers (only passengers we know survived status for). It looks like there is a slightly bigger chance to survive for younger people.\n* Exploring the title of passengers, we can see that the biggest proportion of survivors is in the \"Mrs\" group - a married woman. More than 80% drowned in the \"Mr.\" group and nobody survived among the Reverend group.\n* Most passengers don't have cabin numbers. The largest part of passengers with known cabin numbers was located on the 'C' deck and had 1st class ticket. 'C' deck is fifth by a percentage of the survivor.  \nThe largest surviving rate (among passengers with known cabin numbers in training dataset) had passengers from deck 'D'. Deck A was the closest to the deck with lifeboats, but it is the last in the surviving rate.\n* The family size on board also seems to have an influence on chances for survival: there were two large families with sizes 8 and 11 and all their members from the training dataset are drowned.  We can observe that the percentage of survivors in people who have a family of 2, 3, 4 people is greater than in singles, then the percentage of survivors decreases as the family size increases.  \n* Most of the Titanic's passengers were traveling third class (709). The second class is the smallest in terms of the number of passengers. Despite the previously identified prerequisites (on average, older people are more likely to die, and in the first class, the average age is higher than in other classes. Also, passengers on deck A, which consists of 100% first class, have a large proportion of drowned passengers), the first-class has the largest number of survivors and the proportion of survivors within the class is the largest.  \nThird-class tickets had the highest number of drowned passengers, and most of the third-class passengers drowned.\n* However, most of the male passengers of the first class drowned, and the female almost all survived. In the third grade, half of the females survived.  \nThere were overall more males than females on board, it is fair for each ticket class, but in the 3rd class number of males more than twice bigger than females.  \nAlmost 600 male passengers traveled without family members and only about 200 females, but in usual and big families there were slightly more female passengers.  \n* Most numbers of passengers (914) were embarked in Southampton. Also, Southampton has the biggest proportion of drowned passengers. 270 passengers embarked in Cherbourg and more than 50% of them survived (in the training dataset). 123 of passengers embarked in Queenstown, the vast majority of them are 3rd class passengers.  \n\n \nIf we use a naive approach and consider all the parameters separately, then young female first-class passengers with the title Mrs have a moderate number of relatives on Board, who paid a large amount for a ticket and went on Board in  Cherbourg have a better chance of survival. \nFor sure, there is a relationship between variables, and survival was influenced not only by the title, or ticket, or age itself but by a combination of factors that are to some extent interrelated.   \nAnd It is obvious that there is no algorithm that can predict the survival rate by 100 percent based on the factors of the passenger's location on the ship or his age, since the human factor and the unpredicted emergency were involved in the rescue process.\n\n[**Second part of my work**](https://www.kaggle.com/demidova/titanic-feature-engineering-and-solution-tutorial) with Titanic dataset and contains:\n\n* Missing data imputation\n* Feature generation\n* Models implementation and tuning: Logistic Regression, Random Forest, XGBoost\n* Comparing models and submission\n",
            "mc_idx": 114,
            "nb_idx": 61,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "sim_matrix": [],
    "cell_sim_matrix": [],
    "nb_order": [],
    "summary_data_VA": null
}