{
    "nb_idx": 9,
    "nb_name": "d0009",
    "filename": "awesome-visualization-with-titanic-dataset.ipynb",
    "filepath": "data/data_Kaggle/raw/awesome-visualization-with-titanic-dataset.ipynb",
    "source": "## \ud83d\udd76 Awesome Visualization with Titanic Dataset\ud83d\udcca\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n![](https://images.squarespace-cdn.com/content/v1/5006453fe4b09ef2252ba068/1351392437993-BV9HK0L2V72X9FA05IOP/ke17ZwdGBToddI8pDm48kNWCohGJSet_CTOduKgSq_IUqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYxCRW4BPu10St3TBAUQYVKcq9E8CIbGv7FsN6c8xqWQM05n26OV6V51zLkOg8VQq3jPVEm2DFIE48zJj5Gl4vDf/Titanic_Blueprints_Design+%2815%29.gif)\n\nI am one of the Kagglers who **love** visualization.\n\nFor those of you who are tired of the excessive Titanic Dataset, I will create a higher quality visualization.\n\nI particularly pay attention to **color** and **placement**. \nAlso, I am studying how to proceed with visualization without misunderstanding of interpretation.\n\n> **Goal** : Let's create ***The Economist***-style visualization material with only python basic library **matplotlib & seaborn**\n\n**Have fun and if you liked it, please upvote!**\n\n---\n\n### Table of Contents\n\n- **Timeline visualization** : Matplotlib Techniques\n- **Ridgeplot** : Effective Multi Distribution\n- **Barplot** : How to Customize Bar?\n- **Stripplot** : Effective distribution plot\n- **Heatmap** : How t Custom Heatmap?\n- **Dimension Reduction + Scatter** \n !pip install seaborn==0.11.0 \n import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as grid_spec\nfrom matplotlib.ticker import FuncFormatter\n\nimport seaborn as sns\n\nimport numpy as np\nimport pandas as pd \n data = pd.read_csv('/kaggle/input/titanic/train.csv')\ndata.shape \n ## Awesome Timeline Visualization\n\n- A **Timeline** is a graphical way of displaying a list of events in chronological order. \n- line + scatter + **stem plot**\n\n---\n\n### Simple Explanation\n\n- First of all, the ingredients are:\n    - a line\n    - 3 data points\n        - 2 point set of date\n            - black one, white one\n        - 1 point set of time\n    - vertical lines which matching with time (stem plot)\n\n- The downside is that the process of adjusting text position is heuristic. \n sns.palplot(['#fafafa', '#4a4a4a', '#e3120b']) \n from datetime import datetime\n\n\ntl_dates = [\n    \"WED April 10\",\n    \"SUN April 14\",\n    \"MON April 15\",\n    \"THU April 18\"\n]\n\ntl_x = [1, 2, 6, 9]\n\ntl_sub_x = [1.5, 2.4, 2.9, 3.4, 3.8, 4.5, 5.0, 6.5, 7, 7.6, 8]\ntl_sub_times = [\n    \"1:30 PM\",\n    \"9:00 AM\",\n    \"1:42 PM\",\n    \"7:15 PM\",\n    \"10:00 PM\",\n    \"11:30 PM\",\n    \"11:40 PM\",\n    \"12:20 AM\",\n    \"12:45 AM\",\n    \"2:00 AM\",\n    \"2:20 AM\",\n]\n\ntl_text = [\n    \"Titanic sets sail.\",\n    \"Recieve Message.\",\n    \"Baltic Warns Titanic\\nof icebergs.\", \n    \"Smith requests the\\n return of the message.\",\n    \"Second Officer\\n Lightroller is\\n relievced from duty.\",\n    \"Warning bells, iceberg\\n sighting.\",\n    \"Titanic hits an iceberg.\",\n    \"Life boats are being\\n lowered.\",\n    \"Passengers slowly arrive\\n on deck.\",\n    \"Rear of boat begins to\\n raise.\",\n    \"Titanic sinks.\"\n]\n\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 5), constrained_layout=True)\nax.set_ylim(-2, 2)\nax.set_xlim(0, 10)\n\n\n# Timeline : line\nax.axhline(0, xmin=0.1, xmax=0.95, c='#4a4a4a', zorder=1)\n# Timeline : Date Points\nax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='#4a4a4a', zorder=2)\nax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='#fafafa', zorder=3)\n# Timeline : Time Points\nax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='#4a4a4a',zorder=4)\n\n# Date Text\nfor x, date in zip(tl_x, tl_dates):\n    ax.text(x, -0.2, date, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a')\n    \n\n# Stemplot : vertical line\nlevels = np.zeros(len(tl_sub_x))    \nlevels[::2] = 0.3\nlevels[1::2] = -0.3\nmarkerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \nplt.setp(baseline, zorder=0)\nplt.setp(markerline, marker=',', color='#4a4a4a')\nplt.setp(stemline, color='#4a4a4a')\n\n# Text\nfor idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n    ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b', fontsize=11)\n    \n    ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n        fontfamily='serif',color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b')\n\n# Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n    ax.spines[spine].set_visible(False)\n\n# Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Titanic Timeline\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='#4a4a4a')\n\nplt.show() \n ## Awesome Distribution Visualization (Ridgeplot)\n \n - A **Ridgeline** plot (sometimes called Joyplot) shows the distribution of a numeric value for several groups.\n- **library** : matplotlib, seaborn\n- **colortheme** from movie \"Snowpiercer\" (because of *class*)\n\n---\n\n### Simple Explanation\n\n- **Step1** : Use Gridspec\n- **Step2** : Create density plot using seaborn's kdeplot\n    - `bw` : bandwidth\n    - `edgecolor` : to separate each density plot\n    - `alpha` : remove transparency \n    - `cut` : clear meaning\n- **Step3** : Remove ticks & labels except last xticks\n- **Step4** : Remove Spine\n- **Step5** : Make plots closer & Make the background transparent\n- **Step6** : add subtext (figure title, axes title) \n sns.palplot([\"#022133\", \"#5c693b\", \"#51371c\", \"lightgray\"]) \n fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray',color=c, alpha=1) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n\nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\nplt.show()     \n Changed the color of the graph above to give it a **glacier** texture whether it is a survivor or not. \n sns.color_palette(sns.color_palette(\"PuBu\", 2)) \n fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray', hue='Survived', \n                multiple=\"stack\", palette='PuBu', alpha=0.7\n               ) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n    if idx != 1 : axes[idx].get_legend().remove()\n        \nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\n\nplt.show()     \n ## Awesome Barplot Visualization\n\n- **library** : matplotlib, seaborn\n- **colortheme** from [The Economist Colors](https://pattern-library.economist.com/color.html)\n\n---\n\n### Simple Explanation\n\n1. Grid\n2. Color difference in the bar you want to emphasize\n3. Average line and text annotations for it\n4. Minimize the y-axis information and add it as an annotation to each bar \n sns.palplot(['#d4dddd', '#244747', '#efe8d1', '#4a4a4a']) \n def age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ndata['age_band'] = data['Age'].apply(age_band)\ntitanic_age = data[['age_band', 'Survived']].groupby('age_band')['Survived'].value_counts().sort_index().unstack().fillna(0)\ntitanic_age['Survival rate'] = titanic_age[1] / (titanic_age[0] + titanic_age[1]) * 100\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 7))\n\ncolor_map = ['#d4dddd' for _ in range(9)]\ncolor_map[0] = color_map[8] = '#244747' # color highlight\n\nax.bar(titanic_age['Survival rate'].index, titanic_age['Survival rate'], \n       color=color_map, width=0.55, \n       edgecolor='black', \n       linewidth=0.7)\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax.spines[s].set_visible(False)\n\n\n# Annotation Part\nfor i in titanic_age['Survival rate'].index:\n    ax.annotate(f\"{titanic_age['Survival rate'][i]:.02f}%\", \n                   xy=(i, titanic_age['Survival rate'][i] + 2.3),\n                   va = 'center', ha='center',fontweight='light', \n                   color='#4a4a4a')\n\n\n# mean line + annotation\nmean = data['Survived'].mean() *100\nax.axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\nax.annotate(f\"mean : {mean :.4}%\", \n            xy=('70 ~ 80', mean + 4),\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n    \n\n# Title & Subtitle    \nfig.text(0.06, 1, 'Age Band & Survival Rate', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.06, 0.96, 'It can be seen that the survival rate of young children and the elderly is high.', fontsize=12, fontweight='light', fontfamily='serif')\n\ngrid_y_ticks = np.arange(0, 101, 20)\nax.set_yticks(grid_y_ticks)\nax.grid(axis='y', linestyle='-', alpha=0.4)\n\nplt.tight_layout()\nplt.show() \n ## Awesome Bar+Scatter Plot (Stripplot)\n\n- A **strip plot** is a scatter plot where one of the variables is categorical. \n- **color theme** : Pantone 1805, Pantone 540\n\n---\n\n### Simple Explanation\n\n- Calculate mean first\n- Generate Uniform Distribution\n    - Survived = 1, Survived = 0 \n- Make a difference using color or luminance or transparency.\n- (tips) Add legend\n- (tips) Add explanation under the title. \n survival_rate = data.groupby(['Sex']).mean()[['Survived']]\nmale_rate = survival_rate.loc['male']\nfemale_rate = survival_rate.loc['female']\ndisplay(survival_rate) \n male_pos = np.random.uniform(0, male_rate, len(data[(data['Sex']=='male') & (data['Survived']==1)]))\nmale_neg = np.random.uniform(male_rate, 1, len(data[(data['Sex']=='male') & (data['Survived']==0)]))\nfemale_pos = np.random.uniform(0, female_rate, len(data[(data['Sex']=='female') & (data['Survived']==1)]))\nfemale_neg = np.random.uniform(female_rate, 1, len(data[(data['Sex']=='female') & (data['Survived']==0)])) \n sns.palplot(['#004c70', '#990000', 'lightgray']) \n fig, ax = plt.subplots(1, 1, figsize=(9, 7))\n\nnp.random.seed(42)\n\n# Male Stripplot\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_pos)), male_pos, color='#004c70', edgecolor='lightgray', label='Male(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_neg)), male_neg, color='#004c70', edgecolor='lightgray', alpha=0.2, label='Male(Survived=0)')\n\n# Female Stripplot\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_pos)), female_pos, color='#990000', edgecolor='lightgray', label='Female(Survived=1)')\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_neg)), female_neg, color='#990000', edgecolor='lightgray', alpha=0.2, label='Female(Survived=0)')\n\n# Set Figure & Axes\nax.set_xlim(-0.5, 2.0)\nax.set_ylim(-0.03, 1.1)\n\n# Ticks\nax.set_xticks([0, 1])\nax.set_xticklabels(['Male', 'Female'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.1, 1, 'Distribution of Survivors by Gender', fontweight='bold', fontfamily='serif', fontsize=15)    \nfig.text(0.1, 0.96, 'As is known, the survival rate for female is high, with 19% of male and 74% of female.', fontweight='light', fontfamily='serif', fontsize=12)    \n\nax.legend(loc=(0.8, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show() \n The survival probability visualization for each pclass using the above method is as follows. \n \n# You can also make this meta data using for-loop\nsurvival_rate = data.groupby(['Pclass']).mean()[['Survived']]\np1_rate = survival_rate.loc[1]\np2_rate = survival_rate.loc[2]\np3_rate = survival_rate.loc[3]\n\np1_pos = np.random.uniform(0, p1_rate, len(data[(data['Pclass']==1) & (data['Survived']==1)]))\np1_neg = np.random.uniform(p1_rate, 1, len(data[(data['Pclass']==1) & (data['Survived']==0)]))\np2_pos = np.random.uniform(0, p2_rate, len(data[(data['Pclass']==2) & (data['Survived']==1)]))\np2_neg = np.random.uniform(p2_rate, 1, len(data[(data['Pclass']==2) & (data['Survived']==0)]))\np3_pos = np.random.uniform(0, p3_rate, len(data[(data['Pclass']==3) & (data['Survived']==1)]))\np3_neg = np.random.uniform(p3_rate, 1, len(data[(data['Pclass']==3) & (data['Survived']==0)]))\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\n\nnp.random.seed(42)\n\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_pos)), p1_pos, color='#022133', edgecolor='lightgray', label='P1(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_neg)), p1_neg, color='#022133', edgecolor='lightgray', alpha=0.2, label='P1(Survived=0)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_pos)), p2_pos, color='#5c693b', edgecolor='lightgray', label='P2(Survived=1)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_neg)), p2_neg, color='#5c693b', edgecolor='lightgray', alpha=0.2, label='P2(Survived=0)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_pos)), p3_pos, color='#51371c', edgecolor='lightgray', label='P3(Survived=1)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_neg)), p3_neg, color='#51371c', edgecolor='lightgray', alpha=0.2, label='P3(Survived=0)')\n\n\n\n# # Set Figure & Axes\nax.set_xlim(-0.5, 4.0)\nax.set_ylim(-0.03, 1.1)\n\n# # Ticks\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Pclass 1', 'Pclass 2', 'Pclass 3'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.06, 0.95, 'Distribution of Survivors by Pclass', fontweight='bold', fontfamily='serif', fontsize=15, ha='left')    \n\n\nax.legend(loc=(0.67, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show() \n ## Awesome Heatmap\n\n- A **heat map (or heatmap)** is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n\n---\n\n### Simple Explanation\n\n- (tip) `mask` (remove symetric)\n- (tip) `square` (to make x-y scale same)\n- (tip) `colormap (diverging colormap)\n- (tip) text as watermark\n \n data['Sex'] = data['Sex'].map({'male':0, 'female':1})\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata['Embarked'] = data['Embarked'].map({'S':0, 'C':1, 'Q':2})\ndata['Family'] = data['SibSp'] + data['Parch']\ndata = data[[col for col in data.columns if col !='Survived']+ ['Survived']]  \ncorr = data.corr()\ncorr \n sns.color_palette(sns.diverging_palette(230, 20)) \n fig, ax = plt.subplots(1, 1, figsize=(7, 7))\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nsns.heatmap(corr, \n            square=True, \n            mask=mask,\n            linewidth=2.5, \n            vmax=0.4, vmin=-0.4, \n            cmap=cmap, \n            cbar=False, \n            ax=ax)\n\nax.set_yticklabels(ax.get_xticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\nax.spines['top'].set_visible(True)\n\nfig.text(0.97, 1, 'Correlation Heatmap Visualization', fontweight='bold', fontfamily='serif', fontsize=15, ha='right')    \nfig.text(0.97, 0.92, 'Dataset : Titanic\\nAuthor : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')    \n\nplt.tight_layout()\nplt.show() \n ## Awesome Dimension Reduction + Scatter Plot\n\n- UMAP(Dimension Reduction) + Scatterplot\n\n### Simple Explanation\n\nIn the past, **dimensional reduction** has been widely used in multidimensional data analysis. \n\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and Pclass based on the clustering results according to survival, so that the distribution of survivors according to the criteria can be viewed differently. \n from umap import UMAP\n\n# Dimension Reduction\nsurvived = data['Survived'] \ndata_sub = data.drop(['Survived', 'Ticket', 'Name', 'Cabin', 'age_band'], axis=1).fillna(0)\n\numap = UMAP(random_state=0)\ntitanic_umap = umap.fit_transform(data_sub, survived)\n\n \n fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_umap[data['Survived']==1][:,0], titanic_umap[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_umap[data['Survived']==0][:,0], titanic_umap[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_umap[data['Sex']==0][:,0], titanic_umap[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_umap[data['Sex']==1][:,0], titanic_umap[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_umap[data['Pclass']==1][:,0], titanic_umap[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_umap[data['Pclass']==2][:,0], titanic_umap[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_umap[data['Pclass']==3][:,0], titanic_umap[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n \n ### Bad Dimension Reduction Case Example\n\n- using tsne \n from sklearn.manifold import TSNE\ntsne = TSNE(random_state=0)\ntitanic_tsne = tsne.fit_transform(data_sub, survived) \n fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_tsne[data['Survived']==1][:,0], titanic_tsne[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_tsne[data['Survived']==0][:,0], titanic_tsne[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_tsne[data['Sex']==0][:,0], titanic_tsne[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_tsne[data['Sex']==1][:,0], titanic_tsne[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_tsne[data['Pclass']==1][:,0], titanic_tsne[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_tsne[data['Pclass']==2][:,0], titanic_tsne[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_tsne[data['Pclass']==3][:,0], titanic_tsne[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n \n ## Related Work\n\n- [\ud83d\udd76 All You Need is Time-Series Visualization [20+]](https://www.kaggle.com/subinium/all-you-need-is-time-series-visualization-20)\n- [Tips for making the Right Visualization](https://www.kaggle.com/subinium/tips-for-making-the-right-visualization)\n- [Simple Matplotlib & Visualization Tips \ud83d\udca1](https://www.kaggle.com/subinium/simple-matplotlib-visualization-tips)\n- [\ud83d\udee3\ufe0f Road to Viz Expert (1) - Unusual tools](https://www.kaggle.com/subinium/road-to-viz-expert-1-unusual-tools)\n\n\n- [The Economist Color](http://pattern-library.economist.com/color.html)\n\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n",
    "code_source": "!pip install seaborn==0.11.0 \n import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as grid_spec\nfrom matplotlib.ticker import FuncFormatter\n\nimport seaborn as sns\n\nimport numpy as np\nimport pandas as pd \n data = pd.read_csv('/kaggle/input/titanic/train.csv')\ndata.shape \n sns.palplot(['#fafafa', '#4a4a4a', '#e3120b']) \n from datetime import datetime\n\n\ntl_dates = [\n    \"WED April 10\",\n    \"SUN April 14\",\n    \"MON April 15\",\n    \"THU April 18\"\n]\n\ntl_x = [1, 2, 6, 9]\n\ntl_sub_x = [1.5, 2.4, 2.9, 3.4, 3.8, 4.5, 5.0, 6.5, 7, 7.6, 8]\ntl_sub_times = [\n    \"1:30 PM\",\n    \"9:00 AM\",\n    \"1:42 PM\",\n    \"7:15 PM\",\n    \"10:00 PM\",\n    \"11:30 PM\",\n    \"11:40 PM\",\n    \"12:20 AM\",\n    \"12:45 AM\",\n    \"2:00 AM\",\n    \"2:20 AM\",\n]\n\ntl_text = [\n    \"Titanic sets sail.\",\n    \"Recieve Message.\",\n    \"Baltic Warns Titanic\\nof icebergs.\", \n    \"Smith requests the\\n return of the message.\",\n    \"Second Officer\\n Lightroller is\\n relievced from duty.\",\n    \"Warning bells, iceberg\\n sighting.\",\n    \"Titanic hits an iceberg.\",\n    \"Life boats are being\\n lowered.\",\n    \"Passengers slowly arrive\\n on deck.\",\n    \"Rear of boat begins to\\n raise.\",\n    \"Titanic sinks.\"\n]\n\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 5), constrained_layout=True)\nax.set_ylim(-2, 2)\nax.set_xlim(0, 10)\n\n\n# Timeline : line\nax.axhline(0, xmin=0.1, xmax=0.95, c='#4a4a4a', zorder=1)\n# Timeline : Date Points\nax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='#4a4a4a', zorder=2)\nax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='#fafafa', zorder=3)\n# Timeline : Time Points\nax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='#4a4a4a',zorder=4)\n\n# Date Text\nfor x, date in zip(tl_x, tl_dates):\n    ax.text(x, -0.2, date, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a')\n    \n\n# Stemplot : vertical line\nlevels = np.zeros(len(tl_sub_x))    \nlevels[::2] = 0.3\nlevels[1::2] = -0.3\nmarkerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \nplt.setp(baseline, zorder=0)\nplt.setp(markerline, marker=',', color='#4a4a4a')\nplt.setp(stemline, color='#4a4a4a')\n\n# Text\nfor idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n    ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b', fontsize=11)\n    \n    ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n        fontfamily='serif',color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b')\n\n# Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n    ax.spines[spine].set_visible(False)\n\n# Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Titanic Timeline\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='#4a4a4a')\n\nplt.show() \n sns.palplot([\"#022133\", \"#5c693b\", \"#51371c\", \"lightgray\"]) \n fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray',color=c, alpha=1) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n\nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\nplt.show()     \n sns.color_palette(sns.color_palette(\"PuBu\", 2)) \n fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray', hue='Survived', \n                multiple=\"stack\", palette='PuBu', alpha=0.7\n               ) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n    if idx != 1 : axes[idx].get_legend().remove()\n        \nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\n\nplt.show()     \n sns.palplot(['#d4dddd', '#244747', '#efe8d1', '#4a4a4a']) \n def age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ndata['age_band'] = data['Age'].apply(age_band)\ntitanic_age = data[['age_band', 'Survived']].groupby('age_band')['Survived'].value_counts().sort_index().unstack().fillna(0)\ntitanic_age['Survival rate'] = titanic_age[1] / (titanic_age[0] + titanic_age[1]) * 100\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 7))\n\ncolor_map = ['#d4dddd' for _ in range(9)]\ncolor_map[0] = color_map[8] = '#244747' # color highlight\n\nax.bar(titanic_age['Survival rate'].index, titanic_age['Survival rate'], \n       color=color_map, width=0.55, \n       edgecolor='black', \n       linewidth=0.7)\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax.spines[s].set_visible(False)\n\n\n# Annotation Part\nfor i in titanic_age['Survival rate'].index:\n    ax.annotate(f\"{titanic_age['Survival rate'][i]:.02f}%\", \n                   xy=(i, titanic_age['Survival rate'][i] + 2.3),\n                   va = 'center', ha='center',fontweight='light', \n                   color='#4a4a4a')\n\n\n# mean line + annotation\nmean = data['Survived'].mean() *100\nax.axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\nax.annotate(f\"mean : {mean :.4}%\", \n            xy=('70 ~ 80', mean + 4),\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n    \n\n# Title & Subtitle    \nfig.text(0.06, 1, 'Age Band & Survival Rate', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.06, 0.96, 'It can be seen that the survival rate of young children and the elderly is high.', fontsize=12, fontweight='light', fontfamily='serif')\n\ngrid_y_ticks = np.arange(0, 101, 20)\nax.set_yticks(grid_y_ticks)\nax.grid(axis='y', linestyle='-', alpha=0.4)\n\nplt.tight_layout()\nplt.show() \n survival_rate = data.groupby(['Sex']).mean()[['Survived']]\nmale_rate = survival_rate.loc['male']\nfemale_rate = survival_rate.loc['female']\ndisplay(survival_rate) \n male_pos = np.random.uniform(0, male_rate, len(data[(data['Sex']=='male') & (data['Survived']==1)]))\nmale_neg = np.random.uniform(male_rate, 1, len(data[(data['Sex']=='male') & (data['Survived']==0)]))\nfemale_pos = np.random.uniform(0, female_rate, len(data[(data['Sex']=='female') & (data['Survived']==1)]))\nfemale_neg = np.random.uniform(female_rate, 1, len(data[(data['Sex']=='female') & (data['Survived']==0)])) \n sns.palplot(['#004c70', '#990000', 'lightgray']) \n fig, ax = plt.subplots(1, 1, figsize=(9, 7))\n\nnp.random.seed(42)\n\n# Male Stripplot\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_pos)), male_pos, color='#004c70', edgecolor='lightgray', label='Male(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_neg)), male_neg, color='#004c70', edgecolor='lightgray', alpha=0.2, label='Male(Survived=0)')\n\n# Female Stripplot\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_pos)), female_pos, color='#990000', edgecolor='lightgray', label='Female(Survived=1)')\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_neg)), female_neg, color='#990000', edgecolor='lightgray', alpha=0.2, label='Female(Survived=0)')\n\n# Set Figure & Axes\nax.set_xlim(-0.5, 2.0)\nax.set_ylim(-0.03, 1.1)\n\n# Ticks\nax.set_xticks([0, 1])\nax.set_xticklabels(['Male', 'Female'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.1, 1, 'Distribution of Survivors by Gender', fontweight='bold', fontfamily='serif', fontsize=15)    \nfig.text(0.1, 0.96, 'As is known, the survival rate for female is high, with 19% of male and 74% of female.', fontweight='light', fontfamily='serif', fontsize=12)    \n\nax.legend(loc=(0.8, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show() \n \n# You can also make this meta data using for-loop\nsurvival_rate = data.groupby(['Pclass']).mean()[['Survived']]\np1_rate = survival_rate.loc[1]\np2_rate = survival_rate.loc[2]\np3_rate = survival_rate.loc[3]\n\np1_pos = np.random.uniform(0, p1_rate, len(data[(data['Pclass']==1) & (data['Survived']==1)]))\np1_neg = np.random.uniform(p1_rate, 1, len(data[(data['Pclass']==1) & (data['Survived']==0)]))\np2_pos = np.random.uniform(0, p2_rate, len(data[(data['Pclass']==2) & (data['Survived']==1)]))\np2_neg = np.random.uniform(p2_rate, 1, len(data[(data['Pclass']==2) & (data['Survived']==0)]))\np3_pos = np.random.uniform(0, p3_rate, len(data[(data['Pclass']==3) & (data['Survived']==1)]))\np3_neg = np.random.uniform(p3_rate, 1, len(data[(data['Pclass']==3) & (data['Survived']==0)]))\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\n\nnp.random.seed(42)\n\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_pos)), p1_pos, color='#022133', edgecolor='lightgray', label='P1(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_neg)), p1_neg, color='#022133', edgecolor='lightgray', alpha=0.2, label='P1(Survived=0)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_pos)), p2_pos, color='#5c693b', edgecolor='lightgray', label='P2(Survived=1)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_neg)), p2_neg, color='#5c693b', edgecolor='lightgray', alpha=0.2, label='P2(Survived=0)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_pos)), p3_pos, color='#51371c', edgecolor='lightgray', label='P3(Survived=1)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_neg)), p3_neg, color='#51371c', edgecolor='lightgray', alpha=0.2, label='P3(Survived=0)')\n\n\n\n# # Set Figure & Axes\nax.set_xlim(-0.5, 4.0)\nax.set_ylim(-0.03, 1.1)\n\n# # Ticks\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Pclass 1', 'Pclass 2', 'Pclass 3'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.06, 0.95, 'Distribution of Survivors by Pclass', fontweight='bold', fontfamily='serif', fontsize=15, ha='left')    \n\n\nax.legend(loc=(0.67, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show() \n data['Sex'] = data['Sex'].map({'male':0, 'female':1})\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata['Embarked'] = data['Embarked'].map({'S':0, 'C':1, 'Q':2})\ndata['Family'] = data['SibSp'] + data['Parch']\ndata = data[[col for col in data.columns if col !='Survived']+ ['Survived']]  \ncorr = data.corr()\ncorr \n sns.color_palette(sns.diverging_palette(230, 20)) \n fig, ax = plt.subplots(1, 1, figsize=(7, 7))\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nsns.heatmap(corr, \n            square=True, \n            mask=mask,\n            linewidth=2.5, \n            vmax=0.4, vmin=-0.4, \n            cmap=cmap, \n            cbar=False, \n            ax=ax)\n\nax.set_yticklabels(ax.get_xticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\nax.spines['top'].set_visible(True)\n\nfig.text(0.97, 1, 'Correlation Heatmap Visualization', fontweight='bold', fontfamily='serif', fontsize=15, ha='right')    \nfig.text(0.97, 0.92, 'Dataset : Titanic\\nAuthor : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')    \n\nplt.tight_layout()\nplt.show() \n from umap import UMAP\n\n# Dimension Reduction\nsurvived = data['Survived'] \ndata_sub = data.drop(['Survived', 'Ticket', 'Name', 'Cabin', 'age_band'], axis=1).fillna(0)\n\numap = UMAP(random_state=0)\ntitanic_umap = umap.fit_transform(data_sub, survived)\n\n \n fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_umap[data['Survived']==1][:,0], titanic_umap[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_umap[data['Survived']==0][:,0], titanic_umap[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_umap[data['Sex']==0][:,0], titanic_umap[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_umap[data['Sex']==1][:,0], titanic_umap[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_umap[data['Pclass']==1][:,0], titanic_umap[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_umap[data['Pclass']==2][:,0], titanic_umap[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_umap[data['Pclass']==3][:,0], titanic_umap[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n \n from sklearn.manifold import TSNE\ntsne = TSNE(random_state=0)\ntitanic_tsne = tsne.fit_transform(data_sub, survived) \n fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_tsne[data['Survived']==1][:,0], titanic_tsne[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_tsne[data['Survived']==0][:,0], titanic_tsne[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_tsne[data['Sex']==0][:,0], titanic_tsne[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_tsne[data['Sex']==1][:,0], titanic_tsne[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_tsne[data['Pclass']==1][:,0], titanic_tsne[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_tsne[data['Pclass']==2][:,0], titanic_tsne[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_tsne[data['Pclass']==3][:,0], titanic_tsne[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n",
    "markdown_source": "## \ud83d\udd76 Awesome Visualization with Titanic Dataset\ud83d\udcca\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n![](https://images.squarespace-cdn.com/content/v1/5006453fe4b09ef2252ba068/1351392437993-BV9HK0L2V72X9FA05IOP/ke17ZwdGBToddI8pDm48kNWCohGJSet_CTOduKgSq_IUqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYxCRW4BPu10St3TBAUQYVKcq9E8CIbGv7FsN6c8xqWQM05n26OV6V51zLkOg8VQq3jPVEm2DFIE48zJj5Gl4vDf/Titanic_Blueprints_Design+%2815%29.gif)\n\nI am one of the Kagglers who **love** visualization.\n\nFor those of you who are tired of the excessive Titanic Dataset, I will create a higher quality visualization.\n\nI particularly pay attention to **color** and **placement**. \nAlso, I am studying how to proceed with visualization without misunderstanding of interpretation.\n\n> **Goal** : Let's create ***The Economist***-style visualization material with only python basic library **matplotlib & seaborn**\n\n**Have fun and if you liked it, please upvote!**\n\n---\n\n### Table of Contents\n\n- **Timeline visualization** : Matplotlib Techniques\n- **Ridgeplot** : Effective Multi Distribution\n- **Barplot** : How to Customize Bar?\n- **Stripplot** : Effective distribution plot\n- **Heatmap** : How t Custom Heatmap?\n- **Dimension Reduction + Scatter** \n ## Awesome Timeline Visualization\n\n- A **Timeline** is a graphical way of displaying a list of events in chronological order. \n- line + scatter + **stem plot**\n\n---\n\n### Simple Explanation\n\n- First of all, the ingredients are:\n    - a line\n    - 3 data points\n        - 2 point set of date\n            - black one, white one\n        - 1 point set of time\n    - vertical lines which matching with time (stem plot)\n\n- The downside is that the process of adjusting text position is heuristic. \n ## Awesome Distribution Visualization (Ridgeplot)\n \n - A **Ridgeline** plot (sometimes called Joyplot) shows the distribution of a numeric value for several groups.\n- **library** : matplotlib, seaborn\n- **colortheme** from movie \"Snowpiercer\" (because of *class*)\n\n---\n\n### Simple Explanation\n\n- **Step1** : Use Gridspec\n- **Step2** : Create density plot using seaborn's kdeplot\n    - `bw` : bandwidth\n    - `edgecolor` : to separate each density plot\n    - `alpha` : remove transparency \n    - `cut` : clear meaning\n- **Step3** : Remove ticks & labels except last xticks\n- **Step4** : Remove Spine\n- **Step5** : Make plots closer & Make the background transparent\n- **Step6** : add subtext (figure title, axes title) \n Changed the color of the graph above to give it a **glacier** texture whether it is a survivor or not. \n ## Awesome Barplot Visualization\n\n- **library** : matplotlib, seaborn\n- **colortheme** from [The Economist Colors](https://pattern-library.economist.com/color.html)\n\n---\n\n### Simple Explanation\n\n1. Grid\n2. Color difference in the bar you want to emphasize\n3. Average line and text annotations for it\n4. Minimize the y-axis information and add it as an annotation to each bar \n ## Awesome Bar+Scatter Plot (Stripplot)\n\n- A **strip plot** is a scatter plot where one of the variables is categorical. \n- **color theme** : Pantone 1805, Pantone 540\n\n---\n\n### Simple Explanation\n\n- Calculate mean first\n- Generate Uniform Distribution\n    - Survived = 1, Survived = 0 \n- Make a difference using color or luminance or transparency.\n- (tips) Add legend\n- (tips) Add explanation under the title. \n The survival probability visualization for each pclass using the above method is as follows. \n ## Awesome Heatmap\n\n- A **heat map (or heatmap)** is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n\n---\n\n### Simple Explanation\n\n- (tip) `mask` (remove symetric)\n- (tip) `square` (to make x-y scale same)\n- (tip) `colormap (diverging colormap)\n- (tip) text as watermark\n \n ## Awesome Dimension Reduction + Scatter Plot\n\n- UMAP(Dimension Reduction) + Scatterplot\n\n### Simple Explanation\n\nIn the past, **dimensional reduction** has been widely used in multidimensional data analysis. \n\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and Pclass based on the clustering results according to survival, so that the distribution of survivors according to the criteria can be viewed differently. \n ### Bad Dimension Reduction Case Example\n\n- using tsne \n ## Related Work\n\n- [\ud83d\udd76 All You Need is Time-Series Visualization [20+]](https://www.kaggle.com/subinium/all-you-need-is-time-series-visualization-20)\n- [Tips for making the Right Visualization](https://www.kaggle.com/subinium/tips-for-making-the-right-visualization)\n- [Simple Matplotlib & Visualization Tips \ud83d\udca1](https://www.kaggle.com/subinium/simple-matplotlib-visualization-tips)\n- [\ud83d\udee3\ufe0f Road to Viz Expert (1) - Unusual tools](https://www.kaggle.com/subinium/road-to-viz-expert-1-unusual-tools)\n\n\n- [The Economist Color](http://pattern-library.economist.com/color.html)\n\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n",
    "n_cells": 34,
    "n_code_cells": 23,
    "n_markdown_cells": 11,
    "n_raw_cells": 0,
    "n_outputs": 23,
    "r_code_cells": 0.6764705882352942,
    "r_markdown_cells": 0.3235294117647059,
    "r_raw_cells": 0.0,
    "r_outputs": 1.0,
    "n_exceptions": 0,
    "r_exceptions": 0.0,
    "n_lines": 594,
    "n_lines_code": 458,
    "n_lines_markdown": 136,
    "lines_per_cell": [
        27,
        1,
        9,
        2,
        18,
        1,
        92,
        20,
        1,
        32,
        1,
        1,
        36,
        13,
        1,
        52,
        15,
        4,
        4,
        1,
        34,
        1,
        52,
        13,
        7,
        1,
        26,
        11,
        10,
        44,
        3,
        3,
        44,
        14
    ],
    "lines_per_code_cell": [
        1,
        9,
        2,
        1,
        92,
        1,
        32,
        1,
        36,
        1,
        52,
        4,
        4,
        1,
        34,
        52,
        7,
        1,
        26,
        10,
        44,
        3,
        44
    ],
    "lines_per_markdown_cell": [
        27,
        18,
        20,
        1,
        13,
        15,
        1,
        13,
        11,
        3,
        14
    ],
    "ave_lines_per_cell": 17.470588235294116,
    "ave_lines_per_code_cell": 19.91304347826087,
    "ave_lines_per_markdown_cell": 12.363636363636363,
    "max_lines_per_cell": 92,
    "max_lines_per_code_cell": 92,
    "max_lines_per_markdown_cell": 27,
    "min_lines_per_cell": 1,
    "min_lines_per_code_cell": 1,
    "min_lines_per_markdown_cell": 1,
    "n_chars": 22111,
    "n_chars_code": 17119,
    "n_chars_markdown": 4992,
    "chars_per_cell": [
        1283,
        28,
        203,
        64,
        489,
        46,
        2478,
        717,
        59,
        1115,
        102,
        47,
        1251,
        374,
        57,
        1824,
        410,
        161,
        415,
        48,
        1374,
        92,
        2231,
        319,
        314,
        49,
        876,
        485,
        250,
        2057,
        54,
        115,
        2057,
        667
    ],
    "chars_per_code_cell": [
        28,
        203,
        64,
        46,
        2478,
        59,
        1115,
        47,
        1251,
        57,
        1824,
        161,
        415,
        48,
        1374,
        2231,
        314,
        49,
        876,
        250,
        2057,
        115,
        2057
    ],
    "chars_per_markdown_cell": [
        1283,
        489,
        717,
        102,
        374,
        410,
        92,
        319,
        485,
        54,
        667
    ],
    "ave_chars_per_line": 37.22390572390572,
    "ave_chars_per_cell": 650.3235294117648,
    "ave_chars_per_code_cell": 744.304347826087,
    "ave_chars_per_markdown_cell": 453.8181818181818,
    "max_chars_per_cell": 2478,
    "max_chars_per_code_cell": 2478,
    "max_chars_per_markdownell": 1283,
    "min_chars_per_cell": 28,
    "min_chars_per_code_cell": 28,
    "min_chars_per_markdown_cell": 54,
    "r_lines_code": 0.7710437710437711,
    "r_lines_markdown": 0.22895622895622897,
    "r_chars_markdown": 0.22576997874361177,
    "r_chars_code": 0.7742300212563882,
    "all_cells": [
        {
            "source": "## \ud83d\udd76 Awesome Visualization with Titanic Dataset\ud83d\udcca\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n![](https://images.squarespace-cdn.com/content/v1/5006453fe4b09ef2252ba068/1351392437993-BV9HK0L2V72X9FA05IOP/ke17ZwdGBToddI8pDm48kNWCohGJSet_CTOduKgSq_IUqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYxCRW4BPu10St3TBAUQYVKcq9E8CIbGv7FsN6c8xqWQM05n26OV6V51zLkOg8VQq3jPVEm2DFIE48zJj5Gl4vDf/Titanic_Blueprints_Design+%2815%29.gif)\n\nI am one of the Kagglers who **love** visualization.\n\nFor those of you who are tired of the excessive Titanic Dataset, I will create a higher quality visualization.\n\nI particularly pay attention to **color** and **placement**. \nAlso, I am studying how to proceed with visualization without misunderstanding of interpretation.\n\n> **Goal** : Let's create ***The Economist***-style visualization material with only python basic library **matplotlib & seaborn**\n\n**Have fun and if you liked it, please upvote!**\n\n---\n\n### Table of Contents\n\n- **Timeline visualization** : Matplotlib Techniques\n- **Ridgeplot** : Effective Multi Distribution\n- **Barplot** : How to Customize Bar?\n- **Stripplot** : Effective distribution plot\n- **Heatmap** : How t Custom Heatmap?\n- **Dimension Reduction + Scatter**",
            "mc_idx": 0,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "!pip install seaborn==0.11.0",
            "mc_idx": 1,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "!pip install": 1,
                    "install": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Collecting seaborn==0.11.0\r\n  Downloading seaborn-0.11.0-py3-none-any.whl (283 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 283 kB 4.5 MB/s \r\n\u001b[?25hRequirement already satisfied: matplotlib>=2.2 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (3.2.1)\r\nRequirement already satisfied: scipy>=1.0 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (1.4.1)\r\nRequirement already satisfied: pandas>=0.23 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (1.1.3)\r\nRequirement already satisfied: numpy>=1.15 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (1.18.5)\r\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (1.2.0)\r\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (2.4.7)\r\nRequirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (2.8.1)\r\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (0.10.0)\r\nRequirement already satisfied: pytz>=2017.2 in /opt/conda/lib/python3.7/site-packages (from pandas>=0.23->seaborn==0.11.0) (2019.3)\r\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.7/site-packages (from python-dateutil>=2.1->matplotlib>=2.2->seaborn==0.11.0) (1.14.0)\r\nInstalling collected packages: seaborn\r\n  Attempting uninstall: seaborn\r\n    Found existing installation: seaborn 0.10.0\r\n    Uninstalling seaborn-0.10.0:\r\n      Successfully uninstalled seaborn-0.10.0\r\nSuccessfully installed seaborn-0.11.0\r\n\u001b[33mWARNING: You are using pip version 20.2.4; however, version 21.0.1 is available.\r\nYou should consider upgrading via the '/opt/conda/bin/python3.7 -m pip install --upgrade pip' command.\u001b[0m\r\n"
                    ]
                },
                "mc_idx": 1,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as grid_spec\nfrom matplotlib.ticker import FuncFormatter\n\nimport seaborn as sns\n\nimport numpy as np\nimport pandas as pd",
            "mc_idx": 2,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.05714285714285714,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.07142857142857142,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 7
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "matplotlib": 4,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 2,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "data = pd.read_csv('/kaggle/input/titanic/train.csv')\ndata.shape",
            "mc_idx": 3,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {
                    "shape": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "(891, 12)"
                    ]
                },
                "mc_idx": 3,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "## Awesome Timeline Visualization\n\n- A **Timeline** is a graphical way of displaying a list of events in chronological order. \n- line + scatter + **stem plot**\n\n---\n\n### Simple Explanation\n\n- First of all, the ingredients are:\n    - a line\n    - 3 data points\n        - 2 point set of date\n            - black one, white one\n        - 1 point set of time\n    - vertical lines which matching with time (stem plot)\n\n- The downside is that the process of adjusting text position is heuristic.",
            "mc_idx": 4,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "sns.palplot(['#fafafa', '#4a4a4a', '#e3120b'])",
            "mc_idx": 5,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c003_o000_image_0.png",
                    3,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 216x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "from datetime import datetime\n\n\ntl_dates = [\n    \"WED April 10\",\n    \"SUN April 14\",\n    \"MON April 15\",\n    \"THU April 18\"\n]\n\ntl_x = [1, 2, 6, 9]\n\ntl_sub_x = [1.5, 2.4, 2.9, 3.4, 3.8, 4.5, 5.0, 6.5, 7, 7.6, 8]\ntl_sub_times = [\n    \"1:30 PM\",\n    \"9:00 AM\",\n    \"1:42 PM\",\n    \"7:15 PM\",\n    \"10:00 PM\",\n    \"11:30 PM\",\n    \"11:40 PM\",\n    \"12:20 AM\",\n    \"12:45 AM\",\n    \"2:00 AM\",\n    \"2:20 AM\",\n]\n\ntl_text = [\n    \"Titanic sets sail.\",\n    \"Recieve Message.\",\n    \"Baltic Warns Titanic\\nof icebergs.\", \n    \"Smith requests the\\n return of the message.\",\n    \"Second Officer\\n Lightroller is\\n relievced from duty.\",\n    \"Warning bells, iceberg\\n sighting.\",\n    \"Titanic hits an iceberg.\",\n    \"Life boats are being\\n lowered.\",\n    \"Passengers slowly arrive\\n on deck.\",\n    \"Rear of boat begins to\\n raise.\",\n    \"Titanic sinks.\"\n]\n\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 5), constrained_layout=True)\nax.set_ylim(-2, 2)\nax.set_xlim(0, 10)\n\n\n# Timeline : line\nax.axhline(0, xmin=0.1, xmax=0.95, c='#4a4a4a', zorder=1)\n# Timeline : Date Points\nax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='#4a4a4a', zorder=2)\nax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='#fafafa', zorder=3)\n# Timeline : Time Points\nax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='#4a4a4a',zorder=4)\n\n# Date Text\nfor x, date in zip(tl_x, tl_dates):\n    ax.text(x, -0.2, date, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a')\n    \n\n# Stemplot : vertical line\nlevels = np.zeros(len(tl_sub_x))    \nlevels[::2] = 0.3\nlevels[1::2] = -0.3\nmarkerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \nplt.setp(baseline, zorder=0)\nplt.setp(markerline, marker=',', color='#4a4a4a')\nplt.setp(stemline, color='#4a4a4a')\n\n# Text\nfor idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n    ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b', fontsize=11)\n    \n    ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n        fontfamily='serif',color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b')\n\n# Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n    ax.spines[spine].set_visible(False)\n\n# Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Titanic Timeline\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='#4a4a4a')\n\nplt.show()",
            "mc_idx": 6,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6363636363636364,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.36363636363636365,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10,
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 3,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 3
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c004_o000_image_1.png",
                    4,
                    0,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x360 with 1 Axes>"
                    ]
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "## Awesome Distribution Visualization (Ridgeplot)\n \n - A **Ridgeline** plot (sometimes called Joyplot) shows the distribution of a numeric value for several groups.\n- **library** : matplotlib, seaborn\n- **colortheme** from movie \"Snowpiercer\" (because of *class*)\n\n---\n\n### Simple Explanation\n\n- **Step1** : Use Gridspec\n- **Step2** : Create density plot using seaborn's kdeplot\n    - `bw` : bandwidth\n    - `edgecolor` : to separate each density plot\n    - `alpha` : remove transparency \n    - `cut` : clear meaning\n- **Step3** : Remove ticks & labels except last xticks\n- **Step4** : Remove Spine\n- **Step5** : Make plots closer & Make the background transparent\n- **Step6** : add subtext (figure title, axes title)",
            "mc_idx": 7,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "sns.palplot([\"#022133\", \"#5c693b\", \"#51371c\", \"lightgray\"])",
            "mc_idx": 8,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c005_o000_image_2.png",
                    5,
                    0,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 288x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 8,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray',color=c, alpha=1) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n\nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\nplt.show()    ",
            "mc_idx": 9,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.4,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    "sns.": 1,
                    "size": 3
                },
                "Data_Transform": {
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "matplotlib": 1,
                    ".kde": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c006_o000_image_3.png",
                    6,
                    0,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x576 with 3 Axes>"
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "Changed the color of the graph above to give it a **glacier** texture whether it is a survivor or not.",
            "mc_idx": 10,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "sns.color_palette(sns.color_palette(\"PuBu\", 2))",
            "mc_idx": 11,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "[(0.7058823529411765, 0.7673202614379085, 0.873202614379085),\n (0.1477124183006536, 0.5228758169934641, 0.7320261437908496)]"
                    ]
                },
                "mc_idx": 11,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray', hue='Survived', \n                multiple=\"stack\", palette='PuBu', alpha=0.7\n               ) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n    if idx != 1 : axes[idx].get_legend().remove()\n        \nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\n\nplt.show()    ",
            "mc_idx": 12,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.6,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    "sns.": 1,
                    "size": 3
                },
                "Data_Transform": {
                    "stack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "matplotlib": 1,
                    ".kde": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c008_o000_image_4.png",
                    8,
                    0,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x576 with 3 Axes>"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "## Awesome Barplot Visualization\n\n- **library** : matplotlib, seaborn\n- **colortheme** from [The Economist Colors](https://pattern-library.economist.com/color.html)\n\n---\n\n### Simple Explanation\n\n1. Grid\n2. Color difference in the bar you want to emphasize\n3. Average line and text annotations for it\n4. Minimize the y-axis information and add it as an annotation to each bar",
            "mc_idx": 13,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "sns.palplot(['#d4dddd', '#244747', '#efe8d1', '#4a4a4a'])",
            "mc_idx": 14,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c009_o000_image_5.png",
                    9,
                    0,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 288x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "def age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ndata['age_band'] = data['Age'].apply(age_band)\ntitanic_age = data[['age_band', 'Survived']].groupby('age_band')['Survived'].value_counts().sort_index().unstack().fillna(0)\ntitanic_age['Survival rate'] = titanic_age[1] / (titanic_age[0] + titanic_age[1]) * 100\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 7))\n\ncolor_map = ['#d4dddd' for _ in range(9)]\ncolor_map[0] = color_map[8] = '#244747' # color highlight\n\nax.bar(titanic_age['Survival rate'].index, titanic_age['Survival rate'], \n       color=color_map, width=0.55, \n       edgecolor='black', \n       linewidth=0.7)\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax.spines[s].set_visible(False)\n\n\n# Annotation Part\nfor i in titanic_age['Survival rate'].index:\n    ax.annotate(f\"{titanic_age['Survival rate'][i]:.02f}%\", \n                   xy=(i, titanic_age['Survival rate'][i] + 2.3),\n                   va = 'center', ha='center',fontweight='light', \n                   color='#4a4a4a')\n\n\n# mean line + annotation\nmean = data['Survived'].mean() *100\nax.axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\nax.annotate(f\"mean : {mean :.4}%\", \n            xy=('70 ~ 80', mean + 4),\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n    \n\n# Title & Subtitle    \nfig.text(0.06, 1, 'Age Band & Survival Rate', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.06, 0.96, 'It can be seen that the survival rate of young children and the elderly is high.', fontsize=12, fontweight='light', fontfamily='serif')\n\ngrid_y_ticks = np.arange(0, 101, 20)\nax.set_yticks(grid_y_ticks)\nax.grid(axis='y', linestyle='-', alpha=0.4)\n\nplt.tight_layout()\nplt.show()",
            "mc_idx": 15,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.1,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.9,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "fig, ax = plt.subplots": 1,
                    ".bar(": 1,
                    ".mean(": 1,
                    "size": 3,
                    ".mean": 1,
                    ".value_counts": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    ".fillna(": 1,
                    ".apply(": 1,
                    "pad": 1,
                    "stack": 1,
                    ".fillna": 1,
                    ".sort_index": 1,
                    ".apply": 1,
                    ".unstack": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".bar(": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c010_o000_image_6.png",
                    10,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "## Awesome Bar+Scatter Plot (Stripplot)\n\n- A **strip plot** is a scatter plot where one of the variables is categorical. \n- **color theme** : Pantone 1805, Pantone 540\n\n---\n\n### Simple Explanation\n\n- Calculate mean first\n- Generate Uniform Distribution\n    - Survived = 1, Survived = 0 \n- Make a difference using color or luminance or transparency.\n- (tips) Add legend\n- (tips) Add explanation under the title.",
            "mc_idx": 16,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "survival_rate = data.groupby(['Sex']).mean()[['Survived']]\nmale_rate = survival_rate.loc['male']\nfemale_rate = survival_rate.loc['female']\ndisplay(survival_rate)",
            "mc_idx": 17,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".mean": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "        Survived\nSex             \nfemale  0.742038\nmale    0.188908"
                    ]
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "male_pos = np.random.uniform(0, male_rate, len(data[(data['Sex']=='male') & (data['Survived']==1)]))\nmale_neg = np.random.uniform(male_rate, 1, len(data[(data['Sex']=='male') & (data['Survived']==0)]))\nfemale_pos = np.random.uniform(0, female_rate, len(data[(data['Sex']=='female') & (data['Survived']==1)]))\nfemale_neg = np.random.uniform(female_rate, 1, len(data[(data['Sex']=='female') & (data['Survived']==0)]))",
            "mc_idx": 18,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 18,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "sns.palplot(['#004c70', '#990000', 'lightgray'])",
            "mc_idx": 19,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c013_o000_image_7.png",
                    13,
                    0,
                    7
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 216x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 19,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "fig, ax = plt.subplots(1, 1, figsize=(9, 7))\n\nnp.random.seed(42)\n\n# Male Stripplot\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_pos)), male_pos, color='#004c70', edgecolor='lightgray', label='Male(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_neg)), male_neg, color='#004c70', edgecolor='lightgray', alpha=0.2, label='Male(Survived=0)')\n\n# Female Stripplot\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_pos)), female_pos, color='#990000', edgecolor='lightgray', label='Female(Survived=1)')\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_neg)), female_neg, color='#990000', edgecolor='lightgray', alpha=0.2, label='Female(Survived=0)')\n\n# Set Figure & Axes\nax.set_xlim(-0.5, 2.0)\nax.set_ylim(-0.03, 1.1)\n\n# Ticks\nax.set_xticks([0, 1])\nax.set_xticklabels(['Male', 'Female'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.1, 1, 'Distribution of Survivors by Gender', fontweight='bold', fontfamily='serif', fontsize=15)    \nfig.text(0.1, 0.96, 'As is known, the survival rate for female is high, with 19% of male and 74% of female.', fontweight='light', fontfamily='serif', fontsize=12)    \n\nax.legend(loc=(0.8, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show()",
            "mc_idx": 20,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.1111111111111111,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5555555555555556,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 4,
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c014_o000_image_8.png",
                    14,
                    0,
                    8
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 648x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "The survival probability visualization for each pclass using the above method is as follows.",
            "mc_idx": 21,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "\n# You can also make this meta data using for-loop\nsurvival_rate = data.groupby(['Pclass']).mean()[['Survived']]\np1_rate = survival_rate.loc[1]\np2_rate = survival_rate.loc[2]\np3_rate = survival_rate.loc[3]\n\np1_pos = np.random.uniform(0, p1_rate, len(data[(data['Pclass']==1) & (data['Survived']==1)]))\np1_neg = np.random.uniform(p1_rate, 1, len(data[(data['Pclass']==1) & (data['Survived']==0)]))\np2_pos = np.random.uniform(0, p2_rate, len(data[(data['Pclass']==2) & (data['Survived']==1)]))\np2_neg = np.random.uniform(p2_rate, 1, len(data[(data['Pclass']==2) & (data['Survived']==0)]))\np3_pos = np.random.uniform(0, p3_rate, len(data[(data['Pclass']==3) & (data['Survived']==1)]))\np3_neg = np.random.uniform(p3_rate, 1, len(data[(data['Pclass']==3) & (data['Survived']==0)]))\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\n\nnp.random.seed(42)\n\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_pos)), p1_pos, color='#022133', edgecolor='lightgray', label='P1(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_neg)), p1_neg, color='#022133', edgecolor='lightgray', alpha=0.2, label='P1(Survived=0)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_pos)), p2_pos, color='#5c693b', edgecolor='lightgray', label='P2(Survived=1)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_neg)), p2_neg, color='#5c693b', edgecolor='lightgray', alpha=0.2, label='P2(Survived=0)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_pos)), p3_pos, color='#51371c', edgecolor='lightgray', label='P3(Survived=1)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_neg)), p3_neg, color='#51371c', edgecolor='lightgray', alpha=0.2, label='P3(Survived=0)')\n\n\n\n# # Set Figure & Axes\nax.set_xlim(-0.5, 4.0)\nax.set_ylim(-0.03, 1.1)\n\n# # Ticks\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Pclass 1', 'Pclass 2', 'Pclass 3'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.06, 0.95, 'Distribution of Survivors by Pclass', fontweight='bold', fontfamily='serif', fontsize=15, ha='left')    \n\n\nax.legend(loc=(0.67, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show()",
            "mc_idx": 22,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.07692307692307693,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.07692307692307693,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5384615384615384,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 6,
                    ".mean(": 1,
                    "size": 3,
                    ".mean": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 6
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c015_o000_image_9.png",
                    15,
                    0,
                    9
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "## Awesome Heatmap\n\n- A **heat map (or heatmap)** is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n\n---\n\n### Simple Explanation\n\n- (tip) `mask` (remove symetric)\n- (tip) `square` (to make x-y scale same)\n- (tip) `colormap (diverging colormap)\n- (tip) text as watermark\n",
            "mc_idx": 23,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "data['Sex'] = data['Sex'].map({'male':0, 'female':1})\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata['Embarked'] = data['Embarked'].map({'S':0, 'C':1, 'Q':2})\ndata['Family'] = data['SibSp'] + data['Parch']\ndata = data[[col for col in data.columns if col !='Survived']+ ['Survived']]  \ncorr = data.corr()\ncorr",
            "mc_idx": 24,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".corr": 2,
                    "columns": 1
                },
                "Data_Transform": {
                    ".fillna(": 1,
                    ".map(": 2,
                    ".fillna": 1,
                    ".map": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "             PassengerId    Pclass       Sex       Age     SibSp     Parch  \\\nPassengerId     1.000000 -0.035144 -0.042939  0.036847 -0.057527 -0.001652   \nPclass         -0.035144  1.000000 -0.131900 -0.369226  0.083081  0.018443   \nSex            -0.042939 -0.131900  1.000000 -0.093254  0.114631  0.245489   \nAge             0.036847 -0.369226 -0.093254  1.000000 -0.308247 -0.189119   \nSibSp          -0.057527  0.083081  0.114631 -0.308247  1.000000  0.414838   \nParch          -0.001652  0.018443  0.245489 -0.189119  0.414838  1.000000   \nFare            0.012658 -0.549500  0.182333  0.096067  0.159651  0.216225   \nEmbarked       -0.030467  0.045702  0.116569  0.010171 -0.059961 -0.078665   \nFamily         -0.040143  0.065997  0.200988 -0.301914  0.890712  0.783111   \nSurvived       -0.005007 -0.338481  0.543351 -0.077221 -0.035322  0.081629   \n\n                 Fare  Embarked    Family  Survived  \nPassengerId  0.012658 -0.030467 -0.040143 -0.005007  \nPclass      -0.549500  0.045702  0.065997 -0.338481  \nSex          0.182333  0.116569  0.200988  0.543351  \nAge          0.096067  0.010171 -0.301914 -0.077221  \nSibSp        0.159651 -0.059961  0.890712 -0.035322  \nParch        0.216225 -0.078665  0.783111  0.081629  \nFare         1.000000  0.062142  0.217138  0.257307  \nEmbarked     0.062142  1.000000 -0.080281  0.106811  \nFamily       0.217138 -0.080281  1.000000  0.016639  \nSurvived     0.257307  0.106811  0.016639  1.000000  "
                    ]
                },
                "mc_idx": 24,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "sns.color_palette(sns.diverging_palette(230, 20))",
            "mc_idx": 25,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "[(0.2509335357076959, 0.4944143311197457, 0.6104170295454565),\n (0.5266567751883763, 0.6751928585334119, 0.7467240840661897),\n (0.8050726244296104, 0.8577368012538521, 0.884362262166227),\n (0.9140860646530862, 0.8246826885128927, 0.8028133239419792),\n (0.8384144678873866, 0.5785740917778832, 0.5129511551488873),\n (0.7634747047461135, 0.3348456555528834, 0.225892295531744)]"
                    ]
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "fig, ax = plt.subplots(1, 1, figsize=(7, 7))\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nsns.heatmap(corr, \n            square=True, \n            mask=mask,\n            linewidth=2.5, \n            vmax=0.4, vmin=-0.4, \n            cmap=cmap, \n            cbar=False, \n            ax=ax)\n\nax.set_yticklabels(ax.get_xticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\nax.spines['top'].set_visible(True)\n\nfig.text(0.97, 1, 'Correlation Heatmap Visualization', fontweight='bold', fontfamily='serif', fontsize=15, ha='right')    \nfig.text(0.97, 0.92, 'Dataset : Titanic\\nAuthor : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')    \n\nplt.tight_layout()\nplt.show()",
            "mc_idx": 26,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.1,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "sns.heatmap": 1,
                    "fig, ax = plt.subplots": 1,
                    ".heatmap(": 1,
                    "sns.": 2,
                    "size": 5
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.heatmap": 1,
                    "fig, ax = plt.subplots": 1,
                    ".heatmap(": 1,
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c018_o000_image_10.png",
                    18,
                    0,
                    10
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 504x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "## Awesome Dimension Reduction + Scatter Plot\n\n- UMAP(Dimension Reduction) + Scatterplot\n\n### Simple Explanation\n\nIn the past, **dimensional reduction** has been widely used in multidimensional data analysis. \n\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and Pclass based on the clustering results according to survival, so that the distribution of survivors according to the criteria can be viewed differently.",
            "mc_idx": 27,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from umap import UMAP\n\n# Dimension Reduction\nsurvived = data['Survived'] \ndata_sub = data.drop(['Survived', 'Ticket', 'Name', 'Cabin', 'age_band'], axis=1).fillna(0)\n\numap = UMAP(random_state=0)\ntitanic_umap = umap.fit_transform(data_sub, survived)\n\n",
            "mc_idx": 28,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".fillna(": 1,
                    "fit_transform": 1,
                    "transform": 1,
                    ".drop": 1,
                    ".fillna": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    19,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 28,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_umap[data['Survived']==1][:,0], titanic_umap[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_umap[data['Survived']==0][:,0], titanic_umap[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_umap[data['Sex']==0][:,0], titanic_umap[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_umap[data['Sex']==1][:,0], titanic_umap[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_umap[data['Pclass']==1][:,0], titanic_umap[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_umap[data['Pclass']==2][:,0], titanic_umap[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_umap[data['Pclass']==3][:,0], titanic_umap[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n",
            "mc_idx": 29,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.09090909090909091,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.7272727272727273,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".scatter(": 7,
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".scatter(": 7,
                    "graph": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c020_o000_image_11.png",
                    20,
                    0,
                    11
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x864 with 9 Axes>"
                    ]
                },
                "mc_idx": 29,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 0
            }
        },
        {
            "source": "### Bad Dimension Reduction Case Example\n\n- using tsne",
            "mc_idx": 30,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "from sklearn.manifold import TSNE\ntsne = TSNE(random_state=0)\ntitanic_tsne = tsne.fit_transform(data_sub, survived)",
            "mc_idx": 31,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    21,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 31,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_tsne[data['Survived']==1][:,0], titanic_tsne[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_tsne[data['Survived']==0][:,0], titanic_tsne[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_tsne[data['Sex']==0][:,0], titanic_tsne[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_tsne[data['Sex']==1][:,0], titanic_tsne[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_tsne[data['Pclass']==1][:,0], titanic_tsne[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_tsne[data['Pclass']==2][:,0], titanic_tsne[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_tsne[data['Pclass']==3][:,0], titanic_tsne[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n",
            "mc_idx": 32,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.09090909090909091,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.7272727272727273,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".scatter(": 7,
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".scatter(": 7,
                    "graph": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c022_o000_image_12.png",
                    22,
                    0,
                    12
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x864 with 9 Axes>"
                    ]
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 0
            }
        },
        {
            "source": "## Related Work\n\n- [\ud83d\udd76 All You Need is Time-Series Visualization [20+]](https://www.kaggle.com/subinium/all-you-need-is-time-series-visualization-20)\n- [Tips for making the Right Visualization](https://www.kaggle.com/subinium/tips-for-making-the-right-visualization)\n- [Simple Matplotlib & Visualization Tips \ud83d\udca1](https://www.kaggle.com/subinium/simple-matplotlib-visualization-tips)\n- [\ud83d\udee3\ufe0f Road to Viz Expert (1) - Unusual tools](https://www.kaggle.com/subinium/road-to-viz-expert-1-unusual-tools)\n\n\n- [The Economist Color](http://pattern-library.economist.com/color.html)\n\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n",
            "mc_idx": 33,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "code_cells": [
        {
            "source": "!pip install seaborn==0.11.0",
            "mc_idx": 1,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "!pip install": 1,
                    "install": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    0,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "Collecting seaborn==0.11.0\r\n  Downloading seaborn-0.11.0-py3-none-any.whl (283 kB)\r\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 283 kB 4.5 MB/s \r\n\u001b[?25hRequirement already satisfied: matplotlib>=2.2 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (3.2.1)\r\nRequirement already satisfied: scipy>=1.0 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (1.4.1)\r\nRequirement already satisfied: pandas>=0.23 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (1.1.3)\r\nRequirement already satisfied: numpy>=1.15 in /opt/conda/lib/python3.7/site-packages (from seaborn==0.11.0) (1.18.5)\r\nRequirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (1.2.0)\r\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (2.4.7)\r\nRequirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (2.8.1)\r\nRequirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn==0.11.0) (0.10.0)\r\nRequirement already satisfied: pytz>=2017.2 in /opt/conda/lib/python3.7/site-packages (from pandas>=0.23->seaborn==0.11.0) (2019.3)\r\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.7/site-packages (from python-dateutil>=2.1->matplotlib>=2.2->seaborn==0.11.0) (1.14.0)\r\nInstalling collected packages: seaborn\r\n  Attempting uninstall: seaborn\r\n    Found existing installation: seaborn 0.10.0\r\n    Uninstalling seaborn-0.10.0:\r\n      Successfully uninstalled seaborn-0.10.0\r\nSuccessfully installed seaborn-0.11.0\r\n\u001b[33mWARNING: You are using pip version 20.2.4; however, version 21.0.1 is available.\r\nYou should consider upgrading via the '/opt/conda/bin/python3.7 -m pip install --upgrade pip' command.\u001b[0m\r\n"
                    ]
                },
                "mc_idx": 1,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 0,
                "o_idx": 0
            }
        },
        {
            "source": "import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as grid_spec\nfrom matplotlib.ticker import FuncFormatter\n\nimport seaborn as sns\n\nimport numpy as np\nimport pandas as pd",
            "mc_idx": 2,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.05714285714285714,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.07142857142857142,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 7
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "matplotlib": 4,
                    "pyplot": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    1,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 2,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 1,
                "o_idx": 0
            }
        },
        {
            "source": "data = pd.read_csv('/kaggle/input/titanic/train.csv')\ndata.shape",
            "mc_idx": 3,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Data_Extraction",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 1.0,
                "Exploratory_Data_Analysis": 0.25,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.25,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {
                    "read_csv": 2,
                    "pd.read_": 2
                },
                "Exploratory_Data_Analysis": {
                    "shape": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {
                    "shap": 1
                },
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    2,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "(891, 12)"
                    ]
                },
                "mc_idx": 3,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 2,
                "o_idx": 0
            }
        },
        {
            "source": "sns.palplot(['#fafafa', '#4a4a4a', '#e3120b'])",
            "mc_idx": 5,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c003_o000_image_0.png",
                    3,
                    0,
                    0
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 216x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 5,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 3,
                "o_idx": 0
            }
        },
        {
            "source": "from datetime import datetime\n\n\ntl_dates = [\n    \"WED April 10\",\n    \"SUN April 14\",\n    \"MON April 15\",\n    \"THU April 18\"\n]\n\ntl_x = [1, 2, 6, 9]\n\ntl_sub_x = [1.5, 2.4, 2.9, 3.4, 3.8, 4.5, 5.0, 6.5, 7, 7.6, 8]\ntl_sub_times = [\n    \"1:30 PM\",\n    \"9:00 AM\",\n    \"1:42 PM\",\n    \"7:15 PM\",\n    \"10:00 PM\",\n    \"11:30 PM\",\n    \"11:40 PM\",\n    \"12:20 AM\",\n    \"12:45 AM\",\n    \"2:00 AM\",\n    \"2:20 AM\",\n]\n\ntl_text = [\n    \"Titanic sets sail.\",\n    \"Recieve Message.\",\n    \"Baltic Warns Titanic\\nof icebergs.\", \n    \"Smith requests the\\n return of the message.\",\n    \"Second Officer\\n Lightroller is\\n relievced from duty.\",\n    \"Warning bells, iceberg\\n sighting.\",\n    \"Titanic hits an iceberg.\",\n    \"Life boats are being\\n lowered.\",\n    \"Passengers slowly arrive\\n on deck.\",\n    \"Rear of boat begins to\\n raise.\",\n    \"Titanic sinks.\"\n]\n\n# Set figure & Axes\nfig, ax = plt.subplots(figsize=(15, 5), constrained_layout=True)\nax.set_ylim(-2, 2)\nax.set_xlim(0, 10)\n\n\n# Timeline : line\nax.axhline(0, xmin=0.1, xmax=0.95, c='#4a4a4a', zorder=1)\n# Timeline : Date Points\nax.scatter(tl_x, np.zeros(len(tl_x)), s=120, c='#4a4a4a', zorder=2)\nax.scatter(tl_x, np.zeros(len(tl_x)), s=30, c='#fafafa', zorder=3)\n# Timeline : Time Points\nax.scatter(tl_sub_x, np.zeros(len(tl_sub_x)), s=50, c='#4a4a4a',zorder=4)\n\n# Date Text\nfor x, date in zip(tl_x, tl_dates):\n    ax.text(x, -0.2, date, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a')\n    \n\n# Stemplot : vertical line\nlevels = np.zeros(len(tl_sub_x))    \nlevels[::2] = 0.3\nlevels[1::2] = -0.3\nmarkerline, stemline, baseline = ax.stem(tl_sub_x, levels, use_line_collection=True)    \nplt.setp(baseline, zorder=0)\nplt.setp(markerline, marker=',', color='#4a4a4a')\nplt.setp(stemline, color='#4a4a4a')\n\n# Text\nfor idx, x, time, txt in zip(range(1, len(tl_sub_x)+1), tl_sub_x, tl_sub_times, tl_text):\n    ax.text(x, 1.3*(idx%2)-0.5, time, ha='center', \n            fontfamily='serif', fontweight='bold',\n            color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b', fontsize=11)\n    \n    ax.text(x, 1.3*(idx%2)-0.6, txt, va='top', ha='center', \n        fontfamily='serif',color='#4a4a4a' if idx!=len(tl_sub_x) else '#e3120b')\n\n# Spine\nfor spine in [\"left\", \"top\", \"right\", \"bottom\"]:\n    ax.spines[spine].set_visible(False)\n\n# Ticks    \nax.set_xticks([]) \nax.set_yticks([]) \n\n# Title\nax.set_title(\"Titanic Timeline\", fontweight=\"bold\", fontfamily='serif', fontsize=16, color='#4a4a4a')\n\nplt.show()",
            "mc_idx": 6,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.6363636363636364,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.36363636363636365,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10,
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 3,
                    "size": 3
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 3
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c004_o000_image_1.png",
                    4,
                    0,
                    1
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 1080x360 with 1 Axes>"
                    ]
                },
                "mc_idx": 6,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 4,
                "o_idx": 0
            }
        },
        {
            "source": "sns.palplot([\"#022133\", \"#5c693b\", \"#51371c\", \"lightgray\"])",
            "mc_idx": 8,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c005_o000_image_2.png",
                    5,
                    0,
                    2
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 288x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 8,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 5,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray',color=c, alpha=1) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n\nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\nplt.show()    ",
            "mc_idx": 9,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.4,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    "sns.": 1,
                    "size": 3
                },
                "Data_Transform": {
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "matplotlib": 1,
                    ".kde": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c006_o000_image_3.png",
                    6,
                    0,
                    3
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x576 with 3 Axes>"
                    ]
                },
                "mc_idx": 9,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 6,
                "o_idx": 0
            }
        },
        {
            "source": "sns.color_palette(sns.color_palette(\"PuBu\", 2))",
            "mc_idx": 11,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    7,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "[(0.7058823529411765, 0.7673202614379085, 0.873202614379085),\n (0.1477124183006536, 0.5228758169934641, 0.7320261437908496)]"
                    ]
                },
                "mc_idx": 11,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 7,
                "o_idx": 0
            }
        },
        {
            "source": "fig = plt.figure(figsize=(12, 8))\ngs = fig.add_gridspec(3,1)\ngs.update(hspace= -0.55)\n\naxes = list()\ncolors = [\"#022133\", \"#5c693b\", \"#51371c\"]\n\nfor idx, cls, c in zip(range(3), sorted(data['Pclass'].unique()), colors):\n    axes.append(fig.add_subplot(gs[idx, 0]))\n    \n    # you can also draw density plot with matplotlib + scipy.\n    sns.kdeplot(x='Age', data=data[data['Pclass']==cls], \n                fill=True, ax=axes[idx], cut=0, bw_method=0.25, \n                lw=1.4, edgecolor='lightgray', hue='Survived', \n                multiple=\"stack\", palette='PuBu', alpha=0.7\n               ) \n    \n    axes[idx].set_ylim(0, 0.04)\n    axes[idx].set_xlim(0, 85)\n    \n    axes[idx].set_yticks([])\n    if idx != 2 : axes[idx].set_xticks([])\n    axes[idx].set_ylabel('')\n    axes[idx].set_xlabel('')\n    \n    spines = [\"top\",\"right\",\"left\",\"bottom\"]\n    for s in spines:\n        axes[idx].spines[s].set_visible(False)\n        \n    axes[idx].patch.set_alpha(0)\n    axes[idx].text(-0.2,0,f'Pclass {cls}',fontweight=\"light\", fontfamily='serif', fontsize=11,ha=\"right\")\n    if idx != 1 : axes[idx].get_legend().remove()\n        \nfig.text(0.13,0.81,\"Age distribution by Pclass in Titanic\", fontweight=\"bold\", fontfamily='serif', fontsize=16)\n\nplt.show()    ",
            "mc_idx": 12,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.2,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.6,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.6,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "matplotlib": 1,
                    "sns.": 1,
                    "size": 3
                },
                "Data_Transform": {
                    "stack": 1,
                    ".add": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1,
                    "matplotlib": 1,
                    ".kde": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c008_o000_image_4.png",
                    8,
                    0,
                    4
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x576 with 3 Axes>"
                    ]
                },
                "mc_idx": 12,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 8,
                "o_idx": 0
            }
        },
        {
            "source": "sns.palplot(['#d4dddd', '#244747', '#efe8d1', '#4a4a4a'])",
            "mc_idx": 14,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c009_o000_image_5.png",
                    9,
                    0,
                    5
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 288x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 14,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 9,
                "o_idx": 0
            }
        },
        {
            "source": "def age_band(num):\n    for i in range(1, 100):\n        if num < 10*i :  return f'{(i-1) * 10} ~ {i*10}'\n\ndata['age_band'] = data['Age'].apply(age_band)\ntitanic_age = data[['age_band', 'Survived']].groupby('age_band')['Survived'].value_counts().sort_index().unstack().fillna(0)\ntitanic_age['Survival rate'] = titanic_age[1] / (titanic_age[0] + titanic_age[1]) * 100\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 7))\n\ncolor_map = ['#d4dddd' for _ in range(9)]\ncolor_map[0] = color_map[8] = '#244747' # color highlight\n\nax.bar(titanic_age['Survival rate'].index, titanic_age['Survival rate'], \n       color=color_map, width=0.55, \n       edgecolor='black', \n       linewidth=0.7)\n\n\n\nfor s in [\"top\",\"right\",\"left\"]:\n    ax.spines[s].set_visible(False)\n\n\n# Annotation Part\nfor i in titanic_age['Survival rate'].index:\n    ax.annotate(f\"{titanic_age['Survival rate'][i]:.02f}%\", \n                   xy=(i, titanic_age['Survival rate'][i] + 2.3),\n                   va = 'center', ha='center',fontweight='light', \n                   color='#4a4a4a')\n\n\n# mean line + annotation\nmean = data['Survived'].mean() *100\nax.axhline(mean ,color='black', linewidth=0.4, linestyle='dashdot')\nax.annotate(f\"mean : {mean :.4}%\", \n            xy=('70 ~ 80', mean + 4),\n            va = 'center', ha='center',\n            color='#4a4a4a',\n            bbox=dict(boxstyle='round', pad=0.4, facecolor='#efe8d1', linewidth=0))\n    \n\n# Title & Subtitle    \nfig.text(0.06, 1, 'Age Band & Survival Rate', fontsize=15, fontweight='bold', fontfamily='serif')\nfig.text(0.06, 0.96, 'It can be seen that the survival rate of young children and the elderly is high.', fontsize=12, fontweight='light', fontfamily='serif')\n\ngrid_y_ticks = np.arange(0, 101, 20)\nax.set_yticks(grid_y_ticks)\nax.grid(axis='y', linestyle='-', alpha=0.4)\n\nplt.tight_layout()\nplt.show()",
            "mc_idx": 15,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.1,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.9,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.2,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "value_counts()": 1,
                    "fig, ax = plt.subplots": 1,
                    ".bar(": 1,
                    ".mean(": 1,
                    "size": 3,
                    ".mean": 1,
                    ".value_counts": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1,
                    ".fillna(": 1,
                    ".apply(": 1,
                    "pad": 1,
                    "stack": 1,
                    ".fillna": 1,
                    ".sort_index": 1,
                    ".apply": 1,
                    ".unstack": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".bar(": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c010_o000_image_6.png",
                    10,
                    0,
                    6
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 720x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 15,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 10,
                "o_idx": 0
            }
        },
        {
            "source": "survival_rate = data.groupby(['Sex']).mean()[['Survived']]\nmale_rate = survival_rate.loc['male']\nfemale_rate = survival_rate.loc['female']\ndisplay(survival_rate)",
            "mc_idx": 17,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.3333333333333333,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".mean(": 1,
                    ".mean": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    11,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "        Survived\nSex             \nfemale  0.742038\nmale    0.188908"
                    ]
                },
                "mc_idx": 17,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 11,
                "o_idx": 0
            }
        },
        {
            "source": "male_pos = np.random.uniform(0, male_rate, len(data[(data['Sex']=='male') & (data['Survived']==1)]))\nmale_neg = np.random.uniform(male_rate, 1, len(data[(data['Sex']=='male') & (data['Survived']==0)]))\nfemale_pos = np.random.uniform(0, female_rate, len(data[(data['Sex']=='female') & (data['Survived']==1)]))\nfemale_neg = np.random.uniform(female_rate, 1, len(data[(data['Sex']=='female') & (data['Survived']==0)]))",
            "mc_idx": 18,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Other",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [],
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    12,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 18,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 12,
                "o_idx": 0
            }
        },
        {
            "source": "sns.palplot(['#004c70', '#990000', 'lightgray'])",
            "mc_idx": 19,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 1
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c013_o000_image_7.png",
                    13,
                    0,
                    7
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 216x72 with 1 Axes>"
                    ]
                },
                "mc_idx": 19,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 13,
                "o_idx": 0
            }
        },
        {
            "source": "fig, ax = plt.subplots(1, 1, figsize=(9, 7))\n\nnp.random.seed(42)\n\n# Male Stripplot\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_pos)), male_pos, color='#004c70', edgecolor='lightgray', label='Male(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(male_neg)), male_neg, color='#004c70', edgecolor='lightgray', alpha=0.2, label='Male(Survived=0)')\n\n# Female Stripplot\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_pos)), female_pos, color='#990000', edgecolor='lightgray', label='Female(Survived=1)')\nax.scatter(1+np.random.uniform(-0.3, 0.3, len(female_neg)), female_neg, color='#990000', edgecolor='lightgray', alpha=0.2, label='Female(Survived=0)')\n\n# Set Figure & Axes\nax.set_xlim(-0.5, 2.0)\nax.set_ylim(-0.03, 1.1)\n\n# Ticks\nax.set_xticks([0, 1])\nax.set_xticklabels(['Male', 'Female'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.1, 1, 'Distribution of Survivors by Gender', fontweight='bold', fontfamily='serif', fontsize=15)    \nfig.text(0.1, 0.96, 'As is known, the survival rate for female is high, with 19% of male and 74% of female.', fontweight='light', fontfamily='serif', fontsize=12)    \n\nax.legend(loc=(0.8, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show()",
            "mc_idx": 20,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.1111111111111111,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5555555555555556,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 4,
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 4
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c014_o000_image_8.png",
                    14,
                    0,
                    8
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 648x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 20,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 14,
                "o_idx": 0
            }
        },
        {
            "source": "\n# You can also make this meta data using for-loop\nsurvival_rate = data.groupby(['Pclass']).mean()[['Survived']]\np1_rate = survival_rate.loc[1]\np2_rate = survival_rate.loc[2]\np3_rate = survival_rate.loc[3]\n\np1_pos = np.random.uniform(0, p1_rate, len(data[(data['Pclass']==1) & (data['Survived']==1)]))\np1_neg = np.random.uniform(p1_rate, 1, len(data[(data['Pclass']==1) & (data['Survived']==0)]))\np2_pos = np.random.uniform(0, p2_rate, len(data[(data['Pclass']==2) & (data['Survived']==1)]))\np2_neg = np.random.uniform(p2_rate, 1, len(data[(data['Pclass']==2) & (data['Survived']==0)]))\np3_pos = np.random.uniform(0, p3_rate, len(data[(data['Pclass']==3) & (data['Survived']==1)]))\np3_neg = np.random.uniform(p3_rate, 1, len(data[(data['Pclass']==3) & (data['Survived']==0)]))\n\n\n\n\nfig, ax = plt.subplots(1, 1, figsize=(12, 7))\n\nnp.random.seed(42)\n\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_pos)), p1_pos, color='#022133', edgecolor='lightgray', label='P1(Survived=1)')\nax.scatter(np.random.uniform(-0.3, 0.3, len(p1_neg)), p1_neg, color='#022133', edgecolor='lightgray', alpha=0.2, label='P1(Survived=0)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_pos)), p2_pos, color='#5c693b', edgecolor='lightgray', label='P2(Survived=1)')\nax.scatter(np.random.uniform(1-0.3, 1+0.3, len(p2_neg)), p2_neg, color='#5c693b', edgecolor='lightgray', alpha=0.2, label='P2(Survived=0)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_pos)), p3_pos, color='#51371c', edgecolor='lightgray', label='P3(Survived=1)')\nax.scatter(np.random.uniform(2-0.3, 2+0.3, len(p3_neg)), p3_neg, color='#51371c', edgecolor='lightgray', alpha=0.2, label='P3(Survived=0)')\n\n\n\n# # Set Figure & Axes\nax.set_xlim(-0.5, 4.0)\nax.set_ylim(-0.03, 1.1)\n\n# # Ticks\nax.set_xticks([0, 1, 2])\nax.set_xticklabels(['Pclass 1', 'Pclass 2', 'Pclass 3'], fontweight='bold', fontfamily='serif', fontsize=13)\nax.set_yticks([], minor=False)\nax.set_ylabel('')\n\n# Spines\nfor s in [\"top\",\"right\",\"left\", 'bottom']:\n    ax.spines[s].set_visible(False)\n\n\n# Title & Explanation\nfig.text(0.06, 0.95, 'Distribution of Survivors by Pclass', fontweight='bold', fontfamily='serif', fontsize=15, ha='left')    \n\n\nax.legend(loc=(0.67, 0.5), edgecolor='None')\nplt.tight_layout()\nplt.show()",
            "mc_idx": 22,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.07692307692307693,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.07692307692307693,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5384615384615384,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 6,
                    ".mean(": 1,
                    "size": 3,
                    ".mean": 1,
                    ".groupby": 1
                },
                "Data_Transform": {
                    ".groupby(": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "fig, ax = plt.subplots": 1,
                    ".scatter(": 6
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c015_o000_image_9.png",
                    15,
                    0,
                    9
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 22,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 15,
                "o_idx": 0
            }
        },
        {
            "source": "data['Sex'] = data['Sex'].map({'male':0, 'female':1})\ndata['Embarked'] = data['Embarked'].fillna('S')\ndata['Embarked'] = data['Embarked'].map({'S':0, 'C':1, 'Q':2})\ndata['Family'] = data['SibSp'] + data['Parch']\ndata = data[[col for col in data.columns if col !='Survived']+ ['Survived']]  \ncorr = data.corr()\ncorr",
            "mc_idx": 24,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Data_Transform",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.5,
                "Data_Transform": 1.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".corr": 2,
                    "columns": 1
                },
                "Data_Transform": {
                    ".fillna(": 1,
                    ".map(": 2,
                    ".fillna": 1,
                    ".map": 2
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    16,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "             PassengerId    Pclass       Sex       Age     SibSp     Parch  \\\nPassengerId     1.000000 -0.035144 -0.042939  0.036847 -0.057527 -0.001652   \nPclass         -0.035144  1.000000 -0.131900 -0.369226  0.083081  0.018443   \nSex            -0.042939 -0.131900  1.000000 -0.093254  0.114631  0.245489   \nAge             0.036847 -0.369226 -0.093254  1.000000 -0.308247 -0.189119   \nSibSp          -0.057527  0.083081  0.114631 -0.308247  1.000000  0.414838   \nParch          -0.001652  0.018443  0.245489 -0.189119  0.414838  1.000000   \nFare            0.012658 -0.549500  0.182333  0.096067  0.159651  0.216225   \nEmbarked       -0.030467  0.045702  0.116569  0.010171 -0.059961 -0.078665   \nFamily         -0.040143  0.065997  0.200988 -0.301914  0.890712  0.783111   \nSurvived       -0.005007 -0.338481  0.543351 -0.077221 -0.035322  0.081629   \n\n                 Fare  Embarked    Family  Survived  \nPassengerId  0.012658 -0.030467 -0.040143 -0.005007  \nPclass      -0.549500  0.045702  0.065997 -0.338481  \nSex          0.182333  0.116569  0.200988  0.543351  \nAge          0.096067  0.010171 -0.301914 -0.077221  \nSibSp        0.159651 -0.059961  0.890712 -0.035322  \nParch        0.216225 -0.078665  0.783111  0.081629  \nFare         1.000000  0.062142  0.217138  0.257307  \nEmbarked     0.062142  1.000000 -0.080281  0.106811  \nFamily       0.217138 -0.080281  1.000000  0.016639  \nSurvived     0.257307  0.106811  0.016639  1.000000  "
                    ]
                },
                "mc_idx": 24,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 16,
                "o_idx": 0
            }
        },
        {
            "source": "sns.color_palette(sns.diverging_palette(230, 20))",
            "mc_idx": 25,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 1.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {},
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    "sns.": 2
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    17,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "[(0.2509335357076959, 0.4944143311197457, 0.6104170295454565),\n (0.5266567751883763, 0.6751928585334119, 0.7467240840661897),\n (0.8050726244296104, 0.8577368012538521, 0.884362262166227),\n (0.9140860646530862, 0.8246826885128927, 0.8028133239419792),\n (0.8384144678873866, 0.5785740917778832, 0.5129511551488873),\n (0.7634747047461135, 0.3348456555528834, 0.225892295531744)]"
                    ]
                },
                "mc_idx": 25,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 17,
                "o_idx": 0
            }
        },
        {
            "source": "fig, ax = plt.subplots(1, 1, figsize=(7, 7))\n\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\nsns.heatmap(corr, \n            square=True, \n            mask=mask,\n            linewidth=2.5, \n            vmax=0.4, vmin=-0.4, \n            cmap=cmap, \n            cbar=False, \n            ax=ax)\n\nax.set_yticklabels(ax.get_xticklabels(), fontfamily='serif', rotation = 0, fontsize=11)\nax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=11)\n\nax.spines['top'].set_visible(True)\n\nfig.text(0.97, 1, 'Correlation Heatmap Visualization', fontweight='bold', fontfamily='serif', fontsize=15, ha='right')    \nfig.text(0.97, 0.92, 'Dataset : Titanic\\nAuthor : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')    \n\nplt.tight_layout()\nplt.show()",
            "mc_idx": 26,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.1,
                "Data_Extraction": 0.1,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.5,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {
                    "dataset": 1
                },
                "Exploratory_Data_Analysis": {
                    "sns.heatmap": 1,
                    "fig, ax = plt.subplots": 1,
                    ".heatmap(": 1,
                    "sns.": 2,
                    "size": 5
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    "sns.heatmap": 1,
                    "fig, ax = plt.subplots": 1,
                    ".heatmap(": 1,
                    "sns.": 2
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c018_o000_image_10.png",
                    18,
                    0,
                    10
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 504x504 with 1 Axes>"
                    ]
                },
                "mc_idx": 26,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 18,
                "o_idx": 0
            }
        },
        {
            "source": "from umap import UMAP\n\n# Dimension Reduction\nsurvived = data['Survived'] \ndata_sub = data.drop(['Survived', 'Ticket', 'Name', 'Cabin', 'age_band'], axis=1).fillna(0)\n\numap = UMAP(random_state=0)\ntitanic_umap = umap.fit_transform(data_sub, survived)\n\n",
            "mc_idx": 28,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.5,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    ".fillna(": 1,
                    "fit_transform": 1,
                    "transform": 1,
                    ".drop": 1,
                    ".fillna": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    19,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 28,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 19,
                "o_idx": 0
            }
        },
        {
            "source": "fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_umap[data['Survived']==1][:,0], titanic_umap[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_umap[data['Survived']==0][:,0], titanic_umap[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_umap[data['Sex']==0][:,0], titanic_umap[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_umap[data['Sex']==1][:,0], titanic_umap[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_umap[data['Pclass']==1][:,0], titanic_umap[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_umap[data['Pclass']==2][:,0], titanic_umap[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_umap[data['Pclass']==3][:,0], titanic_umap[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n",
            "mc_idx": 29,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.09090909090909091,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.7272727272727273,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".scatter(": 7,
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".scatter(": 7,
                    "graph": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c020_o000_image_11.png",
                    20,
                    0,
                    11
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x864 with 9 Axes>"
                    ]
                },
                "mc_idx": 29,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 20,
                "o_idx": 0
            }
        },
        {
            "source": "from sklearn.manifold import TSNE\ntsne = TSNE(random_state=0)\ntitanic_tsne = tsne.fit_transform(data_sub, survived)",
            "mc_idx": 31,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Environment",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 1.0,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 0.0,
                "Data_Transform": 0.2,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.0,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    "import ": 10
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {},
                "Data_Transform": {
                    "fit_transform": 1,
                    "transform": 1
                },
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {},
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    null,
                    21,
                    0,
                    null
                ]
            ],
            "output": {
                "source": {
                    "source": []
                },
                "mc_idx": 31,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 21,
                "o_idx": 0
            }
        },
        {
            "source": "fig, axes = plt.subplots(3, 3, figsize=(12, 12))\n\n# Survived\naxes[0][0].scatter(titanic_tsne[data['Survived']==1][:,0], titanic_tsne[data['Survived']==1][:,1], c='#8abbd0', alpha=0.25, label='Survived:1')\naxes[0][0].scatter(titanic_tsne[data['Survived']==0][:,0], titanic_tsne[data['Survived']==0][:,1], c='#4a4a4a', alpha=0.25, label='Survived:0')\n\n# Gender\naxes[1][0].scatter(titanic_tsne[data['Sex']==0][:,0], titanic_tsne[data['Sex']==0][:,1], c='#004c70', alpha=0.1, label='Male')\naxes[1][1].scatter(titanic_tsne[data['Sex']==1][:,0], titanic_tsne[data['Sex']==1][:,1], c='#990000', alpha=0.1, label='Female')\n\n# Pclass\naxes[2][0].scatter(titanic_tsne[data['Pclass']==1][:,0], titanic_tsne[data['Pclass']==1][:,1], c=\"#022133\", alpha=0.1, label='Pclass:1')\naxes[2][1].scatter(titanic_tsne[data['Pclass']==2][:,0], titanic_tsne[data['Pclass']==2][:,1], c='#5c693b', alpha=0.1, label='Pclass:2')\naxes[2][2].scatter(titanic_tsne[data['Pclass']==3][:,0], titanic_tsne[data['Pclass']==3][:,1], c='#51371c', alpha=0.1, label='Pclass:3')\n\nfor i in range(3):\n    for j in range(3):\n        axes[i][j].set_xticks([])\n        axes[i][j].set_yticks([])\n        for s in [\"top\",\"right\",\"left\", 'bottom']:\n            axes[i][j].spines[s].set_visible(False)\n        if j <= i : axes[i][j].legend()\n\n            \n\n# Text Part\nfig.text(0.97, 1, 'Explore Embedding Space', fontweight='bold', fontfamily='serif', fontsize=20, ha='right')   \nfig.text(0.97, 0.975, 'Author : Subin An', fontweight='light', fontfamily='serif', fontsize=12, ha='right')\n\nfig.text(0.97, 0.94, '''\nIn the past, dimensional reduction has been widely \nused in multidimensional data analysis.\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and \nPclass based on the clustering results according to survival, \nso that the distribution of survivors according to the criteria \ncan be viewed differently.''', \n         fontweight='light', fontfamily='serif', fontsize=12, va='top', ha='right')   \n\n\nplt.tight_layout()\nplt.show()\n",
            "mc_idx": 32,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Exploratory_Data_Analysis",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0.09090909090909091,
                "Data_Extraction": 0.0,
                "Exploratory_Data_Analysis": 1.0,
                "Data_Transform": 0.0,
                "Model_Train": 0.0,
                "Model_Evaluation": 0.0,
                "Model_Interpretation": 0.0,
                "Hyperparameter_Tuning": 0.0,
                "Visualization": 0.7272727272727273,
                "Debug": 0.0,
                "Data_Export": 0.0,
                "Other": 0.0
            },
            "detailed_scores": {
                "Environment": {
                    ".show": 1
                },
                "Data_Extraction": {},
                "Exploratory_Data_Analysis": {
                    ".scatter(": 7,
                    "size": 4
                },
                "Data_Transform": {},
                "Model_Train": {},
                "Model_Evaluation": {},
                "Model_Interpretation": {},
                "Hyperparameter_Tuning": {},
                "Visualization": {
                    ".scatter(": 7,
                    "graph": 1
                },
                "Debug": {},
                "Data_Export": {},
                "Other": {}
            },
            "emb": 0,
            "cell_type": "code",
            "image_path": [
                [
                    "data/data_Kaggle/images/d0009_c022_o000_image_12.png",
                    22,
                    0,
                    12
                ]
            ],
            "output": {
                "source": {
                    "source": [
                        "<Figure size 864x864 with 9 Axes>"
                    ]
                },
                "mc_idx": 32,
                "nb_idx": 0,
                "embedding": {},
                "classification": null,
                "keywords": {},
                "summary": null,
                "q_number": null,
                "duration": null,
                "exception": null,
                "class_probability": {},
                "detailed_scores": {},
                "emb": 0,
                "cell_type": "output",
                "c_idx": 22,
                "o_idx": 0
            }
        }
    ],
    "markdown_cells": [
        {
            "source": "## \ud83d\udd76 Awesome Visualization with Titanic Dataset\ud83d\udcca\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n![](https://images.squarespace-cdn.com/content/v1/5006453fe4b09ef2252ba068/1351392437993-BV9HK0L2V72X9FA05IOP/ke17ZwdGBToddI8pDm48kNWCohGJSet_CTOduKgSq_IUqsxRUqqbr1mOJYKfIPR7LoDQ9mXPOjoJoqy81S2I8N_N4V1vUb5AoIIIbLZhVYxCRW4BPu10St3TBAUQYVKcq9E8CIbGv7FsN6c8xqWQM05n26OV6V51zLkOg8VQq3jPVEm2DFIE48zJj5Gl4vDf/Titanic_Blueprints_Design+%2815%29.gif)\n\nI am one of the Kagglers who **love** visualization.\n\nFor those of you who are tired of the excessive Titanic Dataset, I will create a higher quality visualization.\n\nI particularly pay attention to **color** and **placement**. \nAlso, I am studying how to proceed with visualization without misunderstanding of interpretation.\n\n> **Goal** : Let's create ***The Economist***-style visualization material with only python basic library **matplotlib & seaborn**\n\n**Have fun and if you liked it, please upvote!**\n\n---\n\n### Table of Contents\n\n- **Timeline visualization** : Matplotlib Techniques\n- **Ridgeplot** : Effective Multi Distribution\n- **Barplot** : How to Customize Bar?\n- **Stripplot** : Effective distribution plot\n- **Heatmap** : How t Custom Heatmap?\n- **Dimension Reduction + Scatter**",
            "mc_idx": 0,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Awesome Timeline Visualization\n\n- A **Timeline** is a graphical way of displaying a list of events in chronological order. \n- line + scatter + **stem plot**\n\n---\n\n### Simple Explanation\n\n- First of all, the ingredients are:\n    - a line\n    - 3 data points\n        - 2 point set of date\n            - black one, white one\n        - 1 point set of time\n    - vertical lines which matching with time (stem plot)\n\n- The downside is that the process of adjusting text position is heuristic.",
            "mc_idx": 4,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Awesome Distribution Visualization (Ridgeplot)\n \n - A **Ridgeline** plot (sometimes called Joyplot) shows the distribution of a numeric value for several groups.\n- **library** : matplotlib, seaborn\n- **colortheme** from movie \"Snowpiercer\" (because of *class*)\n\n---\n\n### Simple Explanation\n\n- **Step1** : Use Gridspec\n- **Step2** : Create density plot using seaborn's kdeplot\n    - `bw` : bandwidth\n    - `edgecolor` : to separate each density plot\n    - `alpha` : remove transparency \n    - `cut` : clear meaning\n- **Step3** : Remove ticks & labels except last xticks\n- **Step4** : Remove Spine\n- **Step5** : Make plots closer & Make the background transparent\n- **Step6** : add subtext (figure title, axes title)",
            "mc_idx": 7,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "Changed the color of the graph above to give it a **glacier** texture whether it is a survivor or not.",
            "mc_idx": 10,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Awesome Barplot Visualization\n\n- **library** : matplotlib, seaborn\n- **colortheme** from [The Economist Colors](https://pattern-library.economist.com/color.html)\n\n---\n\n### Simple Explanation\n\n1. Grid\n2. Color difference in the bar you want to emphasize\n3. Average line and text annotations for it\n4. Minimize the y-axis information and add it as an annotation to each bar",
            "mc_idx": 13,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Awesome Bar+Scatter Plot (Stripplot)\n\n- A **strip plot** is a scatter plot where one of the variables is categorical. \n- **color theme** : Pantone 1805, Pantone 540\n\n---\n\n### Simple Explanation\n\n- Calculate mean first\n- Generate Uniform Distribution\n    - Survived = 1, Survived = 0 \n- Make a difference using color or luminance or transparency.\n- (tips) Add legend\n- (tips) Add explanation under the title.",
            "mc_idx": 16,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "The survival probability visualization for each pclass using the above method is as follows.",
            "mc_idx": 21,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Awesome Heatmap\n\n- A **heat map (or heatmap)** is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions.\n\n---\n\n### Simple Explanation\n\n- (tip) `mask` (remove symetric)\n- (tip) `square` (to make x-y scale same)\n- (tip) `colormap (diverging colormap)\n- (tip) text as watermark\n",
            "mc_idx": 23,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Awesome Dimension Reduction + Scatter Plot\n\n- UMAP(Dimension Reduction) + Scatterplot\n\n### Simple Explanation\n\nIn the past, **dimensional reduction** has been widely used in multidimensional data analysis. \n\nHowever, it is seldom used to analyze it after clustering. \n\nThis visualization draws separate graphs based on gender and Pclass based on the clustering results according to survival, so that the distribution of survivors according to the criteria can be viewed differently.",
            "mc_idx": 27,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "### Bad Dimension Reduction Case Example\n\n- using tsne",
            "mc_idx": 30,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        },
        {
            "source": "## Related Work\n\n- [\ud83d\udd76 All You Need is Time-Series Visualization [20+]](https://www.kaggle.com/subinium/all-you-need-is-time-series-visualization-20)\n- [Tips for making the Right Visualization](https://www.kaggle.com/subinium/tips-for-making-the-right-visualization)\n- [Simple Matplotlib & Visualization Tips \ud83d\udca1](https://www.kaggle.com/subinium/simple-matplotlib-visualization-tips)\n- [\ud83d\udee3\ufe0f Road to Viz Expert (1) - Unusual tools](https://www.kaggle.com/subinium/road-to-viz-expert-1-unusual-tools)\n\n\n- [The Economist Color](http://pattern-library.economist.com/color.html)\n\n\n### Please be sure to leave a reference when using code or taking ideas in my visualizations.\n\n",
            "mc_idx": 33,
            "nb_idx": 9,
            "embedding": {},
            "classification": "Markdown",
            "keywords": {},
            "summary": null,
            "q_number": null,
            "duration": null,
            "exception": null,
            "class_probability": {
                "Environment": 0,
                "Data_Extraction": 0,
                "Exploratory_Data_Analysis": 0,
                "Data_Transform": 0,
                "Model_Train": 0,
                "Model_Evaluation": 0,
                "Model_Interpretation": 0,
                "Hyperparameter_Tuning": 0,
                "Visualization": 0,
                "Debug": 0,
                "Data_Export": 0,
                "Other": 0
            },
            "detailed_scores": [
                {
                    "Environment": [],
                    "Data_Extraction": [],
                    "Exploratory_Data_Analysis": [],
                    "Data_Transform": [],
                    "Model_Train": [],
                    "Model_Evaluation": [],
                    "Model_Interpretation": [],
                    "Hyperparameter_Tuning": [],
                    "Visualization": [],
                    "Debug": [],
                    "Data_Export": [],
                    "Other": []
                }
            ],
            "emb": 0,
            "cell_type": "markdown"
        }
    ],
    "sim_matrix": [],
    "cell_sim_matrix": [],
    "nb_order": [],
    "summary_data_VA": null
}